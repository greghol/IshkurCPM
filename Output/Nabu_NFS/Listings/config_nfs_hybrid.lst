              	; --------------------------------------
              	; zasm: assemble "config_nfs_hybrid.asm"
              	; date: 2023-06-21 23:54:48
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*          I S H K U R   S Y S T E M   C O N F I G
              	;*
              	;*      This file contains points that should be modifed
              	;*      if new devices are to be added to IshkurCP/M. At
              	;*      a mimumum, they need to be included at the bottom
              	;*      of the file, and added to their appropriate dev
              	;*      switch. Some devices may need additional config
              	;*      directly in their source files
              	;*       
              	;*
              	;**************************************************************
              	;
              	;   Set default drive / user
              	;   (uuuudddd) where 'uuuu' is the user number and 'dddd' is the drive number.
              	;
0000:         	default	equ	0
              	
              	;
              	;**************************************************************
              	;*
              	;*                M E M O R Y   C O N F I G
              	;*
              	;*        CP/M memory will start at mem*1024. For example,
              	;*        if memory is configured to be 40, then the image
              	;*        will start at 40kb. The higher memory is configured
              	;*        to, the more memory user programs will have. If memory
              	;*        is configured to be too high, then the core image and
              	;*        BSS space will not fit.
              	;*
              	;**************************************************************
              	;
              	;
              	;   Set memory base here. 
              	;
0035:         	mem	equ	53		; CP/M image starts at mem*1024
              	
              	
              	
              	#target	BIN			; Set up memory segments
D400:         	#code	_TEXT,(mem)*1024
F934:         	#data	_BSS,_TEXT_end
FF00:         	#data	_JUMP_TABLE,0xFF00
FF00: 00000000	intvec:	defs	16
FF04: 00...   	
FF10: 00000000	dircbuf:defs	128
FF14: 00...   	
              	.area	_TEXT
              	
              	; Include CP/M and BIOS
              	#include "../zcpr1_ccp_nfs.asm"
              	;**************************************************************
              	;*
              	;*         Z C P R 1   C O M M A N D   P R O C E S S O R
              	;*
              	;*          Adapted to work with Ishkur by snhirsch
              	;*
              	;**************************************************************
              	
0003:         	iobyte	equ	3		;i/o definition byte.
0004:         	tdrive	equ	4		;current drive name and user number.
0004:         	UDFLAG  equ     4
0005:         	entry	equ	5		;entry point for the cp/m bdos.
0005:         	BDOS    equ     5
005C:         	tfcb	equ	5ch		;default file control block.
005C:         	TFCB    equ     5ch
0080:         	TBUFF   equ     80h
0080:         	tbuff	equ	80h		;i/o buffer and command line storage.
0100:         	tbase	equ	100h		;transiant program storage area.
              	;
              	;   set control character equates.
              	;
0003:         	cntrlc	equ	3		;control-c
0005:         	cntrle	equ	05h		;control-e
0008:         	bs	equ	08h		;backspace
0009:         	tab	equ	09h		;tab
000A:         	lf	equ	0ah		;line feed
000C:         	ff	equ	0ch		;form feed
000D:         	cr	equ	0dh		;carriage return
0010:         	cntrlp	equ	10h		;control-p
0012:         	cntrlr	equ	12h		;control-r
0013:         	cntrls	equ	13h		;control-s
0015:         	cntrlu	equ	15h		;control-u
0018:         	cntrlx	equ	18h		;control-x
001A:         	cntrlz	equ	1ah		;control-z (end-of-file mark)
007F:         	del	equ	7fh		;rubout
              	
              	;================================================================
              	
              	;	.Z80
              	;	TITLE	'NZCPR V 1.6Z OF 01/07/84'
              	;  This is ZCPR Version 1.6 changed to Zilog mnemonics and put in a
              	;form suitable for the Microsoft M80 assembler. Note that the file uses
              	;the PHASE option to create the memory offset. The COM file should be 
              	;created using L80 with the /P:100 switch option. The COM file can be
              	;loaded into the sysgen program using the methods described in the ZCPR
              	;documentation.
              	;		MMA - Murray Arnow
              	;
              	;  CP/M Z80 Command Processor Replacement (CPR) Version 1.6 in
              	; the NZCPR line.
              	;
              	;	CCPZ CREATED AND CUSTOMIZED FOR ARIES-II BY RLC
              	;	ZCPR VERSION 1.0 CREATED FROM CCPZ VERSION 4.0 BY RLC IN
              	;		A COORDINATED EFFORT WITH CCP-GROUP
              	;
              	;	ZCPR is a group effort by CCP-GROUP, whose active membership involved
              	; in this project consists of the following:
              	;		RLC - Richard Conn
              	;		RGF - Ron Fowler
              	;		KBP - Keith Peterson
              	;		FJW - Frank Wancho
              	;	The following individuals also provided a contribution:
              	;		SBB - Steve Bogolub
              	;
              	;  Since RLC has decided that ZCPR V1.0 is the last official version
              	; sanctioned by the CCPZ group, changes beyond that point are being
              	; called by consensus of a group of new changers "NZCPR Vx.x". The
              	; following individuals have put in their code or opinions:
              	;
              	;		SBB - Steve Bogolub
              	;		PST - Paul Traina
              	;		HLB - Howard Booker
              	;		CAF - Chuck Forsberg
              	;		RAF - Bob Fischer
              	;		BB  - Ben Bronson
              	;		PRG - Paul Grupp
              	;		PJH - Paul Homchick
              	;		HEW - Hal Walchli
              	;
              	;   In an attempt to maintain a link to the past, changes between the
              	; current version of NZCPR are provided as both a difference file
              	; between NZCPR's (NZ14-16.DIF) and as a difference between the current
              	; version and the "official" ZCPR V1.0 (NZCPR-16.DIF).  These changes
              	; are made and supported by individuals in contact with each other through
              	; the Hyde Park RCPM in Chicago. Make comments or complaints there, to
              	; SBB or PST or anyone else interested.
              	;
              	;   The most obvious differences between NZCPR and ZCPR are the security
              	; features, controlled by additional conditional assembly flags. Such
              	; features restrict access to ZCPR intrinsic commands, add additional
              	; levels of .COM file searching, and prevent access to higher drives
              	; or user levels, with either internal or external password control of
              	; these features. Less obvious differences involve code optimization to
              	; gain space, and some minor bug fixes in the TYPE command.
              	;
              	;******** Structure Notes ********
              	;
              	;	This CPR is divided into a number of major sections.  The following
              	; is an outline of these sections and the names of the major routines
              	; located therein.
              	;
              	; Section	Function/Routines
              	; -------	-----------------
              	;
              	;   --		Opening Comments, Equates, and Macro Definitions
              	;
              	;    0		JMP Table into CPR
              	;
              	;    1		Buffers
              	;
              	;    2		CPR Starting Modules
              	;			CPR1	CPR	RESTRT	RSTCPR	RCPRNL
              	;			PRNNF	CMDTBL
              	;
              	;    3		Utilities
              	;			CRLF	CONOUT	CONIN	LCOUT	LSTOUT
              	;			READF	READ	BDOSB	PRINTC	PRINT
              	;			GETDRV	DEFDMA	DMASET	RESET	BDOSJP
              	;			LOGIN	OPENF	OPEN	GRBDOS	CLOSE
              	;			SEARF	SEAR1	SEARN	SUBKIL	DELETE
              	;			RESETUSR GETUSR	SETUSR	PAGER	UCASE
              	;			NOECHO
              	;
              	;     4		CPR Utilities
              	;			SETUD	SETU0D	REDBUF	CNVBUF	CMDSER
              	;			BREAK	USRNUM	ERROR	SDELM	ADVAN
              	;			SBLANK	ADDAH	NUMBER	NUMERR	HEXNUM
              	;			DIRPTR	SLOGIN	DLOGIN	COMLOG	SCANER
              	;
              	;     5		CPR-Resident Commands and Functions
              	;     5A		DIR	DIRPR	FILLQ
              	;     5B		ERA
              	;     5C		LIST
              	;     5D		TYPE
              	;     5E		SAVE
              	;     5F		REN
              	;     5G		USER
              	;     5H		DFU
              	;     5I		JUMP
              	;     5J		GO
              	;     5K		COM	CALLPROG	ERRLOG	ERRJMP
              	;     5L		GET	MEMLOAD	PRNLE
              	;     5M		PASS	NORM
              	;
              	;
0000:         	FALSE	EQU	0
00FF:         	TRUE	EQU	0FFh
              	;
              	;  CUSTOMIZATION EQUATES
              	;
              	;  The following equates may be used to customize this CPR for the user's
              	;    system and integration technique.  The following constants are provided:
              	;
              	;    REL - TRUE if integration is to be done via MOVCPM
              	;        - FALSE if integration is to be done via DDT and SYSGEN
              	;
              	;    SECURE -  TRUE to conditionally disable potentially-harmful
              	;	       commands (GO, ERA, SAVE, REN, DFU, GET, JUMP). Under
              	;	       SECURE, if WHEEL contains RESTRCT, do not accept those
              	;	       commands, and search for COM files under current user
              	;	       then user "DEFUSR" only. If WHEEL does not contain
              	;	       RESTRCT (presumably from passworded change), allow
              	;	       all commands, and search current user, then last user
              	;	       set by DFU (originally "RESUSR"), then user "DEFUSR"
              	;	       for COM files, giving access with password to an
              	;	       additional level of COM files.
              	;
              	;	       (Note: WHEEL must point to a safe place in memory that
              	;		won't be overlayed)
              	;
              	;	If you have chosen a SECURE system,  all resident commands may be
              	; activated by entering:  PASS <password> <cr>  Where <password> is a sequence
              	; of characters placed at PASSID (if INPASS is true, otherwise, see
              	; documentation in PST's PASS.ASM).  If the password is incorrect. the system
              	; will come back with PASS? as if it was looking for a COM file.
              	;	NORM is the reverse of PASS, it will disable the WHEEL mode.
              	;
              	;    INPASS -  If in the SECURE mode, you wish to use a program similar
              	;	       to PST's PASS.ASM, set this false, otherwise, ZCPR will
              	;	       handle the PASSword coding with a built in command.
              	;
              	;    DRUSER -  Set this EQU false if you wish to disable RAF's neat hack
              	;	       that allows you the type B: 7 to move to drive B: user area
              	;	       seven.  This also removes the USER command.  Basically, set
              	;	       this equate false if you want to use USERPW or some other pgm.
              	;
              	;    RAS    -  Remote-Access System; setting this equate to TRUE disables
              	;	       certain CPR commands that are considered harmful in a Remote-
              	;	       Access environment; use under Remote-Access Systems (RBBS) for
              	;	       security purposes.  Note: SECURE is the direct enemy of RAS,
              	;	       DON'T define both equates or you will be VERY sorry.
              	;	       The advantage SECURE has over RAS is that by saying a magic
              	;	       word, all of the normal commands pop into existance.
              	;
              	;    MAXDRIV - Maximum legal drive number stored in this location.
              	;	       (0 means only A:, etc.)  0000H disables this feature.
              	;	       The value MAXDR is stuffed into MAXDRIV at cold boot,
              	;	       and presumably will be changed later by a passworded
              	;	       program if desired.
              	;
              	;	       (This code is in addition to BIOS checks. It's needed here
              	;	       because X: can hang if X: is off line in some BIOS
              	;	       implementations. Personally, I think CAF and others should fix
              	;	       their BIOS instead. Mine works right...SBB).
              	;
              	;    USRMAX -  Maximum legal user # + 1 stored in this location. 0000H
              	;	       disables this feature, and uses the value of MAXUSR+1 instead.
              	;
              	;    BASE - Base Address of user's CP/M system (normally 0 for DR version)
              	;           This equate allows easy modification by non-standard CP/M (eg,H89)
              	;
              	;    CPRLOC - Base Page Address of CPR; this value can be obtained by running
              	;	      the BDOSLOC program on your system, or by setting the
              	;	      MSIZE and BIOSEX equates to the system memory size in
              	;	      K-bytes and the "extra" memory required by your BIOS
              	;	      in K-bytes. BIOSEX is zero if your BIOS is normal size,
              	;	      and can be negative if your BIOS is in PROM or in
              	;	      non-contiguous memory.
              	;
              	;    EPRMPT - Set TRUE to be prompted "OK?" after seeing what files will
              	;	      be erased. No, this is NOT for individual file prompting,
              	;	      it is just to confirm deletion of all selected files at once.
              	;
              	;  Various individuals keep trying to yank out the TYPE, LIST, and DIR
              	; commands, either to use the space for other options or just because
              	; they prefer replacement COM files. To these individuals, I (SBB) say
              	; keep your paws off these commands. For compatibility with the stock
              	; CCP, intrinsic DIR and TYPE commands are required. And many users in
              	; MY neighborhood find it more convenient to use the intrinsic LIST
              	; command than to have a LIST/PRINT program on every disk. If you want
              	; to call a transient program by an intrinsic, then CHANGE THE INTRINSIC
              	; NAME IN THE TABLE. Even setting the name to blanks is fine to get
              	; rid of it. The point is, don't remove features others may want, just
              	; because you disagree, then throw it back in our laps. For those who
              	; simply MUST be rid of these commands, the following symbols control
              	; generation of the code in a CLEAN ACCEPTABLE fashion that allows
              	; others to have these features:
              	;
              	;    CPRTYP -	Set to TRUE to generate code for intrinsic TYPE command.
              	;
              	;    WSTYPE -	Set to TRUE to generate an extra three lines of code
              	;		to correctly interpret the WordStar (tm) internal
              	;		end of line hyphen for display, which is the ASCII
              	;		NEWLINE code (1FH) and normally non-printing or
              	;		troublemaking -- thanks to PJH for this one. CPRTYP
              	;		must be TRUE, or this symbol will be ignored.
              	;
              	;    CPRLST -	Set to TRUE to generate code for intrinsic LIST command.
              	;		Since almost all of the LIST code is common to the
              	;		TYPE code, CPRTYP must be set TRUE as well, or this
              	;		symbol will be ignored.
              	;
              	;    CPRDIR -	Set to TRUE to generate code for intrinsic DIR command.
              	;		Note that unlike the various directory programs, a
              	;		restricted DIR command here allows displaying the names
              	;		of SYS file ONLY, so many RCPM operators WANT this code.
              	;
              	;  Remember, you only get a total of 2048 (0800H) bytes of space for
              	; ALL of the generated code, or many other areas of your system
              	; generation will be affected. For example, to be fully SECURE, you
              	; would set SECURE to TRUE, and define MAXDRIV and USRMAX, and maybe
              	; use the internal password by setting INPASS to TRUE (external is
              	; MUCH recommended for easier modification). Those options absolutely
              	; generate too much code unless either CPRTYP or CPRDIR or both are
              	; set FALSE. A system with SECURE set to FALSE is right on the edge,
              	; and requires a give and take on options to fit, i.e. you can have
              	; MAXDRIV and USRMAX with DIR and TYPE if you leave out LIST and
              	; querying on ERASE, and so on.
              	;
              	;***************************************************************************
              	;** Be careful when playing with different combinations of these equates. **
              	;** You might not have enough memory to some combinations.  Check this    **
              	;** if you have problems, if they still persist, gripe to me (PST).       **
              	;***************************************************************************
              	;
              	;REL	EQU	TRUE		;SET TO TRUE FOR MOVCPM INTEGRATION
              	;
              	;BASE	EQU	0		;BASE OF CP/M SYSTEM (SET FOR STANDARD CP/M)
              	;
              	;; 	IF	REL
              	;; CPRLOC	EQU	0		;MOVCPM IMAGE
              	;; 	ELSE
              	;; ;
              	;; ; If REL is FALSE, the value of CPRLOC may be set in one
              	;; ; of two ways.  The first way is to set MSIZE and BIOSEX
              	;; ; as described above using the following three lines:
              	;; ;
              	;; ;MSIZE	EQU	56		;SIZE OF MEM IN K-BYTES
              	;; ;BIOSEX	EQU	2		;EXTRA # K-BYTES IN BIOS
              	;; ;CPRLOC	EQU	3400H+(MSIZE-20-BIOSEX)*1024	;CPR ORIGIN
              	;; ;
              	;; ; The second way is to obtain the origin of your current
              	;; ; CPR using BDSLOC or its equivalent, then merely set CPRLOC
              	;; ; to that value as in the following line:
              	;; ;
              	;; CPRLOC	EQU	0C400H		;FILL IN WITH BDOSLOC SUPPLIED VALUE
              	;; ;
              	;; ; Note that you should only use one method or the other.
              	;; ; Do NOT define CPRLOC twice!
              	;; ;
              	;; ; The following gives the required offset to load the CPR into the
              	;; ; CP/M SYSGEN Image through DDT (the Roffset command); Note that this
              	;; ; value conforms with the standard value presented in the CP/M reference
              	;; ; manuals, but it may not necessarily conform with the location of the
              	;; ; CCP in YOUR CP/M system; several systems (Morrow Designs, P&T, Heath
              	;; ; Org-0 to name a few) have the CCP located at a non-standard address in
              	;; ; the SYSGEN Image
              	;; ;
              	;; CPRR	EQU	0E00H-CPRLOC	;DDT LOAD OFFSET FOR APPLE SOFTCARD 56K
              	;; ;CPRR	EQU	0980H-CPRLOC	;DDT LOAD OFFSET
              	;; ;CPRR	EQU	1600H-CPRLOC	;DDT LOAD OFFSET FOR COMPUPRO DISK-1
              	;; ;CPRR	EQU	1100H-CPRLOC	;DDT LOAD OFFSET FOR MORROW DESIGNS
              	;; 	ENDIF
              	;
0000:         	RAS	EQU	FALSE		;SET TO TRUE IF CPR IS FOR A REMOTE-ACCESS
              					; SYSTEM AND YOU DON'T WANT TO RUN SECURE
              					; (FOO...)
              	;
0000:         	USRMAX	EQU	0000H		;LOCATION OF BYTE IN MEMORY CONTAINING
              					; NUMBER OF HIGHEST ALLOWABLE USER CODE + 1
              					; THIS VALUE IS SET BY CPR ON COLD BOOT,
              					; AND PRESUMABLY CONTROLLED AFTER THAT
              					; BY A PASSWORD PROGRAM. IF USRMAX=0, THEN
              					; MAXUSR BELOW IS USED FOR CHECKING ONLY.
              					; 03FH IS RECOMMENDED IF USED  ***
0013:         	MAXUSR	EQU	19		;MAX ALLOWED USER NUMBER, THIS + 1 IS STUFFED
              					; INTO USRMAX ON COLD BOOT, OR USED DIRECTLY
              					; IF USRMAX=0
              	;
0000:         	MAXDRIV	EQU	0000H		;LOCATION THAT HAS MAX LEGAL DRIVE #
              					;SET IT TO ZERO TO DISABLE THIS CHECK
              					;03DH IS RECOMMENDED IF USED ***
0001:         	MAXDR	EQU	1		;MAX DRIVE # TO SET INTO MAXDRIV ON COLD BOOT
              	;
0000:         	SECURE	EQU	FALSE		;SET TRUE FOR SECURE ENVIRONMENT...
              	;
0000:         	DEFUSR	EQU	0		;DEFAULT USER FOR UNRESTRICTED COM FILES
              	;
              		IF	SECURE
              	WHEEL	EQU	3EH		;SET TO "RESTRCT" FOR LIMITED ACCESS
              	RESTRCT EQU	0		;WHEN (WHEEL)==RESTRCT, LIMIT COMMANDS
              	RESUSR	EQU	15		;CHECK HERE FOR RESTRICTED ACCESS COM FILES
              					; (LIKE PIP) UNTIL CHANGED BY DFU OR WARM BOOT
              		ENDIF			;SECURE
              	;
0000:         	INPASS	EQU	FALSE		;SET TRUE IF RUNNING SECURE AND NOT PASS.COM
              	;
00FF:         	DRUSER	EQU	TRUE		;TRUE TO ALLOW USER COMMAND AND DRIVE/USER HACK
              	;
0000:         	EPRMPT	EQU	FALSE		;TRUE TO PROMPT BEFORE ERASING ALL FILES
              	;
00FF:         	CPRTYP	EQU	TRUE		;TRUE TO GENERATE TYPE CODE
00FF:         	WSTYPE	EQU	TRUE		;TRUE TO GENERATE WORDSTAR HYPHEN CHECK (CPRTYP
              					; MUST BE TRUE TOO)
00FF:         	CPRLST	EQU	TRUE		;TRUE TO GENERATE LIST CODE (CPRTYP MUST BETRUE TOO)
00FF:         	CPRDIR	EQU	TRUE		;TRUE TO GENERATE DIR CODE
              	;
              	;  ***  Note to Apple Softcard Users  ***
              	;
              	;  In their infinite (?) wisdom (???), Microsoft decided that the way to
              	; get a two-column directory display instead of four-column (narrow 40-col
              	; screen, remember) was to have their BIOS poke CCP every time it was
              	; loaded, if there was no terminal interface card in I/O slot 3.
              	; Naturally, that will turn into a random poke on any non-standard
              	; CCP, like this one.  The best way to get this CPR up on the Apple is to
              	; load it into CPM56.COM, at location 0E00H in the image.  The BIOS code
              	; that pokes the CPR can also be modified at that time.  The poke is done
              	; by "STA 0C8B2H", found at 24FEH in the CPM56 image.  To keep this
              	; feature, change the 0C8B2H address in that instruction by hand to
              	; the value generated for the symbol TWOPOK in the DIR routine.  If
              	; you have assembled out the DIR code by setting CPRDIR to FALSE, then
              	; disable this feature by changing the "STA" to "LDA", i.e. set the
              	; contents of location 24FEH from 32H to 3AH. If you wish to force
              	; a two-column display in all cases, set the TWOCOL switch below to a
              	; value of TRUE, and disable the poke.
              	;
0000:         	TWOCOL	EQU	FALSE		;TRUE IF TWO COL DIR INSTEAD OF FOUR
              	;
              	; The following is presented as an option, but is not generally user-customiz-
              	; able.  A basic design choice had to be made in the design of ZCPR concerning
              	; the execution of SUBMIT files.  The original CCP had a problem in this sense
              	; in that it ALWAYS looked for the SUBMIT file from drive A: and the SUBMIT
              	; program itself (SUBMIT.COM) would place the $$$.SUB file on the currently
              	; logged-in drive, so when the user was logged into B: and he issued a SUBMIT
              	; command, the $$$.SUB was placed on B: and did not execute because the CCP
              	; looked for it on A: and never found it.
              	;
              	;	After much debate it was decided to have ZCPR perform the same type of
              	; function as CCP (look for the $$$.SUB file on A:), but the problem with
              	; SUBMIT.COM still exists.  Hence, RGF designed SuperSUB and RLC took his
              	; SuperSUB and designed SUB from it; both programs are set up to allow the
              	; selection at assembly time of creating the $$$.SUB on the logged-in drive
              	; or on drive A:.
              	;
              	;	A final definition of the Indirect Command File ($$$.SUB or SUBMIT
              	; File) is presented as follows:
              	;
              	;		"An Indirect Command File is one which contains
              	;		 a series of commands exactly as they would be
              	;		 entered from a CP/M Console.  The SUBMIT Command
              	;		 (or SUB Command) reads this files and transforms
              	;		 it for processing by the ZCPR (the $$$.SUB File).
              	;		 ZCPR will then execute the commands indicated
              	;		 EXACTLY as if they were typed at the Console."
              	;
              	;	Hence, to permit this to happen, the $$$.SUB file must always
              	; be present on a specific drive, and A: is the choice for said drive.
              	; With this facility engaged as such, Indirect Command Files like:
              	;
              	;		DIR
              	;		A:
              	;		DIR
              	;
              	; can be executed, even though the currently logged-in drive is changed
              	; during execution.  If the $$$.SUB file was present on the currently
              	; logged-in drive, the above series of commands would not work since the
              	; ZCPR would be looking for $$$.SUB on the logged-in drive, and switching
              	; logged-in drives without moving the $$$.SUB file as well would cause
              	; processing to abort.
              	;
00FF:         	SUBA	EQU	TRUE 		;Set to TRUE to have $$$.SUB always on A:
              					;Set to FALSE to have $$$.SUB on the
              					; logged-in drive
              	;
              	;   The following flag enables extended processing for user-program supplied
              	; command lines.  This is for Command Level 3 of ZCPR.  Under the current
              	; ZCPR philosophy, three command levels exist:
              	;
              	;	(1) that command issued by the user from his console at the '>' prompt
              	;	(2) that command issued by a $$$.SUB file at the '$' prompt
              	;	(3) that command issued by a user program by placing the command into
              	;	    CIBUFF and setting the character count in CBUFF
              	;
              	;   Setting CLEVEL3 to TRUE enables extended processing of the third level of
              	; ZCPR command.  All the user program need do is to store the command line and
              	; set the character count; ZCPR will initialize the pointers properly, store
              	; the ending zero properly, and capitalize the command line for processing.
              	; Once the command line is properly stored, the user executes the command line
              	; by reentering the ZCPR through CPRLOC [NOTE:  The C register MUST contain
              	; a valid User/Disk Flag (see location 4) at this time.]
              	;
00FF:         	CLEVEL3	EQU	TRUE		;ENABLE COMMAND LEVEL 3 PROCESSING
              	;
              	;
              	;*** TERMINAL AND 'TYPE' CUSTOMIZATION EQUATES
              	;
0018:         	NLINES	EQU	24		;NUMBER OF LINES ON CRT SCREEN
00FF:         	WIDE	EQU	TRUE		;TRUE IF WIDE DIR DISPLAY
007C:         	FENCE	EQU	'|'		;SEP CHAR BETWEEN DIR FILES
              	;
0000:         	PGDFLT	EQU	FALSE 		;SET TO FALSE TO DISABLE PAGING BY DEFAULT
0050:         	PGDFLG	EQU	'P'		;FOR TYPE COMMAND: PAGE OR NOT (DEP ON PGDFLT)
              					;  THIS FLAG REVERSES THE DEFAULT EFFECT
              	;
0041:         	SYSFLG	EQU	'A' 		;FOR DIR COMMAND: LIST $SYS AND $DIR
              	;
0053:         	SOFLG	EQU	'S'		;FOR DIR COMMAND: LIST $SYS FILES ONLY
              	;
0000:         	SUPRES	EQU	FALSE		;SUPRESSES USER # REPORT FOR USER 0
              	;
0024:         	SPRMPT	EQU	'$'		;CPR PROMPT INDICATING SUBMIT COMMAND
003E:         	CPRMPT	EQU	'>'		;CPR PROMPT INDICATING USER COMMAND
              	;
0048:         	NUMBASE	EQU	'H'		;CHARACTER USED TO SWITCH FROM DEFAULT
              					; NUMBER BASE
              	;
0053:         	SECTFLG	EQU	'S'		;OPTION CHAR FOR SAVE COMMAND TO SAVE SECTORS
              	;
              	; END OF CUSTOMIZATION SECTION
              	;
000D:         	CR	EQU	0DH
000A:         	LF	EQU	0AH
0009:         	TAB	EQU	09H
000C:         	FFEED	EQU	0CH
0007:         	BEL	EQU	07H
              	;
              	;; WBOOT	EQU	BASE+0000H		;CP/M WARM BOOT ADDRESS
              	;; UDFLAG	EQU	BASE+0004H		;USER NUM IN HIGH NYBBLE, DISK IN LOW
              	;; BDOS	EQU	BASE+0005H		;BDOS FUNCTION CALL ENTRY PT
              	;; TFCB	EQU	BASE+005CH		;DEFAULT FCB BUFFER
              	;; TBUFF	EQU	BASE+0080H		;DEFAULT DISK I/O BUFFER
              	;; TPA	EQU	BASE+0100H		;BASE OF TPA
              	
0100:         	TPA    EQU     100H
              	
              	;
              	;**** Section 0 ****
              	;
              	;	ORG	0100H
              	;	.PHASE	CPRLOC
              	;
              	;  ENTRY POINTS INTO ZCPR
              	;
              	;    If the ZCPR is entered at location CPRLOC (at the JMP to CPR), then
              	; the default command in CIBUFF will be processed.  If the ZCPR is entered
              	; at location CPRLOC+3 (at the JMP to CPR1), then the default command in
              	; CIBUFF will NOT be processed.
              	;
              	;    NOTE:  Entry into ZCPR in this way is permitted under this version,
              	; but in order for this to work, CIBUFF and CBUFF MUST be initialized properly
              	; AND the C register MUST contain a valid User/Disk Flag (see Location 4: the
              	; most significant nybble contains the User Number and the least significant
              	; nybble contains the Disk Number).
              	;
              	;    Some user programs (such as SYNONYM3) attempt to use the default
              	; command facility.  Under the original CCP, it was necessary to initialize
              	; the pointer after the reserved space for the command buffer to point to
              	; the first byte of the command buffer.  Under current versions, this is
              	; no longer the case.  The CIBPTR (Command Input Buffer PoinTeR) is located
              	; to be compatible with such programs (provided they determine the buffer
              	; length from the byte at MBUFF [CPRLOC + 6]), but under ZCPR this is
              	; no longer necessary, since this buffer pointer is automatically
              	; initialized in all cases.
              	;
D400:         	cbase:  
D400:         	ENTRY:
D400: C3C0D4  		JP	CPR		; Process potential default command, and set
              					; USRMAX to MAXUSR default
              	;	JP	CPR1		; Do NOT process potential default command
              	;	
              	;**** Section 1 ****
              	; BUFFERS ET AL
              	;
              	; INPUT COMMAND LINE AND DEFAULT COMMAND
              	;
              	;   The command line to be executed is stored here.  This command line
              	; is generated in one of three ways:
              	;
              	;	(1) by the user entering it through the BDOS READLN function at
              	;	    the du> prompt [user input from keyboard]
              	;	(2) by the SUBMIT File Facility placing it there from a $$$.SUB
              	;	    file
              	;	(3) by an external program or user placing the required command
              	;	    into this buffer
              	;
              	;   In all cases, the command line is placed into the buffer starting at
              	; CIBUFF.  This command line is terminated by the last character (NOT Carriage
              	; Return), and a character count of all characters in the command line
              	; up to and including the last character is placed into location CBUFF
              	; (immediately before the command line at CIBUFF).  The placed command line
              	; is then parsed, interpreted, and the indicated command is executed.
              	; If CLEVEL3 is permitted, a terminating zero is placed after the command
              	; (otherwise the user program has to place this zero) and the CIBPTR is
              	; properly initialized (otherwise the user program has to init this ptr).
              	; If the command is placed by a user program, entering at CPRLOC is enough
              	; to have the command processed.  Again, under the current ZCPR, it is not
              	; necessary to store the pointer to CIBUFF in CIBPTR; ZCPR will do this for
              	; the calling program if CLEVEL3 is made TRUE.
              	;
              	;   WARNING:  The command line must NOT exceed BUFLEN characters in length.
              	; For user programs which load this command, the value of BUFLEN can be
              	; obtained by examining the byte at MBUFF (CPRLOC + 6).
              	;
D403:         	inbuff: 
0050:         	BUFLEN	EQU	80		;MAXIMUM BUFFER LENGTH
D403:         	MBUFF:
D403: 50      		DEFB	BUFLEN		;MAXIMUM BUFFER LENGTH
D404:         	CBUFF:
D404: 00      		DEFB	0		;NUMBER OF VALID CHARS IN COMMAND LINE
              	
D405:         	CIBUFF:
D405: 494E4954	 	DEFM	'INIT '
D409: 20      	
D40A: FF      	        DEFB    255
D40B: 20202020	        DEFM    '        ';DEFAULT (COLD BOOT) COMMAND
D40F: 20202020	
              	;
              	;  The copyright notice from Digital Research is genned into the
              	; stock CCP at this location. It should be maintained in ZCPR,
              	; since Digital Research grants permission for ZCPR to exist.
              	;
D413: 2020434F		DEFM	'  COPYRIGHT (C) 1979, DIGITAL RESEARCH  '
D417: 50595249	
D41B: 47485420	
D41F: 28432920	
D423: 31393739	
D427: 2C204449	
D42B: 47495441	
D42F: 4C205245	
D433: 53454152	
D437: 43482020	
D43B:         	CIBUF:
D43B: 00      		DEFB	0		;COMMAND STRING TERMINATOR
D43C: 4E5A4350		DEFM	'NZCPR V 1.6 of'
D440: 52205620	
D444: 312E3620	
D448: 6F66    	
D44A: 2030382F		DEFM	' 08/03/82 '	;ZCPR ID FOR DISK DUMP
D44E: 30332F38	
D452: 3220    	
D454: 0000    	 	DEFS	BUFLEN-($-CIBUFF)+1	;TOTAL IS 'BUFLEN' BYTES
              	;
D456:         	CIBPTR:
D456: 05D4    		DEFW	CIBUFF		;POINTER TO COMMAND INPUT BUFFER
D458:         	CIPTR:
D458: 3BD4    		DEFW	CIBUF		;POINTER TO CURR COMMAND FOR
              					; ERROR REPORTING
              	;
D45A: 00000000		DEFS	26		;STACK AREA
D45E: 00...   	
D474:         	STACK	EQU	$		;TOP OF STACK
              	;
              	; FILE TYPE FOR COMMAND
              	;
D474:         	COMMSG:
D474: 434F4D  		DEFM	'COM'
              	;
              	; SUBMIT FILE CONTROL BLOCK
              	;
D477:         	SUBFCB:
              		IF	SUBA		;IF $$$.SUB ON A:
D477: 01      		DEFB	1		;DISK NAME SET TO DEFAULT TO DRIVE A:
              	;	ENDIF
              	;
              	;	IF	NOT SUBA	;IF $$$.SUB ON CURRENT DRIVE
              	        ELSE
              		DEFB	0		;DISK NAME SET TO DEFAULT TO CURRENT DRIVE
              		ENDIF
              	;
D478: 242424  		DEFM	'$$$'		;FILE NAME
D47B: 20202020		DEFM	'     '
D47F: 20      	
D480: 535542  		DEFM	'SUB'		;FILE TYPE
D483: 00      		DEFB	0		;EXTENT NUMBER
D484: 00      		DEFB	0		;S1
D485:         	SUBFS2:
D485: 00      		DEFS	1		;S2
D486:         	SUBFRC:
D486: 00      		DEFS	1		;RECORD COUNT
D487: 00000000		DEFS	16		;DISK GROUP MAP
D48B: 00...   	
D497:         	SUBFCR:
D497: 00      		DEFS	1		;CURRENT RECORD NUMBER
              	; COMMAND FILE CONTROL BLOCK
              	;
D498:         	FCBDN:
D498: 00      		DEFS	1		;DISK NAME
D499:         	FCBFN:
D499: 00000000		DEFS	8		;FILE NAME
D49D: 00000000	
D4A1:         	FCBFT:
D4A1: 000000  		DEFS	3		;FILE TYPE
D4A4: 00      		DEFS	1		;EXTENT NUMBER
D4A5: 0000    		DEFS	2		;S1 AND S2
D4A7: 00      		DEFS	1		;RECORD COUNT
D4A8:         	FCBDM:
D4A8: 00000000		DEFS	16		;DISK GROUP MAP
D4AC: 00...   	
D4B8:         	FCBCR:
D4B8: 00      		DEFS	1		;CURRENT RECORD NUMBER
              	;
              	; OTHER BUFFERS
              	;
D4B9:         	PAGCNT:
D4B9: 16      		DEFB	NLINES-2	;LINES LEFT ON PAGE
D4BA:         	CHRCNT:
D4BA: 00      		DEFB	0		;CHAR COUNT FOR TYPE
D4BB:         	QMCNT:
D4BB: 00      		DEFB	0		;QUESTION MARK COUNT FOR FCB TOKEN SCANNER
              	;
              	;
              	;**** Section 2 ****
              	; CPR STARTING POINTS.  NOTE THAT SOME CP/M IMPLEMENTATIONS
              	; REQUIRE THE COLD START ADDRESS TO BE IN THE STARTING PAGE
              	; OF THE CPR, FOR DYNAMIC CCP LOADING.  CMDTBL WAS MOVED FOR
              	; THIS REASON.
              	;
              	; SET USRMAX AND/OR MAXDRIV TO DEFAULT VALUES ON COLD BOOT
              	; IF REQUIRED. NOTE THAT SOME BIOS IMPLEMENTATIONS WILL END
              	; UP HERE INSTEAD OF AT THE WARM BOOT, DEFEATING PASSWORDING
              	; OF THESE OPTIONS. RECOMMEND SUCH A BIOS BE FIXED.
              	;
              		IF	USRMAX OR MAXDRIV
              	CPR:
              		IF	USRMAX
              		LD	A,MAXUSR+1	;SET USRMAX ON COLD BOOT
              		LD	(USRMAX),A
              		ENDIF			;USRMAX
              	;
              		IF	MAXDRIV
              		LD	A,MAXDR		;SET MAXDRIV ON COLD BOOT
              		LD	(MAXDRIV),A
              		ENDIF			;MAXDRIV
              	;
              		JR	CPR2		; THEN PROCEED
              		ENDIF			;USRMAX OR MAXDRIV
              	;
              	; START CPR AND DON'T PROCESS DEFAULT COMMAND STORED
              	;
D4BC:         	CPR1:
D4BC: AF      		XOR	A		;SET NO DEFAULT COMMAND
D4BD: 3204D4  		LD	(CBUFF),A
              	;
              	; START CPR AND POSSIBLY PROCESS DEFAULT COMMAND
              	;
              	; NOTE ON MODIFICATION BY RGF: BDOS RETURNS 0FFH IN
              	; ACCUMULATOR WHENEVER IT LOGS IN A DIRECTORY, IF ANY
              	; FILE NAME CONTAINS A '$' IN IT.  THIS IS NOW USED AS
              	; A CLUE TO DETERMINE WHETHER OR NOT TO DO A SEARCH
              	; FOR SUBMIT FILE, IN ORDER TO ELIMINATE WASTEFUL SEARCHES.
              	;
              		IF	USRMAX OR MAXDRIV
              	CPR2:
              		ELSE
D4C0:         	CPR:
              		ENDIF			;USRMAX OR MAXDRIV
              	;
D4C0: 3174D4  		LD	SP,STACK	;RESET STACK
D4C3: C5      		PUSH	BC
D4C4: 79      		LD	A,C		;C=USER/DISK NUMBER (SEE LOC 4)
D4C5: 1F      		RRA			;EXTRACT USER NUMBER
D4C6: 1F      		RRA
D4C7: 1F      		RRA
D4C8: 1F      		RRA
D4C9: E60F    		AND	0FH
D4CB: 5F      		LD	E,A		;SET USER NUMBER
D4CC: CD6AD6  		CALL	SETUSR
D4CF: CD2DD6  		CALL	RESET		;RESET DISK SYSTEM
              		;LD	(RNGSUB),A	;SAVE SUBMIT CLUE FROM DRIVE A:
D4D2: C1      		POP	BC
D4D3: 79      		LD	A,C		;C=USER/DISK NUMBER (SEE LOC 4)
D4D4: E60F    		AND	0FH		;EXTRACT DEFAULT DISK DRIVE
D4D6: 327ED6  		LD	(TDRIVE),A	;SET IT
D4D9: 2803    		JR	Z,NOLOG		;SKIP IF 0...ALREADY LOGGED
D4DB: CD32D6  		CALL	LOGIN		;LOG IN DEFAULT DISK
              	;
              		IF	SUBA	;IF $$$.SUB IS ON CURRENT DRIVE
              	        ELSE
              		LD	(RNGSUB),A	;BDOS '$' CLUE
              		ENDIF
              	;
D4DE:         	NOLOG:
D4DE: 1177D4  		LD	DE,SUBFCB	;CHECK FOR $$$.SUB ON CURRENT DISK
D4E2:         	batch:  EQU     $+1
D4E2:         	RNGSUB:	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D4E1: 3E00    	        LD	A,0	        ;2ND BYTE (IMMEDIATE ARG) IS THE RNGSUB FLAG
D4E3: B7      		OR	A		;SET FLAGS ON CLUE
D4E4: 2F      		CPL			;PREPARE FOR COMING 'CPL'
D4E5: C44CD6  		CALL	NZ,SEAR1
D4E8: 2F      		CPL			;0FFH IS RETURNED IF NO $$$.SUB, SO COMPLEMENT
D4E9: 32E2D4  		LD	(RNGSUB),A	;SET FLAG (0=NO $$$.SUB)
D4EC: 3A04D4  		LD	A,(CBUFF)	;EXECUTE DEFAULT COMMAND?
D4EF: B7      		OR	A		;0=NO
D4F0: 2026    		JR	NZ,RS1
              	;
              	; PROMPT USER AND INPUT COMMAND LINE FROM HIM
              	;
D4F2:         	RESTRT:
D4F2: 3174D4  		LD	SP,STACK	;RESET STACK
              	;
              	; PRINT PROMPT (DU>)
              	;
D4F5: CDA1D5  		CALL	CRLF		;PRINT PROMPT
D4F8: CD22D6  		CALL	GETDRV		;CURRENT DRIVE IS PART OF PROMPT
D4FB: C641    		ADD	A,'A'		;CONVERT TO ASCII A-P
D4FD: CDA8D5  		CALL	CONOUT
D500: CD68D6  		CALL	GETUSR		;GET USER NUMBER
              	;
              		IF	SUPRES		;IF SUPPRESSING USR # REPORT FOR USR 0
              		OR	A
              		JR	Z,RS000
              		ENDIF
              	;
D503: FE0A    		CP	10		;USER < 10?
D505: 3809    		JR	C,RS00
D507: D60A    		SUB	10		;SUBTRACT 10 FROM IT
D509: F5      		PUSH	AF		;SAVE IT
D50A: 3E31    		LD	A,'1'		;OUTPUT 10'S DIGIT
D50C: CDA8D5  		CALL	CONOUT
D50F: F1      		POP	AF
D510:         	RS00:
D510: C630    		ADD	A,'0'		;OUTPUT 1'S DIGIT (CONVERT TO ASCII)
D512: CDA8D5  		CALL	CONOUT
              	;
              	; READ INPUT LINE FROM USER OR $$$.SUB
              	;
D515:         	RS000:
D515: CD83D6  		CALL	REDBUF		;INPUT COMMAND LINE FROM USER (OR $$$.SUB)
              	;
              	; PROCESS INPUT LINE
              	;
D518:         	RS1:
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
D518: CDF0D6  		CALL	CNVBUF		;CAPITALIZE COMMAND LINE, PLACE ENDING 0,
              					; AND SET CIBPTR VALUE
              		ENDIF
              	;
D51B: CD26D6  		CALL	DEFDMA		;SET TBUFF TO DMA ADDRESS
D51E: CD22D6  		CALL	GETDRV		;GET DEFAULT DRIVE NUMBER
D521: 327ED6  		LD	(TDRIVE),A	;SET IT
D524: CD08D8  		CALL	SCANER		;PARSE COMMAND NAME FROM COMMAND LINE
D527: C417D7  		CALL	NZ,ERROR	;ERROR IF COMMAND NAME CONTAINS A '?'
D52A: 1140D5  		LD	DE,RSTCPR	;PUT RETURN ADDRESS OF COMMAND
D52D: D5      		PUSH	DE		;ON THE STACK
D52E: 3AFFD7  		LD	A,(TEMPDR)	;IS COMMAND OF FORM 'D:COMMAND'?
D531: B7      		OR	A		;NZ=YES
D532: C2F7DA  		JP	NZ,COM		; IMMEDIATELY
D535: CD87D8  		CALL	CMDSER		;SCAN FOR CPR-RESIDENT COMMAND
D538: C2F7DA  		JP	NZ,COM		;NOT CPR-RESIDENT
D53B: 7E      		LD	A,(HL)		;FOUND IT:  GET LOW-ORDER PART
D53C: 23      		INC	HL		;GET HIGH-ORDER PART
D53D: 66      		LD	H,(HL)		;STORE HIGH
D53E: 6F      		LD	L,A		;STORE LOW
D53F: E9      		JP	(HL)		;EXECUTE CPR ROUTINE
              	;
              	; ENTRY POINT FOR RESTARTING CPR AND LOGGING IN DEFAULT DRIVE
              	;
D540:         	RSTCPR:
D540: CDF4D7  		CALL	DLOGIN		;LOG IN DEFAULT DRIVE
              	;
              	; ENTRY POINT FOR RESTARTING CPR WITHOUT LOGGING IN DEFAULT DRIVE
              	;
D543:         	RCPRNL:
D543: CD08D8  		CALL	SCANER		;EXTRACT NEXT TOKEN FROM COMMAND LINE
D546: 3A99D4  		LD	A,(FCBFN)	;GET FIRST CHAR OF TOKEN
D549: D620    		SUB	' '		;ANY CHAR?
D54B: 21FFD7  		LD	HL,TEMPDR
D54E: B6      		OR	(HL)
D54F: C217D7  		JP	NZ,ERROR
D552: 189E    		JR	RESTRT
              	;
              	; No File Error Message
              	;
D554:         	PRNNF:
D554: CD0AD6  		CALL	PRINTC		;NO FILE MESSAGE
D557: 4E6F2046		DEFM	'No Fil'
D55B: 696C    	
D55D: E5      		DEFB	'e'+80H
D55E: C9      		RET
              	;
              	; CPR BUILT-IN COMMAND TABLE
              	;
0004:         	NCHARS	EQU	4		;NUMBER OF CHARS/COMMAND
              	;
              	; CPR COMMAND NAME TABLE
              	;   EACH TABLE ENTRY IS COMPOSED OF THE 4-BYTE COMMAND AND 2-BYTE ADDRESS
              	;
D55F:         	CMDTBL:
              	;
              		IF	INPASS AND SECURE
              		DEFM	'PASS'		;ENABLE WHEEL (SYSOP) MODE
              		DEFW	PASS
              		ENDIF			;INPASS AND SECURE
              	;
              		IF	DRUSER
D55F: 55534552		DEFM	'USER'		;CHANGE USER AREAS
D563: DBDA    		DEFW	USER
              		ENDIF			;DRUSER
              	;
              		IF	CPRTYP
D565: 54595045		DEFM	'TYPE'		;TYPE A FILE TO CON:
D569: 85D9    		DEFW	TYPE
              		ENDIF			;CPRTYP
              	;
              		IF	CPRDIR
D56B: 44495220		DEFM	'DIR '		;PULL A DIRECTORY OF DISK FILES
D56F: A9D8    		DEFW	DIR
              		ENDIF			;CPRDIR
              	
0003:         	NRCMDS	EQU	($-CMDTBL)/(NCHARS+2)
              					;PUT ANY COMMANDS THAT ARE OK TO
              					;RUN WHEN NOT UNDER WHEEL MODE
              					;IN FRONT OF THIS LABEL
              		IF	CPRLST AND CPRTYP
D571: 4C495354		DEFM	'LIST'		;LIST FILE TO PRINTER
D575: 81D9    		DEFW	LIST
              		ENDIF			;CPRLST AND CPRTYP
              	;
              		IF	INPASS AND SECURE
              		DEFM	'NORM'		;DISABLE WHEEL MODE
              		DEFW	NORM
              		ENDIF			;INPASS AND SECURE
              	;
              		IF	RAS		;FOR NON-RAS
              	        ELSE
D577: 474F2020		DEFM	'GO  '		;JUMP TO 100H
D57B: F2DA    		DEFW	GO
D57D: 45524120		DEFM	'ERA '		;ERASE FILE
D581: 5AD9    		DEFW	ERA
D583: 53415645		DEFM	'SAVE'		;SAVE MEMORY IMAGE TO DISK
D587: 12DA    		DEFW	SAVE
D589: 52454E20		DEFM	'REN '		;RENAME FILE
D58D: 97DA    		DEFW	REN
D58F: 44465520		DEFM	'DFU '		;SET DEFAULT USER
D593: E5DA    		DEFW	DFU
D595: 47455420		DEFM	'GET '		;LOAD FILE INTO MEMORY
D599: 97DB    		DEFW	GET
D59B: 4A554D50		DEFM	'JUMP'		;JUMP TO LOCATION IN MEMORY
D59F: EDDA    		DEFW	JUMP
              		ENDIF			;RAS
              	;
000B:         	NCMNDS	EQU	($-CMDTBL)/(NCHARS+2)
              	;
              	;**** Section 3 ****
              	; I/O UTILITIES
              	;
              	; OUTPUT CHAR IN REG A TO CONSOLE AND DON'T CHANGE BC
              	;
              	;
              	; OUTPUT <CRLF>
              	;
D5A1:         	CRLF:
D5A1: 3E0D    		LD	A,CR
D5A3: CDA8D5  		CALL	CONOUT
D5A6: 3E0A    		LD	A,LF		;FALL THRU TO CONOUT
              	;
D5A8:         	CONOUT:
D5A8: C5      		PUSH	BC
D5A9: 0E02    		LD	C,02H
D5AB:         	OUTPUT:
D5AB: E67F    		AND	7FH		;PREVENT INADVERTANT GRAPHIC OUTPUT
              					; TO EPSON-TYPE PRINTERS
D5AD: 5F      		LD	E,A
D5AE: E5      		PUSH	HL
D5AF: CD0500  		CALL	BDOS
D5B2: E1      		POP	HL
D5B3: C1      		POP	BC
D5B4: C9      		RET
              	;
D5B5:         	CONIN:
D5B5: 0E01    		LD	C,01H		;GET CHAR FROM CON: WITH ECHO
D5B7: CD03D6  		CALL	BDOSB
              	;
              	; CONVERT CHAR IN A TO UPPER CASE
              	;
D5BA:         	UCASE:
D5BA: FE61    		CP	61H		;LOWER-CASE A
D5BC: D8      		RET	C
D5BD: FE7B    		CP	7BH		;GREATER THAN LOWER-CASE Z?
D5BF: D0      		RET	NC
D5C0: E65F    		AND	5FH		;CAPITALIZE
D5C2: C9      		RET
              	;
D5C3:         	NOECHO:
D5C3: D5      		PUSH	DE		;SAVE D
D5C4: 0E06    		LD	C,6		;DIRECT CONSOLE I/O
D5C6: 1EFF    		LD	E,0FFH		;INPUT
D5C8: CD03D6  		CALL	BDOSB
D5CB: D1      		POP	DE
D5CC: B7      		OR	A		;DID WE GET A CHAR?
D5CD: 28F4    		JR	Z,NOECHO	;WAIT FOR IT IF NOT, IT'S EXPECTED
D5CF: C9      		RET
              	;
              		IF	CPRTYP
D5D0:         	LCOUT:
              		ENDIF			;CPRTYP
              	;
              		IF	CPRTYP AND CPRLST
D5D0: F5      		PUSH	AF		;OUTPUT CHAR TO CON: OR LST: DEP ON PRFLG
D5D2:         	PRFLG	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D5D1: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS THE PRINT FLAG
D5D3: B7      		OR	A		;0=TYPE
D5D4: 2806    		JR	Z,LC1
D5D6: F1      		POP	AF		;GET CHAR
              	;
              	; OUTPUT CHAR IN REG A TO LIST DEVICE
              	;
D5D7:         	LSTOUT:
D5D7: C5      		PUSH	BC
D5D8: 0E05    		LD	C,05H
D5DA: 18CF    		JR	OUTPUT
D5DC:         	LC1:
D5DC: F1      		POP	AF		;GET CHAR
              		ENDIF			;CPRTYP AND CPRLST
              	;
              		IF	CPRTYP
D5DD: F5      		PUSH	AF
D5DE: CDA8D5  		CALL	CONOUT		;OUTPUT TO CON:
D5E1: F1      		POP	AF
D5E2: FE0A    		CP	LF		;CHECK FOR PAGING
D5E4: C0      		RET	NZ		;DONE IF NOT EOL YET
              	;
              	;  COUNT DOWN LINES AND PAUSE FOR INPUT (DIRECT) IF COUNT EXPIRES
              	;
D5E5: E5      		PUSH	HL
D5E6: 21B9D4  		LD	HL,PAGCNT	;COUNT DOWN
D5E9: 35      		DEC	(HL)
D5EA: 2010    		JR	NZ,PGBAK	;JUMP IF NOT END OF PAGE
D5EC: 3616    		LD	(HL),NLINES-2	;REFILL COUNTER
              	;
D5EF:         	PGFLG	EQU	$+1		;POINTER TO IN-THE-CODE BUFFER PGFLG
D5EE: 3E00    		LD	A,0		;0 MAY BE CHANGED BY PGFLG EQUATE
D5F0: FE50    		CP	PGDFLG		;PAGE DEFAULT OVERRIDE OPTION WANTED?
              	;
              		IF	PGDFLT		;IF PAGING IS DEFAULT
              		JR	Z,PGBAK		;  PGDFLG MEANS NO PAGING, PLEASE
              		ELSE			;IF PAGING NOT DEFAULT
D5F2: 2008    		JR	NZ,PGBAK	;  PGDFLG MEANS PLEASE PAGINATE
              		ENDIF
              	;
D5F4: CDC3D5  		CALL	NOECHO		;GET CHAR BUT DON'T ECHO TO SCREEN
D5F7: FE03    		CP	'C'-'@' 	;^C
D5F9: CA40D5  		JP	Z,RSTCPR	;RESTART CPR
D5FC:         	PGBAK:
D5FC: E1      		POP	HL		;RESTORE HL
D5FD: C9      		RET
              		ENDIF			;CPRTYP
              	;
D5FE:         	READF:
D5FE: 1198D4  		LD	DE,FCBDN 	;FALL THRU TO READ
D601:         	READ:
D601: 0E14    		LD	C,14H		;FALL THRU TO BDOSB
              	;
              	; CALL BDOS AND SAVE BC
              	;
D603:         	BDOSB:
D603: C5      		PUSH	BC
D604: CD0500  		CALL	BDOS
D607: C1      		POP	BC
D608: B7      		OR	A
D609: C9      		RET
              	;
              	; PRINT STRING ENDING WITH ZERO BYTE OR CHAR WITH HIGH BIT SET
              	; PT'ED TO BY RET ADDR, START WITH <CR><LF>
              	;
D60A:         	PRINTC:
D60A: F5      		PUSH	AF		;SAVE FLAGS
D60B: CDA1D5  		CALL	CRLF		;NEW LINE
D60E: F1      		POP	AF
              	;
D60F:         	PRINT:
D60F: E3      		EX	(SP),HL		;GET PTR TO STRING
D610: F5      		PUSH	AF		;SAVE FLAGS
D611: CD17D6  		CALL	PRIN1		;PRINT STRING
D614: F1      		POP	AF		;GET FLAGS
D615: E3      		EX	(SP),HL		;RESTORE HL AND RET ADR
D616: C9      		RET
              	;
              	; PRINT STRING ENDING WITH ZERO BYTE OR CHAR WITH HIGH BIT SET
              	; PT'ED TO BY HL
              	;
D617:         	PRIN1:
D617: 7E      		LD	A,(HL)		;GET NEXT BYTE
D618: CDA8D5  		CALL	CONOUT		;PRINT CHAR
D61B: 7E      		LD	A,(HL)		;GET NEXT BYTE AGAIN FOR TEST
D61C: 23      		INC	HL		;PT TO NEXT BYTE
D61D: B7      		OR	A		;SET FLAGS
D61E: C8      		RET	Z		;DONE IF ZERO
D61F: F8      		RET	M		;DONE IF MSB SET
D620: 18F5    		JR	PRIN1
              	;
              	; BDOS FUNCTION ROUTINES
              	;
              	;
              	; RETURN NUMBER OF CURRENT DISK IN A
              	;
D622:         	GETDRV:
D622: 0E19    		LD	C,19H
D624: 1809    		JR	BDOSJP
              	;
              	; SET 80H AS DMA ADDRESS
              	;
D626:         	DEFDMA:
D626: 118000  		LD	DE,TBUFF 	;80H=TBUFF
D629:         	DMASET:
D629: 0E1A    		LD	C,1AH
D62B: 1802    		JR	BDOSJP
              	;
D62D:         	RESET:
D62D: 0E0D    		LD	C,0DH
D62F:         	BDOSJP:
D62F: C30500  		JP	BDOS
              	;
D632:         	LOGIN:
D632: 5F      		LD	E,A		;MOVE DESIRED # TO BDOS REG
              	;
              		IF	MAXDRIV
              		LD	A,(MAXDRIV)	;CHECK FOR LEGAL DRIVE #
              		CP	E
              		JP	C,ERROR		;DON'T DO IT IF TOO HIGH
              		ENDIF			;MAXDRIV
              	;
D633: 0E0E    		LD	C,0EH
D635: 18F8    		JR	BDOSJP		;SAVE SOME CODE SPACE
              	;
D637:         	OPENF:
D637: AF      		XOR	A
D638: 32B8D4  		LD	(FCBCR),A
D63B: 1198D4  		LD	DE,FCBDN 	;FALL THRU TO OPEN
              	;
D63E:         	OPEN:
D63E: 0E0F    		LD	C,0FH		;FALL THRU TO GRBDOS
              	;
D640:         	GRBDOS:
D640: CD0500  		CALL	BDOS
D643: 3C      		INC	A		;SET ZERO FLAG FOR ERROR RETURN
D644: C9      		RET
              	;
D645:         	CLOSE:
D645: 0E10    		LD	C,10H
D647: 18F7    		JR	GRBDOS
              	;
D649:         	SEARF:
D649: 1198D4  		LD	DE,FCBDN 	;SPECIFY FCB
D64C:         	SEAR1:
D64C: 0E11    		LD	C,11H
D64E: 18F0    		JR	GRBDOS
              	;
D650:         	SEARN:
D650: 0E12    		LD	C,12H
D652: 18EC    		JR	GRBDOS
              	;
              	; CHECK FOR SUBMIT FILE IN EXECUTION AND ABORT IT IF SO
              	;
D654:         	SUBKIL:
D654: 21E2D4  		LD	HL,RNGSUB	;CHECK FOR SUBMIT FILE IN EXECUTION
D657: 7E      		LD	A,(HL)
D658: B7      		OR	A		;0=NO
D659: C8      		RET	Z
D65A: 3600    		LD	(HL),0		;ABORT SUBMIT FILE
D65C: 1177D4  		LD	DE,SUBFCB	;DELETE $$$.SUB
              	;
D65F:         	DELETE:
D65F: 0E13    		LD	C,13H
D661: 18CC    		JR	BDOSJP		;SAVE MORE SPACE
              	;
              	; RESET USER NUMBER IF CHANGED
              	;
D663:         	RESETUSR:
D664:         	TMPUSR	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D663: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TMPUSR
D665: 5F      		LD	E,A		;PLACE IN E
D666: 1802    		JR	SETUSR		;THEN GO SET USER
D668:         	GETUSR:
D668: 1EFF    		LD	E,0FFH		;GET CURRENT USER NUMBER
D66A:         	SETUSR:
D66A: 0E20    		LD	C,20H		;SET USER NUMBER TO VALUE IN E (GET IF E=FFH)
D66C: 18C1    		JR	BDOSJP		;MORE SPACE SAVING
              	;
              	; END OF BDOS FUNCTIONS
              	;
              	;
              	;**** Section 4 ****
              	; CPR UTILITIES
              	;
              	; SET USER/DISK FLAG TO CURRENT USER AND DEFAULT DISK
              	;
D66E:         	SETUD:
D66E: CD68D6  		CALL	GETUSR		;GET NUMBER OF CURRENT USER
D671: 87      		ADD	A,A		;PLACE IT IN HIGH NYBBLE
D672: 87      		ADD	A,A
D673: 87      		ADD	A,A
D674: 87      		ADD	A,A
D675: 217ED6  		LD	HL,TDRIVE	;MASK IN DEFAULT DRIVE NUMBER (LOW NYBBLE)
D678: B6      		OR	(HL)		;MASK IN
D679: 320400  		LD	(UDFLAG),A	;SET USER/DISK NUMBER
D67C: C9      		RET
              	;
              	; SET USER/DISK FLAG TO USER 0 AND DEFAULT DISK
              	;
D67D:         	SETU0D:
D67E:         	TDRIVE	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D67D: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TDRIVE
D67F: 320400  		LD	(UDFLAG),A	;SET USER/DISK NUMBER
D682: C9      		RET
              	;
              	; INPUT NEXT COMMAND TO CPR
              	;	This routine determines if a SUBMIT file is being processed
              	; and extracts the command line from it if so or from the user's console
              	;
D683:         	REDBUF:
D683: 3AE2D4  		LD	A,(RNGSUB)	;SUBMIT FILE CURRENTLY IN EXECUTION?
D686: B7      		OR	A		;0=NO
D687: 2851    		JR	Z,RB1		;GET LINE FROM CONSOLE IF NOT
D689: 1177D4  		LD	DE,SUBFCB	;OPEN $$$.SUB
D68C: CD3ED6  		CALL	OPEN
D68F: 2849    		JR	Z,RB1		;ERASE $$$.SUB IF END OF FILE AND GET CMND
D691: 3A86D4  		LD	A,(SUBFRC)	;GET VALUE OF LAST RECORD IN FILE
D694: 1177D4  	REDBUF0:LD	DE,SUBFCB
D697: 3D      		DEC	A		;PT TO NEXT TO LAST RECORD
D698: 3297D4  		LD	(SUBFCR),A	;SAVE NEW VALUE OF LAST RECORD IN $$$.SUB
D69B: F5      		PUSH	AF
D69C: CD01D6  		CALL	READ		;DE=SUBFCB
D69F: C1      		POP	BC
D6A0: 2038    		JR	NZ,RB1		;ABORT $$$.SUB IF ERROR IN READING LAST REC
D6A2: 218000  		LD	HL,TBUFF
D6A5: AF      		XOR	A
D6A6: BE      		CP	(HL)
D6A7: 78      		LD	A,B
D6A8: 28EA    		JR	Z,REDBUF0
D6AA: 1104D4  		LD	DE,CBUFF 	;COPY LAST RECORD (NEXT SUBMIT CMND) TO CBUFF FROM TBUFF
D6AD: E5      		PUSH	HL
D6AE: 015000  		LD	BC,BUFLEN	;NUMBER OF BYTES
D6B1: EDB0    		LDIR
D6B3: E1      		POP	HL
D6B4: 71      		LD	(HL),C
D6B5: 2197D4  		LD	HL,SUBFCR
D6B8: 35      		DEC	(HL)
D6B9: 1177D4  		LD	DE,SUBFCB	
D6BC: D5      		PUSH	DE
D6BD: 0E15    		LD	C,15H
D6BF: CD0500  		CALL	BDOS		; SCRATCH OFF COMMAND
D6C2: D1      		POP	DE
D6C3: CD45D6  		CALL	CLOSE		;CLOSE $$$.SUB
              	;	JR	Z,RB1		;ABORT $$$.SUB IF ERROR (PROBABLY NOT GOING TO HIT THIS ONE)
D6C6: 3E24    		LD	A,SPRMPT	;PRINT SUBMIT PROMPT
D6C8: CDA8D5  		CALL	CONOUT
D6CB: 2105D4  		LD	HL,CIBUFF	;PRINT COMMAND LINE FROM $$$.SUB
D6CE: CD17D6  		CALL	PRIN1
D6D1: CD06D7  		CALL	BREAK		;CHECK FOR ABORT (ANY CHAR)
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
D6D4: C8      		RET	Z		;IF <NULL> (NO ABORT), RETURN TO CALLER AND RUN
              		ENDIF
              	;
              		IF	CLEVEL3	;IF THIRD COMMAND LEVEL IS NOT PERMITTED
              	        ELSE
              		JR	Z,CNVBUF	;IF <NULL> (NO ABORT), CAPITALIZE COMMAND
              		ENDIF
              	;
D6D5: CD54D6  		CALL	SUBKIL		;KILL $$$.SUB IF ABORT
D6D8: 1857    		JR	RESTTMP		;RESTART CPR
              	;
              	; INPUT COMMAND LINE FROM USER CONSOLE
              	;
D6DA:         	RB1:
D6DA: CD54D6  		CALL	SUBKIL		;ERASE $$$.SUB IF PRESENT
D6DD: CD6ED6  		CALL	SETUD		;SET USER AND DISK
D6E0: 3E3E    		LD	A,CPRMPT	;PRINT PROMPT
D6E2: CDA8D5  		CALL	CONOUT
D6E5: 0E0A    		LD	C,0AH		;READ COMMAND LINE FROM USER
D6E7: 1103D4  		LD	DE,MBUFF
D6EA: CD0500  		CALL	BDOS
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
D6ED: C37DD6  		JP	SETU0D		;SET CURRENT DISK NUMBER IN LOWER PARAMS
              		ENDIF
              	;
              		IF	CLEVEL3	;IF THIRD COMMAND LEVEL IS NOT PERMITTED
              	        ELSE
              		CALL	SETU0D		;SET CURRENT DISK NUMBER IF LOWER PARAMS
              					; AND FALL THRU TO CNVBUF
              		ENDIF
              	;
              	; CAPITALIZE STRING (ENDING IN 0) IN CBUFF AND SET PTR FOR PARSING
              	;
D6F0:         	CNVBUF:
D6F0: 2104D4  		LD	HL,CBUFF 	;PT TO USER'S COMMAND
D6F3: 46      		LD	B,(HL)		;CHAR COUNT IN B
D6F4: 04      		INC	B		;ADD 1 IN CASE OF ZERO
D6F5:         	CB1:
D6F5: 23      		INC	HL		;PT TO 1ST VALID CHAR
D6F6: 7E      		LD	A,(HL)		;CAPITALIZE COMMAND CHAR
D6F7: CDBAD5  		CALL	UCASE
D6FA: 77      		LD	(HL),A
D6FB: 10F8    		DJNZ	CB1		;CONTINUE TO END OF COMMAND LINE
D6FD:         	CB2:
D6FD: 3600    		LD	(HL),0		;STORE ENDING <NULL>
D6FF: 2105D4  		LD	HL,CIBUFF	;SET COMMAND LINE PTR TO 1ST CHAR
D702: 2256D4  		LD	(CIBPTR),HL
D705: C9      		RET
              	;
              	; CHECK FOR ANY CHAR FROM USER CONSOLE;RET W/ZERO SET IF NONE
              	;
D706:         	BREAK:
D706: D5      		PUSH	DE		;SAVE DE
D707: 0E0B    		LD	C,11		;CSTS CHECK
D709: CD03D6  		CALL	BDOSB
D70C: C4B5D5  		CALL	NZ,CONIN	;GET INPUT CHAR
D70F:         	BRKBK:
D70F: D1      		POP	DE
D710: C9      		RET
              	;
              	; GET THE REQUESTED USER NUMBER FROM THE COMMAND LINE AND VALIDATE IT.
              	;
D711:         	USRNUM:		
D711: CD63D7  		CALL	NUMBER
              	;
              		IF	USRMAX
              		LD	HL,USRMAX 	;PT TO MAXUSR + 1
              		CP	(HL)		;NEW VALUE ALLOWED?
              		ELSE
D714: FE14    		CP	MAXUSR+1 	;NEW VALUE ALLOWED?
              		ENDIF			;USRMAX
              	;
D716: D8      		RET	C		;RETURN TO CALLER IF SO,
              					; ELSE FLAG AS ERROR
              	;
              	; INVALID COMMAND -- PRINT IT
              	;
D717:         	ERROR:
D717: CDA1D5  		CALL	CRLF		;NEW LINE
D71A: 2A58D4  		LD	HL,(CIPTR)	;PT TO BEGINNING OF COMMAND LINE
D71D:         	ERR2:
D71D: 7E      		LD	A,(HL)		;GET CHAR
D71E: FE21    		CP	' '+1		;SIMPLE '?' IF <SP> OR LESS
D720: 3808    		JR	C,ERR1
D722: E5      		PUSH	HL		;SAVE PTR TO ERROR COMMAND CHAR
D723: CDA8D5  		CALL	CONOUT		;PRINT COMMAND CHAR
D726: E1      		POP	HL		;GET PTR
D727: 23      		INC	HL		;PT TO NEXT
D728: 18F3    		JR	ERR2		;CONTINUE
D72A:         	ERR1:
D72A: CD0FD6  		CALL	PRINT		;PRINT '?'
D72D: BF      		DEFB	'?'+80H
D72E: CD54D6  		CALL	SUBKIL		;TERMINATE ACTIVE $$$.SUB IF ANY
D731: C3F2D4  	RESTTMP:JP	RESTRT		;RESTART CPR
              	;
              	; CHECK TO SEE IF DE PTS TO DELIMITER; IF SO, RET W/ZERO FLAG SET
              	;
D734:         	SDELM:
D734: 1A      		LD	A,(DE)
D735: B7      		OR	A		;0=DELIMITER
D736: C8      		RET	Z
D737: FE20    		CP	' '		;ERROR IF < <SP>
D739: 38DC    		JR	C,ERROR
D73B: C8      		RET	Z			;<SP>=DELIMITER
D73C: FE3D    		CP	'='		;'='=DELIMITER
D73E: C8      		RET	Z
D73F: FE5F    		CP	5FH		;UNDERSCORE=DELIMITER
D741: C8      		RET	Z
D742: FE2E    		CP	'.'		;'.'=DELIMITER
D744: C8      		RET	Z
D745: FE3A    		CP	':'		;':'=DELIMITER
D747: C8      		RET	Z
D748: FE3B    		CP	';'		;';'=DELIMITER
D74A: C8      		RET	Z
D74B: FE3C    		CP	'<'		;'<'=DELIMITER
D74D: C8      		RET	Z
D74E: FE3E    		CP	'>'		;'>'=DELIMITER
D750: C9      		RET
              	;
              	; ADVANCE INPUT PTR TO FIRST NON-BLANK AND FALL THROUGH TO SBLANK
              	;
D751:         	ADVAN:
D751: ED5B56D4		LD	DE,(CIBPTR)
              	;
              	; SKIP STRING PTED TO BY DE (STRING ENDS IN 0) UNTIL END OF STRING
              	;   OR NON-BLANK ENCOUNTERED (BEGINNING OF TOKEN)
              	;
D755:         	SBLANK:
D755: 1A      		LD	A,(DE)
D756: B7      		OR	A
D757: C8      		RET	Z
D758: FE20    		CP	' '
D75A: C0      		RET	NZ
D75B: 13      		INC	DE
D75C: 18F7    		JR	SBLANK
              	;
              	; ADD A TO HL (HL=HL+A)
              	;
D75E:         	ADDAH:
D75E: 85      		ADD	A,L
D75F: 6F      		LD	L,A
D760: D0      		RET	NC
D761: 24      		INC	H
D762: C9      		RET
              	;
              	; EXTRACT DECIMAL NUMBER FROM COMMAND LINE
              	;   RETURN WITH VALUE IN REG A;ALL REGISTERS MAY BE AFFECTED
              	;
D763:         	NUMBER:
D763: CD08D8  		CALL	SCANER		;PARSE NUMBER AND PLACE IN FCBFN
D766: 21A3D4  		LD	HL,FCBFN+10 	;PT TO END OF TOKEN FOR CONVERSION
D769: 060B    		LD	B,11		;11 CHARS MAX
              	;
              	; CHECK FOR SUFFIX FOR HEXADECIMAL NUMBER
              	;
D76B:         	NUMS:
D76B: 7E      		LD	A,(HL)		;GET CHARS FROM END, SEARCHING FOR SUFFIX
D76C: 2B      		DEC	HL		;BACK UP
D76D: FE20    		CP	' '		;SPACE?
D76F: 2004    		JR	NZ,NUMS1	;CHECK FOR SUFFIX
D771: 10F8    		DJNZ	NUMS		;COUNT DOWN
D773: 1804    		JR	NUM0		;BY DEFAULT, PROCESS
D775:         	NUMS1:
D775: FE48    		CP	NUMBASE		;CHECK AGAINST BASE SWITCH FLAG
D777: 282B    		JR	Z,HNUM0
              	;
              	; PROCESS DECIMAL NUMBER
              	;
D779:         	NUM0:
D779: 2199D4  		LD	HL,FCBFN	;PT TO BEGINNING OF TOKEN
D77C: 010011  		LD	BC,1100H	;C=ACCUMULATED VALUE, B=CHAR COUNT
              					; (C=0, B=11)
D77F:         	NUM1:
D77F: 7E      		LD	A,(HL)		;GET CHAR
D780: FE20    		CP	' '		;DONE IF <SP>
D782: 2818    		JR	Z,NUM2
D784: 23      		INC	HL		;PT TO NEXT CHAR
D785: D630    		SUB	'0'		;CONVERT TO BINARY (ASCII 0-9 TO BINARY)
D787: FE0A    		CP	10		;ERROR IF >= 10
D789: 3013    		JR	NC,NUMERR
D78B: 57      		LD	D,A		;DIGIT IN D
D78C: 79      		LD	A,C		;NEW VALUE = OLD VALUE * 10
D78D: 07      		RLCA
D78E: 07      		RLCA
D78F: 07      		RLCA
D790: 81      		ADD	A,C		;CHECK FOR RANGE ERROR
D791: 380B    		JR	C,NUMERR
D793: 81      		ADD	A,C		;CHECK FOR RANGE ERROR
D794: 3808    		JR	C,NUMERR
D796: 82      		ADD	A,D		;NEW VALUE = OLD VALUE * 10 + DIGIT
D797: 3805    		JR	C,NUMERR	;CHECK FOR RANGE ERROR
D799: 4F      		LD	C,A		;SET NEW VALUE
D79A: 10E3    		DJNZ	NUM1		;COUNT DOWN
              	;
              	; RETURN FROM NUMBER
              	;
D79C:         	NUM2:
D79C: 79      		LD	A,C		;GET ACCUMULATED VALUE
D79D: C9      		RET
              	;
              	; NUMBER ERROR ROUTINE FOR SPACE CONSERVATION
              	;
D79E:         	NUMERR:
D79E: C317D7  		JP	ERROR		;USE ERROR ROUTINE - THIS IS RELATIVE PT
              	;
              	; EXTRACT HEXADECIMAL NUMBER FROM COMMAND LINE
              	;   RETURN WITH VALUE IN REG A; ALL REGISTERS MAY BE AFFECTED
              	;
D7A1:         	HEXNUM:
D7A1: CD08D8  		CALL	SCANER		;PARSE NUMBER AND PLACE IN FCBFN
D7A4:         	HNUM0:
D7A4: 2199D4  		LD	HL,FCBFN	;PT TO TOKEN FOR CONVERSION
D7A7: 110000  		LD	DE,0		;DE=ACCUMULATED VALUE
D7AA: 060B    		LD	B,11		;B=CHAR COUNT
D7AC:         	HNUM1:
D7AC: 7E      		LD	A,(HL)		;GET CHAR
D7AD: FE20    		CP	' '		;DONE?
D7AF: 282D    		JR	Z,HNUM3		;RETURN IF SO
D7B1: FE48    		CP	NUMBASE		;DONE IF NUMBASE SUFFIX
D7B3: 2829    		JR	Z,HNUM3
D7B5: D630    		SUB	'0'		;CONVERT TO BINARY
D7B7: 38E5    		JR	C,NUMERR	;RETURN AND DONE IF ERROR
D7B9: FE0A    		CP	10		;0-9?
D7BB: 3806    		JR	C,HNUM2
D7BD: D607    		SUB	7		;A-F?
D7BF: FE10    		CP	10H		;ERROR?
D7C1: 30DB    		JR	NC,NUMERR
D7C3:         	HNUM2:
D7C3: 23      		INC	HL		;PT TO NEXT CHAR
D7C4: 4F      		LD	C,A		;DIGIT IN C
D7C5: 7A      		LD	A,D		;GET ACCUMULATED VALUE
D7C6: 07      		RLCA			;EXCHANGE NYBBLES
D7C7: 07      		RLCA
D7C8: 07      		RLCA
D7C9: 07      		RLCA
D7CA: E6F0    		AND	0F0H		;MASK OUT LOW NYBBLE
D7CC: 57      		LD	D,A
D7CD: 7B      		LD	A,E		;SWITCH LOW-ORDER NYBBLES
D7CE: 07      		RLCA
D7CF: 07      		RLCA
D7D0: 07      		RLCA
D7D1: 07      		RLCA
D7D2: 5F      		LD	E,A		;HIGH NYBBLE OF E=NEW HIGH OF E,
              					;  LOW NYBBLE OF E=NEW LOW OF D
D7D3: E60F    		AND	0FH		;GET NEW LOW OF D
D7D5: B2      		OR	D		;MASK IN HIGH OF D
D7D6: 57      		LD	D,A		;NEW HIGH BYTE IN D
D7D7: 7B      		LD	A,E
D7D8: E6F0    		AND	0F0H		;MASK OUT LOW OF E
D7DA: B1      		OR	C		;MASK IN NEW LOW
D7DB: 5F      		LD	E,A		;NEW LOW BYTE IN E
D7DC: 10CE    		DJNZ	HNUM1		;COUNT DOWN
              	;
              	; RETURN FROM HEXNUM
              	;
D7DE:         	HNUM3:
D7DE: EB      		EX	DE,HL		;RETURNED VALUE IN HL
D7DF: 7D      		LD	A,L		;LOW-ORDER BYTE IN A
D7E0: C9      		RET
              	;
              	; PT TO DIRECTORY ENTRY IN TBUFF WHOSE OFFSET IS SPECIFIED BY A AND C
              	;
D7E1:         	DIRPTR:
D7E1: 218000  		LD	HL,TBUFF 	;PT TO TEMP BUFFER
D7E4: 81      		ADD	A,C		;PT TO 1ST BYTE OF DIR ENTRY
D7E5: CD5ED7  		CALL	ADDAH		;PT TO DESIRED BYTE IN DIR ENTRY
D7E8: 7E      		LD	A,(HL)		;GET DESIRED BYTE
D7E9: C9      		RET
              	;
              	; CHECK FOR SPECIFIED DRIVE AND LOG IT IN IF NOT DEFAULT
              	;
D7EA:         	SLOGIN:
D7EA: AF      		XOR	A		;SET FCBDN FOR DEFAULT DRIVE
D7EB: 3298D4  		LD	(FCBDN),A
D7EE: CDFED7  		CALL	COMLOG		;CHECK DRIVE
D7F1: C8      		RET	Z
D7F2: 1807    		JR	DLOG5		;DO LOGIN OTHERWISE
              	;
              	; CHECK FOR SPECIFIED DRIVE AND LOG IN DEFAULT DRIVE IF SPECIFIED<>DEFAULT
              	;
D7F4:         	DLOGIN:
D7F4: CDFED7  		CALL	COMLOG		;CHECK DRIVE
D7F7: C8      		RET	Z		;ABORT IF SAME
D7F8: 3A7ED6  		LD	A,(TDRIVE)	;LOG IN DEFAULT DRIVE
              	;
D7FB: C332D6  	DLOG5:	JP	LOGIN
              	;
              	; ROUTINE COMMON TO BOTH LOGIN ROUTINES; ON EXIT, Z SET MEANS ABORT
              	;
D7FE:         	COMLOG:
D7FF:         	TEMPDR	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D7FE: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TEMPDR
D800: B7      		OR	A		;0=NO
D801: C8      		RET	Z
D802: 3D      		DEC	A		;COMPARE IT AGAINST DEFAULT
D803: 217ED6  		LD	HL,TDRIVE
D806: BE      		CP	(HL)
D807: C9      		RET			;ABORT IF SAME
              	;
              	; EXTRACT TOKEN FROM COMMAND LINE AND PLACE IT INTO FCBDN;
              	;   FORMAT FCBDN FCB IF TOKEN RESEMBLES FILE NAME AND TYPE (FILENAME.TYP);
              	;   ON INPUT, CIBPTR PTS TO CHAR AT WHICH TO START SCAN;
              	;   ON OUTPUT, CIBPTR PTS TO CHAR AT WHICH TO CONTINUE AND ZERO FLAG IS RESET
              	;     IF '?' IS IN TOKEN
              	;
              	; ENTRY POINTS:
              	;	SCANER - LOAD TOKEN INTO FIRST FCB
              	;	SCANX - LOAD TOKEN INTO FCB PTED TO BY HL
              	;
D808:         	SCANER:
D808: 2198D4  		LD	HL,FCBDN 	;POINT TO FCBDN
D80B:         	SCANX:
D80B: AF      		XOR	A		;SET TEMPORRY DRIVE NUMBER TO DEFAULT
D80C: 32FFD7  		LD	(TEMPDR),A
D80F: CD51D7  		CALL	ADVAN		;SKIP TO NON-BLANK OR END OF LINE
D812: ED5358D4		LD	(CIPTR),DE	;SET PTR TO NON-BLANK OR END OF LINE
D816: 1A      		LD	A,(DE)		;END OF LINE?
D817: B7      		OR	A		;0=YES
D818: 280A    		JR	Z,SCAN2
D81A: DE40    		SBC	A,'A'-1		;CONVERT POSSIBLE DRIVE SPEC TO NUMBER
D81C: 47      		LD	B,A		;STORE NUMBER (A:=0, B:=1, ETC) IN B
D81D: 13      		INC	DE		;PT TO NEXT CHAR
D81E: 1A      		LD	A,(DE)		;SEE IF IT IS A COLON (:)
D81F: FE3A    		CP	':'
D821: 2807    		JR	Z,SCAN3		;YES, WE HAVE A DRIVE SPEC
D823: 1B      		DEC	DE		;NO, BACK UP PTR TO FIRST NON-BLANK CHAR
D824:         	SCAN2:
D824: 3A7ED6  		LD	A,(TDRIVE)	;SET 1ST BYTE OF FCBDN AS DEFAULT DRIVE
D827: 77      		LD	(HL),A
D828: 1806    		JR	SCAN4
D82A:         	SCAN3:
D82A: 78      		LD	A,B		;WE HAVE A DRIVE SPEC
D82B: 32FFD7  		LD	(TEMPDR),A	;SET TEMPORRY DRIVE
D82E: 70      		LD	(HL),B		;SET 1ST BYTE OF FCBDN AS SPECIFIED DRIVE
D82F: 13      		INC	DE		;PT TO BYTE AFTER ':'
              	;
              	; EXTRACT FILENAME FROM POSSIBLE FILENAME.TYP
              	;
D830:         	SCAN4:
D830: AF      		XOR	A		;A=0
D831: 32BBD4  		LD	(QMCNT),A	;INIT COUNT OF NUMBER OF QUESTION MARKS IN FCB
D834: 0608    		LD	B,8		;MAX OF 8 CHARS IN FILE NAME
D836: CD58D8  		CALL	SCANF		;FILL FCB FILE NAME
              	;
              	; EXTRACT FILE TYPE FROM POSSIBLE FILENAME.TYP
              	;
D839: 0603    		LD	B,3		;PREPARE TO EXTRACT TYPE
D83B: FE2E    		CP	'.'		;IF (DE) DELIMITER IS A '.', WE HAVE A TYPE
D83D: 2006    		JR	NZ,SCAN15	;FILL FILE TYPE BYTES WITH <SP>
D83F: 13      		INC	DE		;PT TO CHAR IN COMMAND LINE AFTER '.'
D840: CD58D8  		CALL	SCANF		;FILL FCB FILE TYPE
D843: 1803    		JR	SCAN16		;SKIP TO NEXT PROCESSING
D845:         	SCAN15:
D845: CD79D8  		CALL	SCANF4		;SPACE FILL
              	;
              	; FILL IN EX, S1, S2, AND RC WITH ZEROES
              	;
D848:         	SCAN16:
D848: 0604    		LD	B,4		;4 BYTES
D84A:         	SCAN17:
D84A: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
D84B: 3600    		LD	(HL),0
D84D: 10FB    		DJNZ	SCAN17
              	;
              	; SCAN COMPLETE -- DE PTS TO DELIMITER BYTE AFTER TOKEN
              	;
D84F: ED5356D4		LD	(CIBPTR),DE
              	;
              	; SET ZERO FLAG TO INDICATE PRESENCE OF '?' IN FILENAME.TYP
              	;
D853: 3ABBD4  		LD	A,(QMCNT)	;GET NUMBER OF QUESTION MARKS
D856: B7      		OR	A		;SET ZERO FLAG TO INDICATE ANY '?'
D857: C9      		RET
              	;
              	;  SCANF -- SCAN TOKEN PTED TO BY DE FOR A MAX OF B BYTES; PLACE IT INTO
              	;    FILE NAME FIELD PTED TO BY HL; EXPAND AND INTERPRET WILD CARDS OF
              	;    '*' AND '?'; ON EXIT, DE PTS TO TERMINATING DELIMITER
              	;
D858:         	SCANF:
D858: CD34D7  		CALL	SDELM		;DONE IF DELIMITER ENCOUNTERED - <SP> FILL
D85B: 281C    		JR	Z,SCANF4
D85D: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
D85E: FE2A    		CP	'*'		;IS (DE) A WILD CARD?
D860: 2007    		JR	NZ,SCANF1	;CONTINUE IF NOT
D862: 363F    		LD	(HL),'?'	;PLACE '?' IN FCBDN AND DON'T ADVANCE DE IF SO
D864: CD7FD8  		CALL	SCQ		;SCANNER COUNT QUESTION MARKS
D867: 1807    		JR	SCANF2
D869:         	SCANF1:
D869: 77      		LD	(HL),A		;STORE FILENAME CHAR IN FCBDN
D86A: 13      		INC	DE		;PT TO NEXT CHAR IN COMMAND LINE
D86B: FE3F    		CP	'?'		;CHECK FOR QUESTION MARK (WILD)
D86D: CC7FD8  		CALL	Z,SCQ		;SCANNER COUNT QUESTION MARKS
D870:         	SCANF2:
D870: 10E6    		DJNZ	SCANF		;DECREMENT CHAR COUNT UNTIL 8 ELAPSED
D872:         	SCANF3:
D872: CD34D7  		CALL	SDELM		;8 CHARS OR MORE - SKIP UNTIL DELIMITER
D875: C8      		RET	Z		;ZERO FLAG SET IF DELIMITER FOUND
D876: 13      		INC	DE		;PT TO NEXT CHAR IN COMMAND LINE
D877: 18F9    		JR	SCANF3
              	;
              	;  FILL MEMORY POINTED TO BY HL WITH SPACES FOR B BYTES
              	;
D879:         	SCANF4:
D879: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
D87A: 3620    		LD	(HL),' '	;FILL FILENAME PART WITH <SP>
D87C: 10FB    		DJNZ	SCANF4
D87E: C9      		RET
              	;
              	;  INCREMENT QUESTION MARK COUNT FOR SCANNER
              	;    THIS ROUTINE INCREMENTS THE COUNT OF THE NUMBER OF QUESTION MARKS IN
              	;    THE CURRENT FCB ENTRY
              	;
D87F:         	SCQ:
D87F: 3ABBD4  		LD	A,(QMCNT)	;GET COUNT
D882: 3C      		INC	A		;INCREMENT
D883: 32BBD4  		LD	(QMCNT),A	;PUT COUNT
D886: C9      		RET
              	;
              	; CMDTBL (COMMAND TABLE) SCANNER
              	;   ON RETURN, HL PTS TO ADDRESS OF COMMAND IF CPR-RESIDENT
              	;   ON RETURN, ZERO FLAG SET MEANS CPR-RESIDENT COMMAND
              	;
D887:         	CMDSER:
D887: 215FD5  		LD	HL,CMDTBL	;PT TO COMMAND TABLE
              	;
              		IF	SECURE
              		LD	C,NRCMDS
              		LD	A,(WHEEL)	;SEE IF NON-RESTRCTED
              		CP	RESTRCT
              		JR	Z,CMS1		;PASS IF RESTRCTED
              		ENDIF			;SECURE
              	;
D88A: 0E0B    		LD	C,NCMNDS	;SET COMMAND COUNTER
D88C:         	CMS1:
D88C: 1199D4  		LD	DE,FCBFN 	;PT TO STORED COMMAND NAME
D88F: 0604    		LD	B,NCHARS	;NUMBER OF CHARS/COMMAND (8 MAX)
D891:         	CMS2:
D891: 1A      		LD	A,(DE)		;COMPARE AGAINST TABLE ENTRY
D892: BE      		CP	(HL)
D893: 200A    		JR	NZ,CMS3		;NO MATCH
D895: 13      		INC	DE		;PT TO NEXT CHAR
D896: 23      		INC	HL
D897: 10F8    		DJNZ	CMS2		;COUNT DOWN
D899: 1A      		LD	A,(DE)		;NEXT CHAR IN INPUT COMMAND MUST BE <SP>
D89A: FE20    		CP	' '
D89C: 2004    		JR	NZ,CMS4
D89E: C9      		RET			;COMMAND IS CPR-RESIDENT (ZERO FLAG SET)
D89F:         	CMS3:
D89F: 23      		INC	HL		;SKIP TO NEXT COMMAND TABLE ENTRY
D8A0: 10FD    		DJNZ	CMS3
D8A2:         	CMS4:
D8A2: 23      		INC	HL		;SKIP ADDRESS
D8A3: 23      		INC	HL
D8A4: 0D      		DEC	C		;DECREMENT TABLE ENTRY NUMBER
D8A5: 20E5    		JR	NZ,CMS1
D8A7: 0C      		INC	C		;CLEAR ZERO FLAG
D8A8: C9      		RET			;COMMAND IS DISK-RESIDENT (ZERO FLAG CLEAR)
              	;
              	;**** Section 5 ****
              	; CPR-Resident Commands
              	;
              	;
              	;Section 5A
              	;Command: DIR
              	;Function:  To display a directory of the files on disk
              	;Forms:
              	;	DIR <afn>	Displays the DIR files
              	;	DIR <afn> S	Displays the SYS files
              	;	DIR <afn> A	Display both DIR and SYS files
              	;
              		IF	CPRDIR
              	;
D8A9:         	DIR:
D8A9: 3E80    		LD	A,80H		;SET SYSTEM BIT EXAMINATION
D8AB: F5      		PUSH	AF
D8AC: CD08D8  		CALL	SCANER		;EXTRACT POSSIBLE D:FILENAME.TYP TOKEN
D8AF: CDEAD7  		CALL	SLOGIN		;LOG IN DRIVE IF NECESSARY
D8B2: 2199D4  		LD	HL,FCBFN 	;MAKE FCB WILD (ALL '?') IF NO FILENAME.TYP
D8B5: 7E      		LD	A,(HL)		;GET FIRST CHAR OF FILENAME.TYP
D8B6: FE20    		CP	' '		;IF <SP>, ALL WILD
D8B8: CC52D9  		CALL	Z,FILLQ
D8BB: CD51D7  		CALL	ADVAN		;LOOK AT NEXT INPUT CHAR
D8BE: 0600    		LD	B,0		;SYS TOKEN DEFAULT
D8C0: 2816    		JR	Z,DIR2		;JUMP; THERE ISN'T ONE
D8C2: FE41    		CP	SYSFLG		;SYSTEM FLAG SPECIFIER?
D8C4: 2806    		JR	Z,GOTSYS	;GOT SYSTEM SPECIFIER
D8C6: FE53    		CP	SOFLG		;SYS ONLY?
D8C8: 200E    		JR	NZ,DIR2
D8CA: 0680    		LD	B,80H		;FLAG SYS ONLY
D8CC:         	GOTSYS:
D8CC: 13      		INC	DE
D8CD: ED5356D4		LD	(CIBPTR),DE
D8D1: FE53    		CP	SOFLG		;SYS ONLY SPEC?
D8D3: 2803    		JR	Z,DIR2		;THEN LEAVE BIT SPEC UNCHAGNED
D8D5: F1      		POP	AF		;GET FLAG
D8D6: AF      		XOR	A		;SET NO SYSTEM BIT EXAMINATION
D8D7: F5      		PUSH	AF 
D8D8:         	DIR2:
D8D8: F1      		POP	AF		;GET FLAG
D8D9:         	DIR2A:
              					;DROP INTO DIRPR TO PRINT DIRECTORY
              					; THEN RESTART CPR
              		ENDIF			;CPRDIR
              	;
              	; DIRECTORY PRINT ROUTINE; ON ENTRY, MSB OF A IS 1 (80H) IF SYSTEM FILES
              	; EXCLUDED. THIS ROUTINE IS ALSO USED BY ERA.
              	;
D8D9:         	DIRPR:
D8D9: 57      		LD	D,A		;STORE SYSTEM FLAG IN D
D8DA: 1E00    		LD	E,0		;SET COLUMN COUNTER TO ZERO
D8DC: D5      		PUSH	DE		;SAVE COLUMN COUNTER (E) AND SYSTEM FLAG (D)
D8DD: 78      		LD	A,B		;SYS ONLY SPECIFIER
D8DE: 32F9D8  		LD	(SYSTST),A
D8E1: CD49D6  		CALL	SEARF		;SEARCH FOR SPECIFIED FILE (FIRST OCCURRANCE)
D8E4: CC54D5  		CALL	Z,PRNNF		;PRINT NO FILE MSG;REG A NOT CHANGED
              	;
              	; ENTRY SELECTION LOOP; ON ENTRY, A=OFFSET FROM SEARF OR SEARN
              	;
D8E7:         	DIR3:
D8E7: 2867    		JR	Z,DIR11		;DONE IF ZERO FLAG SET
D8E9: 3D      		DEC	A		;ADJUST TO RETURNED VALUE
D8EA: 0F      		RRCA			;CONVERT NUMBER TO OFFSET INTO TBUFF
D8EB: 0F      		RRCA
D8EC: 0F      		RRCA
D8ED: E660    		AND	60H
D8EF: 4F      		LD	C,A		;OFFSET INTO TBUFF IN C (C=OFFSET TO ENTRY)
D8F0: 3E0A    		LD	A,10		;ADD 10 TO PT TO SYSTEM FILE ATTRIBUTE BIT
D8F2: CDE1D7  		CALL	DIRPTR
D8F5: D1      		POP	DE		;GET SYSTEM BIT MASK FROM D
D8F6: D5      		PUSH	DE
D8F7: A2      		AND	D		;MASK FOR SYSTEM BIT
D8F9:         	SYSTST	EQU	$+1		;POINTER TO IN-THE-CODE BUFFER SYSTST
D8F8: FE00    		CP	0
D8FA: 204A    		JR	NZ,DIR10
D8FC: D1      		POP	DE		;GET ENTRY COUNT (=<CR> COUNTER)
D8FD: 7B      		LD	A,E		;ADD 1 TO IT
D8FE: 1C      		INC	E
D8FF: D5      		PUSH	DE		;SAVE IT
              	;
              		IF	TWOCOL
              		AND	01H		;OUTPUT <CRLF> IF 2 ENTRIES PRINTED IN LINE
              		ENDIF			;TWOCOL
              	;
              		IF	TWOCOL
              	        ELSE
D901:         	TWOPOK	EQU	$+1		;FOR APPLE PATCHING
D900: E603    		AND	03H		;OUTPUT <CRLF> IF 4 ENTRIES PRINTED IN LINE
              		ENDIF			;NOT TWOCOL
              	;
D902: F5      		PUSH	AF
D903: 2005    		JR	NZ,DIR4
D905: CDA1D5  		CALL	CRLF		;NEW LINE
D908: 1808    		JR	DIR5
D90A:         	DIR4:
D90A: CD0FD6  		CALL	PRINT
              	;
              		IF	WIDE
D90D: 2020    		DEFM	'  '		;2 SPACES
D90F: 7C      		DEFB	FENCE		;THEN FENCE CHAR
D910: 20A0    		DEFB	' ',' '+80H	;THEN 2 MORE SPACES
              	;	ENDIF
              	;
              	        ELSE
              		DEFB	' '		;SPACE
              		DEFB	FENCE		;THEN FENCE CHAR
              		DEFB	' '+80H		;THEN SPACE
              		ENDIF
              	;
D912:         	DIR5:
D912: 0601    		LD	B,01H		;PT TO 1ST BYTE OF FILE NAME
D914:         	DIR6:
D914: 78      		LD	A,B		;A=OFFSET
D915: CDE1D7  		CALL	DIRPTR		;HL NOW PTS TO 1ST BYTE OF FILE NAME
D918: E67F    		AND	7FH		;MASK OUT MSB
D91A: FE20    		CP	' '		;NO FILE NAME?
D91C: 2013    		JR	NZ,DIR8		;PRINT FILE NAME IF PRESENT
D91E: F1      		POP	AF
D91F: F5      		PUSH	AF
D920: FE03    		CP	03H
D922: 200B    		JR	NZ,DIR7
D924: 3E09    		LD	A,09H		;PT TO 1ST BYTE OF FILE TYPE
D926: CDE1D7  		CALL	DIRPTR		;HL NOW PTS TO 1ST BYTE OF FILE TYPE
D929: E67F    		AND	7FH		;MASK OUT MSB
D92B: FE20    		CP	' '		;NO FILE TYPE?
D92D: 2816    		JR	Z,DIR9		;CONTINUE IF SO
D92F:         	DIR7:
D92F: 3E20    		LD	A,' '		;OUTPUT <SP>
D931:         	DIR8:
D931: CDA8D5  		CALL	CONOUT		;PRINT CHAR
D934: 04      		INC	B		;INCR CHAR COUNT
D935: 78      		LD	A,B
D936: FE0C    		CP	12		;END OF FILENAME.TYP?
D938: 300B    		JR	NC,DIR9		;CONTINUE IF SO
D93A: FE09    		CP	09H		;END IF FILENAME ONLY?
D93C: 20D6    		JR	NZ,DIR6		;PRINT TYP IF SO
D93E: 3E2E    		LD	A,'.'		;PRINT DOT BETWEEN FILE NAME AND TYPE
D940: CDA8D5  		CALL	CONOUT
D943: 18CF    		JR	DIR6
D945:         	DIR9:
D945: F1      		POP	AF
D946:         	DIR10:
D946: CD06D7  		CALL	BREAK		;CHECK FOR ABORT
D949: 2005    		JR	NZ,DIR11
D94B: CD50D6  		CALL	SEARN		;SEARCH FOR NEXT FILE
D94E: 1897    		JR	DIR3		;CONTINUE
D950:         	DIR11:
D950: D1      		POP	DE		;RESTORE STACK
D951: C9      		RET
              	;
              	; FILL FCB @HL WITH '?'
              	;
D952:         	FILLQ:
D952: 060B    		LD	B,11		;NUMBER OF CHARS IN FN & FT
D954:         	FQLP:
D954: 363F    		LD	(HL),'?'	;STORE '?'
D956: 23      		INC	HL
D957: 10FB    		DJNZ	FQLP
D959: C9      		RET
              	;
              	;Section 5B
              	;Command: ERA
              	;Function:  Erase files
              	;Forms:
              	;	ERA <afn>	Erase Specified files and print their names
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
D95A:         	ERA:
D95A: CD08D8  		CALL	SCANER		;PARSE FILE SPECIFICATION
D95D: FE0B    		CP	11		;ALL WILD (ALL FILES = 11 '?')?
D95F: 2012    		JR	NZ,ERA1		;IF NOT, THEN DO ERASES
D961: CD0AD6  		CALL	PRINTC
D964: 416C6C  		DEFM	'All'
D967: BF      		DEFB	'?'+80H
D968: CDB5D5  		CALL	CONIN		;GET REPLY
D96B: FE59    		CP	'Y'		;YES?
D96D:         	ERARJ:
D96D: C2F2D4  		JP	NZ,RESTRT	;RESTART CPR IF NOT
D970: CDA1D5  		CALL	CRLF		;NEW LINE
D973:         	ERA1:
D973: CDEAD7  		CALL	SLOGIN		;LOG IN SELECTED DISK IF ANY
D976: AF      		XOR	A		;PRINT ALL FILES (EXAMINE SYSTEM BIT)
D977: 47      		LD	B,A		;NO SYS-ONLY OPT TO DIRPR
D978: CDD9D8  		CALL	DIRPR		;PRINT DIRECTORY OF ERASED FILES
              	;
              		IF	EPRMPT
              	;
              	;  QUERY USER AFTER FILES ARE SEEN, AND GIVE ONE LAST CHANCE TO BACK OUT
              	;
              		LD	A,E		;HOW MANY FILES DISPLAYED?
              		OR	A
              		JP	Z,RESTRT	;IF NONE, DON'T ASK OR DELETE
              		CALL	PRINTC		;PROMPT
              		DEFM	'Ok'
              		DEFB	'?'+80H
              		CALL	CONIN		;GET REPLY FOLDED
              		CP	'Y'		;YES?
              		JR	NZ,ERARJ	;GET OUT IF NOT
              		ENDIF			;EPRMPT
              	;
D97B: 1198D4  		LD	DE,FCBDN 	;DELETE FILE(S) SPECIFIED
D97E: C35FD6  		JP	DELETE		;RESTART CPR AFTER DELETE
              	;
              		ENDIF			;RAS
              	;
              	;Section 5C
              	;Command: LIST
              	;Function:  Print out specified file on the LST: Device
              	;Forms:
              	;	LIST <ufn>	Print file (NO Paging)
              	;
              		IF	CPRLST
D981:         	LIST:
D981: 3EFF    		LD	A,0FFH		;TURN ON PRINTER FLAG
D983: 1801    		JR	TYPE0
              		ENDIF			;CPRLST
              	;
              	;Section 5D
              	;Command: TYPE
              	;Function:  Print out specified file on the CON: Device
              	;Forms:
              	;	TYPE <ufn>	Print file
              	;	TYPE <ufn> P	Print file with paging flag	
              	;
              		IF	CPRTYP
D985:         	TYPE:
              		ENDIF			;CPRTYP
              	;
              		IF	CPRTYP AND CPRLST
D985: AF      		XOR	A		;TURN OFF PRINTER FLAG
              	;
              	; ENTRY POINT FOR CPR LIST FUNCTION (LIST)
              	;
D986:         	TYPE0:
D986: 32D2D5  		LD	(PRFLG),A	;SET FLAG
              		ENDIF			;CPRTYP AND CPRLST
              	;
              		IF	CPRTYP
D989: CD08D8  		CALL	SCANER		;EXTRACT FILENAME.TYP TOKEN
D98C: C217D7  		JP	NZ,ERROR	;ERROR IF ANY QUESTION MARKS
D98F: CD51D7  		CALL	ADVAN		;GET PGDFLG IF IT'S THERE
D992: 32EFD5  		LD	(PGFLG),A	;SAVE IT AS A FLAG
D995: 2805    		JR	Z,NOSLAS	;JUMP IF INPUT ENDED
D997: 13      		INC	DE		;PUT NEW BUF POINTER
D998: EB      		EX	DE,HL
D999: 2256D4  		LD	(CIBPTR),HL
D99C:         	NOSLAS:
D99C: CDEAD7  		CALL	SLOGIN		;LOG IN SELECTED DISK IF ANY
D99F: CD37D6  		CALL	OPENF		;OPEN SELECTED FILE
D9A2: CA0FDA  		JP	Z,TYPE4		;ABORT IF ERROR
D9A5: CDA1D5  		CALL	CRLF		;NEW LINE
D9A8: 3E17    		LD	A,NLINES-1	;SET LINE COUNT
D9AA: 32B9D4  		LD	(PAGCNT),A
D9AD: 21BAD4  		LD	HL,CHRCNT	;SET CHAR POSITION/COUNT
D9B0: 36FF    		LD	(HL),0FFH	;EMPTY LINE
D9B2: 0600    		LD	B,0		;SET TAB CHAR COUNTER
D9B4:         	TYPE1:
D9B4: 21BAD4  		LD	HL,CHRCNT	;PT TO CHAR POSITION/COUNT
D9B7: 7E      		LD	A,(HL)		;END OF BUFFER?
D9B8: FE80    		CP	80H
D9BA: 3809    		JR	C,TYPE2
D9BC: E5      		PUSH	HL		;READ NEXT BLOCK
D9BD: CDFED5  		CALL	READF
D9C0: E1      		POP	HL
D9C1: 204A    		JR	NZ,TYPE3	;ERROR?
D9C3: AF      		XOR	A		;RESET COUNT
D9C4: 77      		LD	(HL),A
D9C5:         	TYPE2:
D9C5: 34      		INC	(HL)		;INCREMENT CHAR COUNT
D9C6: 218000  		LD	HL,TBUFF 	;PT TO BUFFER
D9C9: CD5ED7  		CALL	ADDAH		;COMPUTE ADDRESS OF NEXT CHAR FROM OFFSET
D9CC: 7E      		LD	A,(HL)		;GET NEXT CHAR
D9CD: E67F    		AND	7FH		;MASK OUT MSB
D9CF: FE1A    		CP	1AH		;END OF FILE (^Z)?
D9D1: C8      		RET	Z		;RESTART CPR IF SO
              	;
              	; OUTPUT CHAR TO CON: OR LST: DEVICE WITH TABULATION
              	;
              		IF	WSTYPE		;WORDSTAR HYPHEN CHECK
D9D2: FE1F    		CP	1FH		;IS CHAR WORDSTAR EOL HYPHEN?
D9D4: 2002    		JR	NZ,NOHYPH	;PASS IF NOT
D9D6: 3E2D    		LD	A,'-'		;YES, MAKE IT A REAL HYPHEN
D9D8:         	NOHYPH:
              		ENDIF			;WSTYPE
              	;
D9D8: FE20    		CP	' '		;IS CHAR CONTROL CODE?
D9DA: 3023    		JR	NC,PRT		;GO BOP CHAR COUNT AND PRINT IF NOT
D9DC: FE0D    		CP	CR		;IS CHAR A CR?
D9DE: 281D    		JR	Z,YESCR		;IF SO, GO ZERO B THEN PRINT
D9E0: FE0C    		CP	FFEED		;FORM FEED?
D9E2: 2819    		JR	Z,YESCR		;MANY PRINTERS RETURN CARRIAGE ON THIS
D9E4: FE0A    		CP	LF		;LINE FEED?
D9E6: 2818    		JR	Z,NOBOP		;PRINT, BUT DON'T BOP B
D9E8: FE07    		CP	BEL		;BELL?
D9EA: 2814    		JR	Z,NOBOP		;GO RING BUT DON'T BOP B
D9EC: FE09    		CP	TAB		;TAB?
D9EE: 2013    		JR	NZ,TYPE2L	;IF NOT, NO OTHER CHOICES, TOSS CONTROL
D9F0:         	LTAB:
D9F0: 3E20    		LD	A,' '		;<SP>
D9F2: CDD0D5  		CALL	LCOUT
D9F5: 04      		INC	B		;INCR POS COUNT
D9F6: 78      		LD	A,B
D9F7: E607    		AND	7
D9F9: 20F5    		JR	NZ,LTAB
D9FB: 1806    		JR	TYPE2L
              	;
D9FD: 06FF    	YESCR:	LD	B,0FFH		;COMBINE WITH INC BELOW TO GET ZERO
              	;
D9FF: 04      	PRT:	INC	B		;INCREMENT CHAR COUNT
DA00: CDD0D5  	NOBOP:	CALL	LCOUT		;PRINT IT
              	;
              	; CONTINUE PROCESSING
              	;
              	;
DA03:         	TYPE2L:
DA03: CD06D7  		CALL	BREAK		;CHECK FOR ABORT
DA06: 28AC    		JR	Z,TYPE1		;CONTINUE IF NO CHAR
DA08: FE03    		CP	'C'-'@' 	;^C?
DA0A: C8      		RET	Z		;RESTART IF SO
DA0B: 18A7    		JR	TYPE1
DA0D:         	TYPE3:
DA0D: 3D      		DEC	A		;NO ERROR?
DA0E: C8      		RET	Z		;RESTART CPR
DA0F:         	TYPE4:
DA0F: C3FADB  		JP	ERRLOG
              		ENDIF			;CPRTYP
              	;
              	;Section 5E
              	;Command: SAVE
              	;Function:  To save the contents of the TPA onto disk as a file
              	;Forms:
              	;	SAVE <Number of Pages> <ufn>
              	;				Save specified number of pages (start at 100H)
              	;				from TPA into specified file; <Number of
              	;				Pages> is in DEC
              	;	SAVE <Number of Sectors> <ufn> S
              	;				Like SAVE above, but numeric argument specifies
              	;				number of sectors rather than pages
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DA12:         	SAVE:
DA12: CD63D7  		CALL	NUMBER		;EXTRACT NUMBER FROM COMMAND LINE
DA15: 6F      		LD	L,A		;HL=PAGE COUNT
DA16: 2600    		LD	H,0
DA18: E5      		PUSH	HL		;SAVE PAGE COUNT
DA19: CD68DA  		CALL	EXTEST		;TEST FOR EXISTENCE OF FILE AND ABORT IF SO
DA1C: 0E16    		LD	C,16H		;BDOS MAKE FILE
DA1E: CD40D6  		CALL	GRBDOS
DA21: E1      		POP	HL		;GET PAGE COUNT
DA22: 2841    		JR	Z,SAVE3		;ERROR?
DA24: AF      		XOR	A		;SET RECORD COUNT FIELD OF NEW FILE'S FCB
DA25: 32B8D4  		LD	(FCBCR),A
DA28: CD51D7  		CALL	ADVAN		;LOOK FOR 'S' FOR SECTOR OPTION
DA2B: 13      		INC	DE		;PT TO AFTER 'S' TOKEN
DA2C: FE53    		CP	SECTFLG
DA2E: 2802    		JR	Z,SAVE0
DA30: 1B      		DEC	DE		;NO 'S' TOKEN, SO BACK UP
DA31: 29      		ADD	HL,HL		;DOUBLE IT FOR HL=SECTOR (128 BYTES) COUNT
DA32:         	SAVE0:
DA32: ED5356D4		LD	(CIBPTR),DE	;SET PTR TO BAD TOKEN OR AFTER GOOD TOKEN
DA36: 110001  		LD	DE,TPA		;PT TO START OF SAVE AREA (TPA)
DA39:         	SAVE1:
DA39: 7C      		LD	A,H		;DONE WITH SAVE?
DA3A: B5      		OR	L		;HL=0 IF SO
DA3B: 2818    		JR	Z,SAVE2
DA3D: 2B      		DEC	HL		;COUNT DOWN ON SECTORS
DA3E: E5      		PUSH	HL		;SAVE PTR TO BLOCK TO SAVE
DA3F: 218000  		LD	HL,128		;128 BYTES PER SECTOR
DA42: 19      		ADD	HL,DE		;PT TO NEXT SECTOR
DA43: E5      		PUSH	HL		;SAVE ON STACK
DA44: CD29D6  		CALL	DMASET		;SET DMA ADDRESS FOR WRITE (ADDRESS IN DE)
DA47: 1198D4  		LD	DE,FCBDN 	;WRITE SECTOR
DA4A: 0E15    		LD	C,15H		;BDOS WRITE SECTOR
DA4C: CD03D6  		CALL	BDOSB		;SAVE BC
DA4F: D1      		POP	DE		;GET PTR TO NEXT SECTOR IN DE
DA50: E1      		POP	HL		;GET SECTOR COUNT
DA51: 28E6    		JR	Z,SAVE1		;CONTINUE IF NO WRITE ERROR
DA53: 1809    		JR	PRNLE		;GO PRINT ERROR AND RESET DMA
DA55:         	SAVE2:
DA55: 1198D4  		LD	DE,FCBDN 	;CLOSE SAVED FILE
DA58: CD45D6  		CALL	CLOSE
DA5B: 3C      		INC	A		;ERROR?
DA5C: 2007    		JR	NZ,SAVE3	;PASS IF OK
              	;
              	;  PRNLE IS ALSO USED BY MEMLOAD FOR TPA FULL ERROR
              	;
DA5E: CD0AD6  	PRNLE:	CALL	PRINTC		;DISK OR MEM FULL
DA61: 46756C  		DEFM	'Ful'
DA64: EC      		DEFB	'l'+80H
              	;
DA65: C326D6  	SAVE3:	JP	DEFDMA		;SET DMA TO 0080 AND RESTART CPR
              					; OR RETURN TO MLERR
              	;
              	; Test File in FCB for existence, ask user to delete if so, and abort if he
              	;  choses not to
              	;
DA68:         	EXTEST:
DA68: CD08D8  		CALL	SCANER		;EXTRACT FILE NAME
DA6B: C217D7  		JP	NZ,ERROR	;'?' IS NOT PERMITTED
DA6E: CDEAD7  		CALL	SLOGIN		;LOG IN SELECTED DISK
DA71: CD49D6  		CALL	SEARF		;LOOK FOR SPECIFIED FILE
DA74: 1198D4  		LD	DE,FCBDN	;PT TO FILE FCB
DA77: C8      		RET	Z		;OK IF NOT FOUND
DA78: D5      		PUSH	DE		;SAVE PTR TO FCB
DA79: CD0AD6  		CALL	PRINTC
DA7C: 44656C65		DEFM	'Delete File'
DA80: 74652046	
DA84: 696C65  	
DA87: BF      		DEFB	'?'+80H
DA88: CDB5D5  		CALL	CONIN		;GET RESPONSE
DA8B: D1      		POP	DE		;GET PTR TO FCB
DA8C: FE59    		CP	'Y'		;KEY ON YES
DA8E: C240D5  		JP	NZ,RSTCPR	;RESTART IF NO, SP RESET EVENTUALLY
DA91: D5      		PUSH	DE		;SAVE PTR TO FCB
DA92: CD5FD6  		CALL	DELETE		;DELETE FILE
DA95: D1      		POP	DE		;GET PTR TO FCB
DA96: C9      		RET
              	;
              		ENDIF			;RAS
              	;
              	;Section 5F
              	;Command: REN
              	;Function:  To change the name of an existing file
              	;Forms:
              	;	REN <New ufn>=<Old ufn>	Perform function
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DA97:         	REN:
DA97: CD68DA  		CALL	EXTEST		;TEST FOR FILE EXISTENCE AND RETURN
              					; IF FILE DOESN'T EXIST; ABORT IF IT DOES
DA9A: 3AFFD7  		LD	A,(TEMPDR)	;SAVE CURRENT DEFAULT DISK
DA9D: F5      		PUSH	AF		;SAVE ON STACK
DA9E:         	REN0:
DA9E: 2198D4  		LD	HL,FCBDN 	;SAVE NEW FILE NAME
DAA1: 11A8D4  		LD	DE,FCBDM
DAA4: 011000  		LD	BC,16		;16 BYTES
DAA7: EDB0    		LDIR
DAA9: CD51D7  		CALL	ADVAN		;ADVANCE CIBPTR
DAAC: FE3D    		CP	'='		;'=' OK
DAAE: 2028    		JR	NZ,REN4
DAB0:         	REN1:
DAB0: EB      		EX	DE,HL		;PT TO CHAR AFTER '=' IN HL
DAB1: 23      		INC	HL
DAB2: 2256D4  		LD	(CIBPTR),HL	;SAVE PTR TO OLD FILE NAME
DAB5: CD08D8  		CALL	SCANER		;EXTRACT FILENAME.TYP TOKEN
DAB8: 201E    		JR	NZ,REN4		;ERROR IF ANY '?'
DABA: F1      		POP	AF		;GET OLD DEFAULT DRIVE
DABB: 47      		LD	B,A		;SAVE IT
DABC: 21FFD7  		LD	HL,TEMPDR	;COMPARE IT AGAINST CURRENT DEFAULT DRIVE
DABF: 7E      		LD	A,(HL)		;MATCH?
DAC0: B7      		OR	A
DAC1: 2804    		JR	Z,REN2
DAC3: B8      		CP	B		;CHECK FOR DRIVE ERROR
DAC4: 70      		LD	(HL),B
DAC5: 2011    		JR	NZ,REN4
DAC7:         	REN2:
DAC7: 70      		LD	(HL),B
DAC8: AF      		XOR	A
DAC9: 3298D4  		LD	(FCBDN),A	;SET DEFAULT DRIVE
DACC: 1198D4  		LD	DE,FCBDN 	;RENAME FILE
DACF: 0E17    		LD	C,17H		;BDOS RENAME FCT
DAD1: CD40D6  		CALL	GRBDOS
DAD4: C0      		RET	NZ
DAD5:         	REN3:
DAD5: CD54D5  		CALL	PRNNF		;PRINT NO FILE MSG
DAD8:         	REN4:
DAD8: C3FADB  		JP	ERRLOG
              	;
              		ENDIF			;RAS
              	;
              	;Section 5G
              	;Command: USER
              	;Function:  Change current USER number
              	;Forms:
              	;	USER <unum>	Select specified user number;<unum> is in DEC
              	;
              		IF	DRUSER		;IF DRIVE/USER CODE OK...
DADB:         	USER:
DADB: CD11D7  		CALL	USRNUM		;EXTRACT USER NUMBER FROM COMMAND LINE
DADE: 5F      		LD	E,A		;PLACE USER NUMBER IN E
DADF: CD6AD6  	SUSER:	CALL	SETUSR		;SET SPECIFIED USER
              		ENDIF			;DRUSER
DAE2:         	RSTJP:
DAE2: C343D5  		JP	RCPRNL		;RESTART CPR
              	;
              	;Section 5H
              	;Command: DFU
              	;Function:  Set the Default User Number for the command/file scanner
              	;	     (MEMLOAD)
              	;	    Note: When under SECURE mode, this will select the second
              	;	          user area to check for programs (normally user 15).
              	;
              	;Forms:
              	;	DFU <unum>	Select Default User Number;<unum> is in DEC
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
DAE5:         	DFU:
DAE5: CD11D7  		CALL	USRNUM		;GET USER NUMBER
DAE8: 32B7DB  		LD	(DFUSR),A	;PUT IT AWAY
DAEB: 18F5    		JR	RSTJP		;RESTART CPR (NO DEFAULT LOGIN)
              		ENDIF			;NOT RAS
              	;
              	;Section 5I
              	;Command: JUMP
              	;Function:  To Call the program (subroutine) at the specified address
              	;	     without loading from disk
              	;Forms:
              	;	JUMP <adr>		Call at <adr>;<adr> is in HEX
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DAED:         	JUMP:
DAED: CDA1D7  		CALL	HEXNUM		;GET LOAD ADDRESS IN HL
DAF0: 1844    		JR	CALLPROG	;PERFORM CALL
              	;
              		ENDIF			;RAS
              	;
              	;Section 5J
              	;Command: GO
              	;Function:  To Call the program in the TPA without loading
              	;	     loading from disk. Same as JUMP 100H, but much
              	;	     more convenient, especially when used with
              	;	     parameters for programs like STAT. Also can be
              	;	     allowed on remote-access systems with no problems.
              	;
              	;Form:
              	;	GO <parameters like for COMMAND>
              	;
              		IF	RAS		;ONLY IF RAS
              	        ELSE
              	;
DAF2: 210001  	GO:	LD	HL,TPA		;Always to TPA
DAF5: 183F    		JR	CALLPROG	;Perform call
              	;
              		ENDIF			;END OF GO FOR RAS
              	;
              	;Section 5K
              	;Command: COM file processing
              	;Function:  To load the specified COM file from disk and execute it
              	;Forms:
              	;	<command>
              	;
DAF7:         	COM:
DAF7: 3A99D4  		LD	A,(FCBFN)	;ANY COMMAND?
DAFA: FE20    		CP	' '		;' ' MEANS COMMAND WAS 'D:' TO SWITCH
DAFC: 201D    		JR	NZ,COM1		;NOT <SP>, SO MUST BE TRANSIENT OR ERROR
DAFE: 3AFFD7  		LD	A,(TEMPDR)	;LOOK FOR DRIVE SPEC
DB01: B7      		OR	A		;IF ZERO, JUST BLANK
DB02: 28DE    		JR	Z,RSTJP
DB04: 3D      		DEC	A		;ADJUST FOR LOG IN
DB05: 327ED6  		LD	(TDRIVE),A	;SET DEFAULT DRIVE
DB08: CD7DD6  		CALL	SETU0D		;SET DRIVE WITH USER 0
DB0B: CD32D6  		CALL	LOGIN		;LOG IN DRIVE
              	;
              		IF	DRUSER		;DRIVE/USER HACKERY OK?
DB0E: CD11D7  		CALL	USRNUM		;GET USER #, IF ANY
DB11: 5F      		LD	E,A		;GET IT READY FOR BDOS
DB12: 3A99D4  		LD	A,(FCBFN)	;SEE IF # SPECIFIED
DB15: FE20    		CP	' '
DB17: 20C6    		JR	NZ,SUSER	;SELECT IF WANTED
              		ENDIF			;DRUSER
              	;
DB19: 18C7    		JR	RSTJP		;RESTART CPR
DB1B:         	COM1:
DB1B: 3AA1D4  		LD	A,(FCBFT)	;FILE TYPE MUST BE BLANK
DB1E: FE20    		CP	' '
DB20: C217D7  		JP	NZ,ERROR
DB23: 2174D4  		LD	HL,COMMSG	;PLACE DEFAULT FILE TYPE (COM) INTO FCB
DB26: 11A1D4  		LD	DE,FCBFT	;COPY INTO FILE TYPE
DB29: 010300  		LD	BC,3		;3 BYTES
DB2C: EDB0    		LDIR
DB2E: 210001  		LD	HL,TPA		;SET EXECUTION/LOAD ADDRESS
DB31: E5      		PUSH	HL		;SAVE FOR EXECUTION
DB32: CDA2DB  		CALL	MEMLOAD		;LOAD MEMORY WITH FILE SPECIFIED IN CMD LINE
              					; (NO RETURN IF ERROR OR TOO BIG)
DB35: E1      		POP	HL		;GET EXECUTION ADDRESS
              	;
              	; CALLPROG IS THE ENTRY POINT FOR THE EXECUTION OF THE LOADED
              	;   PROGRAM. ON ENTRY TO THIS ROUTINE, HL MUST CONTAIN THE EXECUTION
              	;   ADDRESS OF THE PROGRAM (SUBROUTINE) TO EXECUTE
              	;
DB36:         	CALLPROG:
DB36: 2289DB  		LD	(EXECADR),HL	;PERFORM IN-LINE CODE MODIFICATION
DB39: CDF4D7  		CALL	DLOGIN		;LOG IN DEFAULT DRIVE
DB3C: CD08D8  		CALL	SCANER		;SEARCH COMMAND LINE FOR NEXT TOKEN
DB3F: 21FFD7  		LD	HL,TEMPDR	;SAVE PTR TO DRIVE SPEC
DB42: E5      		PUSH	HL
DB43: 7E      		LD	A,(HL)		;SET DRIVE SPEC
DB44: 3298D4  		LD	(FCBDN),A
DB47: 21A8D4  		LD	HL,FCBDN+10H	;PT TO 2ND FILE NAME
DB4A: CD0BD8  		CALL	SCANX		;SCAN FOR IT AND LOAD IT INTO FCBDN+16
DB4D: E1      		POP	HL		;SET UP DRIVE SPECS
DB4E: 7E      		LD	A,(HL)
DB4F: 32A8D4  		LD	(FCBDM),A
DB52: AF      		XOR	A
DB53: 32B8D4  		LD	(FCBCR),A
DB56: 115C00  		LD	DE,TFCB		;COPY TO DEFAULT FCB
DB59: 2198D4  		LD	HL,FCBDN 	;FROM FCBDN
DB5C: 012100  		LD	BC,33		;SET UP DEFAULT FCB
DB5F: EDB0    		LDIR
DB61: 2104D4  		LD	HL,CIBUFF-1
DB64:         	COM4:
DB64: 23      		INC	HL
DB65: 7E      		LD	A,(HL)		;SKIP TO END OF 2ND FILE NAME
DB66: B7      		OR	A		;END OF LINE?
DB67: 2804    		JR	Z,COM5
DB69: FE20    		CP	' '		;END OF TOKEN?
DB6B: 20F7    		JR	NZ,COM4
              	;
              	; LOAD COMMAND LINE INTO TBUFF
              	;
DB6D:         	COM5:
DB6D: 06FF    		LD	B,-1		;SET CHAR COUNT
DB6F: 118000  		LD	DE,TBUFF	;PT TO CHAR POS
DB72: 2B      		DEC	HL
DB73:         	COM6:
DB73: 04      		INC	B		;INCR CHAR COUNT
DB74: 23      		INC	HL		;PT TO NEXT
DB75: 13      		INC	DE
DB76: 7E      		LD	A,(HL)		;COPY COMMAND LINE TO TBUFF
DB77: 12      		LD	(DE),A
DB78: B7      		OR	A		;DONE IF ZERO
DB79: 20F8    		JR	NZ,COM6
              	;
              	; RUN LOADED TRANSIENT PROGRAM
              	;
DB7B:         	COM7:
DB7B: 78      		LD	A,B		;SAVE CHAR COUNT
DB7C: 328000  		LD	(TBUFF),A
DB7F: CDA1D5  		CALL	CRLF		;NEW LINE
DB82: CD26D6  		CALL	DEFDMA		;SET DMA TO 0080
DB85: CD6ED6  		CALL	SETUD		;SET USER/DISK
              	;
              	; EXECUTION (CALL) OF PROGRAM (SUBROUTINE) OCCURS HERE
              	;
DB89:         	EXECADR	EQU	$+1		;CHANGE ADDRESS FOR IN-LINE CODE MODIFICATION
DB88: CD0001  		CALL	TPA		;CALL TRANSIENT
DB8B: CD26D6  		CALL	DEFDMA		;SET DMA TO 0080, IN CASE
              					;PROG CHANGED IT ON US
DB8E: CD7DD6  		CALL	SETU0D		;SET USER 0/DISK
DB91: CD32D6  		CALL	LOGIN		;LOGIN DISK
DB94: C3F2D4  		JP	RESTRT		;RESTART CPR
              	;
              	;Section 5L
              	;Command: GET
              	;Function:  To load the specified file from disk to the specified address
              	;Forms:
              	;	GET <adr> <ufn>	Load the specified file at the specified page;
              	;			<adr> is in HEX
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DB97:         	GET:
DB97: CDA1D7  		CALL	HEXNUM		;GET LOAD ADDRESS IN HL
DB9A: E5      		PUSH	HL		;SAVE ADDRESS
DB9B: CD08D8  		CALL	SCANER		;GET FILE NAME
DB9E: E1      		POP	HL		;RESTORE ADDRESS
DB9F: C217D7  		JP	NZ,ERROR	;MUST BE UNAMBIGUOUS
              	;
              	; FALL THRU TO MEMLOAD
              	;
              		ENDIF			;RAS
              	;
              	; LOAD MEMORY WITH THE FILE WHOSE NAME IS SPECIFIED IN THE COMMAND LINE
              	;   ON INPUT, HL CONTAINS STARTING ADDRESS TO LOAD
              	;
              	;  EXIT BACK TO CALLER IF NO ERROR.  IF COM FILE TOO BIG OR
              	; OTHER ERROR, EXIT DIRECTLY TO MLERR.
              	;
DBA2:         	MEMLOAD:
DBA2: 22D5DB  		LD	(LOADADR),HL	;SET LOAD ADDRESS
DBA5: CD68D6  		CALL	GETUSR		;GET CURRENT USER NUMBER
DBA8: 3264D6  		LD	(TMPUSR),A	;SAVE IT FOR LATER
DBAB: 32B9DB  		LD	(TSELUSR),A	;TEMP USER TO SELECT
              	;
              	;   MLA is a reentry point for a non-standard CP/M Modification
              	; This is the return point for when the .COM (or GET) file is not found the
              	; first time, Drive A: is selected for a second attempt
              	;
DBAE:         	MLA:
DBAE: CDEAD7  		CALL	SLOGIN		;LOG IN SPECIFIED DRIVE IF ANY
DBB1: CD37D6  		CALL	OPENF		;OPEN COMMAND.COM FILE
DBB4: 201E    		JR	NZ,MLA1		;FILE FOUND - LOAD IT
              	;
              		IF	SECURE
              	;
              	;  IF SECURE ENABLED, SEARCH CURRENT DRIVE, CURRENT USER, THEN
              	; IF IN WHEEL MODE, SEARCH UNDER LAST USER SET BY DFU (ORIG
              	; "RESUSR" AFTER WARM BOOT) ON CURRENT DRIVE. IF NOT FOUND, OR
              	; NOT IN WHEEL MODE, THEN SEARCH ON CURRENT DRIVE, UNDER USER
              	; "DEFUSR". IF STILL NOT FOUND, LOOK AT SAME SERIES OF USERS
              	; ON DRIVE A.
              	;
              	DFLAG	EQU	$+1		;MARK IN-THE-CODE VARIABLE
              		LD	A,0		;HAVE WE CHECKED THIS DRIVE ALREADY?
              		OR	A
              		JR	NZ,MLA0		;PASS IF SO TO GO TO DRIVE A:
              		LD	A,(WHEEL)	;RESTRICTED PROGS ALLOWED?
              		CP	RESTRCT
              		JR	Z,MLA00		;PASS IF NOT
              		PUSH	BC		;PUSH BC
              		LD	A,(DFUSR)	;LOAD DEFAULT USER
              		LD	B,A		;PUT IT IN B
              		LD	A,(TSELUSR)	;CHECK CURR USER
              	DFUSR	EQU	$+1		;DEFAULT USER LOCATION
              		CP	RESUSR		;RESTRICTED USER?
              		LD	A,B		;ASSUME NOT
              		POP	BC		;RESTORE BC
              		JR	NZ,SETTSE	;GO TRY IF NOT
              	MLA00:				;SS IF NOT
              	TSELUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
              		LD	A,0		;GET CURR USER
              		SUB	DEFUSR		;IS IT UNRESTRICTED COM AREA?
              		JR	Z,MLA0		;NO MORE CHOICES IF SO
              		LD	(DFLAG),A	;MAKE DFLAG NON-ZERO IF NOT
              		LD	A,DEFUSR	; AND TRY UNRESTRICTED COM AREA
              		ENDIF			;SECURE
              	;
              		IF	SECURE
              	        ELSE
DBB7:         	DFUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
DBB6: 3E00    		LD	A,DEFUSR	;GET DEFAULT USER
DBB9:         	TSELUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
DBB8: FE00    		CP	DEFUSR		;CHECK FOR THE USER AREA..
DBBA: 2809    		JR	Z,MLA0		;..EQUAL DEFAULT, AND JUMP IF SO
              		ENDIF			;NOT SECURE
              	;
DBBC:         	SETTSE:
DBBC: 32B9DB  		LD	(TSELUSR),A	;PUT DOWN NEW ONE
DBBF: 5F      		LD	E,A
DBC0: CD6AD6  		CALL	SETUSR		;GO SET NEW USER NUMBER
DBC3: 18E9    		JR	MLA		;AND TRY AGAIN
              	;
              	; ERROR ROUTINE TO SELECT DRIVE A: IF DEFAULT WAS ORIGINALLY SELECTED
              	;
DBC5:         	MLA0:
DBC5: 21FFD7  		LD	HL,TEMPDR	;GET DRIVE FROM CURRENT COMMAND
DBC8: AF      		XOR	A		;A=0
              	;
              		IF	SECURE
              		LD	(DFLAG),A	;ALLOW A: SEARCH
              		ENDIF			;SECURE
              	;
DBC9: B6      		OR	(HL)
DBCA: C2F7DB  		JP	NZ,MLERR	;ERROR IF ALREADY DISK A:
DBCD: 3601    		LD	(HL),1		;SELECT DRIVE A:
DBCF: 3A64D6  		LD	A,(TMPUSR)	;GO TO 'CURRENT' USER CODE
DBD2: 18E8    		JR	SETTSE
              	;
              	; FILE FOUND -- PROCEED WITH LOAD
              	;
DBD4:         	MLA1:
DBD5:         	LOADADR	EQU	$+1
DBD4: 210001  		LD	HL,TPA
DBD7:         	ML2:
DBD7: 3ED3    		LD	A,ENTRY/256-1	;GET HIGH-ORDER ADR OF JUST BELOW CPR
DBD9: BC      		CP	H		;ARE WE GOING TO OVERWRITE THE CPR?
DBDA: 3818    		JR	C,ML4		;ERROR IF SO
DBDC: E5      		PUSH	HL		;SAVE ADDRESS OF NEXT SECTOR
DBDD: EB      		EX	DE,HL		;... IN DE
DBDE: CD29D6  		CALL	DMASET		;SET DMA ADDRESS FOR LOAD
DBE1: 1198D4  		LD	DE,FCBDN 	;READ NEXT SECTOR
DBE4: CD01D6  		CALL	READ
DBE7: E1      		POP	HL		;GET ADDRESS OF NEXT SECTOR
DBE8: 2006    		JR	NZ,ML3		;READ ERROR OR EOF?
DBEA: 118000  		LD	DE,128		;MOVE 128 BYTES PER SECTOR
DBED: 19      		ADD	HL,DE		;PT TO NEXT SECTOR IN HL
DBEE: 18E7    		JR	ML2
              	;
DBF0:         	ML3:
DBF0: 3D      		DEC	A		;LOAD COMPLETE
DBF1: CA63D6  		JP	Z,RESETUSR	;IF ZERO, OK, GO RESET CORRECT USER #
              					; ON WAY OUT, ELSE FALL THRU TO PRNLE
              	;
              	;  TPA FULL
              	;
DBF4: CD5EDA  	ML4:	CALL	PRNLE		;PRINT MSG AND RESET DEF DMA
              	;
              	; TRANSIENT LOAD ERROR
              	;
DBF7:         	MLERR:
              					;NOTE THAT THERE IS AN EXTRA RETURN ADDRESS ON
              					; THE STACK. IT WILL BE TOSSED WHEN ERROR EXITS
              					; TO RESTRT, WHICH RELOADS SP.
DBF7: CD63D6  		CALL	RESETUSR	;RESET CURRENT USER NUMBER
              					;  RESET MUST BE DONE BEFORE LOGIN
DBFA:         	ERRLOG:
DBFA: CDF4D7  		CALL	DLOGIN		;LOG IN DEFAULT DISK
DBFD: C317D7  		JP	ERROR		;FLAG ERROR
              	;
              	;
              	;Section: 5M
              	;PASS:  Enable wheel mode.
              	;NORM:	Disable wheel mode.
              	;
              	;  Type PASS <password> <cr> to CP/M prompt to enter wheel mode.
              	; This code can be replaced with PST's PASS.ASM which gives many
              	; nice little options like no keyboard echo, etc.
              	;
              		IF	INPASS		;WE WANT TO USE THIS CODE, NOT PASS.COM
              	PASS:
              		LD	HL,PASSWD	;SET UP POINTERS
              		LD	DE,CIBUFF+NCHARS+1
              		LD	B,PRGEND-PASSWD	;B= LENGTH
              	CKPASS:	LD	A,(DE)		;TRIAL PW TO A
              		CP	(HL)		;CHECK FOR MATCH
              		JP	NZ,COM		;NOPE.. LOOK FOR PASS.COM
              		INC	HL		;INCREMENT COUNTER
              		INC	DE
              		DJNZ	CKPASS		;CONTINUE IF MORE
              		LD	A,NOT RESTRCT	;WHEEL = NOT RESTRCT
              	
              	PWOUT:	LD	(WHEEL),A
              		JP	RESTRT
              	;
              	NORM:
              		LD	A,RESTRCT
              		JR	PWOUT
              	;
              	PASSWD:
              		DEFM	'YOURPW'	;YOUR PASSWORD
              	PRGEND	EQU	$		;END OF PASSWORD
              	;
              		ENDIF			;INPASS
              	
              	;        DEFS    4
              	;
              	;; 	IF	($ GE CPRLOC+800H)
              	;; 	.PRINTX	/ZCPR exceeds 2K memory size !!!/
              	;; 	ENDIF
              	;; ;
              	;; 	END
              	
              	#include "../bdos.asm"
              	;**************************************************************
              	;*
              	;*             C P / M   version   2 . 2
              	;*
              	;*   Reconstructed from memory image on February 27, 1981
              	;*
              	;*                by Clark A. Calkins
              	;*
              	;*      Modified to build as single image from source
              	;*
              	;*
              	;*
              	;**************************************************************
              	
              	
              	
              	;
              	;   note that the following six bytes must match those at
              	; (pattrn1) or cp/m will halt. why?
              	;
DC00: 00160000	pattrn2:defb	0,22,0,0,0,0	;(* serial number bytes *).
DC04: 0000    	
              	;
              	;**************************************************************
              	;*
              	;*                    B D O S   E N T R Y
              	;*
              	;**************************************************************
              	;
DC06: C314DC  	fbase:	jp	fbase1
DC09: C33AEA  		jp	boot
              	;
              	;   bdos error table.
              	;
DC0C: 9FDC    	badsctr:defw	error1		;bad sector on read or write.
DC0E: ABDC    	badslct:defw	error2		;bad disk select.
DC10: B1DC    	rodisk:	defw	error3		;disk is read only.
DC12: B7DC    	rofile:	defw	error4		;file is read only.
              	;
              	;   entry into bdos. (de) or (e) are the parameters passed. the
              	; function number desired is in register (c).
              	;
DC14: EB      	fbase1:	ex	de,hl		;save the (de) parameters.
DC15: 224EDF  		ld	(params),hl
DC18: EB      		ex	de,hl
DC19: 7B      		ld	a,e		;and save register (e) in particular.
DC1A: 32E1E9  		ld	(eparam),a
DC1D: 210000  		ld	hl,0
DC20: 2250DF  		ld	(status),hl	;clear return status.
DC23: 39      		add	hl,sp
DC24: 221ADF  		ld	(usrstack),hl	;save users stack pointer.
DC27: 314CDF  		ld	sp,stkarea	;and set our own.
DC2A: AF      		xor	a		;clear auto select storage space.
DC2B: 32EBE9  		ld	(autoflag),a
DC2E: 32E9E9  		ld	(auto),a
DC31: 217FE9  		ld	hl,goback	;set return address.
DC34: E5      		push	hl
DC35: CD63EB  		call	syshook		; see if anyone wants to intercept the call
DC38: 79      		ld	a,c		;get function number.
DC39: FE29    		cp	nfuncts		;valid function number?
DC3B: D0      		ret	nc
DC3C: 4B      		ld	c,e		;keep single register function here.
DC3D: 214DDC  		ld	hl,functns	;now look thru the function table.
DC40: 5F      		ld	e,a
DC41: 1600    		ld	d,0		;(de)=function number.
DC43: 19      		add	hl,de
DC44: 19      		add	hl,de		;(hl)=(start of table)+2*(function number).
DC45: 5E      		ld	e,(hl)
DC46: 23      		inc	hl
DC47: 56      		ld	d,(hl)		;now (de)=address for this function.
DC48: 2A4EDF  		ld	hl,(params)	;retrieve parameters.
DC4B: EB      		ex	de,hl		;now (de) has the original parameters.
DC4C: E9      		jp	(hl)		;execute desired function.
              	;
              	;   bdos function jump table.
              	;
0029:         	nfuncts equ	41		;number of functions in followin table.
              	;
DC4D: 48EAD3DE	functns:defw	wboot,getcon,outcon,getrdr,punch,list,dircio,getiob
DC51: 9BDDD9DE	
DC55: C9EAC5EA	
DC59: DFDEF8DE	
DC5D: FEDE03DF		defw	setiob,prtstr,rdbuff,getcsts,getver,rstdsk,setdsk,openfil
DC61: ECDD09DF	
DC65: 89E88EE8	
DC69: 50E8A7E8	
DC6D: B0E8B6E8		defw	closefil,getfst,getnxt,delfile,readseq,wrtseq,fcreate
DC71: D3E8E2E8	
DC75: EBE8F1E8	
DC79: F7E8    	
DC7B: 00E909E9		defw	renfile,getlog,getcrnt,putdma,getaloc,wrtprtd,getrov,setattr
DC7F: 0FE915E9	
DC83: 1CE937E1	
DC87: 22E928E9	
DC8B: 31E938E9		defw	getparm,getuser,rdrandom,wtrandom,filesize,setran,logoff,rtn
DC8F: 4CE952E9	
DC93: 58E919E8	
DC97: 5EE90FDF	
DC9B: 0FDFA6E9		defw	rtn,wtspecl
              	;
              	;   bdos error message section.
              	;
DC9F: 21D5DC  	error1:	ld	hl,badsec	;bad sector message.
DCA2: CDF0DC  		call	prterr		;print it and get a 1 char responce.
DCA5: FE03    		cp	cntrlc		;re-boot request (control-c)?
DCA7: CA0000  		jp	z,0		;yes.
DCAA: C9      		ret			;no, return to retry i/o function.
              	;
DCAB: 21E0DC  	error2:	ld	hl,badsel	;bad drive selected.
DCAE: C3BADC  		jp	error5
              	;
DCB1: 21ECDC  	error3:	ld	hl,diskro	;disk is read only.
DCB4: C3BADC  		jp	error5
              	;
DCB7: 21E7DC  	error4:	ld	hl,filero	;file is read only.
              	;
DCBA: 3E00    	error5:	ld	a,default
DCBC: 320400  		ld	(tdrive),a
DCBF: CDF0DC  		call	prterr
DCC2: C30000  		jp	0		;always reboot on these errors.
              	;
DCC5: 42646F73	bdoserr:defb	'Bdos Err on '
DCC9: 20457272	
DCCD: 206F6E20	
DCD1: 203A2024	bdosdrv:defb	' : $'
DCD5: 42616420	badsec:	defb	'Bad Sector$'
DCD9: 53656374	
DCDD: 6F7224  	
DCE0: 53656C65	badsel:	defb	'Select$'
DCE4: 637424  	
DCE7: 46696C65	filero:	defb	'File '
DCEB: 20      	
DCEC: 522F4F24	diskro:	defb	'R/O$'
              	;
              	;   print bdos error message.
              	;
DCF0: E5      	prterr:	push	hl		;save second message pointer.
DCF1: CDD4DD  		call	outcrlf		;send (cr)(lf).
DCF4: 3A4DDF  		ld	a,(active)	;get active drive.
DCF7: C641    		add	a,'A'		;make ascii.
DCF9: 32D1DC  		ld	(bdosdrv),a	;and put in message.
DCFC: 01C5DC  		ld	bc,bdoserr	;and print it.
DCFF: CDDEDD  		call	prtmesg
DD02: C1      		pop	bc		;print second message line now.
DD03: CDDEDD  		call	prtmesg
              	;
              	;   get an input character. we will check our 1 character
              	; buffer first. this may be set by the console status routine.
              	;
DD06: 2119DF  	getchar:ld	hl,charbuf	;check character buffer.
DD09: 7E      		ld	a,(hl)		;anything present already?
DD0A: 3600    		ld	(hl),0		;...either case clear it.
DD0C: B7      		or	a
DD0D: C0      		ret	nz		;yes, use it.
DD0E: C3ADEA  		jp	conin		;nope, go get a character responce.
              	;
              	;   input and echo a character.
              	;
DD11: CD06DD  	getecho:call	getchar		;input a character.
DD14: CD1FDD  		call	chkchar		;carriage control?
DD17: D8      		ret	c		;no, a regular control char so don't echo.
DD18: F5      		push	af		;ok, save character now.
DD19: 4F      		ld	c,a
DD1A: CD9BDD  		call	outcon		;and echo it.
DD1D: F1      		pop	af		;get character and return.
DD1E: C9      		ret	
              	;
              	;   check character in (a). set the zero flag on a carriage
              	; control character and the carry flag on any other control
              	; character.
              	;
DD1F: FE0D    	chkchar:cp	cr		;check for carriage return, line feed, backspace,
DD21: C8      		ret	z		;or a tab.
DD22: FE0A    		cp	lf
DD24: C8      		ret	z
DD25: FE09    		cp	tab
DD27: C8      		ret	z
DD28: FE08    		cp	bs
DD2A: C8      		ret	z
DD2B: FE20    		cp	' '		;other control char? set carry flag.
DD2D: C9      		ret	
              	;
              	;   check the console during output. halt on a control-s, then
              	; reboot on a control-c. if anything else is ready, clear the
              	; zero flag and return (the calling routine may want to do
              	; something).
              	;
DD2E: 3A19DF  	ckconsol: ld	a,(charbuf)	;check buffer.
DD31: B7      		or	a		;if anything, just return without checking.
DD32: C250DD  		jp	nz,ckcon2
DD35: CDA2EA  		call	const		;nothing in buffer. check console.
DD38: E601    		and	01h		;look at bit 0.
DD3A: C8      		ret	z		;return if nothing.
DD3B: CDADEA  		call	conin		;ok, get it.
DD3E: FE13    		cp	cntrls		;if not control-s, return with zero cleared.
DD40: C24DDD  		jp	nz,ckcon1
DD43: CDADEA  		call	conin		;halt processing until another char
DD46: FE03    		cp	cntrlc		;is typed. control-c?
DD48: CA0000  		jp	z,0		;yes, reboot now.
DD4B: AF      		xor	a		;no, just pretend nothing was ever ready.
DD4C: C9      		ret	
DD4D: 3219DF  	ckcon1:	ld	(charbuf),a	;save character in buffer for later processing.
DD50: 3E01    	ckcon2:	ld	a,1		;set (a) to non zero to mean something is ready.
DD52: C9      		ret	
              	;
              	;   output (c) to the screen. if the printer flip-flop flag
              	; is set, we will send character to printer also. the console
              	; will be checked in the process.
              	;
DD53: 3A15DF  	outchar:ld	a,(outflag)	;check output flag.
DD56: B7      		or	a		;anything and we won't generate output.
DD57: C26DDD  		jp	nz,outchr1
DD5A: C5      		push	bc
DD5B: CD2EDD  		call	ckconsol	;check console (we don't care whats there).
DD5E: C1      		pop	bc
DD5F: C5      		push	bc
DD60: CDB9EA  		call	conout		;output (c) to the screen.
DD63: C1      		pop	bc
DD64: C5      		push	bc
DD65: 3A18DF  		ld	a,(prtflag)	;check printer flip-flop flag.
DD68: B7      		or	a
DD69: C4C5EA  		call	nz,list		;print it also if non-zero.
DD6C: C1      		pop	bc
DD6D: 79      	outchr1:ld	a,c		;update cursors position.
DD6E: 2117DF  		ld	hl,curpos
DD71: FE7F    		cp	del		;rubouts don't do anything here.
DD73: C8      		ret	z
DD74: 34      		inc	(hl)		;bump line pointer.
DD75: FE20    		cp	' '		;and return if a normal character.
DD77: D0      		ret	nc
DD78: 35      		dec	(hl)		;restore and check for the start of the line.
DD79: 7E      		ld	a,(hl)
DD7A: B7      		or	a
DD7B: C8      		ret	z		;ingnore control characters at the start of the line.
DD7C: 79      		ld	a,c
DD7D: FE08    		cp	bs		;is it a backspace?
DD7F: C284DD  		jp	nz,outchr2
DD82: 35      		dec	(hl)		;yes, backup pointer.
DD83: C9      		ret	
DD84: FE0A    	outchr2:cp	lf		;is it a line feed?
DD86: C0      		ret	nz		;ignore anything else.
DD87: 3600    		ld	(hl),0		;reset pointer to start of line.
DD89: C9      		ret	
              	;
              	;   output (a) to the screen. if it is a control character
              	; (other than carriage control), use ^x format.
              	;
DD8A: 79      	showit:	ld	a,c
DD8B: CD1FDD  		call	chkchar		;check character.
DD8E: D29BDD  		jp	nc,outcon	;not a control, use normal output.
DD91: F5      		push	af
DD92: 0E5E    		ld	c,'^'		;for a control character, preceed it with '^'.
DD94: CD53DD  		call	outchar
DD97: F1      		pop	af
DD98: F640    		or	'@'		;and then use the letter equivelant.
DD9A: 4F      		ld	c,a
              	;
              	;   function to output (c) to the console device and expand tabs
              	; if necessary.
              	;
DD9B: 79      	outcon:	ld	a,c
DD9C: FE09    		cp	tab		;is it a tab?
DD9E: C253DD  		jp	nz,outchar	;use regular output.
DDA1: 0E20    	outcon1:ld	c,' '		;yes it is, use spaces instead.
DDA3: CD53DD  		call	outchar
DDA6: 3A17DF  		ld	a,(curpos)	;go until the cursor is at a multiple of 8
              	
DDA9: E607    		and	07h		;position.
DDAB: C2A1DD  		jp	nz,outcon1
DDAE: C9      		ret	
              	;
              	;   echo a backspace character. erase the prevoius character
              	; on the screen.
              	;
DDAF: CDB7DD  	backup:	call	backup1		;backup the screen 1 place.
DDB2: 0E20    		ld	c,' '		;then blank that character.
DDB4: CDB9EA  		call	conout
DDB7: 0E08    	backup1:ld	c,bs		;then back space once more.
DDB9: C3B9EA  		jp	conout
              	;
              	;   signal a deleted line. print a '#' at the end and start
              	; over.
              	;
DDBC: 0E23    	newline:ld	c,'#'
DDBE: CD53DD  		call	outchar		;print this.
DDC1: CDD4DD  		call	outcrlf		;start new line.
DDC4: 3A17DF  	newln1:	ld	a,(curpos)	;move the cursor to the starting position.
DDC7: 2116DF  		ld	hl,starting
DDCA: BE      		cp	(hl)
DDCB: D0      		ret	nc		;there yet?
DDCC: 0E20    		ld	c,' '
DDCE: CD53DD  		call	outchar		;nope, keep going.
DDD1: C3C4DD  		jp	newln1
              	;
              	;   output a (cr) (lf) to the console device (screen).
              	;
DDD4: 0E0D    	outcrlf:ld	c,cr
DDD6: CD53DD  		call	outchar
DDD9: 0E0A    		ld	c,lf
DDDB: C353DD  		jp	outchar
              	;
              	;   print message pointed to by (bc). it will end with a '$'.
              	;
DDDE: 0A      	prtmesg:ld	a,(bc)		;check for terminating character.
DDDF: FE24    		cp	'$'
DDE1: C8      		ret	z
DDE2: 03      		inc	bc
DDE3: C5      		push	bc		;otherwise, bump pointer and print it.
DDE4: 4F      		ld	c,a
DDE5: CD9BDD  		call	outcon
DDE8: C1      		pop	bc
DDE9: C3DEDD  		jp	prtmesg
              	;
              	;   function to execute a buffered read.
              	;
DDEC: 3A17DF  	rdbuff:	ld	a,(curpos)	;use present location as starting one.
DDEF: 3216DF  		ld	(starting),a
DDF2: 2A4EDF  		ld	hl,(params)	;get the maximum buffer space.
DDF5: 4E      		ld	c,(hl)
DDF6: 23      		inc	hl		;point to first available space.
DDF7: E5      		push	hl		;and save.
DDF8: 0600    		ld	b,0		;keep a character count.
DDFA: C5      	rdbuf1:	push	bc
DDFB: E5      		push	hl
DDFC: CD06DD  	rdbuf2:	call	getchar		;get the next input character.
DDFF: E67F    		and	7fh		;strip bit 7.
DE01: E1      		pop	hl		;reset registers.
DE02: C1      		pop	bc
DE03: FE0D    		cp	cr		;en of the line?
DE05: CACCDE  		jp	z,rdbuf17
DE08: FE0A    		cp	lf
DE0A: CACCDE  		jp	z,rdbuf17
DE0D: FE08    		cp	bs		;how about a backspace?
DE0F: C221DE  		jp	nz,rdbuf3
DE12: 78      		ld	a,b		;yes, but ignore at the beginning of the line.
DE13: B7      		or	a
DE14: CAFADD  		jp	z,rdbuf1
DE17: 05      		dec	b		;ok, update counter.
DE18: 3A17DF  		ld	a,(curpos)	;if we backspace to the start of the line,
DE1B: 3215DF  		ld	(outflag),a	;treat as a cancel (control-x).
DE1E: C37BDE  		jp	rdbuf10
DE21: FE7F    	rdbuf3:	cp	del		;user typed a rubout?
DE23: C231DE  		jp	nz,rdbuf4
DE26: 78      		ld	a,b		;ignore at the start of the line.
DE27: B7      		or	a
DE28: CAFADD  		jp	z,rdbuf1
DE2B: 7E      		ld	a,(hl)		;ok, echo the prevoius character.
DE2C: 05      		dec	b		;and reset pointers (counters).
DE2D: 2B      		dec	hl
DE2E: C3B4DE  		jp	rdbuf15
DE31: FE05    	rdbuf4:	cp	cntrle		;physical end of line?
DE33: C242DE  		jp	nz,rdbuf5
DE36: C5      		push	bc		;yes, do it.
DE37: E5      		push	hl
DE38: CDD4DD  		call	outcrlf
DE3B: AF      		xor	a		;and update starting position.
DE3C: 3216DF  		ld	(starting),a
DE3F: C3FCDD  		jp	rdbuf2
DE42: FE10    	rdbuf5:	cp	cntrlp		;control-p?
DE44: C253DE  		jp	nz,rdbuf6
DE47: E5      		push	hl		;yes, flip the print flag filp-flop byte.
DE48: 2118DF  		ld	hl,prtflag
DE4B: 3E01    		ld	a,1		;prtflag=1-prtflag
DE4D: 96      		sub	(hl)
DE4E: 77      		ld	(hl),a
DE4F: E1      		pop	hl
DE50: C3FADD  		jp	rdbuf1
DE53: FE18    	rdbuf6:	cp	cntrlx		;control-x (cancel)?
DE55: C26ADE  		jp	nz,rdbuf8
DE58: E1      		pop	hl
DE59: 3A16DF  	rdbuf7:	ld	a,(starting)	;yes, backup the cursor to here.
DE5C: 2117DF  		ld	hl,curpos
DE5F: BE      		cp	(hl)
DE60: D2ECDD  		jp	nc,rdbuff	;done yet?
DE63: 35      		dec	(hl)		;no, decrement pointer and output back up one space.
DE64: CDAFDD  		call	backup
DE67: C359DE  		jp	rdbuf7
DE6A: FE15    	rdbuf8:	cp	cntrlu		;cntrol-u (cancel line)?
DE6C: C276DE  		jp	nz,rdbuf9
DE6F: CDBCDD  		call	newline		;start a new line.
DE72: E1      		pop	hl
DE73: C3ECDD  		jp	rdbuff
DE76: FE12    	rdbuf9:	cp	cntrlr		;control-r?
DE78: C2B1DE  		jp	nz,rdbuf14
DE7B: C5      	rdbuf10:push	bc		;yes, start a new line and retype the old one.
DE7C: CDBCDD  		call	newline
DE7F: C1      		pop	bc
DE80: E1      		pop	hl
DE81: E5      		push	hl
DE82: C5      		push	bc
DE83: 78      	rdbuf11:ld	a,b		;done whole line yet?
DE84: B7      		or	a
DE85: CA95DE  		jp	z,rdbuf12
DE88: 23      		inc	hl		;nope, get next character.
DE89: 4E      		ld	c,(hl)
DE8A: 05      		dec	b		;count it.
DE8B: C5      		push	bc
DE8C: E5      		push	hl
DE8D: CD8ADD  		call	showit		;and display it.
DE90: E1      		pop	hl
DE91: C1      		pop	bc
DE92: C383DE  		jp	rdbuf11
DE95: E5      	rdbuf12:push	hl		;done with line. if we were displaying
DE96: 3A15DF  		ld	a,(outflag)	;then update cursor position.
DE99: B7      		or	a
DE9A: CAFCDD  		jp	z,rdbuf2
DE9D: 2117DF  		ld	hl,curpos	;because this line is shorter, we must
DEA0: 96      		sub	(hl)		;back up the cursor (not the screen however)
DEA1: 3215DF  		ld	(outflag),a	;some number of positions.
DEA4: CDAFDD  	rdbuf13:call	backup		;note that as long as (outflag) is non
DEA7: 2115DF  		ld	hl,outflag	;zero, the screen will not be changed.
DEAA: 35      		dec	(hl)
DEAB: C2A4DE  		jp	nz,rdbuf13
DEAE: C3FCDD  		jp	rdbuf2		;now just get the next character.
              	;
              	;   just a normal character, put this in our buffer and echo.
              	;
DEB1: 23      	rdbuf14:inc	hl
DEB2: 77      		ld	(hl),a		;store character.
DEB3: 04      		inc	b		;and count it.
DEB4: C5      	rdbuf15:push	bc
DEB5: E5      		push	hl
DEB6: 4F      		ld	c,a		;echo it now.
DEB7: CD8ADD  		call	showit
DEBA: E1      		pop	hl
DEBB: C1      		pop	bc
DEBC: 7E      		ld	a,(hl)		;was it an abort request?
DEBD: FE03    		cp	cntrlc		;control-c abort?
DEBF: 78      		ld	a,b
DEC0: C2C8DE  		jp	nz,rdbuf16
DEC3: FE01    		cp	1		;only if at start of line.
DEC5: CA0000  		jp	z,0
DEC8: B9      	rdbuf16:cp	c		;nope, have we filled the buffer?
DEC9: DAFADD  		jp	c,rdbuf1
DECC: E1      	rdbuf17:pop	hl		;yes end the line and return.
DECD: 70      		ld	(hl),b
DECE: 0E0D    		ld	c,cr
DED0: C353DD  		jp	outchar		;output (cr) and return.
              	;
              	;   function to get a character from the console device.
              	;
DED3: CD11DD  	getcon:	call	getecho		;get and echo.
DED6: C30CDF  		jp	setstat		;save status and return.
              	;
              	;   function to get a character from the tape reader device.
              	;
DED9: CDCDEA  	getrdr:	call	reader		;get a character from reader, set status and return.
DEDC: C30CDF  		jp	setstat
              	;
              	;  function to perform direct console i/o. if (c) contains (ff)
              	; then this is an input request. if (c) contains (fe) then
              	; this is a status request. otherwise we are to output (c).
              	;
DEDF: 79      	dircio:	ld	a,c		;test for (ff).
DEE0: 3C      		inc	a
DEE1: CAEBDE  		jp	z,dirc1
DEE4: 3C      		inc	a		;test for (fe).
DEE5: CAA2EA  		jp	z,const
DEE8: C3B9EA  		jp	conout		;just output (c).
DEEB: CDA2EA  	dirc1:	call	const		;this is an input request.
DEEE: B7      		or	a
DEEF: CA9CE9  		jp	z,goback1	;not ready? just return (directly).
DEF2: CDADEA  		call	conin		;yes, get character.
DEF5: C30CDF  		jp	setstat		;set status and return.
              	;
              	;   function to return the i/o byte.
              	;
DEF8: 3A0300  	getiob:	ld	a,(iobyte)
DEFB: C30CDF  		jp	setstat
              	;
              	;   function to set the i/o byte.
              	;
DEFE: 210300  	setiob:	ld	hl,iobyte
DF01: 71      		ld	(hl),c
DF02: C9      		ret	
              	;
              	;   function to print the character string pointed to by (de)
              	; on the console device. the string ends with a '$'.
              	;
DF03: EB      	prtstr:	ex	de,hl
DF04: 4D      		ld	c,l
DF05: 44      		ld	b,h		;now (bc) points to it.
DF06: C3DEDD  		jp	prtmesg
              	;
              	;   function to interigate the console device.
              	;
DF09: CD2EDD  	getcsts:call	ckconsol
              	;
              	;   get here to set the status and return to the cleanup
              	; section. then back to the user.
              	;
DF0C: 3250DF  	setstat:ld	(status),a
DF0F: C9      	rtn:	ret	
              	;
              	;   set the status to 1 (read or write error code).
              	;
DF10: 3E01    	ioerr1:	ld	a,1
DF12: C30CDF  		jp	setstat
              	;
DF15: 00      	outflag:defb	0		;output flag (non zero means no output).
DF16: 02      	starting: defb	2		;starting position for cursor.
DF17: 00      	curpos:	defb	0		;cursor position (0=start of line).
DF18: 00      	prtflag:defb	0		;printer flag (control-p toggle). list if non zero.
DF19: 00      	charbuf:defb	0		;single input character buffer.
              	;
              	;   stack area for bdos calls.
              	;
DF1A: 0000    	usrstack: defw	0		;save users stack pointer here.
              	;
DF1C: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DF20: 00...   	
DF34: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DF38: 00...   	
DF4C:         	stkarea equ	$		;end of stack area.
              	;
DF4C: 00      	userno:	defb	0		;current user number.
DF4D: 00      	active:	defb	0		;currently active drive.
DF4E: 0000    	params:	defw	0		;save (de) parameters here on entry.
DF50: 0000    	status:	defw	0		;status returned from bdos function.
              	;
              	;   select error occured, jump to error routine.
              	;
DF52: 210EDC  	slcterr:ld	hl,badslct
              	;
              	;   jump to (hl) indirectly.
              	;
DF55: 5E      	jumphl:	ld	e,(hl)
DF56: 23      		inc	hl
DF57: 56      		ld	d,(hl)		;now (de) contain the desired address.
DF58: EB      		ex	de,hl
DF59: E9      		jp	(hl)
              	;
              	;   block move. (de) to (hl), (c) bytes total.
              	;
DF5A: 0C      	de2hl:	inc	c		;is count down to zero?
DF5B: 0D      	de2hl1:	dec	c
DF5C: C8      		ret	z		;yes, we are done.
DF5D: 1A      		ld	a,(de)		;no, move one more byte.
DF5E: 77      		ld	(hl),a
DF5F: 13      		inc	de
DF60: 23      		inc	hl
DF61: C35BDF  		jp	de2hl1		;and repeat.
              	;
              	;   select the desired drive.
              	;
DF64: 3A4DDF  	select:	ld	a,(active)	;get active disk.
DF67: 4F      		ld	c,a
DF68: CDE0EA  		call	seldsk		;select it.
DF6B: 7C      		ld	a,h		;valid drive?
DF6C: B5      		or	l		;valid drive?
DF6D: C8      		ret	z		;return if not.
              	;
              	;   here, the bios returned the address of the parameter block
              	; in (hl). we will extract the necessary pointers and save them.
              	;
DF6E: 5E      		ld	e,(hl)		;yes, get address of translation table into (de).
DF6F: 23      		inc	hl
DF70: 56      		ld	d,(hl)
DF71: 23      		inc	hl
DF72: 22BEE9  		ld	(scratch1),hl	;save pointers to scratch areas.
DF75: 23      		inc	hl
DF76: 23      		inc	hl
DF77: 22C0E9  		ld	(scratch2),hl	;ditto.
DF7A: 23      		inc	hl
DF7B: 23      		inc	hl
DF7C: 22C2E9  		ld	(scratch3),hl	;ditto.
DF7F: 23      		inc	hl
DF80: 23      		inc	hl
DF81: EB      		ex	de,hl		;now save the translation table address.
DF82: 22DBE9  		ld	(xlate),hl
DF85: 21C4E9  		ld	hl,dirbuf	;put the next 8 bytes here.
DF88: 0E08    		ld	c,8		;they consist of the directory buffer
DF8A: CD5ADF  		call	de2hl		;pointer, parameter block pointer,
DF8D: 2AC6E9  		ld	hl,(diskpb)	;check and allocation vectors.
DF90: EB      		ex	de,hl
DF91: 21CCE9  		ld	hl,sectors	;move parameter block into our ram.
DF94: 0E0F    		ld	c,15		;it is 15 bytes long.
DF96: CD5ADF  		call	de2hl
DF99: 2AD1E9  		ld	hl,(dsksize)	;check disk size.
DF9C: 7C      		ld	a,h		;more than 256 blocks on this?
DF9D: 21E8E9  		ld	hl,bigdisk
DFA0: 36FF    		ld	(hl),0ffh	;set to samll.
DFA2: B7      		or	a
DFA3: CAA8DF  		jp	z,select1
DFA6: 3600    		ld	(hl),0		;wrong, set to large.
DFA8: 3EFF    	select1:ld	a,0ffh		;clear the zero flag.
DFAA: B7      		or	a
DFAB: C9      		ret	
              	;
              	;   routine to home the disk track head and clear pointers.
              	;
DFAC: CDDBEA  	homedrv:call	home		;home the head.
DFAF: AF      		xor	a
DFB0: 2AC0E9  		ld	hl,(scratch2)	;set our track pointer also.
DFB3: 77      		ld	(hl),a
DFB4: 23      		inc	hl
DFB5: 77      		ld	(hl),a
DFB6: 2AC2E9  		ld	hl,(scratch3)	;and our sector pointer.
DFB9: 77      		ld	(hl),a
DFBA: 23      		inc	hl
DFBB: 77      		ld	(hl),a
DFBC: C9      		ret	
              	;
              	;   do the actual disk read and check the error return status.
              	;
DFBD: CD0CEB  	doread:	call	read
DFC0: C3C6DF  		jp	ioret
              	;
              	;   do the actual disk write and handle any bios error.
              	;
DFC3: CD10EB  	dowrite:call	write
DFC6: B7      	ioret:	or	a
DFC7: C8      		ret	z		;return unless an error occured.
DFC8: 210CDC  		ld	hl,badsctr	;bad read/write on this sector.
DFCB: C355DF  		jp	jumphl
              	;
              	;   routine to select the track and sector that the desired
              	; block number falls in.
              	;
DFCE: 2AF5E9  	trksec:	ld	hl,(filepos)	;get position of last accessed file
DFD1: 0E02    		ld	c,2		;in directory and compute sector #.
DFD3: CDF5E0  		call	shiftr		;sector #=file-position/4.
DFD6: 22F0E9  		ld	(blknmbr),hl	;save this as the block number of interest.
DFD9: 22F7E9  		ld	(cksumtbl),hl	;what's it doing here too?
              	;
              	;   if the sector number has already been set (blknmbr), enter
              	; at this point.
              	;
DFDC: 21F0E9  	trksec1:ld	hl,blknmbr
DFDF: 4E      		ld	c,(hl)		;move sector number into (bc).
DFE0: 23      		inc	hl
DFE1: 46      		ld	b,(hl)
DFE2: 2AC2E9  		ld	hl,(scratch3)	;get current sector number and
DFE5: 5E      		ld	e,(hl)		;move this into (de).
DFE6: 23      		inc	hl
DFE7: 56      		ld	d,(hl)
DFE8: 2AC0E9  		ld	hl,(scratch2)	;get current track number.
DFEB: 7E      		ld	a,(hl)		;and this into (hl).
DFEC: 23      		inc	hl
DFED: 66      		ld	h,(hl)
DFEE: 6F      		ld	l,a
DFEF: 79      	trksec2:ld	a,c		;is desired sector before current one?
DFF0: 93      		sub	e
DFF1: 78      		ld	a,b
DFF2: 9A      		sbc	a,d
DFF3: D205E0  		jp	nc,trksec3
DFF6: E5      		push	hl		;yes, decrement sectors by one track.
DFF7: 2ACCE9  		ld	hl,(sectors)	;get sectors per track.
DFFA: 7B      		ld	a,e
DFFB: 95      		sub	l
DFFC: 5F      		ld	e,a
DFFD: 7A      		ld	a,d
DFFE: 9C      		sbc	a,h
DFFF: 57      		ld	d,a		;now we have backed up one full track.
E000: E1      		pop	hl
E001: 2B      		dec	hl		;adjust track counter.
E002: C3EFDF  		jp	trksec2
E005: E5      	trksec3:push	hl		;desired sector is after current one.
E006: 2ACCE9  		ld	hl,(sectors)	;get sectors per track.
E009: 19      		add	hl,de		;bump sector pointer to next track.
E00A: DA1AE0  		jp	c,trksec4
E00D: 79      		ld	a,c		;is desired sector now before current one?
E00E: 95      		sub	l
E00F: 78      		ld	a,b
E010: 9C      		sbc	a,h
E011: DA1AE0  		jp	c,trksec4
E014: EB      		ex	de,hl		;not yes, increment track counter
E015: E1      		pop	hl		;and continue until it is.
E016: 23      		inc	hl
E017: C305E0  		jp	trksec3
              	;
              	;   here we have determined the track number that contains the
              	; desired sector.
              	;
E01A: E1      	trksec4:pop	hl		;get track number (hl).
E01B: C5      		push	bc
E01C: D5      		push	de
E01D: E5      		push	hl
E01E: EB      		ex	de,hl
E01F: 2AD9E9  		ld	hl,(offset)	;adjust for first track offset.
E022: 19      		add	hl,de
E023: 44      		ld	b,h
E024: 4D      		ld	c,l
E025: CDFEEA  		call	settrk		;select this track.
E028: D1      		pop	de		;reset current track pointer.
E029: 2AC0E9  		ld	hl,(scratch2)
E02C: 73      		ld	(hl),e
E02D: 23      		inc	hl
E02E: 72      		ld	(hl),d
E02F: D1      		pop	de
E030: 2AC2E9  		ld	hl,(scratch3)	;reset the first sector on this track.
E033: 73      		ld	(hl),e
E034: 23      		inc	hl
E035: 72      		ld	(hl),d
E036: C1      		pop	bc
E037: 79      		ld	a,c		;now subtract the desired one.
E038: 93      		sub	e		;to make it relative (1-# sectors/track).
E039: 4F      		ld	c,a
E03A: 78      		ld	a,b
E03B: 9A      		sbc	a,d
E03C: 47      		ld	b,a
E03D: 2ADBE9  		ld	hl,(xlate)	;translate this sector according to this table.
E040: EB      		ex	de,hl
E041: CD17EB  		call	sectrn		;let the bios translate it.
E044: 4D      		ld	c,l
E045: 44      		ld	b,h
E046: C302EB  		jp	setsec		;and select it.
              	;
              	;   compute block number from record number (savnrec) and
              	; extent number (savext).
              	;
E049: 21CEE9  	getblock: ld	hl,blkshft	;get logical to physical conversion.
E04C: 4E      		ld	c,(hl)		;note that this is base 2 log of ratio.
E04D: 3AEEE9  		ld	a,(savnrec)	;get record number.
E050: B7      	getblk1:or	a		;compute (a)=(a)/2^blkshft.
E051: 1F      		rra	
E052: 0D      		dec	c
E053: C250E0  		jp	nz,getblk1
E056: 47      		ld	b,a		;save result in (b).
E057: 3E08    		ld	a,8
E059: 96      		sub	(hl)
E05A: 4F      		ld	c,a		;compute (c)=8-blkshft.
E05B: 3AEDE9  		ld	a,(savext)
E05E: 0D      	getblk2:dec	c		;compute (a)=savext*2^(8-blkshft).
E05F: CA67E0  		jp	z,getblk3
E062: B7      		or	a
E063: 17      		rla	
E064: C35EE0  		jp	getblk2
E067: 80      	getblk3:add	a,b
E068: C9      		ret	
              	;
              	;   routine to extract the (bc) block byte from the fcb pointed
              	; to by (params). if this is a big-disk, then these are 16 bit
              	; block numbers, else they are 8 bit numbers.
              	; number is returned in (hl).
              	;
E069: 2A4EDF  	extblk:	ld	hl,(params)	;get fcb address.
E06C: 111000  		ld	de,16		;block numbers start 16 bytes into fcb.
E06F: 19      		add	hl,de
E070: 09      		add	hl,bc
E071: 3AE8E9  		ld	a,(bigdisk)	;are we using a big-disk?
E074: B7      		or	a
E075: CA7CE0  		jp	z,extblk1
E078: 6E      		ld	l,(hl)		;no, extract an 8 bit number from the fcb.
E079: 2600    		ld	h,0
E07B: C9      		ret	
E07C: 09      	extblk1:add	hl,bc		;yes, extract a 16 bit number.
E07D: 5E      		ld	e,(hl)
E07E: 23      		inc	hl
E07F: 56      		ld	d,(hl)
E080: EB      		ex	de,hl		;return in (hl).
E081: C9      		ret	
              	;
              	;   compute block number.
              	;
E082: CD49E0  	comblk:	call	getblock
E085: 4F      		ld	c,a
E086: 0600    		ld	b,0
E088: CD69E0  		call	extblk
E08B: 22F0E9  		ld	(blknmbr),hl
E08E: C9      		ret	
              	;
              	;   check for a zero block number (unused).
              	;
E08F: 2AF0E9  	chkblk:	ld	hl,(blknmbr)
E092: 7D      		ld	a,l		;is it zero?
E093: B4      		or	h
E094: C9      		ret	
              	;
              	;   adjust physical block (blknmbr) and convert to logical
              	; sector (logsect). this is the starting sector of this block.
              	; the actual sector of interest is then added to this and the
              	; resulting sector number is stored back in (blknmbr). this
              	; will still have to be adjusted for the track number.
              	;
E095: 3ACEE9  	logical:ld	a,(blkshft)	;get log2(physical/logical sectors).
E098: 2AF0E9  		ld	hl,(blknmbr)	;get physical sector desired.
E09B: 29      	logicl1:add	hl,hl		;compute logical sector number.
E09C: 3D      		dec	a		;note logical sectors are 128 bytes long.
E09D: C29BE0  		jp	nz,logicl1
E0A0: 22F2E9  		ld	(logsect),hl	;save logical sector.
E0A3: 3ACFE9  		ld	a,(blkmask)	;get block mask.
E0A6: 4F      		ld	c,a
E0A7: 3AEEE9  		ld	a,(savnrec)	;get next sector to access.
E0AA: A1      		and	c		;extract the relative position within physical block.
E0AB: B5      		or	l		;and add it too logical sector.
E0AC: 6F      		ld	l,a
E0AD: 22F0E9  		ld	(blknmbr),hl	;and store.
E0B0: C9      		ret	
              	;
              	;   set (hl) to point to extent byte in fcb.
              	;
E0B1: 2A4EDF  	setext:	ld	hl,(params)
E0B4: 110C00  		ld	de,12		;it is the twelth byte.
E0B7: 19      		add	hl,de
E0B8: C9      		ret	
              	;
              	;   set (hl) to point to record count byte in fcb and (de) to
              	; next record number byte.
              	;
E0B9: 2A4EDF  	sethlde:ld	hl,(params)
E0BC: 110F00  		ld	de,15		;record count byte (#15).
E0BF: 19      		add	hl,de
E0C0: EB      		ex	de,hl
E0C1: 211100  		ld	hl,17		;next record number (#32).
E0C4: 19      		add	hl,de
E0C5: C9      		ret	
              	;
              	;   save current file data from fcb.
              	;
E0C6: CDB9E0  	strdata:call	sethlde
E0C9: 7E      		ld	a,(hl)		;get and store record count byte.
E0CA: 32EEE9  		ld	(savnrec),a
E0CD: EB      		ex	de,hl
E0CE: 7E      		ld	a,(hl)		;get and store next record number byte.
E0CF: 32ECE9  		ld	(savnxt),a
E0D2: CDB1E0  		call	setext		;point to extent byte.
E0D5: 3AD0E9  		ld	a,(extmask)	;get extent mask.
E0D8: A6      		and	(hl)
E0D9: 32EDE9  		ld	(savext),a	;and save extent here.
E0DC: C9      		ret	
              	;
              	;   set the next record to access. if (mode) is set to 2, then
              	; the last record byte (savnrec) has the correct number to access.
              	; for sequential access, (mode) will be equal to 1.
              	;
E0DD: CDB9E0  	setnrec:call	sethlde
E0E0: 3AE0E9  		ld	a,(mode)	;get sequential flag (=1).
E0E3: FE02    		cp	2		;a 2 indicates that no adder is needed.
E0E5: C2E9E0  		jp	nz,stnrec1
E0E8: AF      		xor	a		;clear adder (random access?).
E0E9: 4F      	stnrec1:ld	c,a
E0EA: 3AEEE9  		ld	a,(savnrec)	;get last record number.
E0ED: 81      		add	a,c		;increment record count.
E0EE: 77      		ld	(hl),a		;and set fcb's next record byte.
E0EF: EB      		ex	de,hl
E0F0: 3AECE9  		ld	a,(savnxt)	;get next record byte from storage.
E0F3: 77      		ld	(hl),a		;and put this into fcb as number of records used.
E0F4: C9      		ret	
              	;
              	;   shift (hl) right (c) bits.
              	;
E0F5: 0C      	shiftr:	inc	c
E0F6: 0D      	shiftr1:dec	c
E0F7: C8      		ret	z
E0F8: 7C      		ld	a,h
E0F9: B7      		or	a
E0FA: 1F      		rra	
E0FB: 67      		ld	h,a
E0FC: 7D      		ld	a,l
E0FD: 1F      		rra	
E0FE: 6F      		ld	l,a
E0FF: C3F6E0  		jp	shiftr1
              	;
              	;   compute the check-sum for the directory buffer. return
              	; integer sum in (a).
              	;
E102: 0E80    	checksum: ld	c,128		;length of buffer.
E104: 2AC4E9  		ld	hl,(dirbuf)	;get its location.
E107: AF      		xor	a		;clear summation byte.
E108: 86      	chksum1:add	a,(hl)		;and compute sum ignoring carries.
E109: 23      		inc	hl
E10A: 0D      		dec	c
E10B: C208E1  		jp	nz,chksum1
E10E: C9      		ret	
              	;
              	;   shift (hl) left (c) bits.
              	;
E10F: 0C      	shiftl:	inc	c
E110: 0D      	shiftl1:dec	c
E111: C8      		ret	z
E112: 29      		add	hl,hl		;shift left 1 bit.
E113: C310E1  		jp	shiftl1
              	;
              	;   routine to set a bit in a 16 bit value contained in (bc).
              	; the bit set depends on the current drive selection.
              	;
E116: C5      	setbit:	push	bc		;save 16 bit word.
E117: 3A4DDF  		ld	a,(active)	;get active drive.
E11A: 4F      		ld	c,a
E11B: 210100  		ld	hl,1
E11E: CD0FE1  		call	shiftl		;shift bit 0 into place.
E121: C1      		pop	bc		;now 'or' this with the original word.
E122: 79      		ld	a,c
E123: B5      		or	l
E124: 6F      		ld	l,a		;low byte done, do high byte.
E125: 78      		ld	a,b
E126: B4      		or	h
E127: 67      		ld	h,a
E128: C9      		ret	
              	;
              	;   extract the write protect status bit for the current drive.
              	; the result is returned in (a), bit 0.
              	;
E129: 2AB8E9  	getwprt:ld	hl,(wrtprt)	;get status bytes.
E12C: 3A4DDF  		ld	a,(active)	;which drive is current?
E12F: 4F      		ld	c,a
E130: CDF5E0  		call	shiftr		;shift status such that bit 0 is the
E133: 7D      		ld	a,l		;one of interest for this drive.
E134: E601    		and	01h		;and isolate it.
E136: C9      		ret	
              	;
              	;   function to write protect the current disk.
              	;
E137: 21B8E9  	wrtprtd:ld	hl,wrtprt	;point to status word.
E13A: 4E      		ld	c,(hl)		;set (bc) equal to the status.
E13B: 23      		inc	hl
E13C: 46      		ld	b,(hl)
E13D: CD16E1  		call	setbit		;and set this bit according to current drive.
E140: 22B8E9  		ld	(wrtprt),hl	;then save.
E143: 2AD3E9  		ld	hl,(dirsize)	;now save directory size limit.
E146: 23      		inc	hl		;remember the last one.
E147: EB      		ex	de,hl
E148: 2ABEE9  		ld	hl,(scratch1)	;and store it here.
E14B: 73      		ld	(hl),e		;put low byte.
E14C: 23      		inc	hl
E14D: 72      		ld	(hl),d		;then high byte.
E14E: C9      		ret	
              	;
              	;   check for a read only file.
              	;
E14F: CD69E1  	chkrofl:call	fcb2hl		;set (hl) to file entry in directory buffer.
E152: 110900  	ckrof1:	ld	de,9		;look at bit 7 of the ninth byte.
E155: 19      		add	hl,de
E156: 7E      		ld	a,(hl)
E157: 17      		rla	
E158: D0      		ret	nc		;return if ok.
E159: 2112DC  		ld	hl,rofile	;else, print error message and terminate.
E15C: C355DF  		jp	jumphl
              	;
              	;   check the write protect status of the active disk.
              	;
E15F: CD29E1  	chkwprt:call	getwprt
E162: C8      		ret	z		;return if ok.
E163: 2110DC  		ld	hl,rodisk	;else print message and terminate.
E166: C355DF  		jp	jumphl
              	;
              	;   routine to set (hl) pointing to the proper entry in the
              	; directory buffer.
              	;
E169: 2AC4E9  	fcb2hl:	ld	hl,(dirbuf)	;get address of buffer.
E16C: 3AF4E9  		ld	a,(fcbpos)	;relative position of file.
              	;
              	;   routine to add (a) to (hl).
              	;
E16F: 85      	adda2hl:add	a,l
E170: 6F      		ld	l,a
E171: D0      		ret	nc
E172: 24      		inc	h		;take care of any carry.
E173: C9      		ret	
              	;
              	;   routine to get the 's2' byte from the fcb supplied in
              	; the initial parameter specification.
              	;
E174: 2A4EDF  	gets2:	ld	hl,(params)	;get address of fcb.
E177: 110E00  		ld	de,14		;relative position of 's2'.
E17A: 19      		add	hl,de
E17B: 7E      		ld	a,(hl)		;extract this byte.
E17C: C9      		ret	
              	;
              	;   clear the 's2' byte in the fcb.
              	;
E17D: CD74E1  	clears2:call	gets2		;this sets (hl) pointing to it.
E180: 3600    		ld	(hl),0		;now clear it.
E182: C9      		ret	
              	;
              	;   set bit 7 in the 's2' byte of the fcb.
              	;
E183: CD74E1  	sets2b7:call	gets2		;get the byte.
E186: F680    		or	80h		;and set bit 7.
E188: 77      		ld	(hl),a		;then store.
E189: C9      		ret	
              	;
              	;   compare (filepos) with (scratch1) and set flags based on
              	; the difference. this checks to see if there are more file
              	; names in the directory. we are at (filepos) and there are
              	; (scratch1) of them to check.
              	;
E18A: 2AF5E9  	morefls:ld	hl,(filepos)	;we are here.
E18D: EB      		ex	de,hl
E18E: 2ABEE9  		ld	hl,(scratch1)	;and don't go past here.
E191: 7B      		ld	a,e		;compute difference but don't keep.
E192: 96      		sub	(hl)
E193: 23      		inc	hl
E194: 7A      		ld	a,d
E195: 9E      		sbc	a,(hl)		;set carry if no more names.
E196: C9      		ret	
              	;
              	;   call this routine to prevent (scratch1) from being greater
              	; than (filepos).
              	;
E197: CD8AE1  	chknmbr:call	morefls		;scratch1 too big?
E19A: D8      		ret	c
E19B: 13      		inc	de		;yes, reset it to (filepos).
E19C: 72      		ld	(hl),d
E19D: 2B      		dec	hl
E19E: 73      		ld	(hl),e
E19F: C9      		ret	
              	;
              	;   compute (hl)=(de)-(hl)
              	;
E1A0: 7B      	subhl:	ld	a,e		;compute difference.
E1A1: 95      		sub	l
E1A2: 6F      		ld	l,a		;store low byte.
E1A3: 7A      		ld	a,d
E1A4: 9C      		sbc	a,h
E1A5: 67      		ld	h,a		;and then high byte.
E1A6: C9      		ret	
              	;
              	;   set the directory checksum byte.
              	;
E1A7: 0EFF    	setdir:	ld	c,0ffh
              	;
              	;   routine to set or compare the directory checksum byte. if
              	; (c)=0ffh, then this will set the checksum byte. else the byte
              	; will be checked. if the check fails (the disk has been changed),
              	; then this disk will be write protected.
              	;
E1A9: 2AF7E9  	checkdir: ld	hl,(cksumtbl)
E1AC: EB      		ex	de,hl
E1AD: 2AD7E9  		ld	hl,(alloc1)
E1B0: CDA0E1  		call	subhl
E1B3: D0      		ret	nc		;ok if (cksumtbl) > (alloc1), so return.
E1B4: C5      		push	bc
E1B5: CD02E1  		call	checksum	;else compute checksum.
E1B8: 2AC8E9  		ld	hl,(chkvect)	;get address of checksum table.
E1BB: EB      		ex	de,hl
E1BC: 2AF7E9  		ld	hl,(cksumtbl)
E1BF: 19      		add	hl,de		;set (hl) to point to byte for this drive.
E1C0: C1      		pop	bc
E1C1: 0C      		inc	c		;set or check ?
E1C2: CACFE1  		jp	z,chkdir1
E1C5: BE      		cp	(hl)		;check them.
E1C6: C8      		ret	z		;return if they are the same.
E1C7: CD8AE1  		call	morefls		;not the same, do we care?
E1CA: D0      		ret	nc
E1CB: CD37E1  		call	wrtprtd		;yes, mark this as write protected.
E1CE: C9      		ret	
E1CF: 77      	chkdir1:ld	(hl),a		;just set the byte.
E1D0: C9      		ret	
              	;
              	;   do a write to the directory of the current disk.
              	;
E1D1: CDA7E1  	dirwrite: call	setdir		;set checksum byte.
E1D4: CDEBE1  		call	dirdma		;set directory dma address.
E1D7: 0E01    		ld	c,1		;tell the bios to actually write.
E1D9: CDC3DF  		call	dowrite		;then do the write.
E1DC: C3E5E1  		jp	defdma
              	;
              	;   read from the directory.
              	;
E1DF: CDEBE1  	dirread:call	dirdma		;set the directory dma address.
E1E2: CDBDDF  		call	doread		;and read it.
              	;
              	;   routine to set the dma address to the users choice.
              	;
E1E5: 21BCE9  	defdma:	ld	hl,userdma	;reset the default dma address and return.
E1E8: C3EEE1  		jp	dirdma1
              	;
              	;   routine to set the dma address for directory work.
              	;
E1EB: 21C4E9  	dirdma:	ld	hl,dirbuf
              	;
              	;   set the dma address. on entry, (hl) points to
              	; word containing the desired dma address.
              	;
E1EE: 4E      	dirdma1:ld	c,(hl)
E1EF: 23      		inc	hl
E1F0: 46      		ld	b,(hl)		;setup (bc) and go to the bios to set it.
E1F1: C306EB  		jp	setdma
              	;
              	;   move the directory buffer into user's dma space.
              	;
E1F4: 2AC4E9  	movedir:ld	hl,(dirbuf)	;buffer is located here, and
E1F7: EB      		ex	de,hl
E1F8: 2ABCE9  		ld	hl,(userdma)	; put it here.
E1FB: 0E80    		ld	c,128		;this is its length.
E1FD: C35ADF  		jp	de2hl		;move it now and return.
              	;
              	;   check (filepos) and set the zero flag if it equals 0ffffh.
              	;
E200: 21F5E9  	ckfilpos: ld	hl,filepos
E203: 7E      		ld	a,(hl)
E204: 23      		inc	hl
E205: BE      		cp	(hl)		;are both bytes the same?
E206: C0      		ret	nz
E207: 3C      		inc	a		;yes, but are they each 0ffh?
E208: C9      		ret	
              	;
              	;   set location (filepos) to 0ffffh.
              	;
E209: 21FFFF  	stfilpos: ld	hl,0ffffh
E20C: 22F5E9  		ld	(filepos),hl
E20F: C9      		ret	
              	;
              	;   move on to the next file position within the current
              	; directory buffer. if no more exist, set pointer to 0ffffh
              	; and the calling routine will check for this. enter with (c)
              	; equal to 0ffh to cause the checksum byte to be set, else we
              	; will check this disk and set write protect if checksums are
              	; not the same (applies only if another directory sector must
              	; be read).
              	;
E210: 2AD3E9  	nxentry:ld	hl,(dirsize)	;get directory entry size limit.
E213: EB      		ex	de,hl
E214: 2AF5E9  		ld	hl,(filepos)	;get current count.
E217: 23      		inc	hl		;go on to the next one.
E218: 22F5E9  		ld	(filepos),hl
E21B: CDA0E1  		call	subhl		;(hl)=(dirsize)-(filepos)
E21E: D224E2  		jp	nc,nxent1	;is there more room left?
E221: C309E2  		jp	stfilpos	;no. set this flag and return.
E224: 3AF5E9  	nxent1:	ld	a,(filepos)	;get file position within directory.
E227: E603    		and	03h		;only look within this sector (only 4 entries fit).
E229: 0605    		ld	b,5		;convert to relative position (32 bytes each).
E22B: 87      	nxent2:	add	a,a		;note that this is not efficient code.
E22C: 05      		dec	b		;5 'add a's would be better.
E22D: C22BE2  		jp	nz,nxent2
E230: 32F4E9  		ld	(fcbpos),a	;save it as position of fcb.
E233: B7      		or	a
E234: C0      		ret	nz		;return if we are within buffer.
E235: C5      		push	bc
E236: CDCEDF  		call	trksec		;we need the next directory sector.
E239: CDDFE1  		call	dirread
E23C: C1      		pop	bc
E23D: C3A9E1  		jp	checkdir
              	;
              	;   routine to to get a bit from the disk space allocation
              	; map. it is returned in (a), bit position 0. on entry to here,
              	; set (bc) to the block number on the disk to check.
              	; on return, (d) will contain the original bit position for
              	; this block number and (hl) will point to the address for it.
              	;
E240: 79      	ckbitmap: ld	a,c		;determine bit number of interest.
E241: E607    		and	07h		;compute (d)=(e)=(c and 7)+1.
E243: 3C      		inc	a
E244: 5F      		ld	e,a		;save particular bit number.
E245: 57      		ld	d,a
              	;
              	;   compute (bc)=(bc)/8.
              	;
E246: 79      		ld	a,c
E247: 0F      		rrca			;now shift right 3 bits.
E248: 0F      		rrca	
E249: 0F      		rrca	
E24A: E61F    		and	1fh		;and clear bits 7,6,5.
E24C: 4F      		ld	c,a
E24D: 78      		ld	a,b
E24E: 87      		add	a,a		;now shift (b) into bits 7,6,5.
E24F: 87      		add	a,a
E250: 87      		add	a,a
E251: 87      		add	a,a
E252: 87      		add	a,a
E253: B1      		or	c		;and add in (c).
E254: 4F      		ld	c,a		;ok, (c) ha been completed.
E255: 78      		ld	a,b		;is there a better way of doing this?
E256: 0F      		rrca	
E257: 0F      		rrca	
E258: 0F      		rrca	
E259: E61F    		and	1fh
E25B: 47      		ld	b,a		;and now (b) is completed.
              	;
              	;   use this as an offset into the disk space allocation
              	; table.
              	;
E25C: 2ACAE9  		ld	hl,(alocvect)
E25F: 09      		add	hl,bc
E260: 7E      		ld	a,(hl)		;now get correct byte.
E261: 07      	ckbmap1:rlca			;get correct bit into position 0.
E262: 1D      		dec	e
E263: C261E2  		jp	nz,ckbmap1
E266: C9      		ret	
              	;
              	;   set or clear the bit map such that block number (bc) will be marked
              	; as used. on entry, if (e)=0 then this bit will be cleared, if it equals
              	; 1 then it will be set (don't use anyother values).
              	;
E267: D5      	stbitmap: push	de
E268: CD40E2  		call	ckbitmap	;get the byte of interest.
E26B: E6FE    		and	0feh		;clear the affected bit.
E26D: C1      		pop	bc
E26E: B1      		or	c		;and now set it acording to (c).
              	;
              	;  entry to restore the original bit position and then store
              	; in table. (a) contains the value, (d) contains the bit
              	; position (1-8), and (hl) points to the address within the
              	; space allocation table for this byte.
              	;
E26F: 0F      	stbmap1:rrca			;restore original bit position.
E270: 15      		dec	d
E271: C26FE2  		jp	nz,stbmap1
E274: 77      		ld	(hl),a		;and stor byte in table.
E275: C9      		ret	
              	;
              	;   set/clear space used bits in allocation map for this file.
              	; on entry, (c)=1 to set the map and (c)=0 to clear it.
              	;
E276: CD69E1  	setfile:call	fcb2hl		;get address of fcb
E279: 111000  		ld	de,16
E27C: 19      		add	hl,de		;get to block number bytes.
E27D: C5      		push	bc
E27E: 0E11    		ld	c,17		;check all 17 bytes (max) of table.
E280: D1      	setfl1:	pop	de
E281: 0D      		dec	c		;done all bytes yet?
E282: C8      		ret	z
E283: D5      		push	de
E284: 3AE8E9  		ld	a,(bigdisk)	;check disk size for 16 bit block numbers.
E287: B7      		or	a
E288: CA93E2  		jp	z,setfl2
E28B: C5      		push	bc		;only 8 bit numbers. set (bc) to this one.
E28C: E5      		push	hl
E28D: 4E      		ld	c,(hl)		;get low byte from table, always
E28E: 0600    		ld	b,0		;set high byte to zero.
E290: C399E2  		jp	setfl3
E293: 0D      	setfl2:	dec	c		;for 16 bit block numbers, adjust counter.
E294: C5      		push	bc
E295: 4E      		ld	c,(hl)		;now get both the low and high bytes.
E296: 23      		inc	hl
E297: 46      		ld	b,(hl)
E298: E5      		push	hl
E299: 79      	setfl3:	ld	a,c		;block used?
E29A: B0      		or	b
E29B: CAA8E2  		jp	z,setfl4
E29E: 2AD1E9  		ld	hl,(dsksize)	;is this block number within the
E2A1: 7D      		ld	a,l		;space on the disk?
E2A2: 91      		sub	c
E2A3: 7C      		ld	a,h
E2A4: 98      		sbc	a,b
E2A5: D467E2  		call	nc,stbitmap	;yes, set the proper bit.
E2A8: E1      	setfl4:	pop	hl		;point to next block number in fcb.
E2A9: 23      		inc	hl
E2AA: C1      		pop	bc
E2AB: C380E2  		jp	setfl1
              	;
              	;   construct the space used allocation bit map for the active
              	; drive. if a file name starts with '$' and it is under the
              	; current user number, then (status) is set to minus 1. otherwise
              	; it is not set at all.
              	;
E2AE: 2AD1E9  	bitmap:	ld	hl,(dsksize)	;compute size of allocation table.
E2B1: 0E03    		ld	c,3
E2B3: CDF5E0  		call	shiftr		;(hl)=(hl)/8.
E2B6: 23      		inc	hl		;at lease 1 byte.
E2B7: 44      		ld	b,h
E2B8: 4D      		ld	c,l		;set (bc) to the allocation table length.
              	;
              	;   initialize the bitmap for this drive. right now, the first
              	; two bytes are specified by the disk parameter block. however
              	; a patch could be entered here if it were necessary to setup
              	; this table in a special mannor. for example, the bios could
              	; determine locations of 'bad blocks' and set them as already
              	; 'used' in the map.
              	;
E2B9: 2ACAE9  		ld	hl,(alocvect)	;now zero out the table now.
E2BC: 3600    	bitmap1:ld	(hl),0
E2BE: 23      		inc	hl
E2BF: 0B      		dec	bc
E2C0: 78      		ld	a,b
E2C1: B1      		or	c
E2C2: C2BCE2  		jp	nz,bitmap1
E2C5: 2AD5E9  		ld	hl,(alloc0)	;get initial space used by directory.
E2C8: EB      		ex	de,hl
E2C9: 2ACAE9  		ld	hl,(alocvect)	;and put this into map.
E2CC: 73      		ld	(hl),e
E2CD: 23      		inc	hl
E2CE: 72      		ld	(hl),d
              	;
              	;   end of initialization portion.
              	;
E2CF: CDACDF  		call	homedrv		;now home the drive.
E2D2: 2ABEE9  		ld	hl,(scratch1)
E2D5: 3603    		ld	(hl),3		;force next directory request to read
E2D7: 23      		inc	hl		;in a sector.
E2D8: 3600    		ld	(hl),0
E2DA: CD09E2  		call	stfilpos	;clear initial file position also.
E2DD: 0EFF    	bitmap2:ld	c,0ffh		;read next file name in directory
E2DF: CD10E2  		call	nxentry		;and set checksum byte.
E2E2: CD00E2  		call	ckfilpos	;is there another file?
E2E5: C8      		ret	z
E2E6: CD69E1  		call	fcb2hl		;yes, get its address.
E2E9: 3EE5    		ld	a,0e5h
E2EB: BE      		cp	(hl)		;empty file entry?
E2EC: CADDE2  		jp	z,bitmap2
E2EF: 3A4CDF  		ld	a,(userno)	;no, correct user number?
E2F2: BE      		cp	(hl)
E2F3: C201E3  		jp	nz,bitmap3
E2F6: 23      		inc	hl
E2F7: 7E      		ld	a,(hl)		;yes, does name start with a '$'?
E2F8: D624    		sub	'$'
E2FA: C201E3  		jp	nz,bitmap3
E2FD: 3D      		dec	a		;yes, set atatus to minus one.
E2FE: 3250DF  		ld	(status),a
E301: 0E01    	bitmap3:ld	c,1		;now set this file's space as used in bit map.
E303: CD76E2  		call	setfile
E306: CD97E1  		call	chknmbr		;keep (scratch1) in bounds.
E309: C3DDE2  		jp	bitmap2
              	;
              	;   set the status (status) and return.
              	;
E30C: 3ADFE9  	ststatus: ld	a,(fndstat)
E30F: C30CDF  		jp	setstat
              	;
              	;   check extents in (a) and (c). set the zero flag if they
              	; are the same. the number of 16k chunks of disk space that
              	; the directory extent covers is expressad is (extmask+1).
              	; no registers are modified.
              	;
E312: C5      	samext:	push	bc
E313: F5      		push	af
E314: 3AD0E9  		ld	a,(extmask)	;get extent mask and use it to
E317: 2F      		cpl			;to compare both extent numbers.
E318: 47      		ld	b,a		;save resulting mask here.
E319: 79      		ld	a,c		;mask first extent and save in (c).
E31A: A0      		and	b
E31B: 4F      		ld	c,a
E31C: F1      		pop	af		;now mask second extent and compare
E31D: A0      		and	b		;with the first one.
E31E: 91      		sub	c
E31F: E61F    		and	1fh		;(* only check buts 0-4 *)
E321: C1      		pop	bc		;the zero flag is set if they are the same.
E322: C9      		ret			;restore (bc) and return.
              	;
              	;   search for the first occurence of a file name. on entry,
              	; register (c) should contain the number of bytes of the fcb
              	; that must match.
              	;
E323: 3EFF    	findfst:ld	a,0ffh
E325: 32DFE9  		ld	(fndstat),a
E328: 21E3E9  		ld	hl,counter	;save character count.
E32B: 71      		ld	(hl),c
E32C: 2A4EDF  		ld	hl,(params)	;get filename to match.
E32F: 22E4E9  		ld	(savefcb),hl	;and save.
E332: CD09E2  		call	stfilpos	;clear initial file position (set to 0ffffh).
E335: CDACDF  		call	homedrv		;home the drive.
              	;
              	;   entry to locate the next occurence of a filename within the
              	; directory. the disk is not expected to have been changed. if
              	; it was, then it will be write protected.
              	;
E338: 0E00    	findnxt:ld	c,0		;write protect the disk if changed.
E33A: CD10E2  		call	nxentry		;get next filename entry in directory.
E33D: CD00E2  		call	ckfilpos	;is file position = 0ffffh?
E340: CA9FE3  		jp	z,fndnxt6	;yes, exit now then.
E343: 2AE4E9  		ld	hl,(savefcb)	;set (de) pointing to filename to match.
E346: EB      		ex	de,hl
E347: 1A      		ld	a,(de)
E348: FEE5    		cp	0e5h		;empty directory entry?
E34A: CA55E3  		jp	z,fndnxt1	;(* are we trying to reserect erased entries? *)
E34D: D5      		push	de
E34E: CD8AE1  		call	morefls		;more files in directory?
E351: D1      		pop	de
E352: D29FE3  		jp	nc,fndnxt6	;no more. exit now.
E355: CD69E1  	fndnxt1:call	fcb2hl		;get address of this fcb in directory.
E358: 3AE3E9  		ld	a,(counter)	;get number of bytes (characters) to check.
E35B: 4F      		ld	c,a
E35C: 0600    		ld	b,0		;initialize byte position counter.
E35E: 79      	fndnxt2:ld	a,c		;are we done with the compare?
E35F: B7      		or	a
E360: CA8EE3  		jp	z,fndnxt5
E363: 1A      		ld	a,(de)		;no, check next byte.
E364: FE3F    		cp	'?'		;don't care about this character?
E366: CA87E3  		jp	z,fndnxt4
E369: 78      		ld	a,b		;get bytes position in fcb.
E36A: FE0D    		cp	13		;don't care about the thirteenth byte either.
E36C: CA87E3  		jp	z,fndnxt4
E36F: FE0C    		cp	12		;extent byte?
E371: 1A      		ld	a,(de)
E372: CA7EE3  		jp	z,fndnxt3
E375: 96      		sub	(hl)		;otherwise compare characters.
E376: E67F    		and	7fh
E378: C238E3  		jp	nz,findnxt	;not the same, check next entry.
E37B: C387E3  		jp	fndnxt4		;so far so good, keep checking.
E37E: C5      	fndnxt3:push	bc		;check the extent byte here.
E37F: 4E      		ld	c,(hl)
E380: CD12E3  		call	samext
E383: C1      		pop	bc
E384: C238E3  		jp	nz,findnxt	;not the same, look some more.
              	;
              	;   so far the names compare. bump pointers to the next byte
              	; and continue until all (c) characters have been checked.
              	;
E387: 13      	fndnxt4:inc	de		;bump pointers.
E388: 23      		inc	hl
E389: 04      		inc	b
E38A: 0D      		dec	c		;adjust character counter.
E38B: C35EE3  		jp	fndnxt2
E38E: 3AF5E9  	fndnxt5:ld	a,(filepos)	;return the position of this entry.
E391: E603    		and	03h
E393: 3250DF  		ld	(status),a
E396: 21DFE9  		ld	hl,fndstat
E399: 7E      		ld	a,(hl)
E39A: 17      		rla	
E39B: D0      		ret	nc
E39C: AF      		xor	a
E39D: 77      		ld	(hl),a
E39E: C9      		ret	
              	;
              	;   filename was not found. set appropriate status.
              	;
E39F: CD09E2  	fndnxt6:call	stfilpos	;set (filepos) to 0ffffh.
E3A2: 3EFF    		ld	a,0ffh		;say not located.
E3A4: C30CDF  		jp	setstat
              	;
              	;   erase files from the directory. only the first byte of the
              	; fcb will be affected. it is set to (e5).
              	;
E3A7: CD5FE1  	erafile:call	chkwprt		;is disk write protected?
E3AA: 0E0C    		ld	c,12		;only compare file names.
E3AC: CD23E3  		call	findfst		;get first file name.
E3AF: CD00E2  	erafil1:call	ckfilpos	;any found?
E3B2: C8      		ret	z		;nope, we must be done.
E3B3: CD4FE1  		call	chkrofl		;is file read only?
E3B6: CD69E1  		call	fcb2hl		;nope, get address of fcb and
E3B9: 36E5    		ld	(hl),0e5h	;set first byte to 'empty'.
E3BB: 0E00    		ld	c,0		;clear the space from the bit map.
E3BD: CD76E2  		call	setfile
E3C0: CDD1E1  		call	dirwrite	;now write the directory sector back out.
E3C3: CD38E3  		call	findnxt		;find the next file name.
E3C6: C3AFE3  		jp	erafil1		;and repeat process.
              	;
              	;   look through the space allocation map (bit map) for the
              	; next available block. start searching at block number (bc-1).
              	; the search procedure is to look for an empty block that is
              	; before the starting block. if not empty, look at a later
              	; block number. in this way, we return the closest empty block
              	; on either side of the 'target' block number. this will speed
              	; access on random devices. for serial devices, this should be
              	; changed to look in the forward direction first and then start
              	; at the front and search some more.
              	;
              	;   on return, (de)= block number that is empty and (hl) =0
              	; if no empry block was found.
              	;
E3C9: 50      	fndspace: ld	d,b		;set (de) as the block that is checked.
E3CA: 59      		ld	e,c
              	;
              	;   look before target block. registers (bc) are used as the lower
              	; pointer and (de) as the upper pointer.
              	;
E3CB: 79      	fndspa1:ld	a,c		;is block 0 specified?
E3CC: B0      		or	b
E3CD: CADCE3  		jp	z,fndspa2
E3D0: 0B      		dec	bc		;nope, check previous block.
E3D1: D5      		push	de
E3D2: C5      		push	bc
E3D3: CD40E2  		call	ckbitmap
E3D6: 1F      		rra			;is this block empty?
E3D7: D2F7E3  		jp	nc,fndspa3	;yes. use this.
              	;
              	;   note that the above logic gets the first block that it finds
              	; that is empty. thus a file could be written 'backward' making
              	; it very slow to access. this could be changed to look for the
              	; first empty block and then continue until the start of this
              	; empty space is located and then used that starting block.
              	; this should help speed up access to some files especially on
              	; a well used disk with lots of fairly small 'holes'.
              	;
E3DA: C1      		pop	bc		;nope, check some more.
E3DB: D1      		pop	de
              	;
              	;   now look after target block.
              	;
E3DC: 2AD1E9  	fndspa2:ld	hl,(dsksize)	;is block (de) within disk limits?
E3DF: 7B      		ld	a,e
E3E0: 95      		sub	l
E3E1: 7A      		ld	a,d
E3E2: 9C      		sbc	a,h
E3E3: D2FFE3  		jp	nc,fndspa4
E3E6: 13      		inc	de		;yes, move on to next one.
E3E7: C5      		push	bc
E3E8: D5      		push	de
E3E9: 42      		ld	b,d
E3EA: 4B      		ld	c,e
E3EB: CD40E2  		call	ckbitmap	;check it.
E3EE: 1F      		rra			;empty?
E3EF: D2F7E3  		jp	nc,fndspa3
E3F2: D1      		pop	de		;nope, continue searching.
E3F3: C1      		pop	bc
E3F4: C3CBE3  		jp	fndspa1
              	;
              	;   empty block found. set it as used and return with (hl)
              	; pointing to it (true?).
              	;
E3F7: 17      	fndspa3:rla			;reset byte.
E3F8: 3C      		inc	a		;and set bit 0.
E3F9: CD6FE2  		call	stbmap1		;update bit map.
E3FC: E1      		pop	hl		;set return registers.
E3FD: D1      		pop	de
E3FE: C9      		ret	
              	;
              	;   free block was not found. if (bc) is not zero, then we have
              	; not checked all of the disk space.
              	;
E3FF: 79      	fndspa4:ld	a,c
E400: B0      		or	b
E401: C2CBE3  		jp	nz,fndspa1
E404: 210000  		ld	hl,0		;set 'not found' status.
E407: C9      		ret	
              	;
              	;   move a complete fcb entry into the directory and write it.
              	;
E408: 0E00    	fcbset:	ld	c,0
E40A: 1E20    		ld	e,32		;length of each entry.
              	;
              	;   move (e) bytes from the fcb pointed to by (params) into
              	; fcb in directory starting at relative byte (c). this updated
              	; directory buffer is then written to the disk.
              	;
E40C: D5      	update:	push	de
E40D: 0600    		ld	b,0		;set (bc) to relative byte position.
E40F: 2A4EDF  		ld	hl,(params)	;get address of fcb.
E412: 09      		add	hl,bc		;compute starting byte.
E413: EB      		ex	de,hl
E414: CD69E1  		call	fcb2hl		;get address of fcb to update in directory.
E417: C1      		pop	bc		;set (c) to number of bytes to change.
E418: CD5ADF  		call	de2hl
E41B: CDCEDF  	update1:call	trksec		;determine the track and sector affected.
E41E: C3D1E1  		jp	dirwrite	;then write this sector out.
              	;
              	;   routine to change the name of all files on the disk with a
              	; specified name. the fcb contains the current name as the
              	; first 12 characters and the new name 16 bytes into the fcb.
              	;
E421: CD5FE1  	chgnames: call	chkwprt		;check for a write protected disk.
E424: 0E0C    		ld	c,12		;match first 12 bytes of fcb only.
E426: CD23E3  		call	findfst		;get first name.
E429: 2A4EDF  		ld	hl,(params)	;get address of fcb.
E42C: 7E      		ld	a,(hl)		;get user number.
E42D: 111000  		ld	de,16		;move over to desired name.
E430: 19      		add	hl,de
E431: 77      		ld	(hl),a		;keep same user number.
E432: CD00E2  	chgnam1:call	ckfilpos	;any matching file found?
E435: C8      		ret	z		;no, we must be done.
E436: CD4FE1  		call	chkrofl		;check for read only file.
E439: 0E10    		ld	c,16		;start 16 bytes into fcb.
E43B: 1E0C    		ld	e,12		;and update the first 12 bytes of directory.
E43D: CD0CE4  		call	update
E440: CD38E3  		call	findnxt		;get te next file name.
E443: C332E4  		jp	chgnam1		;and continue.
              	;
              	;   update a files attributes. the procedure is to search for
              	; every file with the same name as shown in fcb (ignoring bit 7)
              	; and then to update it (which includes bit 7). no other changes
              	; are made.
              	;
E446: 0E0C    	saveattr: ld	c,12		;match first 12 bytes.
E448: CD23E3  		call	findfst		;look for first filename.
E44B: CD00E2  	savatr1:call	ckfilpos	;was one found?
E44E: C8      		ret	z		;nope, we must be done.
E44F: 0E00    		ld	c,0		;yes, update the first 12 bytes now.
E451: 1E0C    		ld	e,12
E453: CD0CE4  		call	update		;update filename and write directory.
E456: CD38E3  		call	findnxt		;and get the next file.
E459: C34BE4  		jp	savatr1		;then continue until done.
              	;
              	;  open a file (name specified in fcb).
              	;
E45C: 0E0F    	openit:	ld	c,15		;compare the first 15 bytes.
E45E: CD23E3  		call	findfst		;get the first one in directory.
E461: CD00E2  		call	ckfilpos	;any at all?
E464: C8      		ret	z
E465: CDB1E0  	openit1:call	setext		;point to extent byte within users fcb.
E468: 7E      		ld	a,(hl)		;and get it.
E469: F5      		push	af		;save it and address.
E46A: E5      		push	hl
E46B: CD69E1  		call	fcb2hl		;point to fcb in directory.
E46E: EB      		ex	de,hl
E46F: 2A4EDF  		ld	hl,(params)	;this is the users copy.
E472: 0E20    		ld	c,32		;move it into users space.
E474: D5      		push	de
E475: CD5ADF  		call	de2hl
E478: CD83E1  		call	sets2b7		;set bit 7 in 's2' byte (unmodified).
E47B: D1      		pop	de		;now get the extent byte from this fcb.
E47C: 210C00  		ld	hl,12
E47F: 19      		add	hl,de
E480: 4E      		ld	c,(hl)		;into (c).
E481: 210F00  		ld	hl,15		;now get the record count byte into (b).
E484: 19      		add	hl,de
E485: 46      		ld	b,(hl)
E486: E1      		pop	hl		;keep the same extent as the user had originally.
E487: F1      		pop	af
E488: 77      		ld	(hl),a
E489: 79      		ld	a,c		;is it the same as in the directory fcb?
E48A: BE      		cp	(hl)
E48B: 78      		ld	a,b		;if yes, then use the same record count.
E48C: CA96E4  		jp	z,openit2
E48F: 3E00    		ld	a,0		;if the user specified an extent greater than
E491: DA96E4  		jp	c,openit2	;the one in the directory, then set record count to 0.
E494: 3E80    		ld	a,128		;otherwise set to maximum.
E496: 2A4EDF  	openit2:ld	hl,(params)	;set record count in users fcb to (a).
E499: 110F00  		ld	de,15
E49C: 19      		add	hl,de		;compute relative position.
E49D: 77      		ld	(hl),a		;and set the record count.
E49E: C9      		ret	
              	;
              	;   move two bytes from (de) to (hl) if (and only if) (hl)
              	; point to a zero value (16 bit).
              	;   return with zero flag set it (de) was moved. registers (de)
              	; and (hl) are not changed. however (a) is.
              	;
E49F: 7E      	moveword: ld	a,(hl)		;check for a zero word.
E4A0: 23      		inc	hl
E4A1: B6      		or	(hl)		;both bytes zero?
E4A2: 2B      		dec	hl
E4A3: C0      		ret	nz		;nope, just return.
E4A4: 1A      		ld	a,(de)		;yes, move two bytes from (de) into
E4A5: 77      		ld	(hl),a		;this zero space.
E4A6: 13      		inc	de
E4A7: 23      		inc	hl
E4A8: 1A      		ld	a,(de)
E4A9: 77      		ld	(hl),a
E4AA: 1B      		dec	de		;don't disturb these registers.
E4AB: 2B      		dec	hl
E4AC: C9      		ret	
              	;
              	;   get here to close a file specified by (fcb).
              	;
E4AD: AF      	closeit:xor	a		;clear status and file position bytes.
E4AE: 3250DF  		ld	(status),a
E4B1: 32F5E9  		ld	(filepos),a
E4B4: 32F6E9  		ld	(filepos+1),a
E4B7: CD29E1  		call	getwprt		;get write protect bit for this drive.
E4BA: C0      		ret	nz		;just return if it is set.
E4BB: CD74E1  		call	gets2		;else get the 's2' byte.
E4BE: E680    		and	80h		;and look at bit 7 (file unmodified?).
E4C0: C0      		ret	nz		;just return if set.
E4C1: 0E0F    		ld	c,15		;else look up this file in directory.
E4C3: CD23E3  		call	findfst
E4C6: CD00E2  		call	ckfilpos	;was it found?
E4C9: C8      		ret	z		;just return if not.
E4CA: 011000  		ld	bc,16		;set (hl) pointing to records used section.
E4CD: CD69E1  		call	fcb2hl
E4D0: 09      		add	hl,bc
E4D1: EB      		ex	de,hl
E4D2: 2A4EDF  		ld	hl,(params)	;do the same for users specified fcb.
E4D5: 09      		add	hl,bc
E4D6: 0E10    		ld	c,16		;this many bytes are present in this extent.
E4D8: 3AE8E9  	closeit1: ld	a,(bigdisk)	;8 or 16 bit record numbers?
E4DB: B7      		or	a
E4DC: CAF3E4  		jp	z,closeit4
E4DF: 7E      		ld	a,(hl)		;just 8 bit. get one from users fcb.
E4E0: B7      		or	a
E4E1: 1A      		ld	a,(de)		;now get one from directory fcb.
E4E2: C2E6E4  		jp	nz,closeit2
E4E5: 77      		ld	(hl),a		;users byte was zero. update from directory.
E4E6: B7      	closeit2: or	a
E4E7: C2ECE4  		jp	nz,closeit3
E4EA: 7E      		ld	a,(hl)		;directories byte was zero, update from users fcb.
E4EB: 12      		ld	(de),a
E4EC: BE      	closeit3: cp	(hl)		;if neither one of these bytes were zero,
E4ED: C22AE5  		jp	nz,closeit7	;then close error if they are not the same.
E4F0: C308E5  		jp	closeit5	;ok so far, get to next byte in fcbs.
E4F3: CD9FE4  	closeit4: call	moveword	;update users fcb if it is zero.
E4F6: EB      		ex	de,hl
E4F7: CD9FE4  		call	moveword	;update directories fcb if it is zero.
E4FA: EB      		ex	de,hl
E4FB: 1A      		ld	a,(de)		;if these two values are no different,
E4FC: BE      		cp	(hl)		;then a close error occured.
E4FD: C22AE5  		jp	nz,closeit7
E500: 13      		inc	de		;check second byte.
E501: 23      		inc	hl
E502: 1A      		ld	a,(de)
E503: BE      		cp	(hl)
E504: C22AE5  		jp	nz,closeit7
E507: 0D      		dec	c		;remember 16 bit values.
E508: 13      	closeit5: inc	de		;bump to next item in table.
E509: 23      		inc	hl
E50A: 0D      		dec	c		;there are 16 entries only.
E50B: C2D8E4  		jp	nz,closeit1	;continue if more to do.
E50E: 01ECFF  		ld	bc,0ffech	;backup 20 places (extent byte).
E511: 09      		add	hl,bc
E512: EB      		ex	de,hl
E513: 09      		add	hl,bc
E514: 1A      		ld	a,(de)
E515: BE      		cp	(hl)		;directory's extent already greater than the
E516: DA22E5  		jp	c,closeit6	;users extent?
E519: 77      		ld	(hl),a		;no, update directory extent.
E51A: 010300  		ld	bc,3		;and update the record count byte in
E51D: 09      		add	hl,bc		;directories fcb.
E51E: EB      		ex	de,hl
E51F: 09      		add	hl,bc
E520: 7E      		ld	a,(hl)		;get from user.
E521: 12      		ld	(de),a		;and put in directory.
E522: 3EFF    	closeit6: ld	a,0ffh		;set 'was open and is now closed' byte.
E524: 32DDE9  		ld	(closeflg),a
E527: C31BE4  		jp	update1		;update the directory now.
E52A: 2150DF  	closeit7: ld	hl,status	;set return status and then return.
E52D: 35      		dec	(hl)
E52E: C9      		ret	
              	;
              	;   routine to get the next empty space in the directory. it
              	; will then be cleared for use.
              	;
E52F: CD5FE1  	getempty: call	chkwprt		;make sure disk is not write protected.
E532: 2A4EDF  		ld	hl,(params)	;save current parameters (fcb).
E535: E5      		push	hl
E536: 21B7E9  		ld	hl,emptyfcb	;use special one for empty space.
E539: 224EDF  		ld	(params),hl
E53C: 0E01    		ld	c,1		;search for first empty spot in directory.
E53E: CD23E3  		call	findfst		;(* only check first byte *)
E541: CD00E2  		call	ckfilpos	;none?
E544: E1      		pop	hl
E545: 224EDF  		ld	(params),hl	;restore original fcb address.
E548: C8      		ret	z		;return if no more space.
E549: EB      		ex	de,hl
E54A: 210F00  		ld	hl,15		;point to number of records for this file.
E54D: 19      		add	hl,de
E54E: 0E11    		ld	c,17		;and clear all of this space.
E550: AF      		xor	a
E551: 77      	getmt1:	ld	(hl),a
E552: 23      		inc	hl
E553: 0D      		dec	c
E554: C251E5  		jp	nz,getmt1
E557: 210D00  		ld	hl,13		;clear the 's1' byte also.
E55A: 19      		add	hl,de
E55B: 77      		ld	(hl),a
E55C: CD97E1  		call	chknmbr		;keep (scratch1) within bounds.
E55F: CD08E4  		call	fcbset		;write out this fcb entry to directory.
E562: C383E1  		jp	sets2b7		;set 's2' byte bit 7 (unmodified at present).
              	;
              	;   routine to close the current extent and open the next one
              	; for reading.
              	;
E565: AF      	getnext:xor	a
E566: 32DDE9  		ld	(closeflg),a	;clear close flag.
E569: CDADE4  		call	closeit		;close this extent.
E56C: CD00E2  		call	ckfilpos
E56F: C8      		ret	z		;not there???
E570: 2A4EDF  		ld	hl,(params)	;get extent byte.
E573: 010C00  		ld	bc,12
E576: 09      		add	hl,bc
E577: 7E      		ld	a,(hl)		;and increment it.
E578: 3C      		inc	a
E579: E61F    		and	1fh		;keep within range 0-31.
E57B: 77      		ld	(hl),a
E57C: CA8EE5  		jp	z,gtnext1	;overflow?
E57F: 47      		ld	b,a		;mask extent byte.
E580: 3AD0E9  		ld	a,(extmask)
E583: A0      		and	b
E584: 21DDE9  		ld	hl,closeflg	;check close flag (0ffh is ok).
E587: A6      		and	(hl)
E588: CA99E5  		jp	z,gtnext2	;if zero, we must read in next extent.
E58B: C3B7E5  		jp	gtnext3		;else, it is already in memory.
E58E: 010200  	gtnext1:ld	bc,2		;point to the 's2' byte.
E591: 09      		add	hl,bc
E592: 34      		inc	(hl)		;and bump it.
E593: 7E      		ld	a,(hl)		;too many extents?
E594: E60F    		and	0fh
E596: CAC1E5  		jp	z,gtnext5	;yes, set error code.
              	;
              	;   get here to open the next extent.
              	;
E599: 0E0F    	gtnext2:ld	c,15		;set to check first 15 bytes of fcb.
E59B: CD23E3  		call	findfst		;find the first one.
E59E: CD00E2  		call	ckfilpos	;none available?
E5A1: C2B7E5  		jp	nz,gtnext3
E5A4: 3ADEE9  		ld	a,(rdwrtflg)	;no extent present. can we open an empty one?
E5A7: 3C      		inc	a		;0ffh means reading (so not possible).
E5A8: CAC1E5  		jp	z,gtnext5	;or an error.
E5AB: CD2FE5  		call	getempty	;we are writing, get an empty entry.
E5AE: CD00E2  		call	ckfilpos	;none?
E5B1: CAC1E5  		jp	z,gtnext5	;error if true.
E5B4: C3BAE5  		jp	gtnext4		;else we are almost done.
E5B7: CD65E4  	gtnext3:call	openit1		;open this extent.
E5BA: CDC6E0  	gtnext4:call	strdata		;move in updated data (rec #, extent #, etc.)
E5BD: AF      		xor	a		;clear status and return.
E5BE: C30CDF  		jp	setstat
              	;
              	;   error in extending the file. too many extents were needed
              	; or not enough space on the disk.
              	;
E5C1: CD10DF  	gtnext5:call	ioerr1		;set error code, clear bit 7 of 's2'
E5C4: C383E1  		jp	sets2b7		;so this is not written on a close.
              	;
              	;   read a sequential file.
              	;
E5C7: 3E01    	rdseq:	ld	a,1		;set sequential access mode.
E5C9: 32E0E9  		ld	(mode),a
E5CC: 3EFF    	rdseq1:	ld	a,0ffh		;don't allow reading unwritten space.
E5CE: 32DEE9  		ld	(rdwrtflg),a
E5D1: CDC6E0  		call	strdata		;put rec# and ext# into fcb.
E5D4: 3AEEE9  		ld	a,(savnrec)	;get next record to read.
E5D7: 21ECE9  		ld	hl,savnxt	;get number of records in extent.
E5DA: BE      		cp	(hl)		;within this extent?
E5DB: DAF1E5  		jp	c,rdseq2
E5DE: FE80    		cp	128		;no. is this extent fully used?
E5E0: C206E6  		jp	nz,rdseq3	;no. end-of-file.
E5E3: CD65E5  		call	getnext		;yes, open the next one.
E5E6: AF      		xor	a		;reset next record to read.
E5E7: 32EEE9  		ld	(savnrec),a
E5EA: 3A50DF  		ld	a,(status)	;check on open, successful?
E5ED: B7      		or	a
E5EE: C206E6  		jp	nz,rdseq3	;no, error.
E5F1: CD82E0  	rdseq2:	call	comblk		;ok. compute block number to read.
E5F4: CD8FE0  		call	chkblk		;check it. within bounds?
E5F7: CA06E6  		jp	z,rdseq3	;no, error.
E5FA: CD95E0  		call	logical		;convert (blknmbr) to logical sector (128 byte).
E5FD: CDDCDF  		call	trksec1		;set the track and sector for this block #.
E600: CDBDDF  		call	doread		;and read it.
E603: C3DDE0  		jp	setnrec		;and set the next record to be accessed.
              	;
              	;   read error occured. set status and return.
              	;
E606: C310DF  	rdseq3:	jp	ioerr1
              	;
              	;   write the next sequential record.
              	;
E609: 3E01    	wtseq:	ld	a,1		;set sequential access mode.
E60B: 32E0E9  		ld	(mode),a
E60E: 3E00    	wtseq1:	ld	a,0		;allow an addition empty extent to be opened.
E610: 32DEE9  		ld	(rdwrtflg),a
E613: CD5FE1  		call	chkwprt		;check write protect status.
E616: 2A4EDF  		ld	hl,(params)
E619: CD52E1  		call	ckrof1		;check for read only file, (hl) already set to fcb.
E61C: CDC6E0  		call	strdata		;put updated data into fcb.
E61F: 3AEEE9  		ld	a,(savnrec)	;get record number to write.
E622: FE80    		cp	128		;within range?
E624: D210DF  		jp	nc,ioerr1	;no, error(?).
E627: CD82E0  		call	comblk		;compute block number.
E62A: CD8FE0  		call	chkblk		;check number.
E62D: 0E00    		ld	c,0		;is there one to write to?
E62F: C279E6  		jp	nz,wtseq6	;yes, go do it.
E632: CD49E0  		call	getblock	;get next block number within fcb to use.
E635: 32E2E9  		ld	(relblock),a	;and save.
E638: 010000  		ld	bc,0		;start looking for space from the start
E63B: B7      		or	a		;if none allocated as yet.
E63C: CA46E6  		jp	z,wtseq2
E63F: 4F      		ld	c,a		;extract previous block number from fcb
E640: 0B      		dec	bc		;so we can be closest to it.
E641: CD69E0  		call	extblk
E644: 44      		ld	b,h
E645: 4D      		ld	c,l
E646: CDC9E3  	wtseq2:	call	fndspace	;find the next empty block nearest number (bc).
E649: 7D      		ld	a,l		;check for a zero number.
E64A: B4      		or	h
E64B: C253E6  		jp	nz,wtseq3
E64E: 3E02    		ld	a,2		;no more space?
E650: C30CDF  		jp	setstat
E653: 22F0E9  	wtseq3:	ld	(blknmbr),hl	;save block number to access.
E656: EB      		ex	de,hl		;put block number into (de).
E657: 2A4EDF  		ld	hl,(params)	;now we must update the fcb for this
E65A: 011000  		ld	bc,16		;newly allocated block.
E65D: 09      		add	hl,bc
E65E: 3AE8E9  		ld	a,(bigdisk)	;8 or 16 bit block numbers?
E661: B7      		or	a
E662: 3AE2E9  		ld	a,(relblock)	;(* update this entry *)
E665: CA6FE6  		jp	z,wtseq4	;zero means 16 bit ones.
E668: CD6FE1  		call	adda2hl		;(hl)=(hl)+(a)
E66B: 73      		ld	(hl),e		;store new block number.
E66C: C377E6  		jp	wtseq5
E66F: 4F      	wtseq4:	ld	c,a		;compute spot in this 16 bit table.
E670: 0600    		ld	b,0
E672: 09      		add	hl,bc
E673: 09      		add	hl,bc
E674: 73      		ld	(hl),e		;stuff block number (de) there.
E675: 23      		inc	hl
E676: 72      		ld	(hl),d
E677: 0E02    	wtseq5:	ld	c,2		;set (c) to indicate writing to un-used disk space.
E679: 3A50DF  	wtseq6:	ld	a,(status)	;are we ok so far?
E67C: B7      		or	a
E67D: C0      		ret	nz
E67E: C5      		push	bc		;yes, save write flag for bios (register c).
E67F: CD95E0  		call	logical		;convert (blknmbr) over to loical sectors.
E682: 3AE0E9  		ld	a,(mode)	;get access mode flag (1=sequential,
E685: 3D      		dec	a		;0=random, 2=special?).
E686: 3D      		dec	a
E687: C2C6E6  		jp	nz,wtseq9
              	;
              	;   special random i/o from function #40. maybe for m/pm, but the
              	; current block, if it has not been written to, will be zeroed
              	; out and then written (reason?).
              	;
E68A: C1      		pop	bc
E68B: C5      		push	bc
E68C: 79      		ld	a,c		;get write status flag (2=writing unused space).
E68D: 3D      		dec	a
E68E: 3D      		dec	a
E68F: C2C6E6  		jp	nz,wtseq9
E692: E5      		push	hl
E693: 2AC4E9  		ld	hl,(dirbuf)	;zero out the directory buffer.
E696: 57      		ld	d,a		;note that (a) is zero here.
E697: 77      	wtseq7:	ld	(hl),a
E698: 23      		inc	hl
E699: 14      		inc	d		;do 128 bytes.
E69A: F297E6  		jp	p,wtseq7
E69D: CDEBE1  		call	dirdma		;tell the bios the dma address for directory access.
E6A0: 2AF2E9  		ld	hl,(logsect)	;get sector that starts current block.
E6A3: 0E02    		ld	c,2		;set 'writing to unused space' flag.
E6A5: 22F0E9  	wtseq8:	ld	(blknmbr),hl	;save sector to write.
E6A8: C5      		push	bc
E6A9: CDDCDF  		call	trksec1		;determine its track and sector numbers.
E6AC: C1      		pop	bc
E6AD: CDC3DF  		call	dowrite		;now write out 128 bytes of zeros.
E6B0: 2AF0E9  		ld	hl,(blknmbr)	;get sector number.
E6B3: 0E00    		ld	c,0		;set normal write flag.
E6B5: 3ACFE9  		ld	a,(blkmask)	;determine if we have written the entire
E6B8: 47      		ld	b,a		;physical block.
E6B9: A5      		and	l
E6BA: B8      		cp	b
E6BB: 23      		inc	hl		;prepare for the next one.
E6BC: C2A5E6  		jp	nz,wtseq8	;continue until (blkmask+1) sectors written.
E6BF: E1      		pop	hl		;reset next sector number.
E6C0: 22F0E9  		ld	(blknmbr),hl
E6C3: CDE5E1  		call	defdma		;and reset dma address.
              	;
              	;   normal disk write. set the desired track and sector then
              	; do the actual write.
              	;
E6C6: CDDCDF  	wtseq9:	call	trksec1		;determine track and sector for this write.
E6C9: C1      		pop	bc		;get write status flag.
E6CA: C5      		push	bc
E6CB: CDC3DF  		call	dowrite		;and write this out.
E6CE: C1      		pop	bc
E6CF: 3AEEE9  		ld	a,(savnrec)	;get number of records in file.
E6D2: 21ECE9  		ld	hl,savnxt	;get last record written.
E6D5: BE      		cp	(hl)
E6D6: DADDE6  		jp	c,wtseq10
E6D9: 77      		ld	(hl),a		;we have to update record count.
E6DA: 34      		inc	(hl)
E6DB: 0E02    		ld	c,2
              	;
              	;*   this area has been patched to correct disk update problem
              	;* when using blocking and de-blocking in the bios.
              	;
E6DD: 00      	wtseq10:nop			;was 'dcr c'
E6DE: 00      		nop			;was 'dcr c'
E6DF: 210000  		ld	hl,0		;was 'jnz wtseq99'
              	;
              	; *   end of patch.
              	;
E6E2: F5      		push	af
E6E3: CD74E1  		call	gets2		;set 'extent written to' flag.
E6E6: E67F    		and	7fh		;(* clear bit 7 *)
E6E8: 77      		ld	(hl),a
E6E9: F1      		pop	af		;get record count for this extent.
E6EA: FE7F    	wtseq99:cp	127		;is it full?
E6EC: C20BE7  		jp	nz,wtseq12
E6EF: 3AE0E9  		ld	a,(mode)	;yes, are we in sequential mode?
E6F2: FE01    		cp	1
E6F4: C20BE7  		jp	nz,wtseq12
E6F7: CDDDE0  		call	setnrec		;yes, set next record number.
E6FA: CD65E5  		call	getnext		;and get next empty space in directory.
E6FD: 2150DF  		ld	hl,status	;ok?
E700: 7E      		ld	a,(hl)
E701: B7      		or	a
E702: C209E7  		jp	nz,wtseq11
E705: 3D      		dec	a		;yes, set record count to -1.
E706: 32EEE9  		ld	(savnrec),a
E709: 3600    	wtseq11:ld	(hl),0		;clear status.
E70B: C3DDE0  	wtseq12:jp	setnrec		;set next record to access.
              	;
              	;   for random i/o, set the fcb for the desired record number
              	; based on the 'r0,r1,r2' bytes. these bytes in the fcb are
              	; used as follows:
              	;
              	;       fcb+35            fcb+34            fcb+33
              	;  |     'r-2'      |      'r-1'      |      'r-0'     |
              	;  |7             0 | 7             0 | 7             0|
              	;  |0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0|
              	;  |    overflow   | | extra |  extent   |   record #  |
              	;  | ______________| |_extent|__number___|_____________|
              	;                     also 's2'
              	;
              	;   on entry, register (c) contains 0ffh if this is a read
              	; and thus we can not access unwritten disk space. otherwise,
              	; another extent will be opened (for writing) if required.
              	;
E70E: AF      	position: xor	a		;set random i/o flag.
E70F: 32E0E9  		ld	(mode),a
              	;
              	;   special entry (function #40). m/pm ?
              	;
E712: C5      	positn1:push	bc		;save read/write flag.
E713: 2A4EDF  		ld	hl,(params)	;get address of fcb.
E716: EB      		ex	de,hl
E717: 212100  		ld	hl,33		;now get byte 'r0'.
E71A: 19      		add	hl,de
E71B: 7E      		ld	a,(hl)
E71C: E67F    		and	7fh		;keep bits 0-6 for the record number to access.
E71E: F5      		push	af
E71F: 7E      		ld	a,(hl)		;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
E720: 17      		rla	
E721: 23      		inc	hl
E722: 7E      		ld	a,(hl)
E723: 17      		rla	
E724: E61F    		and	1fh		;and save this in bits 0-4 of (c).
E726: 4F      		ld	c,a		;this is the extent byte.
E727: 7E      		ld	a,(hl)		;now get the extra extent byte.
E728: 1F      		rra	
E729: 1F      		rra	
E72A: 1F      		rra	
E72B: 1F      		rra	
E72C: E60F    		and	0fh
E72E: 47      		ld	b,a		;and save it in (b).
E72F: F1      		pop	af		;get record number back to (a).
E730: 23      		inc	hl		;check overflow byte 'r2'.
E731: 6E      		ld	l,(hl)
E732: 2C      		inc	l
E733: 2D      		dec	l
E734: 2E06    		ld	l,6		;prepare for error.
E736: C296E7  		jp	nz,positn5	;out of disk space error.
E739: 212000  		ld	hl,32		;store record number into fcb.
E73C: 19      		add	hl,de
E73D: 77      		ld	(hl),a
E73E: 210C00  		ld	hl,12		;and now check the extent byte.
E741: 19      		add	hl,de
E742: 79      		ld	a,c
E743: 96      		sub	(hl)		;same extent as before?
E744: C252E7  		jp	nz,positn2
E747: 210E00  		ld	hl,14		;yes, check extra extent byte 's2' also.
E74A: 19      		add	hl,de
E74B: 78      		ld	a,b
E74C: 96      		sub	(hl)
E74D: E67F    		and	7fh
E74F: CA8AE7  		jp	z,positn3	;same, we are almost done then.
              	;
              	;  get here when another extent is required.
              	;
E752: C5      	positn2:push	bc
E753: D5      		push	de
E754: CDADE4  		call	closeit		;close current extent.
E757: D1      		pop	de
E758: C1      		pop	bc
E759: 2E03    		ld	l,3		;prepare for error.
E75B: 3A50DF  		ld	a,(status)
E75E: 3C      		inc	a
E75F: CA8FE7  		jp	z,positn4	;close error.
E762: 210C00  		ld	hl,12		;put desired extent into fcb now.
E765: 19      		add	hl,de
E766: 71      		ld	(hl),c
E767: 210E00  		ld	hl,14		;and store extra extent byte 's2'.
E76A: 19      		add	hl,de
E76B: 70      		ld	(hl),b
E76C: CD5CE4  		call	openit		;try and get this extent.
E76F: 3A50DF  		ld	a,(status)	;was it there?
E772: 3C      		inc	a
E773: C28AE7  		jp	nz,positn3
E776: C1      		pop	bc		;no. can we create a new one (writing?).
E777: C5      		push	bc
E778: 2E04    		ld	l,4		;prepare for error.
E77A: 0C      		inc	c
E77B: CA8FE7  		jp	z,positn4	;nope, reading unwritten space error.
E77E: CD2FE5  		call	getempty	;yes we can, try to find space.
E781: 2E05    		ld	l,5		;prepare for error.
E783: 3A50DF  		ld	a,(status)
E786: 3C      		inc	a
E787: CA8FE7  		jp	z,positn4	;out of space?
              	;
              	;   normal return location. clear error code and return.
              	;
E78A: C1      	positn3:pop	bc		;restore stack.
E78B: AF      		xor	a		;and clear error code byte.
E78C: C30CDF  		jp	setstat
              	;
              	;   error. set the 's2' byte to indicate this (why?).
              	;
E78F: E5      	positn4:push	hl
E790: CD74E1  		call	gets2
E793: 36C0    		ld	(hl),0c0h
E795: E1      		pop	hl
              	;
              	;   return with error code (presently in l).
              	;
E796: C1      	positn5:pop	bc
E797: 7D      		ld	a,l		;get error code.
E798: 3250DF  		ld	(status),a
E79B: C383E1  		jp	sets2b7
              	;
              	;   read a random record.
              	;
E79E: 0EFF    	readran:ld	c,0ffh		;set 'read' status.
E7A0: CD0EE7  		call	position	;position the file to proper record.
E7A3: CCCCE5  		call	z,rdseq1	;and read it as usual (if no errors).
E7A6: C9      		ret	
              	;
              	;   write to a random record.
              	;
E7A7: 0E00    	writeran: ld	c,0		;set 'writing' flag.
E7A9: CD0EE7  		call	position	;position the file to proper record.
E7AC: CC0EE6  		call	z,wtseq1	;and write as usual (if no errors).
E7AF: C9      		ret	
              	;
              	;   compute the random record number. enter with (hl) pointing
              	; to a fcb an (de) contains a relative location of a record
              	; number. on exit, (c) contains the 'r0' byte, (b) the 'r1'
              	; byte, and (a) the 'r2' byte.
              	;
              	;   on return, the zero flag is set if the record is within
              	; bounds. otherwise, an overflow occured.
              	;
E7B0: EB      	comprand: ex	de,hl		;save fcb pointer in (de).
E7B1: 19      		add	hl,de		;compute relative position of record #.
E7B2: 4E      		ld	c,(hl)		;get record number into (bc).
E7B3: 0600    		ld	b,0
E7B5: 210C00  		ld	hl,12		;now get extent.
E7B8: 19      		add	hl,de
E7B9: 7E      		ld	a,(hl)		;compute (bc)=(record #)+(extent)*128.
E7BA: 0F      		rrca			;move lower bit into bit 7.
E7BB: E680    		and	80h		;and ignore all other bits.
E7BD: 81      		add	a,c		;add to our record number.
E7BE: 4F      		ld	c,a
E7BF: 3E00    		ld	a,0		;take care of any carry.
E7C1: 88      		adc	a,b
E7C2: 47      		ld	b,a
E7C3: 7E      		ld	a,(hl)		;now get the upper bits of extent into
E7C4: 0F      		rrca			;bit positions 0-3.
E7C5: E60F    		and	0fh		;and ignore all others.
E7C7: 80      		add	a,b		;add this in to 'r1' byte.
E7C8: 47      		ld	b,a
E7C9: 210E00  		ld	hl,14		;get the 's2' byte (extra extent).
E7CC: 19      		add	hl,de
E7CD: 7E      		ld	a,(hl)
E7CE: 87      		add	a,a		;and shift it left 4 bits (bits 4-7).
E7CF: 87      		add	a,a
E7D0: 87      		add	a,a
E7D1: 87      		add	a,a
E7D2: F5      		push	af		;save carry flag (bit 0 of flag byte).
E7D3: 80      		add	a,b		;now add extra extent into 'r1'.
E7D4: 47      		ld	b,a
E7D5: F5      		push	af		;and save carry (overflow byte 'r2').
E7D6: E1      		pop	hl		;bit 0 of (l) is the overflow indicator.
E7D7: 7D      		ld	a,l
E7D8: E1      		pop	hl		;and same for first carry flag.
E7D9: B5      		or	l		;either one of these set?
E7DA: E601    		and	01h		;only check the carry flags.
E7DC: C9      		ret	
              	;
              	;   routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
              	; reflect the last record used for a random (or other) file.
              	; this reads the directory and looks at all extents computing
              	; the largerst record number for each and keeping the maximum
              	; value only. then 'r0', 'r1', and 'r2' will reflect this
              	; maximum record number. this is used to compute the space used
              	; by a random file.
              	;
E7DD: 0E0C    	ransize:ld	c,12		;look thru directory for first entry with
E7DF: CD23E3  		call	findfst		;this name.
E7E2: 2A4EDF  		ld	hl,(params)	;zero out the 'r0, r1, r2' bytes.
E7E5: 112100  		ld	de,33
E7E8: 19      		add	hl,de
E7E9: E5      		push	hl
E7EA: 72      		ld	(hl),d		;note that (d)=0.
E7EB: 23      		inc	hl
E7EC: 72      		ld	(hl),d
E7ED: 23      		inc	hl
E7EE: 72      		ld	(hl),d
E7EF: CD00E2  	ransiz1:call	ckfilpos	;is there an extent to process?
E7F2: CA17E8  		jp	z,ransiz3	;no, we are done.
E7F5: CD69E1  		call	fcb2hl		;set (hl) pointing to proper fcb in dir.
E7F8: 110F00  		ld	de,15		;point to last record in extent.
E7FB: CDB0E7  		call	comprand	;and compute random parameters.
E7FE: E1      		pop	hl
E7FF: E5      		push	hl		;now check these values against those
E800: 5F      		ld	e,a		;already in fcb.
E801: 79      		ld	a,c		;the carry flag will be set if those
E802: 96      		sub	(hl)		;in the fcb represent a larger size than
E803: 23      		inc	hl		;this extent does.
E804: 78      		ld	a,b
E805: 9E      		sbc	a,(hl)
E806: 23      		inc	hl
E807: 7B      		ld	a,e
E808: 9E      		sbc	a,(hl)
E809: DA11E8  		jp	c,ransiz2
E80C: 73      		ld	(hl),e		;we found a larger (in size) extent.
E80D: 2B      		dec	hl		;stuff these values into fcb.
E80E: 70      		ld	(hl),b
E80F: 2B      		dec	hl
E810: 71      		ld	(hl),c
E811: CD38E3  	ransiz2:call	findnxt		;now get the next extent.
E814: C3EFE7  		jp	ransiz1		;continue til all done.
E817: E1      	ransiz3:pop	hl		;we are done, restore the stack and
E818: C9      		ret			;return.
              	;
              	;   function to return the random record position of a given
              	; file which has been read in sequential mode up to now.
              	;
E819: 2A4EDF  	setran:	ld	hl,(params)	;point to fcb.
E81C: 112000  		ld	de,32		;and to last used record.
E81F: CDB0E7  		call	comprand	;compute random position.
E822: 212100  		ld	hl,33		;now stuff these values into fcb.
E825: 19      		add	hl,de
E826: 71      		ld	(hl),c		;move 'r0'.
E827: 23      		inc	hl
E828: 70      		ld	(hl),b		;and 'r1'.
E829: 23      		inc	hl
E82A: 77      		ld	(hl),a		;and lastly 'r2'.
E82B: C9      		ret	
              	;
              	;   this routine select the drive specified in (active) and
              	; update the login vector and bitmap table if this drive was
              	; not already active.
              	;
E82C: 2ABAE9  	logindrv: ld	hl,(login)	;get the login vector.
E82F: 3A4DDF  		ld	a,(active)	;get the default drive.
E832: 4F      		ld	c,a
E833: CDF5E0  		call	shiftr		;position active bit for this drive
E836: E5      		push	hl		;into bit 0.
E837: EB      		ex	de,hl
E838: CD64DF  		call	select		;select this drive.
E83B: E1      		pop	hl
E83C: CC52DF  		call	z,slcterr	;valid drive?
E83F: 7D      		ld	a,l		;is this a newly activated drive?
E840: 1F      		rra	
E841: D8      		ret	c
E842: 2ABAE9  		ld	hl,(login)	;yes, update the login vector.
E845: 4D      		ld	c,l
E846: 44      		ld	b,h
E847: CD16E1  		call	setbit
E84A: 22BAE9  		ld	(login),hl	;and save.
E84D: C3AEE2  		jp	bitmap		;now update the bitmap.
              	;
              	;   function to set the active disk number.
              	;
E850: 3AE1E9  	setdsk:	ld	a,(eparam)	;get parameter passed and see if this
E853: 214DDF  		ld	hl,active	;represents a change in drives.
E856: BE      		cp	(hl)
E857: C8      		ret	z
E858: 77      		ld	(hl),a		;yes it does, log it in.
E859: C32CE8  		jp	logindrv
              	;
              	;   this is the 'auto disk select' routine. the firsst byte
              	; of the fcb is examined for a drive specification. if non
              	; zero then the drive will be selected and loged in.
              	;
E85C: 3EFF    	autosel:ld	a,0ffh		;say 'auto-select activated'.
E85E: 32E9E9  		ld	(auto),a
E861: 2A4EDF  		ld	hl,(params)	;get drive specified.
E864: 7E      		ld	a,(hl)
E865: E61F    		and	1fh		;look at lower 5 bits.
E867: 3D      		dec	a		;adjust for (1=a, 2=b) etc.
E868: 32E1E9  		ld	(eparam),a	;and save for the select routine.
E86B: FE1E    		cp	1eh		;check for 'no change' condition.
E86D: D280E8  		jp	nc,autosl1	;yes, don't change.
E870: 3A4DDF  		ld	a,(active)	;we must change, save currently active
E873: 32EAE9  		ld	(olddrv),a	;drive.
E876: 7E      		ld	a,(hl)		;and save first byte of fcb also.
E877: 32EBE9  		ld	(autoflag),a	;this must be non-zero.
E87A: E6E0    		and	0e0h		;whats this for (bits 6,7 are used for
E87C: 77      		ld	(hl),a		;something)?
E87D: CD50E8  		call	setdsk		;select and log in this drive.
E880: 3A4CDF  	autosl1:ld	a,(userno)	;move user number into fcb.
E883: 2A4EDF  		ld	hl,(params)	;(* upper half of first byte *)
E886: B6      		or	(hl)
E887: 77      		ld	(hl),a
E888: C9      		ret			;and return (all done).
              	;
              	;   function to return the current cp/m version number.
              	;
E889: 3E22    	getver:	ld	a,022h		;version 2.2
E88B: C30CDF  		jp	setstat
              	;
              	;   function to reset the disk system.
              	;
E88E: 210000  	rstdsk:	ld	hl,0		;clear write protect status and log
E891: 22B8E9  		ld	(wrtprt),hl	;in vector.
E894: 22BAE9  		ld	(login),hl
E897: AF      		xor	a		;select drive 'a'.
E898: 324DDF  		ld	(active),a
E89B: 218000  		ld	hl,tbuff	;setup default dma address.
E89E: 22BCE9  		ld	(userdma),hl
E8A1: CDE5E1  		call	defdma
E8A4: C32CE8  		jp	logindrv	;now log in drive 'a'.
              	;
              	;   function to open a specified file.
              	;
E8A7: CD7DE1  	openfil:call	clears2		;clear 's2' byte.
E8AA: CD5CE8  		call	autosel		;select proper disk.
E8AD: C35CE4  		jp	openit		;and open the file.
              	;
              	;   function to close a specified file.
              	;
E8B0: CD5CE8  	closefil: call	autosel		;select proper disk.
E8B3: C3ADE4  		jp	closeit		;and close the file.
              	;
              	;   function to return the first occurence of a specified file
              	; name. if the first byte of the fcb is '?' then the name will
              	; not be checked (get the first entry no matter what).
              	;
E8B6: 0E00    	getfst:	ld	c,0		;prepare for special search.
E8B8: EB      		ex	de,hl
E8B9: 7E      		ld	a,(hl)		;is first byte a '?'?
E8BA: FE3F    		cp	'?'
E8BC: CACDE8  		jp	z,getfst1	;yes, just get very first entry (zero length match).
E8BF: CDB1E0  		call	setext		;get the extension byte from fcb.
E8C2: 7E      		ld	a,(hl)		;is it '?'? if yes, then we want
E8C3: FE3F    		cp	'?'		;an entry with a specific 's2' byte.
E8C5: C47DE1  		call	nz,clears2	;otherwise, look for a zero 's2' byte.
E8C8: CD5CE8  		call	autosel		;select proper drive.
E8CB: 0E0F    		ld	c,15		;compare bytes 0-14 in fcb (12&13 excluded).
E8CD: CD23E3  	getfst1:call	findfst		;find an entry and then move it into
E8D0: C3F4E1  		jp	movedir		;the users dma space.
              	;
              	;   function to return the next occurence of a file name.
              	;
E8D3: 2AE4E9  	getnxt:	ld	hl,(savefcb)	;restore pointers. note that no
E8D6: 224EDF  		ld	(params),hl	;other dbos calls are allowed.
E8D9: CD5CE8  		call	autosel		;no error will be returned, but the
E8DC: CD38E3  		call	findnxt		;results will be wrong.
E8DF: C3F4E1  		jp	movedir
              	;
              	;   function to delete a file by name.
              	;
E8E2: CD5CE8  	delfile:call	autosel		;select proper drive.
E8E5: CDA7E3  		call	erafile		;erase the file.
E8E8: C30CE3  		jp	ststatus	;set status and return.
              	;
              	;   function to execute a sequential read of the specified
              	; record number.
              	;
E8EB: CD5CE8  	readseq:call	autosel		;select proper drive then read.
E8EE: C3C7E5  		jp	rdseq
              	;
              	;   function to write the net sequential record.
              	;
E8F1: CD5CE8  	wrtseq:	call	autosel		;select proper drive then write.
E8F4: C309E6  		jp	wtseq
              	;
              	;   create a file function.
              	;
E8F7: CD7DE1  	fcreate:call	clears2		;clear the 's2' byte on all creates.
E8FA: CD5CE8  		call	autosel		;select proper drive and get the next
E8FD: C32FE5  		jp	getempty	;empty directory space.
              	;
              	;   function to rename a file.
              	;
E900: CD5CE8  	renfile:call	autosel		;select proper drive and then switch
E903: CD21E4  		call	chgnames	;file names.
E906: C30CE3  		jp	ststatus
              	;
              	;   function to return the login vector.
              	;
E909: 2ABAE9  	getlog:	ld	hl,(login)
E90C: C334E9  		jp	getprm1
              	;
              	;   function to return the current disk assignment.
              	;
E90F: 3A4DDF  	getcrnt:ld	a,(active)
E912: C30CDF  		jp	setstat
              	;
              	;   function to set the dma address.
              	;
E915: EB      	putdma:	ex	de,hl
E916: 22BCE9  		ld	(userdma),hl	;save in our space and then get to
E919: C3E5E1  		jp	defdma		;the bios with this also.
              	;
              	;   function to return the allocation vector.
              	;
E91C: 2ACAE9  	getaloc:ld	hl,(alocvect)
E91F: C334E9  		jp	getprm1
              	;
              	;   function to return the read-only status vector.
              	;
E922: 2AB8E9  	getrov:	ld	hl,(wrtprt)
E925: C334E9  		jp	getprm1
              	;
              	;   function to set the file attributes (read-only, system).
              	;
E928: CD5CE8  	setattr:call	autosel		;select proper drive then save attributes.
E92B: CD46E4  		call	saveattr
E92E: C30CE3  		jp	ststatus
              	;
              	;   function to return the address of the disk parameter block
              	; for the current drive.
              	;
E931: 2AC6E9  	getparm:ld	hl,(diskpb)
E934: 2250DF  	getprm1:ld	(status),hl
E937: C9      		ret	
              	;
              	;   function to get or set the user number. if (e) was (ff)
              	; then this is a request to return the current user number.
              	; else set the user number from (e).
              	;
E938: 3AE1E9  	getuser:ld	a,(eparam)	;get parameter.
E93B: FEFF    		cp	0ffh		;get user number?
E93D: C246E9  		jp	nz,setuser
E940: 3A4CDF  		ld	a,(userno)	;yes, just do it.
E943: C30CDF  		jp	setstat
E946: E61F    	setuser:and	1fh		;no, we should set it instead. keep low
E948: 324CDF  		ld	(userno),a	;bits (0-4) only.
E94B: C9      		ret	
              	;
              	;   function to read a random record from a file.
              	;
E94C: CD5CE8  	rdrandom: call	autosel		;select proper drive and read.
E94F: C39EE7  		jp	readran
              	;
              	;   function to compute the file size for random files.
              	;
E952: CD5CE8  	wtrandom: call	autosel		;select proper drive and write.
E955: C3A7E7  		jp	writeran
              	;
              	;   function to compute the size of a random file.
              	;
E958: CD5CE8  	filesize: call	autosel		;select proper drive and check file length
E95B: C3DDE7  		jp	ransize
              	;
              	;   function #37. this allows a program to log off any drives.
              	; on entry, set (de) to contain a word with bits set for those
              	; drives that are to be logged off. the log-in vector and the
              	; write protect vector will be updated. this must be a m/pm
              	; special function.
              	;
E95E: 2A4EDF  	logoff:	ld	hl,(params)	;get drives to log off.
E961: 7D      		ld	a,l		;for each bit that is set, we want
E962: 2F      		cpl			;to clear that bit in (login)
E963: 5F      		ld	e,a		;and (wrtprt).
E964: 7C      		ld	a,h
E965: 2F      		cpl	
E966: 2ABAE9  		ld	hl,(login)	;reset the login vector.
E969: A4      		and	h
E96A: 57      		ld	d,a
E96B: 7D      		ld	a,l
E96C: A3      		and	e
E96D: 5F      		ld	e,a
E96E: 2AB8E9  		ld	hl,(wrtprt)
E971: EB      		ex	de,hl
E972: 22BAE9  		ld	(login),hl	;and save.
E975: 7D      		ld	a,l		;now do the write protect vector.
E976: A3      		and	e
E977: 6F      		ld	l,a
E978: 7C      		ld	a,h
E979: A2      		and	d
E97A: 67      		ld	h,a
E97B: 22B8E9  		ld	(wrtprt),hl	;and save. all done.
E97E: C9      		ret	
              	;
              	;   get here to return to the user.
              	;
E97F: 3AE9E9  	goback:	ld	a,(auto)	;was auto select activated?
E982: B7      		or	a
E983: CA9CE9  		jp	z,goback1
E986: 2A4EDF  		ld	hl,(params)	;yes, but was a change made?
E989: 3600    		ld	(hl),0		;(* reset first byte of fcb *)
E98B: 3AEBE9  		ld	a,(autoflag)
E98E: B7      		or	a
E98F: CA9CE9  		jp	z,goback1
E992: 77      		ld	(hl),a		;yes, reset first byte properly.
E993: 3AEAE9  		ld	a,(olddrv)	;and get the old drive and select it.
E996: 32E1E9  		ld	(eparam),a
E999: CD50E8  		call	setdsk
E99C: 2A1ADF  	goback1:ld	hl,(usrstack)	;reset the users stack pointer.
E99F: F9      		ld	sp,hl
E9A0: 2A50DF  		ld	hl,(status)	;get return status.
E9A3: 7D      		ld	a,l		;force version 1.4 compatability.
E9A4: 44      		ld	b,h
E9A5: C9      		ret			;and go back to user.
              	;
              	;   function #40. this is a special entry to do random i/o.
              	; for the case where we are writing to unused disk space, this
              	; space will be zeroed out first. this must be a m/pm special
              	; purpose function, because why would any normal program even
              	; care about the previous contents of a sector about to be
              	; written over.
              	;
E9A6: CD5CE8  	wtspecl:call	autosel		;select proper drive.
E9A9: 3E02    		ld	a,2		;use special write mode.
E9AB: 32E0E9  		ld	(mode),a
E9AE: 0E00    		ld	c,0		;set write indicator.
E9B0: CD12E7  		call	positn1		;position the file.
E9B3: CC0EE6  		call	z,wtseq1	;and write (if no errors).
E9B6: C9      		ret	
              	;
              	;**************************************************************
              	;*
              	;*     bdos data storage pool.
              	;*
              	;**************************************************************
              	;
E9B7: E5      	emptyfcb: defb	0e5h		;empty directory segment indicator.
E9B8: 0000    	wrtprt:	defw	0		;write protect status for all 16 drives.
E9BA: 0000    	login:	defw	0		;drive active word (1 bit per drive).
E9BC: 8000    	userdma:defw	080h		;user's dma address (defaults to 80h).
              	;
              	;   scratch areas from parameter block.
              	;
E9BE: 0000    	scratch1: defw	0		;relative position within dir segment for file (0-3).
E9C0: 0000    	scratch2: defw	0		;last selected track number.
E9C2: 0000    	scratch3: defw	0		;last selected sector number.
              	;
              	;   disk storage areas from parameter block.
              	;
E9C4: 0000    	dirbuf:	defw	0		;address of directory buffer to use.
E9C6: 0000    	diskpb:	defw	0		;contains address of disk parameter block.
E9C8: 0000    	chkvect:defw	0		;address of check vector.
E9CA: 0000    	alocvect: defw	0		;address of allocation vector (bit map).
              	;
              	;   parameter block returned from the bios.
              	;
E9CC: 0000    	sectors:defw	0		;sectors per track from bios.
E9CE: 00      	blkshft:defb	0		;block shift.
E9CF: 00      	blkmask:defb	0		;block mask.
E9D0: 00      	extmask:defb	0		;extent mask.
E9D1: 0000    	dsksize:defw	0		;disk size from bios (number of blocks-1).
E9D3: 0000    	dirsize:defw	0		;directory size.
E9D5: 0000    	alloc0:	defw	0		;storage for first bytes of bit map (dir space used).
E9D7: 0000    	alloc1:	defw	0
E9D9: 0000    	offset:	defw	0		;first usable track number.
E9DB: 0000    	xlate:	defw	0		;sector translation table address.
              	;
              	;
E9DD: 00      	closeflg: defb	0		;close flag (=0ffh is extent written ok).
E9DE: 00      	rdwrtflg: defb	0		;read/write flag (0ffh=read, 0=write).
E9DF: 00      	fndstat:defb	0		;filename found status (0=found first entry).
E9E0: 00      	mode:	defb	0		;i/o mode select (0=random, 1=sequential, 2=special random).
E9E1: 00      	eparam:	defb	0		;storage for register (e) on entry to bdos.
E9E2: 00      	relblock: defb	0		;relative position within fcb of block number written.
E9E3: 00      	counter:defb	0		;byte counter for directory name searches.
E9E4: 00000000	savefcb:defw	0,0		;save space for address of fcb (for directory searches).
E9E8: 00      	bigdisk:defb	0		;if =0 then disk is > 256 blocks long.
E9E9: 00      	auto:	defb	0		;if non-zero, then auto select activated.
E9EA: 00      	olddrv:	defb	0		;on auto select, storage for previous drive.
E9EB: 00      	autoflag: defb	0		;if non-zero, then auto select changed drives.
E9EC: 00      	savnxt:	defb	0		;storage for next record number to access.
E9ED: 00      	savext:	defb	0		;storage for extent number of file.
E9EE: 0000    	savnrec:defw	0		;storage for number of records in file.
E9F0: 0000    	blknmbr:defw	0		;block number (physical sector) used within a file or logical sect
E9F2: 0000    	logsect:defw	0		;starting logical (128 byte) sector of block (physical sector).
E9F4: 00      	fcbpos:	defb	0		;relative position within buffer for fcb of file of interest.
E9F5: 0000    	filepos:defw	0		;files position within directory (0 to max entries -1).
              	;
              	;   disk directory buffer checksum bytes. one for each of the
              	; 16 possible drives.
              	;
E9F7: 00000000	cksumtbl: defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
E9FB: 00...   	
              	
              	;
              	;*
              	;******************   E N D   O F   C P / M   *****************
              	;*
              	
              	#include "../bios.asm"
              	;
              	;**************************************************************
              	;*
              	;*        B I O S   B O O T   R O U T I N E S
              	;*
              	;**************************************************************
              	;
              	
              	;
              	;**************************************************************
              	;*
              	;*          B I O S   J U M P   T A B L E
              	;*
              	;*    This isn't actually used by the BDOS, but
              	;*    some applications (*cough* MBASIC) use it
              	;*    to directly address BIOS calls to get around
              	;*    the BDOS.
              	;*
              	;**************************************************************
              	;
EA07: C33AEA  		jp	boot
EA0A: C348EA  	wbootin:jp	wboot	; Indirection to wboot, used by MBASIC
EA0D: C3A2EA  		jp	const
EA10: C3ADEA  		jp	conin
EA13: C3B9EA  		jp	conout
EA16: C3C5EA  		jp	list
EA19: C3C9EA  		jp	punch
EA1C: C3CDEA  		jp	reader
EA1F: C3DBEA  		jp	home
EA22: C3E0EA  		jp	seldsk
EA25: C3FEEA  		jp	settrk
EA28: C302EB  		jp	setsec
EA2B: C306EB  		jp	setdma
EA2E: C30CEB  		jp	read
EA31: C310EB  		jp	write
EA34: C314EB  		jp	prstat
EA37: C317EB  		jp	sectrn
              	
              	; Cold boot entry
              	; Sets up some lower CP/M memory areas, and tells the INIT
              	; program to run on CP/M startup.
EA3A: 3100D4  	boot:	ld	sp,cbase
              	
              		; Run the warm boot common code
EA3D: CD5FEA  		call	wbootr
              		
              		; Special conditions for a cold boot
EA40: CD5AEB  		call	cbinit
              	
              		; Jump to CP/M
EA43: 0E00    		ld	c,default
EA45: C300D4  		jp	cbase
              	
              	
              	; Warm boot entry
              	; Mainly just calls wbootr and manages IOBYTE
EA48: 3100D4  	wboot:	ld	sp,cbase
              	
              		; Save current drive + user
EA4B: 3A0400  		ld	a,(tdrive)
EA4E: F5      		push	af
              	
              		; Save IOBYTE
EA4F: 3A0300  		ld	a,(iobyte)
EA52: F5      		push	af
              	
              		; Warm boot
EA53: CD5FEA  		call	wbootr
              		
              		; Restore IOBYTE
EA56: F1      		pop	af
EA57: 320300  		ld	(iobyte),a
              		
              		; Restore tdrive and warm boot
EA5A: F1      		pop	af
EA5B: 4F      		ld	c,a
EA5C: C300D4  		jp	cbase
              	
              	; Warm boot routine
              	; Sends init signal to device bus, loads CCP, and inits CP/M
              	; Does not actually jump to CP/M just yet
EA5F: F3      	wbootr:	di
              		
              		; Zero out BSS
EA60: AF      		xor	a
EA61: 2134F9  		ld	hl,_TEXT_end
EA64: 77      		ld	(hl),a
EA65: 1135F9  		ld	de,_TEXT_end+1
EA68: 01D204  		ld	bc,_BSS_size
EA6B: EDB0    		ldir
              	
              		; Send init signals to all devices
EA6D: 0600    		ld	b,0
EA6F: C5      	wboot0:	push	bc
EA70: 216CEB  		ld	hl,bdevsw
EA73: 78      		ld	a,b
EA74: CD29EB  		call	swindir
EA77: AF      		xor	a
EA78: 14      		inc	d
EA79: CC46EB  		call	z,callmj
EA7C: C1      		pop	bc
EA7D: 04      		inc	b
EA7E: 3E14    		ld	a,20
EA80: B8      		cp	b
EA81: 20EC    		jr	nz,wboot0
              	
              		; Turn off batch mode
EA83: 3E00    		ld	a,0
EA85: 32E2D4  		ld	(batch),a
              	
              		; Load the CCP
EA88: CD66EB  		call	resccp
              	
              		; Call config init
EA8B: CD4BEB  		call	wbinit
              		
              		; Set up lower memory
EA8E: 219AEA  		ld	hl,cpmlow
EA91: 110000  		ld	de,0
EA94: 010800  		ld	bc,8
EA97: EDB0    		ldir
              	
              	
              		; Return
EA99: C9      		ret
              	
              	
              	; This is not a true function, but a block of code to be copied
              	; to CP/M lower memory
EA9A: C30AEA  	cpmlow:	jp	wbootin	; Call jump table version instead
EA9D: 81      		defb	0x81	; Default IOBYTE
EA9E: 00      		defb	0	; Default drive
EA9F: C306DC  		jp	fbase	; BDOS entry 
              	
              	
              	; Console status
              	;
              	; Returns a=0xFF if there is a character
              	; uses: all
              	; Defaults to device 0 right now
EAA2: 0600    	const:	ld	b,0
EAA4: CD1AEB  		call	cdindir
EAA7: 14      		inc	d
EAA8: C0      		ret	nz
EAA9: 3C      		inc	a
EAAA: C346EB  		jp	callmj
              		
              	; Console read
              	;
              	; Returns character in a
              	; uses: all
              	; Defaults to device 0 right now
EAAD: 0600    	conin:	ld	b,0
EAAF: CD1AEB  		call	cdindir
EAB2: 14      		inc	d
EAB3: C0      		ret	nz
EAB4: 3E02    		ld	a,2
EAB6: C346EB  		jp	callmj
              		
              	; Console write
              	; c = Character to display
              	;
              	; uses: all
              	; Defaults to device 0 right now
EAB9: 0600    	conout:	ld	b,0
EABB: CD1AEB  	chrout:	call	cdindir
EABE: 14      		inc	d
EABF: C0      		ret	nz
EAC0: 3E03    		ld	a,3
EAC2: C346EB  		jp	callmj
              		
              	; Printer write
              	; c = Character to print
              	;
              	; uses: all
EAC5: 0606    	list:	ld	b,6
EAC7: 18F2    		jr	chrout
              	
              	; Punch (or auxiliary) write
              	; c = Character to punch
              	;
EAC9: 0604    	punch:	ld	b,4
EACB: 18EE    		jr	chrout
              	
              	; Reader (or auxiliary) read
              	;
              	; Returns character in a, or a=0x1A
EACD: 0602    	reader:	ld	b,2
EACF: CD1AEB  		call	cdindir
EAD2: 14      		inc	d
EAD3: 3E1A    		ld	a,0x1A
EAD5: C0      		ret	nz
EAD6: 3E02    		ld	a,2
EAD8: C346EB  		jp	callmj
              		
              	; Move the current drive to track 0
              	;
              	; uses: all
EADB: 3E01    	home:	ld	a,1
EADD: C3F8EA  		jp	callbd
              		
              	; Selects a block device
              	; c = Device to select
              	; e = Disk logging status
              	;
              	; return hl=0 if device not valid
              	; uses: all
EAE0: 79      	seldsk:	ld	a,c
EAE1: 43      		ld	b,e
EAE2: 216CEB  		ld	hl,bdevsw
EAE5: CD29EB  		call	swindir
EAE8: 22F9EA  		ld	(callbd+1),hl
EAEB: 210000  		ld	hl,0
EAEE: 14      		inc	d
EAEF: C0      		ret	nz
EAF0: 2A47EB  		ld	hl,(callmj+1)
EAF3: 22FCEA  		ld	(callbd+4),hl
EAF6: 3E02    		ld	a,2
              		; Pass b = logging status, c = device #
              		
              	; Small stub to jump to the currently selected block device
              	; Also records hl as argument
              	;
              	; We love self-modfiying code!
EAF8: 21      	callbd:	defb	0x21
EAF9: 0000    		defw	0
EAFB: C3      		defb	0xC3
EAFC: 0000    		defw	0
              	
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	;
              	; uses: all
EAFE: 3E03    	settrk:	ld	a,3
EB00: 18F6    		jr	callbd
              		
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	;
              	; uses: all
EB02: 3E04    	setsec:	ld	a,4
EB04: 18F2    		jr	callbd
              	
              	; Sets the DMA address of the selected block device
              	; bc = DMA address
              	;
              	; uses: all
EB06: 60      	setdma:	ld	h,b
EB07: 69      		ld	l,c
EB08: 2249EB  		ld	(biodma),hl
EB0B: C9      		ret
              		
              	; Reads the configured block from the selected block device
              	;
              	; uses: all
EB0C: 3E05    	read:	ld	a,5
EB0E: 18E8    		jr	callbd
              	
              	; Writes the configured block to the selected block device
              	; c = Deferred mode
              	;
              	; uses: all
EB10: 3E06    	write:	ld	a,6
EB12: 18E4    		jr	callbd
              		
              	; "Printer" is always read for bytes
              	; Maybe in the future we will implement this, but for now
              	; this will do.
              	;
              	; Returns a=0xFF
EB14: 3EFF    	prstat:	ld	a,0xFF
EB16: C9      		ret
              		
              	; Provides sector translation
              	; Returns no translation for all devices
EB17: 60      	sectrn:	ld	h,b
EB18: 69      		ld	l,c
EB19: C9      		ret
              		
              	; Character device switch indirection
              	; Obtains device by doing IOBYTE indirection
              	; Sets hl to cdevsw and jumps to swindir
EB1A: 04      	cdindir:inc	b
EB1B: 3A0300  		ld	a,(iobyte)
EB1E: 05      	cdindi0:dec	b
EB1F: 2803    		jr	z,cdindi1
EB21: 1F      		rra
EB22: 18FA    		jr	cdindi0
EB24: E603    	cdindi1:and	0x03
EB26: 21ACEB  		ld	hl,cdevsw
              	
              	; Switch indirect helper function
              	; a = Device
              	; hl = Start of switch
              	;
              	; returns d=255 if device found, hl as argument
              	; uses: af, de, hl
EB29: 110400  	swindir:ld	de,4
EB2C: B7      		or	a
EB2D: 2804    	swindi0:jr	z,swindi1
EB2F: 19      		add	hl,de
EB30: 3D      		dec	a
EB31: 18FA    		jr	swindi0
EB33: 7E      	swindi1:ld	a,(hl)
EB34: 3247EB  		ld	(callmj+1),a
EB37: 23      		inc	hl
EB38: B6      		or	(hl)
EB39: C8      		ret	z
EB3A: 7E      		ld	a,(hl)
EB3B: 3248EB  		ld	(callmj+2),a
EB3E: 23      		inc	hl
EB3F: 7E      		ld	a,(hl)
EB40: 23      		inc	hl
EB41: 66      		ld	h,(hl)
EB42: 6F      		ld	l,a
EB43: 16FF    		ld	d,255
EB45: C9      	nulldev:ret		; Just points to a return
              	
              	; Small stub to jump to the memory jump register
EB46: C3      	callmj: defb	0xC3
EB47: 0000    		defw	0
              	
              	
              	
              	; Variables
EB49: 0000    	biodma:	defw	0	; Block device DMA address
              	
              	;
              	;**************************************************************
              	;*
              	;*        W A R M   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function is called at the end of a warm boot
              	;*    to set up hardware-specific stuff. 
              	;*
              	;**************************************************************
              	;
              	
EB4B: 3E01    	wbinit:	ld	a,0x01		; Bank out ROM
EB4D: D300    		out	(0x00),a
              		
              		; Turn on batch mode
EB4F: 3EFF    		ld	a,0xFF
EB51: 32E2D4  		ld	(batch),a
              		
              		; Also set interrupt mode 2 stuff
EB54: ED47    		ld	i,a
EB56: ED5E    		im	2		; Start interrupts
EB58: FB      		ei
              		
EB59: C9      		ret
              	
              	;
              	;**************************************************************
              	;*
              	;*        C O L D   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function will run once during the intial cold
              	;*    boot. It is the last task to run before control is
              	;*    given to the CCP. This function is run after wbinit
              	;*
              	;**************************************************************
              	;
              	
EB5A: 3E06    	cbinit:	ld	a,6	; Enable INIT to run
EB5C: 3204D4  		ld	(inbuff+1),a
EB5F: C9      		ret
              	
              	;
              	;**************************************************************
              	;*
              	;*            I N T E R R U P T   H A N D L I N G
              	;*
              	;*     This function will be called in order to handle an
              	;*     interrupt if the need arises. Hooking drivers up to
              	;*     this code may be a little bit more involved.
              	;*
              	;**************************************************************
              	;
              	
EB60: FB      	cfirq:	ei
EB61: ED4D    		reti
              	
              	;
              	;**************************************************************
              	;*
              	;*              B D O S   C A L L   H O O K
              	;*
              	;*     This function is called everytime a BDOS call occurs.
              	;*     It can be used by specialized drivers to either inject
              	;*     new BDOS calls, or intercept existing ones.
              	;*
              	;*     Registers 'bc' and 'e' must be preserved if a call is
              	;*     going to be forwarded to the system. Register 'c' will
              	;*     contain BDOS call number.
              	;*       
              	;*
              	;**************************************************************
              	;
              	
EB63: C3F9EF  	syshook:jp	ns_sysh
              	
              	
              	;**************************************************************
              	;*
              	;*           B L O C K   D E V I C E   S W I T C H
              	;*
              	;*       IshkurCP/M can support up to 16 logical disks
              	;*       A single driver can be mapped to a number of
              	;*       these disks. Each logical disk is defined by a
              	;*       4-byte record. The first 2 bytes are a pointer
              	;*       to the device entry, and the last 2 are passed
              	;*       as an argument to the device. Usually this 
              	;*       takes the form of a minor number for indexing
              	;*       sub-disks on the same driver
              	;*
              	;*
              	;**************************************************************
              	;
              		
              	; One of the block devices needs to have the responsibiliy
              	; of loading the CCP into memory. Define the jump vector here
EB66: C3D0EF  	resccp:	jp	ns_ccp
              	
              	; Additionally, if Ishkur is using a graphical device, that
              	; device may temporarily need to access the Graphical Resource
              	; Block (GRB) to load in fonts and such. This is up to 2k in
              	; size, and goes in the location that the CCP resides
EB69: C3D5EF  	resgrb:	jp	ns_grb
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
EB6C: 6CEF0000	bdevsw:	defw	nfsdev,	0	; 'A'
EB70: 6CEF0100		defw	nfsdev,	1	; 'B'
EB74: F7F60000		defw	nfddev,	0	; 'C'
EB78: F7F60100		defw	nfddev,	1	; 'D'
EB7C: 6CEF0400		defw	nfsdev,	4	; 'E'
EB80: 6CEF0500		defw	nfsdev,	5	; 'F'
EB84: 6CEF0600		defw	nfsdev,	6	; 'G'
EB88: 6CEF0700		defw	nfsdev,	7	; 'H'
EB8C: 6CEF0800		defw	nfsdev,	8	; 'I'
EB90: 6CEF0900		defw	nfsdev,	9	; 'J'
EB94: 6CEF0A00		defw	nfsdev,	10	; 'K'
EB98: 6CEF0B00		defw	nfsdev,	11	; 'L'
EB9C: 6CEF0C00		defw	nfsdev,	12	; 'M'
EBA0: 6CEF0D00		defw	nfsdev,	13	; 'N'
EBA4: 6CEF0E00		defw	nfsdev,	14	; 'O'
EBA8: 6CEF0F00		defw	nfsdev,	15	; 'P'
              	
              	;
              	; Character device switch MUST come directly after in memory!
              	;
              	;**************************************************************
              	;*
              	;*        C H A R A C T E R   D E V I C E   S W I T C H
              	;*
              	;*      Currently, 4 character devices are supported. These
              	;*      devices are the console, the printer, and two "punches"
              	;*      (can be thought of as an auxillary serial device).
              	;*      All character devices use the same interface, which
              	;*      allows for easy indireciton. 
              	;*
              	;*	Device switch logic works about the same of the block
              	;*	devices.
              	;*
              	;**************************************************************
              	;
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
EBAC: 3AF60000	cdevsw:	defw	siodev,	0	; TTY device
EBB0: BCEB0000		defw	vdpdev,	0	; Console device
EBB4: 10F60000		defw	prtdev,	0	; Aux I/O device #1 (LPT)
EBB8: 00000000		defw	0,	0	; Aux I/O device #2 (GEN)
              	
              	;
              	;**************************************************************
              	;*
              	;*        D E V I C E   D R I V E R   I N C L U D E S
              	;*
              	;**************************************************************
              	;
              	
              	#include "../dev/nabu_vdp.asm"
              	;
              	;**************************************************************
              	;*
              	;*      T M S 9 9 1 8   C H A R A C T E R   D E V I C E
              	;*
              	;*      This device emulated a VT52 terminal using the
              	;*      TMS9918A graphics chip. The 2kb font record is
              	;*      not resident is memory, and must be provided by
              	;*      a compatable block I/O device.
              	;*
              	;*      F18A style 80 column mode is supported
              	;*
              	;*      This specific version uses the NABU keyboard as
              	;*      an input to the emulated termina 
              	;*
              	;*      Device requires 48 bytes of bss space (tm_bss)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
F934: 00      	tm_outc:defs	1	; Output character
F935: 00      	tm_scro:defs	1	; Scroll width
F936: 00      	tm_escs:defs	1	; Escape state
F937: 00      	tm_last:defs	1	; Last character read
F938: 00000000	tm_cbuf:defs	40	; 40 byte character buffer
F93C: 00...   	
              	.area	_TEXT
              	
              	; TMS9918 Configuration
00A0:         	tm_data	equ	0xA0	; TMS9918 data register (mode=0)
00A1:         	tm_latc	equ	0xA1	; TMS9918 latch register (mode=1)
              	
0090:         	tm_keyd	equ	0x90	; Keyboard data register
0091:         	tm_keys	equ	0x91	; Keyboard status register
              	
0040:         	tm_ayda	equ	0x40	; AY-3-8910 data port
0041:         	tm_atla	equ	0x41	; AY-3-8910 latch port
              	
              	; --- VRAM MAP ---
              	; 0x0000 - 0x07FF: Font
              	; 0x0800 - 0x0BFF: 40 column screen buffer
              	; 0x0C00 - 0x0FFF: Unused
              	; 0x1000 - 0x17FF: 80 column screen buffer
              	;
              	; Serial #
              	; 0x17FE: 0xE5
              	; 0x17FF: 0x81
              	
              	
              	; Driver jump table
EBBC: B7      	vdpdev:	or	a
EBBD: 2845    		jr	z,tm_init
EBBF: 3D      		dec	a
EBC0: 2819    		jr	z,tm_stat
EBC2: 3D      		dec	a
EBC3: CAA6EC  		jp	z,tm_read
EBC6: C304ED  		jp	tm_writ
              	
              	; A slower version of the OTIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
EBC9: F5      	tm_otir:push	af
EBCA: 7E      	tm_oti0:ld	a,(hl)
EBCB: ED79    		out	(c),a
EBCD: 23      		inc	hl
EBCE: 10FA    		djnz	tm_oti0
EBD0: F1      		pop	af
EBD1: C9      		ret
              		
              	; A slower version of the INIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
EBD2: F5      	tm_inir:push	af
EBD3: ED78    	tm_inr0:in	a,(c)
EBD5: 77      		ld	(hl),a
EBD6: 23      		inc	hl
EBD7: 10FA    		djnz	tm_inr0
EBD9: F1      		pop	af
EBDA: C9      		ret
              	
              	
              	; Gets the status of the keyboard
              	;
              	; Returns a=0xFF if there is a key to read 
              	; uses: af, bc, de, hl
EBDB: CD29EF  	tm_stat:call	tm_dint
EBDE: CDE7EB  		call	tm_sta0
EBE1: F5      		push	af
EBE2: CD39EF  		call	tm_eint
EBE5: F1      		pop	af
EBE6: C9      		ret 
EBE7: 3A37F9  	tm_sta0:ld	a,(tm_last)
EBEA: FEE4    		cp	0xE4
EBEC: 2871    		jr	z,tm_scri
EBEE: FEE5    		cp	0xE5
EBF0: 287F    		jr	z,tm_sclf
EBF2: 3A34F9  	tm_sta1:ld	a,(tm_outc)
EBF5: 3C      		inc	a
EBF6: 3EFF    		ld	a,0xFF
EBF8: C0      		ret	nz
EBF9: CD38EE  		call	tm_getc
EBFC: 3234F9  		ld	(tm_outc),a
EBFF: 3C      		inc	a
EC00: C8      		ret	z
EC01: 3EFF    		ld	a,0xFF
EC03: C9      		ret
              	
              	; TMS9918 init
              	; Load font record, set up terminal
EC04: CD69EB  	tm_init:call	resgrb
              	
              		; Set up registers
EC07: CD7BEC  		call	tm_setp
              		
              		; Set up interrupt vectors (if needed)
EC0A: 2123EF  		ld	hl,tm_virq
EC0D: 2206FF  		ld	(intvec+6),hl
EC10: 2156EE  		ld	hl,tm_kirq
EC13: 2204FF  		ld	(intvec+4),hl
              		
              		; Set TMS pattern generator block to 0
EC16: DBA1    		in	a,(tm_latc)
EC18: AF      		xor	a
EC19: D3A1    		out	(tm_latc),a
EC1B: 3E84    		ld	a,0x84
EC1D: D3A1    		out	(tm_latc),a
              		
              		; Write the GRB
EC1F: 010040  		ld	bc,0x4000
EC22: CD18EF  		call	tm_addr
EC25: 2100D4  		ld	hl,cbase
EC28: 0EA0    		ld	c,tm_data
EC2A: 3E08    		ld	a,8	; Transfer 8*256 = 2048
EC2C: 0600    	tm_ini0:ld	b,0
EC2E: CDC9EB  		call	tm_otir
EC31: 3D      		dec	a
EC32: 20F8    		jr	nz,tm_ini0
              		
              		; Cold boot?
EC34: 3A4BEF  		ld	a,(tm_cold)
EC37: B7      		or	a
EC38: 2012    		jr	nz,tm_ini1
              		
              		; Check serial #
EC3A: 01FE17  		ld	bc,0x17FE
EC3D: CD18EF  		call	tm_addr
EC40: ED78    		in	a,(c)
EC42: FEE5    		cp	0xE5
EC44: 2006    		jr	nz,tm_ini1
EC46: ED78    		in	a,(c)
EC48: FE81    		cp	0x81
EC4A: 280D    		jr	z,tm_cloc
              		
              		; Reset the terminal
EC4C: CDFBEE  	tm_ini1:call	tm_cls
EC4F: AF      		xor	a
EC50: 3249EF  		ld	(tm_curx),a
EC53: 324AEF  		ld	(tm_cury),a
EC56: 324BEF  		ld	(tm_cold),a
              		
              		; Fall to tm_cloc
              		
              	; Clear the output character
              	;
              	; uses: af
EC59: 3EFF    	tm_cloc:ld	a,0xFF
EC5B: 3234F9  		ld	(tm_outc),a
              	
EC5E: C9      		ret
              		
              	; Scroll left / scroll right
              	;
              	; uses: af, bc, de, hl
EC5F: 3A35F9  	tm_scri:ld	a,(tm_scro)
EC62: B7      		or	a
EC63: FE28    		cp	40
EC65: 2808    		jr	z,tm_scr1
EC67: C604    		add	a,4
EC69: 3235F9  	tm_scr0:ld	(tm_scro),a
EC6C: CDD8EE  		call	tm_usco
EC6F: 1881    	tm_scr1:jr	tm_sta1
EC71: 3A35F9  	tm_sclf:ld	a,(tm_scro)
EC74: B7      		or	a
EC75: 28F8    		jr	z,tm_scr1
EC77: D604    		sub	4
EC79: 18EE    		jr	tm_scr0
              	
              	; Sets up registers depending on mode
              	; used to change between 40-col and 80-col
              	;
              	; uses: af, hl
EC7B: 2A44EF  	tm_setp:ld	hl,(tm_mode)
              	
              		; Set TMS to text mode
EC7E: DBA1    		in	a,(tm_latc)
EC80: 7C      		ld	a,h
EC81: D3A1    		out	(tm_latc),a
EC83: 3E80    		ld	a,0x80
EC85: D3A1    		out	(tm_latc),a
EC87: DBA1    		in	a,(tm_latc)
EC89: 3EF0    		ld	a,0xF0
EC8B: D3A1    		out	(tm_latc),a
EC8D: 3E81    		ld	a,0x81
EC8F: D3A1    		out	(tm_latc),a
              		
              		; Set TMS color
EC91: DBA1    		in	a,(tm_latc)
EC93: 3A46EF  		ld	a,(tm_colr)
EC96: D3A1    		out	(tm_latc),a
EC98: 3E87    		ld	a,0x87
EC9A: D3A1    		out	(tm_latc),a
              		
              		; Set TMS name table to 0x0800
EC9C: DBA1    		in	a,(tm_latc)
EC9E: 7D      		ld	a,l
EC9F: D3A1    		out	(tm_latc),a
ECA1: 3E82    		ld	a,0x82
ECA3: D3A1    		out	(tm_latc),a
ECA5: C9      		ret
              	
              	; Waits for the user to press a key, and returns it
              	;
              	; Returns ASCII key in A
              	; uses: af, bc, de, hl
ECA6: CD29EF  	tm_read:call	tm_dint
ECA9: CDB2EC  		call	tm_rea0
ECAC: F5      		push	af
ECAD: CD39EF  		call	tm_eint
ECB0: F1      		pop	af
ECB1: C9      		ret 
ECB2: 3A49EF  	tm_rea0:ld	a,(tm_curx)
ECB5: 4F      		ld	c,a
ECB6: 3A4AEF  		ld	a,(tm_cury)
ECB9: 57      		ld	d,a
ECBA: 210010  		ld	hl,0x1000
ECBD: 3E50    		ld	a,80
ECBF: CDB4EE  		call	tm_chat
ECC2: DBA0    		in	a,(tm_data)	; char is in A
ECC4: 57      		ld	d,a		; char key
ECC5: 5F      		ld	e,a		; blinking char
ECC6: 0601    		ld	b,1
              		
ECC8: D5      	tm_rea1:push	de
ECC9: CDE7EB  		call	tm_sta0		; No interrupts!
ECCC: D1      		pop	de
ECCD: 3C      		inc	a
ECCE: 200D    		jr	nz,tm_rea2
ECD0: 5A      		ld	e,d
ECD1: CDEDEC  		call	tm_rea3
ECD4: 3A34F9  		ld	a,(tm_outc)
ECD7: 47      		ld	b,a
ECD8: CD59EC  		call	tm_cloc
ECDB: 78      		ld	a,b
ECDC: C9      		ret
              		
ECDD: CDFBEC  	tm_rea2:call	tm_stal
ECE0: 10E6    		djnz	tm_rea1
ECE2: 3E80    		ld	a,0x80
ECE4: AB      		xor	e
ECE5: 5F      		ld	e,a
ECE6: CDEDEC  		call	tm_rea3
ECE9: 06BE    		ld	b,190
ECEB: 18DB    		jr	tm_rea1
              	
              	
ECED: D5      	tm_rea3:push	de
ECEE: 3A49EF  		ld	a,(tm_curx)
ECF1: 4F      		ld	c,a
ECF2: 3A4AEF  		ld	a,(tm_cury)
ECF5: 57      		ld	d,a
ECF6: CD90EE  		call	tm_putc
ECF9: D1      		pop	de
ECFA: C9      		ret
              	
              	; Stalls out for a little bit
              	;
              	; uses: none
ECFB: C5      	tm_stal:push	bc
ECFC: 06FF    		ld	b,255
ECFE: C5      	tm_sta2:push	bc
ECFF: C1      		pop	bc
ED00: 10FC    		djnz	tm_sta2
ED02: C1      		pop	bc
ED03: C9      		ret
              	
              	
              	; Writes a character to the screen
              	; c = Character to write
              	;
              	; Returns c,b as next position 
              	; uses: af, bc, de, hl
ED04: CD29EF  	tm_writ:call	tm_dint
ED07: 59      		ld	e,c
ED08: 3A49EF  		ld	a,(tm_curx)
ED0B: 4F      		ld	c,a
ED0C: 3A4AEF  		ld	a,(tm_cury)
ED0F: 57      		ld	d,a
ED10: CD1FED  		call	tm_wri0
ED13: 78      		ld	a,b
ED14: 324AEF  		ld	(tm_cury),a
ED17: 79      		ld	a,c
ED18: 3249EF  		ld	(tm_curx),a
ED1B: CD39EF  		call	tm_eint
ED1E: C9      		ret
              		
              	; Write helper routine
              	; c = X position
              	; d = Y position
              	; e = Character
              	;
              	; Returns c,b as next position
ED1F: 42      	tm_wri0:ld	b,d		; c = X, b = Y
ED20: 3A36F9  		ld	a,(tm_escs)
ED23: B7      		or	a		; Process escape code
ED24: C28CED  		jp	nz,tm_esc
ED27: 3E1F    		ld	a,0x1F
ED29: BB      		cp	e
ED2A: D25EED  		jp	nc,tm_wri1	; Process control code
ED2D: C5      		push	bc
ED2E: CD90EE  		call	tm_putc		; Write character
ED31: C1      		pop	bc
              		
              		; Increment character
ED32: 0C      	tm_ri	inc	c
ED33: 3E50    		ld	a,80
ED35: B9      		cp	c
ED36: C0      		ret	nz
ED37: AF      		xor	a
ED38: 4F      		ld	c,a
ED39: 04      	tm_lf:  inc	b	; Line feed
ED3A: 3E18    		ld	a,24
ED3C: B8      		cp	b
ED3D: C0      		ret	nz
ED3E: C5      		push	bc
ED3F: CD12EE  		call	tm_dsco
ED42: C1      		pop	bc
ED43: 05      		dec	b
ED44: C9      		ret
ED45: AF      	tm_cr:	xor	a	; Carriage return
ED46: 4F      		ld	c,a
ED47: C9      		ret
ED48: 0D      	tm_bs:	dec	c	; Backspace 
ED49: F0      		ret	p
ED4A: 0E4F    		ld	c,79
ED4C: 05      		dec	b
ED4D: F0      		ret	p
ED4E: AF      		xor	a
ED4F: 47      		ld	b,a
ED50: 4F      		ld	c,a
ED51: C9      		ret
ED52: AF      	tm_up:	xor	a	; Move up
ED53: B8      		cp	b
ED54: C8      		ret	z
ED55: 05      		dec	b
ED56: C9      		ret
ED57: CDFBEE  	tm_cshm:call	tm_cls
ED5A: AF      	tm_home:xor	a
ED5B: 47      		ld	b,a
ED5C: 4F      		ld	c,a
ED5D: C9      		ret
              	
ED5E: 7B      	tm_wri1:ld	a,e
ED5F: FE08    		cp	0x08	; '\b' (Cursor left)
ED61: 28E5    		jr	z,tm_bs
ED63: FE12    		cp	0x12	; Cursor right
ED65: 28CB    		jr	z,tm_ri
ED67: FE0A    		cp	0x0A	; '\n' (Cursor down)
ED69: 28CE    		jr	z,tm_lf
ED6B: FE0B    		cp	0x0B	; Cursor up
ED6D: 28E3    		jr	z,tm_up
ED6F: FE0D    		cp	0x0D	; '\r' 
ED71: 28D2    		jr	z,tm_cr
ED73: FE17    		cp	0x17	; Clear end of screen
ED75: 2856    		jr	z,tm_cles
ED77: FE18    		cp	0x18	; Clear end of line
ED79: 2854    		jr	z,tm_clea
ED7B: FE1A    		cp	0x1A	; Clear screen, home cursor
ED7D: 28D8    		jr	z,tm_cshm
ED7F: FE1E    		cp	0x1E	; Home cursor
ED81: 28D7    		jr	z,tm_home
ED83: FE1B    		cp	0x1B	; Escape
ED85: C0      		ret	nz
ED86: 3E01    		ld	a,1
ED88: 3236F9  		ld	(tm_escs),a
ED8B: C9      		ret
              		
              		; Handle escape sequence
ED8C: 3D      	tm_esc:	dec	a
ED8D: 280E    		jr	z,tm_esc0
ED8F: 3D      		dec	a
ED90: 2825    		jr	z,tm_esc1
ED92: 3D      		dec	a
ED93: 282D    		jr	z,tm_esc2
ED95: 3D      		dec	a
ED96: 2871    		jr	z,tm_updc
ED98: AF      	tm_escd:xor	a	; Escape done
ED99: 3236F9  	tm_escr:ld	(tm_escs),a
ED9C: C9      		ret
ED9D: 3EFF    	tm_esc0:ld	a,0xFF	; Do 40-col
ED9F: BB      		cp	e
EDA0: 2850    		jr	z,tm_40c
EDA2: 3EFE    		ld	a,0xFE	; Do 80-col
EDA4: BB      		cp	e
EDA5: 2858    		jr	z,tm_80c
EDA7: 3EFD    		ld	a,0xFD	; Set color
EDA9: BB      		cp	e
EDAA: 2859    		jr	z,tm_scol
EDAC: 3E3D    		ld	a,0x3D	; '='
EDAE: BB      		cp	e
EDAF: 20E7    		jr	nz,tm_escd
EDB1: 3A36F9  	tm_esci:ld	a,(tm_escs)
EDB4: 3C      		inc	a
EDB5: 18E2    		jr	tm_escr
EDB7: 7B      	tm_esc1:ld	a,e
EDB8: 1E20    		ld	e,0x20
EDBA: 93      		sub	e
EDBB: FE18    		cp	24
EDBD: 30D9    		jr	nc,tm_escd
EDBF: 47      		ld	b,a
EDC0: 18EF    		jr	tm_esci
EDC2: 7B      	tm_esc2:ld	a,e
EDC3: 1E20    		ld	e,0x20
EDC5: 93      		sub	e
EDC6: FE50    		cp	80
EDC8: 30CE    		jr	nc,tm_escd
EDCA: 4F      		ld	c,a
EDCB: 18CB    		jr	tm_escd
              		
              		; Clear segment
              		; B = ending line
EDCD: 0617    	tm_cles:ld	b,23
EDCF: 04      	tm_clea:inc	b
EDD0: 1E00    		ld	e,0
EDD2: C5      		push	bc
EDD3: D5      		push	de
EDD4: 3E50    		ld	a,80
EDD6: 210050  		ld	hl,0x5000
EDD9: CDB4EE  		call	tm_chat
EDDC: D1      		pop	de
EDDD: C1      		pop	bc
EDDE: AF      	tm_cle0:xor	a
EDDF: D3A0    		out	(tm_data),a
EDE1: 0C      		inc	c
EDE2: 3E50    		ld	a,80
EDE4: B9      		cp	c
EDE5: 20F7    		jr	nz,tm_cle0
EDE7: 14      		inc	d
EDE8: AF      		xor	a
EDE9: 4F      		ld	c,a
EDEA: 7A      		ld	a,d
EDEB: B8      		cp	b
EDEC: 20F0    		jr	nz,tm_cle0
EDEE: D1      		pop	de	; Do not update character
EDEF: C3D8EE  		jp	tm_usco
              		
EDF2: E5      	tm_40c:	push	hl
EDF3: 210200  		ld	hl,0x0002
EDF6: 2244EF  	tm_cupd:ld	(tm_mode),hl
EDF9: CD7BEC  		call	tm_setp
EDFC: E1      		pop	hl
EDFD: 1899    		jr	tm_escd
              		
EDFF: E5      	tm_80c:	push	hl
EE00: 210704  		ld	hl,0x0407
EE03: 18F1    		jr	tm_cupd
              		
              		; Set color command
EE05: 3E04    	tm_scol:ld	a,4
EE07: 1890    		jr	tm_escr
              		
              		; Update color here
EE09: 7B      	tm_updc:ld	a,e
EE0A: 3246EF  		ld	(tm_colr),a
EE0D: CD7BEC  		call	tm_setp
EE10: 1886    		jr	tm_escd
              		
              		
              		
              	; Scroll both frame buffers down one
              	;
              	; uses: af, bc, de, hl
EE12: 212808  	tm_dsco:ld	hl,0x0800+40
EE15: 110048  		ld	de,0x4800
EE18: 0618    		ld	b,24
EE1A: CD25EE  		call	tm_dsc0
EE1D: 215010  		ld	hl,0x1000+80
EE20: 110050  		ld	de,0x5000
EE23: 0630    		ld	b,48
EE25: C5      	tm_dsc0:push	bc
EE26: D5      		push	de
EE27: E5      		push	hl
EE28: CDC0EE  		call	tm_vcpy
EE2B: E1      		pop	hl
EE2C: D1      		pop	de
EE2D: 012800  		ld	bc,40
EE30: 09      		add	hl,bc
EE31: EB      		ex	de,hl
EE32: 09      		add	hl,bc
EE33: EB      		ex	de,hl
EE34: C1      		pop	bc
EE35: 10EE    		djnz	tm_dsc0
EE37: C9      		ret
              		
              	
              	; Grabs the latest key pressed by the keyboard
              	; Discard keyboard errors
              	; Returns key in A, or 0xFF if none
              	;
              	; uses: af, bc, de, hl
EE38: 3A48EF  	tm_getc:ld	a,(tm_inf)
EE3B: B7      		or	a
EE3C: 3E00    		ld	a,0
EE3E: 3248EF  		ld	(tm_inf),a
EE41: 3A47EF  		ld	a,(tm_inb)
EE44: 2008    		jr	nz,tm_get0
              	
EE46: DB91    		in	a,(tm_keys)
EE48: E602    		and	2
EE4A: 3D      		dec	a
EE4B: F8      		ret	m
              		
              		; Grab the key
EE4C: DB90    		in	a,(tm_keyd)
EE4E: 3237F9  	tm_get0:ld	(tm_last),a
EE51: CD64EE  		call	tm_map
EE54: 79      		ld	a,c
EE55: C9      		ret
              		
              	; Handles a keyboard interrupt for the VDP terminal driver
              	; Keypress stored in tm_inb and tm_inf flag is set
              	; 
              	; uses: none
EE56: F5      	tm_kirq:push	af
EE57: DB90    		in	a,(tm_keyd)
EE59: 3247EF  		ld	(tm_inb),a
EE5C: 3E01    		ld	a,1
EE5E: 3248EF  		ld	(tm_inf),a
EE61: F1      		pop	af
EE62: FB      		ei
EE63: C9      		ret
              		
              		
              	; Maps keyboard input to ASCII
              	; a = Key to map
              	;
              	; Returns mapped key in c
              	; uses: af, c
EE64: 4F      	tm_map:	ld	c,a
              		
              		; Mapping function
EE65: 217BEE  		ld	hl,tm_mapt
EE68: 7E      	tm_map0:ld	a,(hl)
EE69: B7      		or	a
EE6A: 2808    		jr	z,tm_map2
EE6C: B9      		cp	c
EE6D: 23      		inc	hl
EE6E: 7E      		ld	a,(hl)
EE6F: 23      		inc	hl
EE70: 20F6    		jr	nz,tm_map0
EE72: 4F      		ld	c,a
EE73: C9      		ret
              		
              		
              		; Filter non-ASCII
EE74: 79      	tm_map2:ld	a,c
EE75: E680    		and	0x80	
EE77: C8      		ret	z
EE78: 0EFF    		ld	c,0xFF
EE7A: C9      		ret
              		
              	; Map table
EE7B: 7F08    	tm_mapt:defb	0x7F,0x08	; DEL -> BS
EE7D: E108    		defb	0xE1,0x08	; '<-' -> BS
EE7F: EA7F    		defb	0xEA,0x7F	; TV -> DEL
EE81: E00C    		defb	0xE0,0x0C	; '->' -> Right
EE83: E20B    		defb	0xE2,0x0B	; '/\' -> Up
EE85: E30A    		defb	0xE3,0x0A	; '\/' -> Linefeed 
EE87: E95C    		defb	0xE9,0x5C	; PAUSE -> '\'
EE89: E860    		defb	0xE8,0x60	; SYM -> '@'
EE8B: E67C    		defb	0xE6,0x7C	; NO -> '|'
EE8D: E77E    		defb	0xE7,0x7E	; YES -> '~'
EE8F: 00      		defb	0
              	
              	; Puts a character on the screen
              	; c = X position
              	; d = Y position
              	; e = Character to put
              	;
              	; uses: af, bc, de, hl
EE90: 210050  	tm_putc:ld	hl,0x5000
EE93: 3E50    		ld	a,80
EE95: C5      		push	bc
EE96: D5      		push	de
EE97: CDB4EE  		call	tm_chat	; Place it in the 80 col buffer
EE9A: ED59    		out	(c),e
EE9C: D1      		pop	de
EE9D: C1      		pop	bc
EE9E: 3A35F9  	tm_putf:ld	a,(tm_scro)	; Place into frame buffer
EEA1: 47      		ld	b,a
EEA2: 79      		ld	a,c
EEA3: 90      		sub	b	; If character is less than scroll...
EEA4: 4F      		ld	c,a
EEA5: F8      		ret	m
EEA6: FE28    		cp	40	; If desired position is 40 or more
EEA8: D0      		ret	nc
EEA9: 210048  		ld	hl,0x4800
EEAC: 3E28    		ld	a,40
EEAE: CDB4EE  		call	tm_chat	; Place it in the 40 col screen buffer
EEB1: ED59    		out	(c),e
EEB3: C9      		ret
              	
              	; Sets the TMS address to a character at x,y
              	; a = Line width
              	; c = X position
              	; d = Y position
              	; hl = Buffer address
              	;
              	; uses: af, bc, d, hl
EEB4: 0600    	tm_chat:ld	b,0
EEB6: 09      		add	hl,bc
EEB7: 4F      		ld	c,a
EEB8: AF      		xor	a
EEB9: BA      		cp	d
EEBA: 285A    	tm_cha0:jr	z,tm_addh
EEBC: 09      		add	hl,bc
EEBD: 15      		dec	d
EEBE: 18FA    		jr	tm_cha0
              	
              	; Copies VRAM from one location to another
              	; Transfers occur in blocks of 40 bytes
              	; de = destination address
              	; hl = source location
              	;
              	; b = 0 on return
              	; uses: af, bc, de, hl
EEC0: CD16EF  	tm_vcpy:call	tm_addh
EEC3: 0628    		ld	b,40
EEC5: 2138F9  		ld	hl,tm_cbuf
EEC8: CDD2EB  		call	tm_inir
EECB: EB      		ex	de,hl
EECC: CD16EF  		call	tm_addh
EECF: 0628    		ld	b,40
EED1: 2138F9  		ld	hl,tm_cbuf
EED4: CDC9EB  		call	tm_otir
EED7: C9      		ret
              		
              	; Updates the frame buffer based on the scroll position
              	;
              	; uses: af, bc, de, hl
EED8: 210010  	tm_usco:ld	hl,0x1000
EEDB: 110048  		ld	de,0x4800
EEDE: 3A35F9  		ld	a,(tm_scro)
EEE1: 0600    		ld	b,0
EEE3: 4F      		ld	c,a
EEE4: 09      		add	hl,bc
EEE5: 0618    		ld	b,24
EEE7: C5      	tm_usc0:push	bc
EEE8: D5      		push	de
EEE9: E5      		push	hl
EEEA: CDC0EE  		call	tm_vcpy
EEED: E1      		pop	hl
EEEE: D1      		pop	de
EEEF: 0E50    		ld	c,80
EEF1: 09      		add	hl,bc
EEF2: EB      		ex	de,hl
EEF3: 0E28    		ld	c,40
EEF5: 09      		add	hl,bc
EEF6: EB      		ex	de,hl
EEF7: C1      		pop	bc
EEF8: 10ED    		djnz	tm_usc0
EEFA: C9      		ret
              		
              	
              	; Clears out screen buffer and offscreen buffer
              	; Also includes clear limited function
              	;
              	; uses: af, bc, de
EEFB: 010048  	tm_cls:	ld	bc,0x4800
EEFE: 11FE0F  		ld	de,0x1000-2
EF01: CD18EF  		call	tm_addr
EF04: ED71    	tm_cls0:out	(c),0
EF06: 1B      		dec	de
EF07: 7A      		ld	a,d
EF08: B3      		or	e
EF09: 20F9    		jr	nz,tm_cls0
              		
              		; Write super special serial #
EF0B: 3EE5    		ld	a,0xE5
EF0D: ED79    		out	(c),a
EF0F: F5      		push	af
EF10: F1      		pop	af
EF11: 3E81    		ld	a,0x81
EF13: ED79    		out	(c),a
EF15: C9      		ret
              	
              	; Sets the TMS address for either reading or writing
              	; bc = Address 
              	;
              	; Returns tm_data in c
              	; uses: af, bc
EF16: 44      	tm_addh:ld	b,h		; Does HL instead of BC
EF17: 4D      		ld	c,l
EF18: DBA1    	tm_addr:in	a,(tm_latc)
EF1A: 79      		ld	a,c
EF1B: D3A1    		out	(tm_latc),a
EF1D: 78      		ld	a,b
EF1E: D3A1    		out	(tm_latc),a
EF20: 0EA0    		ld	c,tm_data
EF22: C9      		ret
              		
              	; Handles a TMS9918 irq
EF23: F5      	tm_virq:push	af
EF24: DBA1    		in	a,(tm_latc)
EF26: F1      		pop	af
EF27: FB      		ei
EF28: C9      		ret
              		
              		
              	; Disables all interrupts while VDP operations occur
              	;
              	; uses: a
EF29: 3EC9    	tm_dint:ld	a,0xC9
EF2B: 323800  		ld	(0x38),a
EF2E: ED56    		im	1
EF30: 3E0E    		ld	a,0x0E
EF32: D341    		out	(tm_atla),a	; AY register = 14
EF34: 3E00    		ld	a,0x00
EF36: D340    		out	(tm_ayda),a	
EF38: C9      		ret
              		
              	; Enables interrupts again
              	;
              	; uses: a
EF39: 3E0E    	tm_eint:ld	a,0x0E
EF3B: D341    		out	(tm_atla),a	; AY register = 14
EF3D: 3EB0    		ld	a,0xB0
EF3F: D340    		out	(tm_ayda),a
EF41: ED5E    		im	2
EF43: C9      		ret
              		
              	; Variables
EF44: 0200    	tm_mode:defw	0x0002
EF46: E1      	tm_colr:defb	0xE1
EF47: 00      	tm_inb:	defb	0
EF48: 00      	tm_inf:	defb	0
EF49: 00      	tm_curx:defb	0
EF4A: 00      	tm_cury:defb	0
EF4B: 01      	tm_cold:defb	1
              	#include "../dev/nabu_nfs.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   N H A C P   F I L E   S Y S T E M
              	;*
              	;*    Unlike a standard block device, the NFS driver provides
              	;*    a CP/M filesystem by directly intercepting system calls.
              	;*    By doing this, it can access provide access to an external
              	;*    filesystem via NHACP.
              	;*
              	;*    Virtual filesystems are directories labelled "A", "B",
              	;*    "C", etc... on the host system. That are converted to
              	;*    minor numbers 0, 1, 2, etc... when the driver is being
              	;*    added to the block device switch  
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
F960: 00000000	ns_buff:defs	48	; Buffer (48b)
F964: 00...   	
F990: 00000000	ns_ptrn:defs	11	; Pattern buffer (11b)
F994: 00...   	
F99B: 00000000	ns_name:defs	11	; Name bufffer (11b)
F99F: 00...   	
F9A6: 0000    	ns_mask:defs	2	; Ownership mask (2b)
F9A8: 0000    	ns_cfcb:defs	2	; Current FCB (2b)
F9AA: 00      	ns_dore:defs	1	; Do reopen? (1b)
F9AB: 00      	ns_isls:defs	1	; Is listing dir? (1b)
F9AC: 00      	ns_tran:defs	1	; Number of bytes in transfer (1b)
              	.area	_TEXT
              	
0040:         	ns_ayda	equ	0x40		; AY-3-8910 data port
0041:         	ns_atla	equ	0x41		; AY-3-8910 latch port
0080:         	ns_hcca	equ	0x80		; Modem data port
0000:         	ns_nctl	equ	0x00		; NABU control port
              	
0080:         	ns_fild	equ	0x80		; Default file access desc
              	
              	
              	;
              	;**************************************************************
              	;*
              	;*         D U M M Y   D I S K   G E O M E T R Y
              	;* 
              	;**************************************************************
              	;
              	
              	; Dummy DPH
EF4C: 00000000	ns_dph:	defw	0,0,0,0
EF50: 00000000	
EF54: 10FF    		defw	dircbuf	; DIRBUF
EF56: 5CEF    		defw	ns_dpb	; DPB
EF58: 0000    		defw	0	; CSV
EF5A: 6BEF    		defw	ns_alv	; ALV 
              		
              		
              	; Dummy format
EF5C: 4000    	ns_dpb:	defw	64	; # sectors per track
EF5E: 03      		defb	3	; BSH
EF5F: 07      		defb	7	; BLM
EF60: 00      		defb	0	; EXM
EF61: 0100    		defw	1	; DSM
EF63: 0000    		defw	0	; DRM
EF65: 00      		defb	0	; AL0
EF66: 00      		defb	0	; AL1
EF67: 0000    		defw	0	; Size of directory check vector
EF69: 0000    		defw	0	; Number of reserved tracks at the beginning of disk
              		
              	; Dummy ALV
EF6B: 00      	ns_alv: defb	0
              	
              	; Driver entry point
              	; a = Command #
              	;
              	; uses: all
EF6C: B7      	nfsdev:	or	a
EF6D: 2807    		jr	z,ns_init
EF6F: 3D      		dec	a
EF70: 3D      		dec	a
EF71: 2814    		jr	z,ns_sel
EF73: 3E01    		ld	a,1
EF75: C9      		ret
              	
              	; Inits the device
              	; Figures out which devices that the NFS driver "owns"
              	; b = Logical CP/M device #
              	; hl = Call argument
              	;
              	; uses: does not matter
EF76: 78      	ns_init:ld	a,b
EF77: CD73F3  		call	ns_domk
EF7A: 2AA6F9  		ld	hl,(ns_mask)
EF7D: 7C      		ld	a,h
EF7E: B0      		or	b
EF7F: 67      		ld	h,a
EF80: 7D      		ld	a,l
EF81: B1      		or	c
EF82: 6F      		ld	l,a
EF83: 22A6F9  		ld	(ns_mask),hl
EF86: C9      		ret
              	
              	
              	; Selects the drive
              	; c = Logging status
              	; hl = Call argument
              	;
              	; uses: hl
EF87: 11C4E9  	ns_sel:	ld	de,dirbuf
EF8A: 2154EF  		ld	hl,ns_dph+8
EF8D: 010800  		ld	bc,8
EF90: EDB0    		ldir
EF92: C37FE9  		jp	goback
              		
              	
              	; Set up the HCCA modem connection
              	; Configures the AY-3-8910 to monitor correct interrupts
              	; and leaves it in a state where the interrupt port is
              	; exposed
              	;
              	; uses: a, b
EF95: 3E07    	ns_hini:ld	a,0x07
EF97: D341    		out	(ns_atla),a	; AY register = 7
EF99: DB40    		in	a,(ns_ayda)
EF9B: E63F    		and	0x3F
EF9D: F640    		or	0x40
EF9F: D340    		out	(ns_ayda),a	; Configure AY port I/O
              		
              		; Claim interrupt vectors
EFA1: E5      		push	hl
EFA2: 21A8F4  		ld	hl,ns_rirq
EFA5: 2200FF  		ld	(intvec),hl
EFA8: 21EFF4  		ld	hl,ns_wirq
EFAB: 2202FF  		ld	(intvec+2),hl
EFAE: E1      		pop	hl
              		
              	; Set interrupts to their default state
              	;
              	; uses: a
EFAF: 3E0E    	ns_dflt:ld	a,0x0E
EFB1: D341    		out	(ns_atla),a	; AY register = 14
EFB3: 3EB0    		ld	a,0xB0
EFB5: D340    		out	(ns_ayda),a	; Enable HCCA receive and but not send, plus key and VDP
              		
EFB7: 3E0F    	ns_dfl0:ld	a,0x0F		
EFB9: D341    		out	(ns_atla),a	; AY register = 15
              		
EFBB: C9      		ret
              	
              	; Set receive and send interrupts
              	;
              	; uses: a
EFBC: 3E0E    	ns_esnd:ld	a,0x0E
EFBE: D341    		out	(ns_atla),a	; AY register = 14
EFC0: 3EC0    		ld	a,0xC0
EFC2: D340    		out	(ns_ayda),a	; Enable HCCA receive and send
EFC4: 18F1    		jr	ns_dfl0
              		
              	; Set receive but not send interrupt
              	;
              	; uses: a
EFC6: 3E0E    	ns_dsnd:ld	a,0x0E
EFC8: D341    		out	(ns_atla),a	; AY register = 14
EFCA: 3E80    		ld	a,0x80
EFCC: D340    		out	(ns_ayda),a	; Enable HCCA receive and but not send
EFCE: 18E7    		jr	ns_dfl0
              	
              	; Loads the CCP into the CCP space
EFD0: 2165F5  	ns_ccp:	ld	hl,ns_p0
EFD3: 1803    		jr	ns_grb0
              		
              	; Loads the GRB into the CCP space
EFD5: 2172F5  	ns_grb:	ld	hl,ns_p1
EFD8: 1188F5  	ns_grb0:ld	de,ns_m0na
EFDB: 010D00  		ld	bc,13
EFDE: EDB0    		ldir			; Copy name to file open
EFE0: CD95EF  		call	ns_hini		; Go to HCCA mode
EFE3: 210000  		ld	hl,0x0000	; O_RDONLY
EFE6: CDB4F3  		call	ns_opef		; Open the file
EFE9: 110000  		ld	de,0
EFEC: 2100D4  		ld	hl,cbase
EFEF: CDD3F3  	ns_grb1:call	ns_getb
EFF2: 1C      		inc	e
EFF3: 3E10    		ld	a,16
EFF5: BB      		cp	e
EFF6: 20F7    		jr	nz,ns_grb1
EFF8: C9      		ret
              		
              	; CP/M system hook
              	; Used to intercept certain syscalls
              	;
              	; uses: af if not hooked, all otherwise
EFF9: 79      	ns_sysh:ld	a,c
EFFA: D60F    		sub	15
EFFC: D8      		ret	c		; No syscalls lower than 15
EFFD: 2841    		jr	z,ns_fopn	; Open file
EFFF: 3D      		dec	a
F000: CA80F0  		jp	z,ns_fcls	; Close file
F003: 3D      		dec	a
F004: CA31F1  		jp	z,ns_sfir	; Search for first 
F007: 3D      		dec	a
F008: CA56F1  		jp	z,ns_snxt	; Search for next 
F00B: 3D      		dec	a
F00C: CAA6F1  		jp	z,ns_dele	; Delete file
F00F: 3D      		dec	a
F010: CA5FF2  		jp	z,ns_frea	; File read next record
F013: 3D      		dec	a
F014: CA8BF2  		jp	z,ns_fwri	; File write next record
F017: 3D      		dec	a
F018: CADEF2  		jp	z,ns_fmak	; Create file
F01B: 3D      		dec	a
F01C: CA05F3  		jp	z,ns_frnm	; Rename file
F01F: D607    		sub	7
F021: 2817    		jr	z,ns_stmp	; Set file attributes (stump)
F023: D603    		sub	3
F025: CAA5F2  		jp	z,ns_rrea	; File read random
F028: 3D      		dec	a
F029: CAB4F2  		jp	z,ns_rwri	; File write random
F02C: 3D      		dec	a
F02D: CA49F3  		jp	z,ns_size	; Compute file size
F030: 3D      		dec	a
F031: CAC3F2  		jp	z,ns_rrec	; Update random access pointer
F034: D604    		sub	4
F036: CAB4F2  		jp	z,ns_rwri	; FIle write random (we will ignore the zero part)
F039: C9      		ret
              		
              	; Stump, do nothing if FCB is owned
              	; de = Address to FCB
              	;
              	; uses: does not matter
F03A: CD7FF3  	ns_stmp:call	ns_ownr
              	
F03D: C37FE9  		jp	goback
              		
              	; Parses the current FCB, and searches for a file that matches
              	; the pattern.
              	; The point here is to insert the "true" name of the file into
              	; the FCB so it can be accessed later
              	; de = Address of FCB
              	;
              	; uses: af, bc, de, hl
F040: CD7FF3  	ns_fopn:call	ns_ownr
              	
              		; Go find the file
F043: D5      		push	de
F044: CDD6F0  		call	ns_find
              		
              		; Update status
F047: 210000  		ld	hl,0
F04A: 2250DF  		ld	(status),hl
              		
              		; Copy over false CP/M filename to the FCB
F04D: D1      		pop	de
F04E: CD61F3  		call	ns_nblk		; Get # of blocks
F051: 79      		ld	a,c
F052: D5      		push	de
F053: 13      		inc	de
F054: 219BF9  		ld	hl,ns_name
F057: 010B00  		ld	bc,11
F05A: EDB0    		ldir
              		
              		; Set open flag
F05C: 4F      		ld	c,a
F05D: 13      		inc	de
F05E: 3EE7    		ld	a,0xE7
F060: 12      		ld	(de),a
F061: 13      		inc	de
F062: AF      		xor	a
F063: 12      		ld	(de),a
F064: 13      		inc	de
F065: 79      		ld	a,c
F066: 12      		ld	(de),a
F067: 13      		inc	de
              		
              		; Copy over the real filename to the FCB
F068: 011000  		ld	bc,16
F06B: 2176F9  		ld	hl,ns_buff+22
F06E: EDB0    		ldir
              		
              	
              		; Check if current
F070: D1      		pop	de
F071: 2AA8F9  		ld	hl,(ns_cfcb)
F074: ED52    		sbc	hl,de
F076: 2005    		jr	nz,ns_fop0
              	
              		; Set the reopen flag
F078: 3E01    		ld	a,1
F07A: 32AAF9  		ld	(ns_dore),a
              		
F07D: C37FE9  	ns_fop0:jp	goback
              		
              	; Close the file
              	; Main purpose is to ensure that a close on this device is deferred
              	; Also resets the open flag
              	; de = Address of DPH
              	;
              	; uses: does not matter
F080: CD7FF3  	ns_fcls:call	ns_ownr
              	
              		; Reset open flag
F083: 210D00  		ld	hl,13
F086: 19      		add	hl,de
F087: 3600    		ld	(hl),0x00
              		
              		; Set flag
F089: 210000  		ld	hl,0
F08C: 2250DF  		ld	(status),hl
              	
F08F: C37FE9  		jp	goback
              		
              	; Function call to start a list-dir operation
              	; Must be called before a file search
              	; a = Logical NHACP device
              	; de = Address of FCB
              	;
              	; uses: af, bc, de, hl
F092: D5      	ns_slst:push	de		; Save de
F093: 2188F5  		ld	hl,ns_m0na
F096: EB      		ex	de,hl
F097: CD38F5  		call	ns_sdir 
F09A: AF      		xor	a
F09B: 12      		ld	(de),a		; Zero terminate string
F09C: 3E01    		ld	a,1
F09E: 32AAF9  		ld	(ns_dore),a	; The existing file will be closed unconditionally
F0A1: 210800  		ld	hl,0x0008	; Set flag type to directory
F0A4: CDB4F3  		call	ns_opef		; Call ns_open, but don't set flag
F0A7: 21FF00  		ld	hl,0x00FF
F0AA: 2250DF  		ld	(status),hl	; Set status
F0AD: C27FE9  		jp	nz,goback	; Error if cannot open file
              		
              		; Send LIST-DIR
F0B0: 21BAF5  		ld	hl,ns_m4
F0B3: 0607    		ld	b,7
F0B5: CD60F4  		call	ns_send		; Start list-dir command
F0B8: 2160F9  		ld	hl,ns_buff
F0BB: CD42F4  		call	ns_rece
F0BE: 3A60F9  		ld	a,(ns_buff)	; Check for errors
F0C1: FE81    		cp	0x81
F0C3: C27FE9  		jp	nz,goback
              		
              		; Copy the file pattern to the pattern buffer
F0C6: E1      		pop	hl		; Get the FCB back
F0C7: 23      		inc	hl
F0C8: 1190F9  		ld	de,ns_ptrn
F0CB: 060B    		ld	b,11
F0CD: 7E      	ns_sls0:ld	a,(hl)
F0CE: E67F    		and	0x7F		; Fix for CP/M stupidness
F0D0: 12      		ld	(de),a
F0D1: 13      		inc	de
F0D2: 23      		inc	hl
F0D3: 10F8    		djnz	ns_sls0
F0D5: C9      		ret
              	
              	; Does a complete find operation
              	; Calls ns_slst, and then falls to ns_find
              	; a = Logical NHACP device
              	; de = Address of FCB
              	;
              	; uses: af, bc, de ,hl
F0D6: CD92F0  	ns_find:call	ns_slst		; Complete find operation
              		
              	; Put the next found file name into the name buffer
              	; If no more names are found, exit with status of 0x00FF
              	; ns_slst must have been run to set up state, no more disk operations
              	; should be been run in the meantime.
              	; enter into ns_lis0 to avoid setting status
              	;
              	; uses: af, bc, de, hl
              	
F0D9: 21FF00  	ns_list:ld	hl,0x00FF
F0DC: 2250DF  		ld	(status),hl	; Set status
              	
              		
F0DF: 2160F9  	ns_lis0:ld	hl,ns_buff	; Clear out the first 40 bytes of the buffer
F0E2: AF      		xor	a		; This is to emulate zero termination, due
F0E3: 77      		ld	(hl),a		; To the fact that NHACP does not zero-terminate
F0E4: 1161F9  		ld	de,ns_buff+1	; strings coming back from the adapter...
F0E7: 012800  		ld	bc,40		
F0EA: EDB0    		ldir			
              	
              		; Lets read a directory now
F0EC: 21C1F5  		ld	hl,ns_m5	; Entry point from ns_sfir
F0EF: 0607    		ld	b,7
F0F1: CD60F4  		call	ns_send		; Get the next file
F0F4: 2160F9  		ld	hl,ns_buff
F0F7: CD42F4  		call	ns_rece	
F0FA: 3A60F9  		ld	a,(ns_buff)	; Ensure we got FILE-INFO
F0FD: FE86    		cp	0x86
F0FF: C27FE9  		jp	nz,goback
              		
              		; Ok, time to format a directory entry
F102: 2176F9  		ld	hl,ns_buff+22
F105: 119BF9  		ld	de,ns_name
F108: 0608    		ld	b,8
              		
              		; Format first part of file
F10A: CD42F1  		call	ns_ffmt
              		
              		; Now we must skip till we either find a '.' or a '\0'
F10D: 7E      	ns_lis1:ld	a,(hl)
F10E: B7      		or	a
F10F: 2805    		jr	z,ns_lis2
F111: 23      		inc	hl
F112: FE2E    		cp	'.'
F114: 20F7    		jr	nz,ns_lis1
              		
              		; Now the last part
F116: 0603    	ns_lis2:ld	b,3
F118: CD42F1  		call	ns_ffmt
              		
              		; Back dir entry against pattern
F11B: 1190F9  		ld	de,ns_ptrn
F11E: 219BF9  		ld	hl,ns_name
F121: 060B    		ld	b,11
              	
F123: 1A      	ns_lis3:ld	a,(de)
F124: 4E      		ld	c,(hl)
F125: 23      		inc	hl
F126: 13      		inc	de
F127: FE3F    		cp	'?'
F129: 2803    		jr	z,ns_lis4
F12B: B9      		cp	c
F12C: 20B1    		jr	nz,ns_lis0
F12E: 10F3    	ns_lis4:djnz	ns_lis3
F130: C9      		ret
              		
              	; Search for first file
              	; Opens up a directory, then skips to routines that read the first dir entry
              	; de = Address of FCB
              	;
              	; uses: all
F131: AF      	ns_sfir:xor	a
F132: 32ABF9  		ld	(ns_isls),a	; Clear "isls" flag
F135: CD7FF3  		call	ns_ownr
              		
              		; Start the list-dir function
F138: CD92F0  		call	ns_slst
              		
              		; Set isls flag
F13B: 3E01    		ld	a,1
F13D: 32ABF9  		ld	(ns_isls),a
              		
              		; Move into ns_snxt
F140: 181C    		jr	ns_snx0
              		
              	; Format incoming files into a dir entry
              	; Will copy over characters until a '.' or '\0' is reached
              	; Any remaining characters will be filled out with spaces
              	; b = Number of characters
              	; de = Destination of data
              	; hl = Source of data
              	;
              	; uses: af, b, de, hl
F142: 7E      	ns_ffmt:ld	a,(hl)
F143: CD4BF5  		call	ns_ltou
F146: B7      		or	a
F147: 2804    		jr	z,ns_ffm0
F149: FE2E    		cp	'.'
F14B: 2003    		jr	nz,ns_ffm1
F14D: 2B      	ns_ffm0:dec	hl
F14E: 3E20    		ld	a,' '		; Turn it into a space
F150: 23      	ns_ffm1:inc	hl
F151: 12      		ld	(de),a
F152: 13      		inc	de
F153: 10ED    		djnz	ns_ffmt
F155: C9      		ret
              		
              	; Search for next file
              	; Takes the open directory and gets the next file
              	;
              	; uses: all
F156: 3AABF9  	ns_snxt:ld	a,(ns_isls)
F159: B7      		or	a
F15A: C8      		ret	z
              		
              		; Set up the HCCA
F15B: CD95EF  		call	ns_hini	
              		
              		; Find the next entry
F15E: CDD9F0  	ns_snx0:call	ns_list
              		
              		; Copy to directory entry
F161: ED5B49EB		ld	de,(biodma)
F165: 3A4CDF  		ld	a,(userno)
F168: 12      		ld	(de),a
F169: 13      		inc	de
F16A: 219BF9  		ld	hl,ns_name
F16D: 010B00  		ld	bc,11
F170: EDB0    		ldir
              		
              		; Get file size
F172: CD61F3  		call	ns_nblk
              		
F175: AF      		xor	a
F176: B8      		cp	b
F177: 0610    		ld	b,16
F179: 200F    		jr	nz,ns_snx1
F17B: AF      		xor	a
F17C: CB39    		srl	c
F17E: 17      		rla
F17F: CB39    		srl	c
F181: 17      		rla
F182: CB39    		srl	c
F184: 17      		rla
F185: B7      		or	a
F186: 41      		ld	b,c
F187: 2801    		jr	z,ns_snx1
F189: 04      		inc	b
              		
              		
              		; Set the records to 0
F18A: 48      	ns_snx1:ld	c,b
F18B: 0604    		ld	b,4
F18D: AF      		xor	a
F18E: 12      	ns_snx2:ld	(de),a
F18F: 13      		inc	de
F190: 10FC    		djnz	ns_snx2
              		
              		; Spoof file size 1-16KB
F192: 0610    		ld	b,16
F194: 79      		ld	a,c
F195: 12      	ns_snx3:ld	(de),a
F196: 13      		inc	de
F197: B7      		or	a
F198: 2801    		jr	z,ns_snx4
F19A: 3D      		dec	a
F19B: 10F8    	ns_snx4:djnz	ns_snx3
              		
              		; Set status to 0 and return
F19D: 210000  		ld	hl,0
F1A0: 2250DF  		ld	(status),hl
F1A3: C37FE9  		jp	goback
              		
              	; Delete files based on pattern
              	; Will return error if less than 1 file is found
              	; de = Address to FCB
              	;
              	; uses: all
F1A6: CD7FF3  	ns_dele:call	ns_ownr
              	
              		; Set first part of remove message prototype
F1A9: F5      		push	af
F1AA: EB      		ex	de,hl
F1AB: 11D0F5  		ld	de,ns_m6na
F1AE: CD38F5  		call	ns_sdir
F1B1: 3E2F    		ld	a,'/'
F1B3: 12      		ld	(de),a
F1B4: EB      		ex	de,hl
F1B5: F1      		pop	af
              	
              		; Start the list-dir function
F1B6: CD92F0  		call	ns_slst
              		
              		; Search for the next entry, do not set flag
F1B9: CDDFF0  	ns_del0:call	ns_lis0
              	
              		; Copy over file name into message
F1BC: 11D3F5  		ld	de,ns_m6na+3
F1BF: 2176F9  		ld	hl,ns_buff+22
F1C2: 011000  		ld	bc,16
F1C5: EDB0    		ldir
              		
              		; Send delete message
F1C7: 21C8F5  		ld	hl,ns_m6
F1CA: 061B    		ld	b,27
F1CC: CD60F4  		call	ns_send
F1CF: 2160F9  		ld	hl,ns_buff
F1D2: CD42F4  		call	ns_rece
              		
              		; Set status to 0, and get next element
F1D5: 210000  		ld	hl,0
F1D8: 2250DF  		ld	(status),hl
F1DB: 18DC    		jr	ns_del0
              	
              		
              	; Prepare to access a file
              	; Checks the magic number to ensure that the file is in fact open
              	; Also checks ns_dore and ns_cfcb to see if a reopen is required
              	; If so, copy filename from FCB and do NHACP open
              	; a = Logical NHACP device
              	; de = Address of FCB
              	;
              	; uses: af, bc, hl
F1DD: 4F      	ns_aces:ld	c,a
F1DE: 210D00  		ld	hl,13
F1E1: 19      		add	hl,de
F1E2: 7E      		ld	a,(hl)
F1E3: FEE7    		cp	0xE7
F1E5: 2809    		jr	z,ns_ace0
              		
              		; Return invalid FCB
F1E7: 210900  		ld	hl,9
F1EA: 2250DF  		ld	(status),hl
F1ED: C37FE9  		jp	goback
              		
              		; Check to see if it is currently being accessed
F1F0: 2AA8F9  	ns_ace0:ld	hl,(ns_cfcb)
F1F3: ED52    		sbc	hl,de
F1F5: 2005    		jr	nz,ns_ace1
              		
              		; See if a reopen is needed
F1F7: 3AAAF9  		ld	a,(ns_dore)
F1FA: B7      		or	a
F1FB: C8      		ret	z
              		
              		; A reopen is needed, do it!
F1FC: 21FF00  	ns_ace1:ld	hl,0x00FF
F1FF: 2250DF  		ld	(status),hl
              		
              		; Set the current FCB to this one
F202: ED53A8F9		ld	(ns_cfcb),de
              		
              		; Clear ns_dore flag
F206: AF      		xor	a
F207: 32AAF9  		ld	(ns_dore),a
              		
              		; Copy over the true filename
F20A: 211000  		ld	hl,16
F20D: 19      		add	hl,de
F20E: D5      		push	de
F20F: 1188F5  		ld	de,ns_m0na
F212: 79      		ld	a,c
F213: CD38F5  		call	ns_sdir
F216: 3E2F    		ld	a,'/'
F218: 12      		ld	(de),a
F219: 13      		inc	de
F21A: 011000  		ld	bc,16
F21D: EDB0    		ldir
              		
              		; Now open the file
F21F: CDB1F3  		call	ns_open
F222: D1      		pop	de
F223: C9      		ret
              		
              	; Takes in a FCB, and returns the current record to access
              	; de = Address to FCB
              	;
              	; Returns record # in bc
              	; uses: af, bc, hl
F224: 210C00  	ns_gcre:ld	hl,0x0C
F227: 19      		add	hl,de
F228: 46      		ld	b,(hl)
F229: 0E00    		ld	c,0
F22B: CB38    		srl	b
F22D: CB19    		rr	c
F22F: 23      		inc	hl
F230: 23      		inc	hl
F231: 7E      		ld	a,(hl)
F232: 07      		rlca
F233: 07      		rlca
F234: 07      		rlca
F235: 07      		rlca
F236: B0      		or	b
F237: 47      		ld	b,a
F238: 212000  		ld	hl,0x20
F23B: 19      		add	hl,de
F23C: 7E      		ld	a,(hl)
F23D: B1      		or	c
F23E: 4F      		ld	c,a
F23F: C9      		ret
              		
              	; Takes in a random record, and writes it to the FCB
              	; bc = Record #
              	; de = Address to FCB
              	;
              	; uses: af, bc, hl
F240: 212000  	ns_scre:ld	hl,0x20
F243: 19      		add	hl,de
F244: 79      		ld	a,c
F245: E67F    		and	0x7F
F247: 77      		ld	(hl),a
F248: 210E00  		ld	hl,0x0E
F24B: 19      		add	hl,de
F24C: 78      		ld	a,b
F24D: 0F      		rrca
F24E: 0F      		rrca
F24F: 0F      		rrca
F250: 0F      		rrca
F251: E60F    		and	0x0F
F253: 77      		ld	(hl),a
F254: 2B      		dec	hl
F255: 2B      		dec	hl
F256: CB21    		sla	c
F258: CB10    		rl	b
F25A: 78      		ld	a,b
F25B: E60F    		and	0x0F
F25D: 77      		ld	(hl),a
F25E: C9      		ret
              			
              	; Read next record
              	; Reads the next 128 bytes in a file into the DMA address
              	; The FCB record count will be incremented by 1
              	; de = Address of FCB
              	;
              	; uses: all
F25F: CD7FF3  	ns_frea:call	ns_ownr
              	
              		; Set file up to access
F262: CDDDF1  		call	ns_aces
              		
              		; Get the record to read
F265: CD24F2  		call	ns_gcre
              		
              		; Set up and do read
F268: C5      		push	bc
F269: D5      		push	de
F26A: 50      	ns_fre0:ld	d,b
F26B: 59      		ld	e,c
F26C: 2A49EB  		ld	hl,(biodma)
F26F: CDD3F3  		call	ns_getb
              		
              		; Make sure there were no issues
F272: DA7FE9  	ns_fre1:jp	c,goback
              		
              		; Increment and writeback
F275: D1      		pop	de
F276: C1      		pop	bc
F277: 03      		inc	bc
F278: CD40F2  		call	ns_scre
              		
              		; Set return status
F27B: 210000  		ld	hl,0
F27E: 3AACF9  		ld	a,(ns_tran)
F281: B7      		or	a
F282: 2001    		jr	nz,ns_fre2
F284: 23      		inc	hl
              		
F285: 2250DF  	ns_fre2:ld	(status),hl
F288: C37FE9  		jp	goback
              		
              	; Write next record
              	; Writes the next 128 bytes into a file from the DMA address
              	; The FCB record count will be incremented by 1
              	; de = Address of FCB
              	;
              	; uses: all
F28B: CD7FF3  	ns_fwri:call	ns_ownr
              	
              		; Set file up to access
F28E: CDDDF1  		call	ns_aces
              		
              		; Get the record to write
F291: CD24F2  		call	ns_gcre
              		
              		; Set up and do write
F294: C5      		push	bc
F295: D5      		push	de
F296: 50      	ns_fwr0:ld	d,b
F297: 59      		ld	e,c
F298: 2A49EB  		ld	hl,(biodma)
F29B: CD14F4  		call	ns_putb
              		
              		; Set amount transfered to 128
F29E: 3E80    		ld	a,128
F2A0: 32ACF9  		ld	(ns_tran),a
              		
              		; Continue in read
F2A3: 18CD    		jr	ns_fre1
              		
              	; Read record random
              	; Takes the random address and read a sector from it
F2A5: CD7FF3  	ns_rrea:call	ns_ownr
              	
              		; Set file up to access
F2A8: CDDDF1  		call	ns_aces
              		
              		; Decode random address
F2AB: CDD6F2  		call	ns_deco
F2AE: 0B      		dec	bc
F2AF: C5      		push	bc
F2B0: D5      		push	de
F2B1: 03      		inc	bc
F2B2: 18B6    		jr	ns_fre0
              		
              	; Write record random
              	; Takes the random address and write a sector to it
              	; de = Address to FCB
              	;
              	; uses: all
F2B4: CD7FF3  	ns_rwri:call	ns_ownr
              	
              		; Set file up to access
F2B7: CDDDF1  		call	ns_aces
              		
              		; Decode random address
F2BA: CDD6F2  		call	ns_deco
F2BD: 0B      		dec	bc
F2BE: C5      		push	bc
F2BF: D5      		push	de
F2C0: 03      		inc	bc
F2C1: 18D3    		jr	ns_fwr0
              		
              	; Set random record
              	; de = Address to FCB
              	;
              	; uses: all
F2C3: CD7FF3  	ns_rrec:call	ns_ownr
              		
              		; Get current address from FCB
F2C6: CD24F2  		call	ns_gcre
              		
              		; Set FCB random record
F2C9: 212100  		ld	hl,0x21
F2CC: 19      		add	hl,de
F2CD: 71      		ld	(hl),c
F2CE: 23      		inc	hl
F2CF: 70      		ld	(hl),b
F2D0: 23      		inc	hl
F2D1: 3600    		ld	(hl),0
              		
              		; Done
F2D3: C37FE9  		jp	goback
              		
              	; Decodes random address
              	; de = Address to FCB
              	;
              	; Returns block number in bc
              	; uses: af, bc, hl
F2D6: 212100  	ns_deco:ld	hl,0x21
F2D9: 19      		add	hl,de
F2DA: 4E      		ld	c,(hl)
F2DB: 23      		inc	hl
F2DC: 46      		ld	b,(hl)
F2DD: C9      		ret
              		
              	; Make new file
              	; Reboot the system if the file already exists
              	; de = Address to FCB
              	;
              	; uses: all
F2DE: CD7FF3  	ns_fmak:call	ns_ownr
              	
              		; We either succeed or die trying
F2E1: 210000  		ld	hl,0
F2E4: 2250DF  		ld	(status),hl
              	
              		; Decode filename into open buffer
F2E7: 2188F5  		ld	hl,ns_m0na
F2EA: D5      		push	de
F2EB: EB      		ex	de,hl
F2EC: 23      		inc	hl
F2ED: CD00F5  		call	ns_form
              		
              		; Set the flag and open
F2F0: 213000  		ld	hl,0x0030
F2F3: 2285F5  		ld	(ns_m0fl),hl
F2F6: CDB4F3  		call	ns_opef
              		
              		; Error? time to reboot!
F2F9: C20000  		jp	nz,0
              		
              		; Nope? Activate FCB
F2FC: D1      		pop	de
              		
              		; Force reopen
F2FD: 3E01    		ld	a,1
F2FF: 32AAF9  		ld	(ns_dore),a
              		
              		; Do an open
F302: C340F0  		jp	ns_fopn
              		
              	; Rename file
              	; Similar to delete, wildcards are allowed
              	; de = Address to FCB
              	;
              	; uses: all
F305: CD7FF3  	ns_frnm:call	ns_ownr
              	
              		; Set first part of rename message prototype
F308: F5      		push	af
F309: EB      		ex	de,hl
F30A: 11E9F5  		ld	de,ns_m7n0
F30D: CD38F5  		call	ns_sdir
F310: 3E2F    		ld	a,'/'
F312: 12      		ld	(de),a
F313: F1      		pop	af
F314: F5      		push	af
F315: E5      		push	hl
F316: 111100  		ld	de,17
F319: 19      		add	hl,de
F31A: 11FDF5  		ld	de,ns_m7n1
F31D: CD00F5  		call	ns_form
F320: D1      		pop	de
F321: F1      		pop	af
              		
              	
              		; Start the list-dir function
F322: CD92F0  		call	ns_slst
              		
              		; Search for the next entry, do not set flag
F325: CDDFF0  	ns_frn0:call	ns_lis0
              	
              		; Copy over file name into message
F328: 11ECF5  		ld	de,ns_m7n0+3
F32B: 2176F9  		ld	hl,ns_buff+22
F32E: 011000  		ld	bc,16
F331: EDB0    		ldir
              		
              		; Send rename message
F333: 21E3F5  		ld	hl,ns_m7
F336: 062D    		ld	b,45
F338: CD60F4  		call	ns_send
F33B: 2160F9  		ld	hl,ns_buff
F33E: CD42F4  		call	ns_rece
              		
              		; Set status to 0, and get next element
F341: 210000  		ld	hl,0
F344: 2250DF  		ld	(status),hl
F347: 18DC    		jr	ns_frn0
              		
              	; Place size of file into FCB
              	; de = Address to FCB
              	;
              	; uses: all
F349: CD7FF3  	ns_size:call	ns_ownr
              	
              		; Find file
F34C: D5      		push	de
F34D: CDD6F0  		call	ns_find
F350: D1      		pop	de
              		
              		; Get number of blocks
F351: CD61F3  		call	ns_nblk
              		
              		; Set in FCB
F354: 212100  		ld	hl,0x21
F357: 19      		add	hl,de
F358: 71      		ld	(hl),c
F359: 23      		inc	hl
F35A: 70      		ld	(hl),b
F35B: 23      		inc	hl
F35C: 3600    		ld	(hl),0
              	
F35E: C37FE9  		jp	goback	
              		
              	; Use a FILE-INFO block in ns_buff to calculate
              	; the number of blocks in a file
              	;
              	; Returns number of blocks in bc
              	; uses: af, bc, hl
F361: 2173F9  	ns_nblk:ld	hl,ns_buff+19
F364: 46      		ld	b,(hl)
F365: 2B      		dec	hl
F366: 4E      		ld	c,(hl)
F367: 2B      		dec	hl
F368: 7E      		ld	a,(hl)
F369: CB27    		sla	a
F36B: CB11    		rl	c
F36D: CB10    		rl	b
F36F: B7      		or	a
F370: C8      		ret	z
F371: 03      		inc	bc
F372: C9      		ret
              		
              	; Set a 16 bit mask based on a number from 0-15
              	; a = Bit to set
              	;
              	; Returns bit mask in bc
              	; uses: af, bc
F373: 010100  	ns_domk:ld	bc,1
F376: B7      		or	a
F377: C8      	ns_dom0:ret	z
F378: CB21    		sla	c
F37A: CB10    		rl	b
F37C: 3D      		dec	a
F37D: 18F8    		jr	ns_dom0
              		
              	; Check if driver owns device
              	; Bail if it does not
              	; If it does, get the logical NHACP device
              	; de = Address of FCB
              	;
              	; Returns logical device in a
              	; uses: af, hl
F37F: C5      	ns_ownr:push	bc
F380: CDAAF3  		call	ns_getd		; Get FCB device
F383: CD73F3  		call	ns_domk		; Create bitmask
F386: 2AA6F9  		ld	hl,(ns_mask)
F389: 7C      		ld	a,h
F38A: A0      		and	b
F38B: 2002    		jr	nz,ns_own0
F38D: 7D      		ld	a,l
F38E: A1      		and	c
F38F: 2816    	ns_own0:jr	z,ns_exit	; Exit if does not own	
F391: 216EEB  		ld	hl,bdevsw+2
F394: CDAAF3  		call	ns_getd		; Get FCB device
F397: 010400  		ld	bc,4
F39A: B7      		or	a
F39B: 2804    	ns_own1:jr	z,ns_own2
F39D: 09      		add	hl,bc
F39E: 3D      		dec	a
F39F: 18FA    		jr	ns_own1
F3A1: CD95EF  	ns_own2:call	ns_hini		; We are commited at this point, init HCCA
F3A4: 7E      		ld	a,(hl)		; a = Logical NHACP device
F3A5: C1      		pop	bc
F3A6: C9      		ret
              	
              	; Exit, do not return to caller
F3A7: C1      	ns_exit:pop	bc
F3A8: F1      		pop	af		; Throw away caller address
F3A9: C9      		ret
              	
              	; Gets the logical device number from a FCB
              	; de = Address of FCB
              	; 
              	; Logical device returns in a
              	; uses: af
F3AA: 1A      	ns_getd:ld	a,(de)
F3AB: 3D      		dec	a
F3AC: F0      		ret	p
F3AD: 3A4DDF  		ld	a,(active)
F3B0: C9      		ret
              	
              	; Open the prepared file
              	; Closes the existing file too
              	; ns_opef can be called to set custom flag
              	;
              	; Flag z cleared on error
              	; uses: af, b, hl
F3B1: 210200  	ns_open:ld	hl,0x0002	; Read/Write Protect flag
F3B4: 2285F5  	ns_opef:ld	(ns_m0fl),hl
F3B7: 219CF5  		ld	hl,ns_m1
F3BA: 0606    		ld	b,6
F3BC: CD60F4  		call	ns_send
F3BF: 217FF5  		ld	hl,ns_m0
F3C2: 061C    		ld	b,28
F3C4: CD60F4  		call	ns_send
F3C7: 2160F9  		ld	hl,ns_buff
F3CA: CD42F4  		call	ns_rece
F3CD: 3A60F9  		ld	a,(ns_buff)
F3D0: FE83    		cp	0x83
F3D2: C9      		ret
              		
              	; Gets a block from the currently open file
              	; and places it in (hl)
              	; de = Block to read
              	; hl = Destination for information
              	;
              	; Returns location directly after in hl
              	; Carry flag set on error
              	; uses: af, b, hl
F3D3: CDD9F3  	ns_getb:call	ns_get0
F3D6: C3AFEF  		jp	ns_dflt
F3D9: EB      	ns_get0:ex	de,hl
F3DA: 22A8F5  		ld	(ns_m2bn),hl
F3DD: EB      		ex	de,hl
F3DE: E5      		push	hl
F3DF: 21A2F5  		ld	hl,ns_m2
F3E2: 060C    		ld	b,12
F3E4: CD60F4  		call	ns_send
F3E7: E1      		pop	hl
F3E8: D8      		ret	c
F3E9: CD69F4  		call	ns_hcrd
F3EC: CD6CF4  		call	ns_hcre
F3EF: D8      		ret	c
F3F0: FE84    		cp	0x84
F3F2: 37      		scf
F3F3: 2017    		jr	nz,ns_get2
F3F5: CD6CF4  		call	ns_hcre
F3F8: 32ACF9  		ld	(ns_tran),a
F3FB: 47      		ld	b,a
F3FC: CD6CF4  		call	ns_hcre
F3FF: 78      		ld	a,b
F400: B7      		or	a
F401: C8      		ret	z
F402: CD6CF4  	ns_get1:call	ns_hcre
F405: D8      		ret	c
F406: 77      		ld	(hl),a
F407: 23      		inc	hl
F408: 10F8    		djnz	ns_get1
F40A: B7      		or	a
F40B: C9      		ret
F40C: CD69F4  	ns_get2:call	ns_hcrd	; Read the error message and exit
F40F: CD6CF4  		call	ns_hcre
F412: 37      		scf
F413: C9      		ret
              		
              	; Puts a block into the currently open file
              	; from that location (hl)
              	; de = Block to write
              	; hl = Source of information
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F414: CD1AF4  	ns_putb:call	ns_put0
F417: C3AFEF  		jp	ns_dflt
F41A: EB      	ns_put0:ex	de,hl
F41B: 22B4F5  		ld	(ns_m3bn),hl
F41E: EB      		ex	de,hl
F41F: E5      		push	hl
F420: 21AEF5  		ld	hl,ns_m3
F423: 060C    		ld	b,12
F425: CD60F4  		call	ns_send		; Send message precursor
F428: E1      		pop	hl
F429: D8      		ret	c
F42A: 0680    		ld	b,128
F42C: 7E      	ns_put1:ld	a,(hl)		; Send the block
F42D: CDB6F4  		call	ns_hcwr
F430: D8      		ret	c
F431: 23      		inc	hl
F432: 10F8    		djnz	ns_put1
F434: 2160F9  		ld	hl,ns_buff
F437: CD42F4  		call	ns_rece
F43A: 3A60F9  		ld	a,(ns_buff)
F43D: FE81    		cp	0x81
F43F: C8      		ret	z
F440: 37      		scf
F441: C9      		ret
              		
              	; Receives a general response from the NHACP server
              	; hl = Destination of message
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F442: CDC6EF  	ns_rece:call	ns_dsnd
F445: CD4BF4  		call	ns_rec0
F448: C3AFEF  		jp	ns_dflt
F44B: CD6CF4  	ns_rec0:call	ns_hcre
F44E: D8      		ret	c		; Existing error
F44F: 47      		ld	b,a
F450: CD6CF4  		call	ns_hcre
F453: D8      		ret	c		; Existing error
F454: 37      		scf
F455: C0      		ret	nz		; Message too big!
F456: CD6CF4  	ns_rec1:call	ns_hcre
F459: D8      		ret	c		; Error!
F45A: 77      		ld	(hl),a
F45B: 23      		inc	hl
F45C: 10F8    		djnz	ns_rec1
F45E: B7      		or	a
F45F: C9      		ret
              		
              	; Write a number of bytes to the HCCA port
              	; b = Bytes to write
              	; hl = Start of message
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F460: 7E      	ns_send:ld	a,(hl)
F461: 23      		inc	hl
F462: CDB6F4  		call	ns_hcwr
F465: D8      		ret	c		; Error!
F466: 10F8    		djnz	ns_send
F468: C9      		ret
              		
              	; Read from the HCCA port
              	; Assumes AY is set to reg 15
              	; Will panic on timeout
              	;
              	; Returns result in a
              	; Carry flag set on error
              	; Uses: af
F469: CD6CF4  	ns_hcrd:call	ns_hcre
F46C: AF      	ns_hcre:xor	a
F46D: 3264F5  		ld	(ns_inf),a
F470: D5      		push	de
F471: 3E09    		ld	a,0x09
F473: D300    		out	(ns_nctl),a	; Turn on recv light
F475: 11FFFF  		ld	de,0xFFFF
F478: 3A64F5  	ns_hcr0:ld	a,(ns_inf)
F47B: B7      		or	a
F47C: 201D    		jr	nz,ns_hcr2
F47E: DB40    		in	a,(ns_ayda)
              		;bit	0,a
              		;jr	z,ns_hcr0	; Await an interrupt
              		;bit	1,a
              		;jr	z,ns_hcr1
F480: E60F    		and	0x0F
F482: EE01    		xor	0b00000001
F484: 280C    		jr	z,ns_hcr1
F486: 1B      		dec	de
F487: 7B      		ld	a,e
F488: B2      		or	d
F489: 20ED    		jr	nz,ns_hcr0
F48B: 3E01    	ns_hcer:ld	a,0x01
F48D: D300    		out	(ns_nctl),a	; Turn off recv light
F48F: 37      		scf
F490: D1      		pop	de
F491: C9      		ret			; Timed out waiting
F492: 3E01    	ns_hcr1:ld	a,0x01
F494: D300    		out	(ns_nctl),a	; Turn off recv light
F496: DB80    		in	a,(ns_hcca)
F498: D1      		pop	de
F499: B7      		or	a
F49A: C9      		ret
F49B: 3E01    	ns_hcr2:ld	a,0x01
F49D: D300    		out	(ns_nctl),a	; Turn off recv light
F49F: AF      		xor	a
F4A0: 3264F5  		ld	(ns_inf),a
F4A3: 3A63F5  		ld	a,(ns_inb)
F4A6: D1      		pop	de
F4A7: C9      		ret
              		
              	; HCCA read interrupt
              	; Reads from the HCCA, buffers it, and then sets the flag
              	;
              	; uses: none
F4A8: F5      	ns_rirq:push	af
F4A9: DB80    		in	a,(ns_hcca)
F4AB: 3263F5  		ld	(ns_inb),a
F4AE: 3E01    		ld	a,1
F4B0: 3264F5  		ld	(ns_inf),a
F4B3: F1      		pop	af
F4B4: FB      		ei
F4B5: C9      		ret
              		
              		
              	; Write to the HCCA port
              	; Assumes AY is set to reg 15
              	; Will panic on timeout
              	; a = Character to write
              	;
              	; Carry flag set on error
              	; Uses: f
F4B6: D5      	ns_hcwr:push	de
F4B7: 3261F5  		ld	(ns_outb),a
F4BA: AF      		xor	a
F4BB: 3262F5  		ld	(ns_outf),a
F4BE: CDBCEF  		call	ns_esnd
F4C1: 11FFFF  		ld	de,0xFFFF
F4C4: 3E21    		ld	a,0x21
F4C6: D300    		out	(ns_nctl),a	; Turn on send light
F4C8: 3A62F5  	ns_hcw0:ld	a,(ns_outf)
F4CB: B7      		or	a
F4CC: 2017    		jr	nz,ns_hcw2
F4CE: DB40    		in	a,(ns_ayda)
              		;bit	0,a
              		;jr	z,ns_hcw0	; Await an interrupt
              		;bit	1,a
              		;jr	nz,ns_hcw1
F4D0: E60F    		and	0x0F
F4D2: EE03    		xor	0b00000011
F4D4: 280A    		jr	z,ns_hcw1
F4D6: 1B      		dec	de
F4D7: 7B      		ld	a,e
F4D8: B2      		or	d
F4D9: 20ED    		jr	nz,ns_hcw0
F4DB: CDC6EF  		call	ns_dsnd
F4DE: 18AB    		jr	ns_hcer		; Timed out waiting
F4E0: 3A61F5  	ns_hcw1:ld	a,(ns_outb)
F4E3: D380    		out	(ns_hcca),a
F4E5: D1      	ns_hcw2:pop	de
F4E6: 3E01    		ld	a,0x01
F4E8: D300    		out	(ns_nctl),a	; Turn off send light
F4EA: CDC6EF  		call	ns_dsnd
F4ED: B7      		or	a
F4EE: C9      		ret
              		
              	; HCCA write interrupt
              	; Writes to the HCCA from the buffer, and 
F4EF: F5      	ns_wirq:push	af
F4F0: 3A61F5  		ld	a,(ns_outb)
F4F3: D380    		out	(ns_hcca),a
F4F5: 3E01    		ld	a,1
F4F7: 3262F5  		ld	(ns_outf),a
F4FA: CDC6EF  		call	ns_dsnd		; Y'all can't behave, turning off
F4FD: F1      		pop	af
F4FE: FB      		ei
F4FF: C9      		ret
              		
              		
              	; Takes a FCB-style name and formats it to standard notation
              	; a = Logical NHACP device
              	; de = Desintation for formatted name
              	; hl = Source FCB file name
              	;
              	; uses: all
F500: CD38F5  	ns_form:call	ns_sdir
F503: 3E2F    		ld	a,'/'
F505: CD48F5  		call	ns_wchd
F508: 0608    		ld	b,8		; Look at all 8 possible name chars
F50A: 7E      	ns_for1:ld	a,(hl)
F50B: E67F    		and	0x7F
F50D: CD56F5  		call	ns_utol
F510: FE21    		cp	0x21
F512: 3806    		jr	c,ns_for2
F514: CD48F5  		call	ns_wchd
F517: 23      		inc	hl
F518: 10F0    		djnz	ns_for1
F51A: 3E2E    	ns_for2:ld	a,0x2E		; '.'
F51C: CD48F5  		call	ns_wchd
F51F: 48      		ld	c,b
F520: 0600    		ld	b,0
F522: 09      		add	hl,bc		; Fast forward to extenstion
F523: 0603    		ld	b,3		; Copy over extension
F525: 7E      	ns_for3:ld	a,(hl)
F526: E67F    		and	0x7F
F528: CD56F5  		call	ns_utol
F52B: FE21    		cp	0x21
F52D: 3806    		jr	c,ns_for4
F52F: CD48F5  		call	ns_wchd
F532: 23      		inc	hl
F533: 10F0    		djnz	ns_for3
F535: AF      	ns_for4:xor	a		; Zero terminate
F536: 12      		ld	(de),a
F537: C9      		ret
              		
              	; Part of ns_form, but sometimes is called independently
              	; Sets the directory to access files from
              	; a = Logical NHACP device
              	; de = Desintation for formatted name
              	;
              	; uses: af, de
F538: C641    	ns_sdir:add	a,'A'
F53A: CD48F5  		call	ns_wchd
F53D: 3A4CDF  		ld	a,(userno)
F540: C630    		add	a,'0'
F542: FE3A    		cp	':'
F544: 3802    		jr	c,ns_wchd
F546: C607    		add	a,7
              		
              		; Fall to ns_wchd
              		
              	; Writes a byte to (de), then increments de
              	; a = Character to write
              	; de = Destination for character
              	;
              	; Returns de=de+1
              	; uses: af, de
F548: 12      	ns_wchd:ld	(de),a
F549: 13      		inc	de
F54A: C9      		ret
              	
              	; Converts lowercase to uppercase
              	; a = Character to convert
              	;
              	; Returns uppercase in A
              	; uses: af
F54B: E67F    	ns_ltou:and	0x7F
F54D: FE61    		cp	0x61		; 'a'
F54F: D8      		ret	c
F550: FE7B    		cp	0x7B		; '{'
F552: D0      		ret	nc
F553: D620    		sub	0x20
F555: C9      		ret
              		
              	; Converts uppercase to lowercase
              	; a = Character to convert
              	;
              	; Returns lowercase in A
              	; uses: af
F556: E67F    	ns_utol:and	0x7F
F558: FE41    		cp	0x41		; 'A'
F55A: D8      		ret	c
F55B: FE5B    		cp	0x5B		; '['
F55D: D0      		ret	nc
F55E: C620    		add	0x20
F560: C9      		ret
              		
              	; Byte to send out of HCCA
F561: 00      	ns_outb:defb	0
              	
              	; HCCA output flag
F562: 00      	ns_outf:defb	0
              	
              	; Byte received from HCCA
F563: 00      	ns_inb:	defb	0
              	
              	; HCCA input flag
F564: 00      	ns_inf: defb	0
              		
              	; Path to CP/M image
              	; Total length: 13 bytes
F565: 41302F43	ns_p0:	defb	'A0/CPM22.SYS',0
F569: 504D3232	
F56D: 2E535953	
F571: 00      	
              	
              	; Path to GRB image
              	; Total length: 13 bytes
F572: 41302F46	ns_p1:	defb	'A0/FONT.GRB',0,0
F576: 4F4E542E	
F57A: 47524200	
F57E: 00      	
              	
              	; Message prototype to open a file
              	; Total length: 28 bytes
F57F: 8F00    	ns_m0:	defb	0x8F,0x00
F581: 1800    		defw	24		; Message length
F583: 01      		defb	0x01		; Cmd: STORAGE-OPEN
F584: 80      		defb	ns_fild		; Default file descriptor
F585: 0000    	ns_m0fl:defw	0x0000		; Read/Write flags
F587: 13      		defb	19		; File name length
F588: 58585858	ns_m0na:defs	19,'X'		; File name field
F58C: 58...   	
F59B: 00      		defb	0x00		; Padding
              		
              	; Message prototype to close a file
              	; Total length: 6 bytes
F59C: 8F00    	ns_m1:	defb	0x8F,0x00
F59E: 0200    		defw	2		; Message length
F5A0: 05      		defb	0x05		; Cmd: FILE-CLOSE
F5A1: 80      		defb	ns_fild		; Default file descriptor
              		
              	; Message prototype to read a block
              	; Total length: 12 bytes
F5A2: 8F00    	ns_m2:	defb	0x8F,0x00
F5A4: 0800    		defw	8		; Message length
F5A6: 07      		defb	0x07		; Cmd: STORAGE-GET-BLOCK
F5A7: 80      		defb	ns_fild		; Default file descritor
F5A8: 00000000	ns_m2bn:defw	0x00,0x00	; Block number
F5AC: 8000    		defw	128		; Block length
              		
              	; Message prototype to write a block
              	; Total length: 12 bytes
F5AE: 8F00    	ns_m3:	defb	0x8F,0x00
F5B0: 8800    		defw	136		; Message length
F5B2: 08      		defb	0x08		; Cmd: STORAGE-PUT-BLOCK
F5B3: 80      		defb	ns_fild		; Default file descritor
F5B4: 00000000	ns_m3bn:defw	0x00,0x00	; Block number
F5B8: 8000    		defw	128		; Block length
              		
              	; Message prototype to start a list-dir
              	; Total length: 7 bytes
F5BA: 8F00    	ns_m4:	defb	0x8F,0x00
F5BC: 0300    		defw	3		; Message length
F5BE: 0E      		defb	0x0E		; Cmd: LIST-DIR
F5BF: 80      		defb	ns_fild		; Default file descriptor
F5C0: 00      		defb	0x00		; Null string
              		
              	; Message prototype to get the next dir entry
              	; Total length: 7 bytes
F5C1: 8F00    	ns_m5:	defb	0x8F,0x00
F5C3: 0300    		defw	3		; Message length
F5C5: 0F      		defb	0x0F		; Cmd: GET-DIR-ENTRY
F5C6: 80      		defb	ns_fild		; Default file descriptor
F5C7: 10      		defb	16		; Max length of file
              		
              	; Message prototype to remove a file
              	; Total length: 27 bytes
F5C8: 8F00    	ns_m6:	defb	0x8F,0x00
F5CA: 1700    		defw	23		; Message length
F5CC: 10      		defb	0x10		; Cmd: REMOVE
F5CD: 0000    		defw	0x0000		; Remove regular file
F5CF: 13      		defb	19		; File name length
F5D0: 58585858	ns_m6na:defs	19,'X'		; File name field
F5D4: 58...   	
              	
              	; Message prototype to rename a file
              	; Total length: 45 bytes
F5E3: 8F00    	ns_m7:	defb	0x8F,0x00
F5E5: 2900    		defw	41		; Message length
F5E7: 11      		defb	0x11		; Cmd: RENAME
F5E8: 13      		defb	19		; File name #1 length
F5E9: 58585858	ns_m7n0:defs	19,'X'		; File name #1 field
F5ED: 58...   	
F5FC: 13      		defb	19		; File name #2 length
F5FD: 58585858	ns_m7n1:defs	19,'X'		; File name #2 field
F601: 58...   	
              	#include "../dev/nabu_prt.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   P A R A L L E L   O U T P U T
              	;*
              	;*      A simple output-only device driver for the NABU
              	;*      parellel printer port. 
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
0040:         	pr_ayda	equ	0x40		; AY-3-8910 data port
0041:         	pr_atla	equ	0x41		; AY-3-8910 latch port
00B0:         	pr_prnt	equ	0xB0		; Parallel output
0000:         	pr_ctrl	equ	0x00		; Device control register
              	
              	; Driver jump table 
F610: B7      	prtdev:	or	a
F611: 2808    		jr	z,pr_init
F613: 3D      		dec	a
F614: 2806    		jr	z,pr_stat
F616: 3D      		dec	a
F617: 2805    		jr	z,pr_read
F619: 1805    		jr	pr_writ
              		
              	; Device init
              	; Does nothing
              	;
              	; uses: none
F61B: C9      	pr_init:ret
              	
              	; Device status 
              	; There are never any characters to read
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
F61C: AF      	pr_stat:xor	a
F61D: C9      		ret
              		
              	; Waits for a character to come in and returns it
              	; No characters to read, returns 0
              	;
              	; Returns ASCII key in A
              	; uses: af
F61E: AF      	pr_read:xor	a
F61F: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	;
              	; uses: af, bc
F620: 3E0F    	pr_writ:ld	a,0x0F
F622: D341    		out	(pr_atla),a	; AY register = 15
              		
F624: DB40    	pr_wri0:in	a,(pr_ayda)	; Wait for not busy
F626: E610    		and	0x10
F628: 20FA    		jr	nz,pr_wri0
              		
F62A: 79      		ld	a,c
F62B: D3B0    		out	(pr_prnt),a	; Write data
              		
F62D: 3E05    		ld	a,0x05		; Strobe
F62F: D300    		out	(pr_ctrl),a
              		
F631: 0620    		ld	b,32		
F633: 10FE    	pr_wri1:djnz	pr_wri1		; Wait a few cycles
              		
F635: 3E01    		ld	a,0x01		; Strobe off
F637: D300    		out	(pr_ctrl),a
              		
F639: C9      		ret
              		
              	#include "../dev/nabu_sio.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   S E R I A L   O P T I O N   C A R D
              	;*
              	;*      This driver allows the NABU serial option card to be
              	;*      used as a bidirectional Ishkur serial device. It will
              	;*      automatically search for a serial card on init. Serial
              	;*      cards are numbered by order. The first serial card gets
              	;*      a minor # of 0, the second card gets a minor number of
              	;*      1, etc... Up to 4 serial cards are supported.
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
              	
              	
              	; Driver jump table 
F63A: B7      	siodev:	or	a
F63B: 2808    		jr	z,so_init
F63D: 3D      		dec	a
F63E: 2833    		jr	z,so_stat
F640: 3D      		dec	a
F641: 2841    		jr	z,so_read
F643: 1851    		jr	so_writ
              		
              	; Device init
              	; Tries to find the option card if it is installed
              	; hl = Device options
              	;
              	; uses: none
F645: 11AAF6  	so_init:ld	de,so_atab
F648: 45      		ld	b,l
F649: 04      		inc	b		; Slot 1,2,3,...
F64A: 19      		add	hl,de 		; Get address table entry
F64B: 0ECF    		ld	c,0xCF		; First slot
              		
F64D: ED78    	so_ini0:in	a,(c)
F64F: FE08    		cp	0x08
F651: 2807    		jr	z,so_ini2
              		
F653: 3E10    	so_ini1:ld	a,0x10
F655: 81      		add	c
F656: F0      		ret	p		; Can't find, failure
F657: 4F      		ld	c,a
F658: 18F3    		jr	so_ini0
              		
F65A: 10F7    	so_ini2:djnz	so_ini1		; Repeat if looking for next card
F65C: 79      		ld	a,c
F65D: D60F    		sub	0x0F
F65F: 4F      		ld	c,a
F660: 71      		ld	(hl),c
F661: 11AEF6  		ld	de,so_conf
F664: 060D    		ld	b,13
              		
              		; Lets set up the serial card for 9600 8N1
              		; First we set up the 8253, then the 8251
F666: 1A      	so_ini3:ld	a,(de)
F667: 13      		inc	de
F668: 86      		add	a,(hl)
F669: 4F      		ld	c,a
F66A: 1A      		ld	a,(de)
F66B: 13      		inc	de
F66C: ED79    		out	(c),a
F66E: E5      		push	hl
F66F: E1      		pop	hl	; Small delay
F670: 10F4    		djnz	so_ini3
F672: C9      		ret
              	
              	; Device status 
              	; hl = Device options
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
F673: 11AAF6  	so_stat:ld	de,so_atab
F676: 19      		add	hl,de
F677: AF      		xor	a
F678: BE      		cp	(hl)
F679: C8      		ret	z	; No device, return 0
F67A: 4E      		ld	c,(hl)
F67B: 0C      		inc	c
F67C: ED78    	so_sta0:in	a,(c)	; Check status register
F67E: E602    		and	0x02
F680: C8      		ret	z
F681: 3EFF    		ld	a,0xFF
F683: C9      		ret
              		
              		
              	; Waits for a character to come in and returns it
              	; hl = Device options
              	;
              	; Returns ASCII key in A
              	; uses: af
F684: 11AAF6  	so_read:ld	de,so_atab
F687: 19      		add	hl,de
F688: AF      		xor	a
F689: BE      		cp	(hl)
F68A: C8      		ret	z	; No device, return 0
F68B: 4E      		ld	c,(hl)
F68C: 0C      		inc	c
F68D: CD7CF6  	so_rea0:call	so_sta0	; Wait for a character
F690: 28FB    		jr	z,so_rea0
F692: 0D      		dec	c
F693: ED78    		in	a,(c)
F695: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	; hl = Device options
              	;
              	; uses: af, bc
F696: 41      	so_writ:ld	b,c
F697: 11AAF6  		ld	de,so_atab
F69A: 19      		add	hl,de
F69B: AF      		xor	a
F69C: BE      		cp	(hl)
F69D: C8      		ret	z	; No device, return 0
F69E: 4E      		ld	c,(hl)
F69F: 0C      		inc	c
F6A0: ED78    	so_wri0:in	a,(c)
F6A2: E601    		and	0x01
F6A4: 28FA    		jr	z,so_wri0
F6A6: 0D      		dec	c
F6A7: ED41    		out	(c),b
F6A9: C9      		ret
              		
              		
              	; Variables
              	; 4 possible slots
F6AA: 00000000	so_atab:defb	0x00,0x00,0x00,0x00
              	
              	; Configuration string
              	; Sets up counters 1 and 2 on the 8523 timer
F6AE: 0737    	so_conf:defb	0x07,0x37	; Counter 1 setup
F6B0: 0412    		defb	0x04,0x12
F6B2: 0400    		defb	0x04,0x00
F6B4: 0777    		defb	0x07,0x77	; Counter 2 setup
F6B6: 0512    		defb	0x05,0x12
F6B8: 0500    		defb	0x05,0x00
              		
F6BA: 0100    		defb	0x01,0x00	; 8251 setup
F6BC: 0100    		defb	0x01,0x00
F6BE: 0100    		defb	0x01,0x00
F6C0: 0100    		defb	0x01,0x00
F6C2: 0140    		defb	0x01,0x40
F6C4: 014E    		defb	0x01,0x4E
F6C6: 0137    		defb	0x01,0x37
              	#include "../dev/nabu_fdc.asm"
              	;
              	;**************************************************************
              	;*
              	;*      N A B U   F D 1 7 9 7   F L O P P Y   D R I V E R
              	;*
              	;*      This driver interfaces the NABU FDC for use as a
              	;*      CP/M file system, graphical source, and boot device.
              	;*      The driver only supports double-density disks of 
              	;*      Osborne 1 format at the time, but this could be
              	;*      updated if it is needed. The directory table starts
              	;*      on track 2, the system sectors are as follows:
              	;*
              	;*      Track 0 Sector 1:	Boot Sector
              	;*      Track 0 Sector 2-3:	Graphical Resource Block
              	;*	Track 0 Sector 4-5:	CCP
              	;*	Track 1 Sector 1-5:	BDOS + BIOS Image
              	;*
              	;*	Device requires 90 bytes of bss space (nf_bss)
              	;*	Device requires 1024 byte buffer space (nf_cach)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
F9AD: 00      	nf_io:	defs	1	; FDC address
F9AE: 00      	nf_r2ks:defs	1	; Temp storaged used in nf_r2k
              	
F9AF: 00      	nf_curd:defs	1	; Currently selected disk
F9B0: 00      	nf_subs:defs	1	; Current subsector
F9B1: 00      	nf_sync:defs	1	; Set if disk needs to be rehomed
F9B2: 00      	nf_inco:defs	1	; Set if sector is in core already
F9B3: 00      	nf_dirt:defs	1	; Set if cache is dirty
              	
F9B4: 00000000	nf_asva:defs	26	; Misc CP/M buffer
F9B8: 00...   	
F9CE: 00000000	nf_asvb:defs	26
F9D2: 00...   	
F9E8: 00000000	nf_csva:defs	15
F9EC: 00...   	
F9F7: 00000000	nf_csvb:defs	15
F9FB: 00...   	
              	
FA06: 00000000	nf_cach:defs	1024	; Sector cache
FA0A: 00...   	
              	.area	_TEXT
              	
0002:         	nf_rdsk	equ	2	; Defines which drives contains system
              				; resources (2 = A, 4 = B)
              				
0040:         	nf_ayda	equ	0x40	; AY-3-8910 data port
0041:         	nf_atla	equ	0x41	; AY-3-8910 latch port
              	
              	;
              	;**************************************************************
              	;*
              	;*         D I S K   D R I V E   G E O M E T R Y
              	;* 
              	;**************************************************************
              	;
              	
              	; Disk A DPH
F6C8:         	nf_dpha:
F6C8: 00000000		defw	0,0,0,0
F6CC: 00000000	
F6D0: 10FF    		defw	dircbuf	; DIRBUF
F6D2: E8F6    		defw	nf_dpb	; DPB
F6D4: E8F9    		defw	nf_csva	; CSV
F6D6: B4F9    		defw	nf_asva	; ALV
              	
              	; Disk B DPH
F6D8:         	nf_dphb:
F6D8: 00000000		defw	0,0,0,0
F6DC: 00000000	
F6E0: 10FF    		defw	dircbuf	; DIRBUF
F6E2: E8F6    		defw	nf_dpb	; DPB
F6E4: F7F9    		defw	nf_csvb	; CSV
F6E6: CEF9    		defw	nf_asvb	; ALV
              	
              	; Osborne 1 format
F6E8:         	nf_dpb:
F6E8: 2800    		defw	40	; # sectors per track
F6EA: 03      		defb	3	; BSH
F6EB: 07      		defb	7	; BLM
F6EC: 00      		defb	0	; EXM
F6ED: B800    		defw	184	; DSM
F6EF: 3F00    		defw	63	; DRM
F6F1: C0      		defb	0xC0	; AL0
F6F2: 00      		defb	0	; AL1
F6F3: 1000    		defw	16	; Size of directory check vector
F6F5: 0300    		defw	3	; Number of reserved tracks at the beginning of disk
              	
              	
              	; Driver entry point
              	; a = Command #
              	;
              	; uses: all
F6F7: B7      	nfddev:	or	a
F6F8: 2815    		jr	z,nf_init
F6FA: 3D      		dec	a
F6FB: 283D    		jr	z,nf_home
F6FD: 3D      		dec	a
F6FE: 2852    		jr	z,nf_sel
F700: 3D      		dec	a
F701: CAA6F7  		jp	z,nf_strk
F704: 3D      		dec	a
F705: CADCF7  		jp	z,nf_ssec
F708: 3D      		dec	a
F709: CA2DF8  		jp	z,nf_read
F70C: C335F8  		jp	nf_writ
              		
              	; Initialize device
              	; Sets the current track to 0
F70F: AF      	nf_init:xor	a
F710: 32ADF9  		ld	(nf_io),a
              	
              		; Look for the FDC
F713: 0ECF    		ld	c,0xCF
F715: ED78    	nf_ini1:in	a,(c)
F717: FE10    		cp	0x10
F719: 2808    		jr	z,nf_ini2
F71B: 0C      		inc	c
F71C: C8      		ret	z	; Should not be possible!
F71D: 3E0F    		ld	a,0x0F
F71F: 81      		add	a,c
F720: 4F      		ld	c,a
F721: 18F2    		jr	nf_ini1
              		
              		; Get command register
F723: 79      	nf_ini2:ld	a,c
F724: D60F    		sub	15
F726: 4F      		ld	c,a
F727: 32ADF9  		ld	(nf_io),a
              		
              		; Select drive defined by hl
F72A: CB25    		sla	l
F72C: 3E02    		ld	a,2
F72E: 85      		add	l
F72F: 32AFF9  		ld	(nf_curd),a
              		
              		; Force FDC interrupt
F732: 3ED0    		ld	a,0xD0
F734: ED79    		out	(c),a
              		
              		; Re-home drive
F736: CD3AF7  		call	nf_home
              		
              		; De-select drive
              		
F739: C9      		ret
              	
              	; Sends the drive to track 0, and syncs the drive
              	;
              	; uses : af, c
F73A: CD4DF8  	nf_home:call	nf_wdef
F73D: CD00F9  		call	nf_dvsc
              	
F740: 3AADF9  		ld	a,(nf_io)
F743: 4F      		ld	c,a
              		
              		; Restore to track 0
F744: 3E09    		ld	a,0x09
F746: ED79    		out	(c),a 
F748: CD17F9  		call	nf_busy
              		
              		; Reset sync flag
F74B: AF      		xor	a
F74C: 32B1F9  		ld	(nf_sync),a
              		
              		; De-select drive
F74F: C305F9  		jp	nf_udsl
              		
              	; Selects the drive
              	; c = Logging status
              	; hl = Call argument
              	;
              	; uses; all
F752: 3AADF9  	nf_sel:	ld	a,(nf_io)
F755: B7      		or	a
F756: FA5DF7  		jp	m,nf_seld
              		
              		; no FDC card
F759: 210000  		ld	hl,0
F75C: C9      		ret
              	
F75D: 7D      	nf_seld:ld	a,l		; Select a disk
F75E: 0602    		ld	b,2
F760: B7      		or	a
F761: 2809    		jr	z,nf_sel0
F763: 3D      		dec	a
F764: 0604    		ld	b,4
F766: 2804    		jr	z,nf_sel0
F768: 210000  		ld	hl,0
F76B: C9      		ret
              	
              		; Move control of drive buffers
F76C: CD4DF8  	nf_sel0:call	nf_wdef		; Write back if needed
F76F: 3EFF    		ld	a,0xFF
F771: 32B1F9  		ld	(nf_sync),a	; Set sync flag
F774: 78      		ld	a,b
F775: 32AFF9  		ld	(nf_curd),a	; Set current drive
F778: 5F      		ld	e,a
              		
              		; Check to make sure there is a disk
F779: 16FF    	nf_selc	ld	d,255
F77B: CD00F9  		call	nf_dvsc
F77E: 3AADF9  		ld	a,(nf_io)
F781: 4F      		ld	c,a
F782: 3ED0    		ld	a,0xD0
F784: ED79    		out	(c),a		; Force FDC interrupt
F786: CD1DF9  	nf_sel1:call	nf_stal
F789: ED78    		in	a,(c)
F78B: E602    		and	0x02
F78D: 2009    		jr	nz,nf_sel2
F78F: 15      		dec	d
F790: 20F4    		jr	nz,nf_sel1
              		
              		; No disk!
F792: 210000  		ld	hl,0
F795: C305F9  		jp	nf_udsl
              		
              		
              		; Output DPH
F798: CD05F9  	nf_sel2:call	nf_udsl
F79B: 21C8F6  		ld	hl,nf_dpha
F79E: 3E02    		ld	a,2
F7A0: BB      		cp	e
F7A1: C8      		ret	z
F7A2: 21D8F6  		ld	hl,nf_dphb
F7A5: C9      		ret
              	
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	; hl = Call argument
              	;
              	; uses: all
F7A6: 51      	nf_strk:ld	d,c		; Track = d
F7A7: 3AADF9  		ld	a,(nf_io)
F7AA: 4F      		ld	c,a
F7AB: 3AB1F9  		ld	a,(nf_sync)
F7AE: B7      		or	a
F7AF: 280E    		jr	z,nf_str0	; Check if disk direct
              		
F7B1: CD00F9  		call	nf_dvsc
              		
              		; Restore to track 0
F7B4: 3E09    		ld	a,0x09
F7B6: ED79    		out	(c),a 
F7B8: CD17F9  		call	nf_busy
              		
              		; Reset sync flag
F7BB: AF      		xor	a
F7BC: 32B1F9  		ld	(nf_sync),a
              		
              		; Check to see if tracks match
F7BF: 59      	nf_str0:ld	e,c
F7C0: 0C      		inc	c
F7C1: ED78    		in	a,(c)
F7C3: BA      		cp	d
F7C4: CA05F9  		jp	z,nf_udsl	; They match, do nothing
              	
              		; Write a deferred block
F7C7: CD4DF8  		call	nf_wdef
              	
              		; Seek to track
F7CA: CD00F9  		call	nf_dvsc
F7CD: 0C      		inc	c
F7CE: 0C      		inc	c
F7CF: ED51    		out	(c),d
F7D1: 3E19    		ld	a,0x19
F7D3: 4B      		ld	c,e
F7D4: ED79    		out	(c),a 
F7D6: CD17F9  		call	nf_busy	
              		
F7D9: C305F9  		jp	nf_udsl
              	
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	; hl = Call argument
              	;
              	; uses: all
F7DC: 79      	nf_ssec:ld	a,c
F7DD: E607    		and	0x07
F7DF: 32B0F9  		ld	(nf_subs),a
F7E2: 79      		ld	a,c
              		
              		; Compute physical sector
F7E3: CB3F    		srl	a
F7E5: CB3F    		srl	a
F7E7: CB3F    		srl	a
F7E9: 3C      		inc	a
F7EA: 47      		ld	b,a	; b = Physical sector
F7EB: 3AADF9  		ld	a,(nf_io)
F7EE: 3C      		inc	a
F7EF: 3C      		inc	a
F7F0: 4F      		ld	c,a
F7F1: ED78    		in	a,(c)
F7F3: B8      		cp	b
F7F4: C8      		ret	z	; Return if the same
              		
              		; Set FDC sector, after writing back if needed
F7F5: CD4DF8  		call	nf_wdef
F7F8: ED41    		out	(c),b
F7FA: C9      		ret
              		
              	; Ensure sector is in core, and set up for DMA transfer
              	;
              	; uses: all
F7FB: 3AB2F9  	nf_rdwr:ld	a,(nf_inco)
F7FE: B7      		or	a
F7FF: 2019    		jr	nz,nf_rdw0
              		
              		; Read in to cache
F801: CD00F9  		call	nf_dvsc
F804: 3AADF9  		ld	a,(nf_io)
F807: 4F      		ld	c,a
F808: 2106FA  		ld	hl,nf_cach
F80B: CDDEF8  		call	nf_rphy
F80E: 47      		ld	b,a
F80F: CD05F9  		call	nf_udsl
F812: 78      		ld	a,b
              		
              		; Error checking
F813: B7      		or	a
F814: 3E01    		ld	a,1
F816: C0      		ret	nz
F817: 32B2F9  		ld	(nf_inco),a
              		
              		; DMA subsector
F81A: 2A49EB  	nf_rdw0:ld	hl,(biodma)
F81D: EB      		ex	de,hl
              	
F81E: 3AB0F9  		ld	a,(nf_subs)
F821: 2186F9  		ld	hl,nf_cach-128
F824: 018000  		ld	bc,128
F827: 3C      		inc	a
F828: 09      	nf_rdw1:add	hl,bc
F829: 3D      		dec	a
F82A: 20FC    		jr	nz,nf_rdw1
F82C: C9      		ret
              	
              	; Reads a sector and DMA transfers it to memory
F82D: CDFBF7  	nf_read:call	nf_rdwr
F830: B7      		or	a
F831: C0      		ret	nz
F832: EDB0    		ldir
F834: C9      		ret
              	
              	
              	; Write a sector from DMA, and defer it if possible
F835: C5      	nf_writ:push	bc
F836: CDFBF7  		call	nf_rdwr
F839: B7      		or	a
F83A: C1      		pop	bc
F83B: C0      		ret	nz
F83C: 3E01    		ld	a,1
F83E: 32B3F9  		ld	(nf_dirt),a
F841: 79      		ld	a,c
F842: 018000  		ld	bc,128
F845: EB      		ex	de,hl
F846: EDB0    		ldir
F848: FE01    		cp	1
F84A: 3E00    		ld	a,0
F84C: C0      		ret	nz
              		
              		; Drop down to defer read
              	
              	
              	; Checks to see if the cache needs to be written back
              	; after a deferred write.
              	;
              	; uses, af
F84D: 3AB3F9  	nf_wdef:ld	a,(nf_dirt)
F850: B7      		or	a
F851: 283D    		jr	z,nf_wde4
              	
F853: C5      		push	bc
F854: D5      		push	de
F855: E5      		push	hl
              		
              		
              		; Write physical sector
F856: CD22F9  		call	nf_dint
F859: CD00F9  		call	nf_dvsc
F85C: 3AADF9  		ld	a,(nf_io)
F85F: 4F      		ld	c,a
F860: C603    		add	a,3
F862: 57      		ld	d,a
F863: 59      		ld	e,c
F864: 3EA8    		ld	a,0xA8		; Write command
F866: ED79    		out	(c),a
F868: 2106FA  		ld	hl,nf_cach
F86B: ED78    	nf_wde1:in	a,(c)
F86D: 1F      		rra	
F86E: 3009    		jr	nc,nf_wde2
F870: 1F      		rra
F871: 30F8    		jr	nc,nf_wde1
F873: 4A      		ld	c,d
F874: EDA3    		outi 
F876: 4B      		ld	c,e
F877: 18F2    		jr	nf_wde1
F879: CD2BF9  	nf_wde2:call	nf_eint
F87C: ED78    		in	a,(c)
              		
              		; Deselect drive
F87E: 47      		ld	b,a
F87F: CD05F9  		call	nf_udsl
F882: 78      		ld	a,b
              		
F883: E1      		pop	hl
F884: D1      		pop	de
F885: C1      		pop	bc
              		
              		; Error checking
F886: E6FC    		and	0xFC
F888: 2803    		jr	z,nf_wde3
              		
F88A: 3E01    		ld	a,1
F88C: C9      		ret
              		
              		; Cache is no longer dirty
F88D: 32B3F9  	nf_wde3:ld	(nf_dirt),a
              		
              		; Data no longer in core
F890: AF      	nf_wde4:xor	a
F891: 32B2F9  		ld	(nf_inco),a
              		
F894: C9      		ret
              		
              	; Loads the GRB into memory from sector 2-3
F895: 3E02    	nf_grb:	ld	a,2
F897: 32AEF9  		ld	(nf_r2ks),a
F89A: 1805    		jr	nf_r2k
              		
              	; Loads the CCP into memory from sectors 4-5
F89C: 3E04    	nf_ccp:	ld	a,4
F89E: 32AEF9  		ld	(nf_r2ks),a
              	
              	; Reads in a 2K bytes, starting at track 0, sector (nf_r2ks)
              	; This is placed into the cbase
F8A1: 3E02    	nf_r2k: ld	a,nf_rdsk
F8A3: CD06F9  		call	nf_dvsl
              		
              		; Restore to track 0
F8A6: 3AADF9  		ld	a,(nf_io)
F8A9: 4F      		ld	c,a
F8AA: 3E09    		ld	a,0x09
F8AC: ED79    		out	(c),a 
F8AE: CD17F9  		call	nf_busy
              		
              		; Set sector # to 4
F8B1: 3AAEF9  		ld	a,(nf_r2ks)
F8B4: 0C      		inc	c
F8B5: 0C      		inc	c
F8B6: ED79    		out	(c),a
F8B8: C5      		push	bc
F8B9: 0D      		dec	c
F8BA: 0D      		dec	c
              		
              		; Read into memory
F8BB: 2100D4  		ld	hl,cbase
F8BE: CDDEF8  		call	nf_rphy
F8C1: C1      		pop	bc
F8C2: B7      		or	a
F8C3: 2805    		jr	z,nf_r2k0
F8C5: CD0FF7  		call	nf_init		; Error!
F8C8: 18D7    		jr	nf_r2k
              		
              		; Increment sector
F8CA: ED78    	nf_r2k0:in	a,(c)
F8CC: 3C      		inc	a
F8CD: ED79    		out	(c),a
F8CF: 0D      		dec	c
F8D0: 0D      		dec	c
              		
              		; Read into memory again
F8D1: CDDEF8  		call	nf_rphy
F8D4: B7      		or	a
F8D5: C8      		ret	z
F8D6: CD0FF7  		call	nf_init		; Error!
F8D9: 18C6    		jr	nf_r2k
              		
              		; De-select drive
F8DB: C305F9  		jp	nf_udsl
              	
              	; Reads a physical sector
              	; Track and sector should be set up
              	; c = FDC command address
              	; hl = memory location of result
              	;
              	; Returns a=0 if successful
              	; uses: af, bc, de, hl
F8DE: CD22F9  	nf_rphy:call	nf_dint
F8E1: 51      		ld	d,c
F8E2: 59      		ld	e,c
F8E3: 14      		inc	d
F8E4: 14      		inc	d
F8E5: 14      		inc	d
              		
              		; Read command
F8E6: 3E88    		ld	a,0x88
F8E8: ED79    		out	(c),a
F8EA: ED78    	nf_rph1:in	a,(c)
F8EC: 1F      		rra	
F8ED: 3009    		jr	nc,nf_rph2
F8EF: 1F      		rra
F8F0: 30F8    		jr	nc,nf_rph1
F8F2: 4A      		ld	c,d
F8F3: EDA2    		ini
F8F5: 4B      		ld	c,e
F8F6: 18F2    		jr	nf_rph1
F8F8: CD2BF9  	nf_rph2:call	nf_eint
F8FB: ED78    		in	a,(c)
F8FD: E6FC    		and	0xFC
F8FF: C9      		ret
              	
              	; Selects or deselects a drive
              	; a = Drive density / selection
              	;
              	; uses: af
F900: 3AAFF9  	nf_dvsc:ld	a,(nf_curd)	; Select current drive
F903: 1801    		jr	nf_dvsl
F905: AF      	nf_udsl:xor	a		; Unselects a drive
F906: C5      	nf_dvsl:push	bc
F907: 47      		ld	b,a
F908: 3AADF9  		ld	a,(nf_io)
F90B: C60F    		add	a,0x0F
F90D: 4F      		ld	c,a
F90E: ED41    		out	(c),b
F910: 06FF    		ld	b,0xFF
F912: CD1DF9  		call	nf_stal
F915: C1      		pop	bc
F916: C9      		ret
              		
              	
              	; Waits until FDC is not busy
              	; c = FDC command address
              	;
              	; uses: af
F917: ED78    	nf_busy:in	a,(c)
F919: 1F      		rra
F91A: 38FB    		jr	c,nf_busy
F91C: C9      		ret
              		
              	; Waits a little bit
              	;
              	; uses: b
F91D: C5      	nf_stal:push	bc
F91E: C1      		pop	bc
F91F: 10FC    		djnz	nf_stal
F921: C9      		ret
              		
              	; Disables all interrupts while FDC operations occur
              	;
              	; uses: a
F922: 3E0E    	nf_dint:ld	a,0x0E
F924: D341    		out	(nf_atla),a	; AY register = 14
F926: 3E00    		ld	a,0x00
F928: D340    		out	(nf_ayda),a	
F92A: C9      		ret
              		
              	; Enables interrupts again
              	;
              	; uses: a
F92B: 3E0E    	nf_eint:ld	a,0x0E
F92D: D341    		out	(nf_atla),a	; AY register = 14
F92F: 3EB0    		ld	a,0xB0
F931: D340    		out	(nf_ayda),a
F933: C9      		ret


; +++ segments +++

#CODE _TEXT        = $D400 = 54272,  size = $2534 =  9524
#DATA _BSS         = $F934 = 63796,  size = $04D2 =  1234
#DATA _JUMP_TABLE  = $FF00 = 65280,  size = $0090 =   144

; +++ global symbols +++

ADDAH            = $D75E = 55134  _TEXT       zcpr1_ccp_nfs.asm:1321
ADVAN            = $D751 = 55121  _TEXT       zcpr1_ccp_nfs.asm:1304
BDOS             = $0005 =     5  _TEXT       zcpr1_ccp_nfs.asm:13
BDOSB            = $D603 = 54787  _TEXT       zcpr1_ccp_nfs.asm:985
BDOSJP           = $D62F = 54831  _TEXT       zcpr1_ccp_nfs.asm:1040
BEL              = $0007 =     7  _TEXT       zcpr1_ccp_nfs.asm:475
BREAK            = $D706 = 55046  _TEXT       zcpr1_ccp_nfs.asm:1234
BRKBK            = $D70F = 55055  _TEXT       zcpr1_ccp_nfs.asm:1239 (unused)
BUFLEN           = $0050 =    80  _TEXT       zcpr1_ccp_nfs.asm:555
CALLPROG         = $DB36 = 56118  _TEXT       zcpr1_ccp_nfs.asm:2229
CB1              = $D6F5 = 55029  _TEXT       zcpr1_ccp_nfs.asm:1220
CB2              = $D6FD = 55037  _TEXT       zcpr1_ccp_nfs.asm:1226 (unused)
CBUFF            = $D404 = 54276  _TEXT       zcpr1_ccp_nfs.asm:558
CHRCNT           = $D4BA = 54458  _TEXT       zcpr1_ccp_nfs.asm:635
CIBPTR           = $D456 = 54358  _TEXT       zcpr1_ccp_nfs.asm:577
CIBUF            = $D43B = 54331  _TEXT       zcpr1_ccp_nfs.asm:571
CIBUFF           = $D405 = 54277  _TEXT       zcpr1_ccp_nfs.asm:561
CIPTR            = $D458 = 54360  _TEXT       zcpr1_ccp_nfs.asm:579
CLEVEL3          = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:442
CLOSE            = $D645 = 54853  _TEXT       zcpr1_ccp_nfs.asm:1068
CMDSER           = $D887 = 55431  _TEXT       zcpr1_ccp_nfs.asm:1605
CMDTBL           = $D55F = 54623  _TEXT       zcpr1_ccp_nfs.asm:817
CMS1             = $D88C = 55436  _TEXT       zcpr1_ccp_nfs.asm:1616
CMS2             = $D891 = 55441  _TEXT       zcpr1_ccp_nfs.asm:1619
CMS3             = $D89F = 55455  _TEXT       zcpr1_ccp_nfs.asm:1630
CMS4             = $D8A2 = 55458  _TEXT       zcpr1_ccp_nfs.asm:1633
CNVBUF           = $D6F0 = 55024  _TEXT       zcpr1_ccp_nfs.asm:1216
COM              = $DAF7 = 56055  _TEXT       zcpr1_ccp_nfs.asm:2190
COM1             = $DB1B = 56091  _TEXT       zcpr1_ccp_nfs.asm:2211
COM4             = $DB64 = 56164  _TEXT       zcpr1_ccp_nfs.asm:2249
COM5             = $DB6D = 56173  _TEXT       zcpr1_ccp_nfs.asm:2259
COM6             = $DB73 = 56179  _TEXT       zcpr1_ccp_nfs.asm:2263
COM7             = $DB7B = 56187  _TEXT       zcpr1_ccp_nfs.asm:2274 (unused)
COMLOG           = $D7FE = 55294  _TEXT       zcpr1_ccp_nfs.asm:1472
COMMSG           = $D474 = 54388  _TEXT       zcpr1_ccp_nfs.asm:588
CONIN            = $D5B5 = 54709  _TEXT       zcpr1_ccp_nfs.asm:899
CONOUT           = $D5A8 = 54696  _TEXT       zcpr1_ccp_nfs.asm:886
CPR              = $D4C0 = 54464  _TEXT       zcpr1_ccp_nfs.asm:684
CPR1             = $D4BC = 54460  _TEXT       zcpr1_ccp_nfs.asm:669 (unused)
CPRDIR           = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:356
CPRLST           = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:355
CPRMPT           = $003E =    62  _TEXT       zcpr1_ccp_nfs.asm:462
CPRTYP           = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:352
CR               = $000D =    13  _TEXT       zcpr1_ccp_nfs.asm:471
CRLF             = $D5A1 = 54689  _TEXT       zcpr1_ccp_nfs.asm:881
DEFDMA           = $D626 = 54822  _TEXT       zcpr1_ccp_nfs.asm:1032
DEFUSR           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:337
DELETE           = $D65F = 54879  _TEXT       zcpr1_ccp_nfs.asm:1092
DFU              = $DAE5 = 56037  _TEXT       zcpr1_ccp_nfs.asm:2143
DFUSR            = $DBB7 = 56247  _TEXT       zcpr1_ccp_nfs.asm:2369
DIR              = $D8A9 = 55465  _TEXT       zcpr1_ccp_nfs.asm:1655
DIR10            = $D946 = 55622  _TEXT       zcpr1_ccp_nfs.asm:1783
DIR11            = $D950 = 55632  _TEXT       zcpr1_ccp_nfs.asm:1788
DIR2             = $D8D8 = 55512  _TEXT       zcpr1_ccp_nfs.asm:1680
DIR2A            = $D8D9 = 55513  _TEXT       zcpr1_ccp_nfs.asm:1682 (unused)
DIR3             = $D8E7 = 55527  _TEXT       zcpr1_ccp_nfs.asm:1701
DIR4             = $D90A = 55562  _TEXT       zcpr1_ccp_nfs.asm:1736
DIR5             = $D912 = 55570  _TEXT       zcpr1_ccp_nfs.asm:1751
DIR6             = $D914 = 55572  _TEXT       zcpr1_ccp_nfs.asm:1753
DIR7             = $D92F = 55599  _TEXT       zcpr1_ccp_nfs.asm:1768
DIR8             = $D931 = 55601  _TEXT       zcpr1_ccp_nfs.asm:1770
DIR9             = $D945 = 55621  _TEXT       zcpr1_ccp_nfs.asm:1781
DIRPR            = $D8D9 = 55513  _TEXT       zcpr1_ccp_nfs.asm:1690
DIRPTR           = $D7E1 = 55265  _TEXT       zcpr1_ccp_nfs.asm:1445
DLOG5            = $D7FB = 55291  _TEXT       zcpr1_ccp_nfs.asm:1468
DLOGIN           = $D7F4 = 55284  _TEXT       zcpr1_ccp_nfs.asm:1463
DMASET           = $D629 = 54825  _TEXT       zcpr1_ccp_nfs.asm:1034
DRUSER           = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:348
ENTRY            = $D400 = 54272  _TEXT       zcpr1_ccp_nfs.asm:516
EPRMPT           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:350
ERA              = $D95A = 55642  _TEXT       zcpr1_ccp_nfs.asm:1811
ERA1             = $D973 = 55667  _TEXT       zcpr1_ccp_nfs.asm:1823
ERARJ            = $D96D = 55661  _TEXT       zcpr1_ccp_nfs.asm:1820 (unused)
ERR1             = $D72A = 55082  _TEXT       zcpr1_ccp_nfs.asm:1272
ERR2             = $D71D = 55069  _TEXT       zcpr1_ccp_nfs.asm:1263
ERRLOG           = $DBFA = 56314  _TEXT       zcpr1_ccp_nfs.asm:2435
ERROR            = $D717 = 55063  _TEXT       zcpr1_ccp_nfs.asm:1260
EXECADR          = $DB89 = 56201  _TEXT       zcpr1_ccp_nfs.asm:2283
EXTEST           = $DA68 = 55912  _TEXT       zcpr1_ccp_nfs.asm:2042
FALSE            = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:146
FCBCR            = $D4B8 = 54456  _TEXT       zcpr1_ccp_nfs.asm:628
FCBDM            = $D4A8 = 54440  _TEXT       zcpr1_ccp_nfs.asm:626
FCBDN            = $D498 = 54424  _TEXT       zcpr1_ccp_nfs.asm:617
FCBFN            = $D499 = 54425  _TEXT       zcpr1_ccp_nfs.asm:619
FCBFT            = $D4A1 = 54433  _TEXT       zcpr1_ccp_nfs.asm:621
FENCE            = $007C =   124  _TEXT       zcpr1_ccp_nfs.asm:449
FFEED            = $000C =    12  _TEXT       zcpr1_ccp_nfs.asm:474
FILLQ            = $D952 = 55634  _TEXT       zcpr1_ccp_nfs.asm:1794
FQLP             = $D954 = 55636  _TEXT       zcpr1_ccp_nfs.asm:1796
GET              = $DB97 = 56215  _TEXT       zcpr1_ccp_nfs.asm:2301
GETDRV           = $D622 = 54818  _TEXT       zcpr1_ccp_nfs.asm:1026
GETUSR           = $D668 = 54888  _TEXT       zcpr1_ccp_nfs.asm:1103
GO               = $DAF2 = 56050  _TEXT       zcpr1_ccp_nfs.asm:2179
GOTSYS           = $D8CC = 55500  _TEXT       zcpr1_ccp_nfs.asm:1672
GRBDOS           = $D640 = 54848  _TEXT       zcpr1_ccp_nfs.asm:1063
HEXNUM           = $D7A1 = 55201  _TEXT       zcpr1_ccp_nfs.asm:1391
HNUM0            = $D7A4 = 55204  _TEXT       zcpr1_ccp_nfs.asm:1393
HNUM1            = $D7AC = 55212  _TEXT       zcpr1_ccp_nfs.asm:1397
HNUM2            = $D7C3 = 55235  _TEXT       zcpr1_ccp_nfs.asm:1410
HNUM3            = $D7DE = 55262  _TEXT       zcpr1_ccp_nfs.asm:1438
INPASS           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:346
JUMP             = $DAED = 56045  _TEXT       zcpr1_ccp_nfs.asm:2159
LC1              = $D5DC = 54748  _TEXT       zcpr1_ccp_nfs.asm:941
LCOUT            = $D5D0 = 54736  _TEXT       zcpr1_ccp_nfs.asm:924
LF               = $000A =    10  _TEXT       zcpr1_ccp_nfs.asm:472
LIST             = $D981 = 55681  _TEXT       zcpr1_ccp_nfs.asm:1856
LOADADR          = $DBD5 = 56277  _TEXT       zcpr1_ccp_nfs.asm:2401
LOGIN            = $D632 = 54834  _TEXT       zcpr1_ccp_nfs.asm:1043
LSTOUT           = $D5D7 = 54743  _TEXT       zcpr1_ccp_nfs.asm:937 (unused)
LTAB             = $D9F0 = 55792  _TEXT       zcpr1_ccp_nfs.asm:1941
MAXDR            = $0001 =     1  _TEXT       zcpr1_ccp_nfs.asm:333 (unused)
MAXDRIV          = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:330
MAXUSR           = $0013 =    19  _TEXT       zcpr1_ccp_nfs.asm:326
MBUFF            = $D403 = 54275  _TEXT       zcpr1_ccp_nfs.asm:556
MEMLOAD          = $DBA2 = 56226  _TEXT       zcpr1_ccp_nfs.asm:2318
ML2              = $DBD7 = 56279  _TEXT       zcpr1_ccp_nfs.asm:2403
ML3              = $DBF0 = 56304  _TEXT       zcpr1_ccp_nfs.asm:2418
ML4              = $DBF4 = 56308  _TEXT       zcpr1_ccp_nfs.asm:2425
MLA              = $DBAE = 56238  _TEXT       zcpr1_ccp_nfs.asm:2328
MLA0             = $DBC5 = 56261  _TEXT       zcpr1_ccp_nfs.asm:2384
MLA1             = $DBD4 = 56276  _TEXT       zcpr1_ccp_nfs.asm:2400
MLERR            = $DBF7 = 56311  _TEXT       zcpr1_ccp_nfs.asm:2429
NCHARS           = $0004 =     4  _TEXT       zcpr1_ccp_nfs.asm:812
NCMNDS           = $000B =    11  _TEXT       zcpr1_ccp_nfs.asm:871
NLINES           = $0018 =    24  _TEXT       zcpr1_ccp_nfs.asm:447
NOBOP            = $DA00 = 55808  _TEXT       zcpr1_ccp_nfs.asm:1953
NOECHO           = $D5C3 = 54723  _TEXT       zcpr1_ccp_nfs.asm:913
NOHYPH           = $D9D8 = 55768  _TEXT       zcpr1_ccp_nfs.asm:1926
NOLOG            = $D4DE = 54494  _TEXT       zcpr1_ccp_nfs.asm:711
NOSLAS           = $D99C = 55708  _TEXT       zcpr1_ccp_nfs.asm:1890
NRCMDS           = $0003 =     3  _TEXT       zcpr1_ccp_nfs.asm:839 (unused)
NUM0             = $D779 = 55161  _TEXT       zcpr1_ccp_nfs.asm:1351
NUM1             = $D77F = 55167  _TEXT       zcpr1_ccp_nfs.asm:1355
NUM2             = $D79C = 55196  _TEXT       zcpr1_ccp_nfs.asm:1379
NUMBASE          = $0048 =    72  _TEXT       zcpr1_ccp_nfs.asm:464
NUMBER           = $D763 = 55139  _TEXT       zcpr1_ccp_nfs.asm:1331
NUMERR           = $D79E = 55198  _TEXT       zcpr1_ccp_nfs.asm:1385
NUMS             = $D76B = 55147  _TEXT       zcpr1_ccp_nfs.asm:1338
NUMS1            = $D775 = 55157  _TEXT       zcpr1_ccp_nfs.asm:1345
OPEN             = $D63E = 54846  _TEXT       zcpr1_ccp_nfs.asm:1060
OPENF            = $D637 = 54839  _TEXT       zcpr1_ccp_nfs.asm:1055
OUTPUT           = $D5AB = 54699  _TEXT       zcpr1_ccp_nfs.asm:889
PAGCNT           = $D4B9 = 54457  _TEXT       zcpr1_ccp_nfs.asm:633
PGBAK            = $D5FC = 54780  _TEXT       zcpr1_ccp_nfs.asm:973
PGDFLG           = $0050 =    80  _TEXT       zcpr1_ccp_nfs.asm:452
PGDFLT           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:451
PGFLG            = $D5EF = 54767  _TEXT       zcpr1_ccp_nfs.asm:960
PRFLG            = $D5D2 = 54738  _TEXT       zcpr1_ccp_nfs.asm:929
PRIN1            = $D617 = 54807  _TEXT       zcpr1_ccp_nfs.asm:1011
PRINT            = $D60F = 54799  _TEXT       zcpr1_ccp_nfs.asm:1000
PRINTC           = $D60A = 54794  _TEXT       zcpr1_ccp_nfs.asm:995
PRNLE            = $DA5E = 55902  _TEXT       zcpr1_ccp_nfs.asm:2032
PRNNF            = $D554 = 54612  _TEXT       zcpr1_ccp_nfs.asm:804
PRT              = $D9FF = 55807  _TEXT       zcpr1_ccp_nfs.asm:1952
QMCNT            = $D4BB = 54459  _TEXT       zcpr1_ccp_nfs.asm:637
RAS              = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:315
RB1              = $D6DA = 55002  _TEXT       zcpr1_ccp_nfs.asm:1195
RCPRNL           = $D543 = 54595  _TEXT       zcpr1_ccp_nfs.asm:793
READ             = $D601 = 54785  _TEXT       zcpr1_ccp_nfs.asm:980
READF            = $D5FE = 54782  _TEXT       zcpr1_ccp_nfs.asm:978
REDBUF           = $D683 = 54915  _TEXT       zcpr1_ccp_nfs.asm:1140
REDBUF0          = $D694 = 54932  _TEXT       zcpr1_ccp_nfs.asm:1148
REN              = $DA97 = 55959  _TEXT       zcpr1_ccp_nfs.asm:2073
REN0             = $DA9E = 55966  _TEXT       zcpr1_ccp_nfs.asm:2078 (unused)
REN1             = $DAB0 = 55984  _TEXT       zcpr1_ccp_nfs.asm:2086 (unused)
REN2             = $DAC7 = 56007  _TEXT       zcpr1_ccp_nfs.asm:2101
REN3             = $DAD5 = 56021  _TEXT       zcpr1_ccp_nfs.asm:2109 (unused)
REN4             = $DAD8 = 56024  _TEXT       zcpr1_ccp_nfs.asm:2111
RESET            = $D62D = 54829  _TEXT       zcpr1_ccp_nfs.asm:1038
RESETUSR         = $D663 = 54883  _TEXT       zcpr1_ccp_nfs.asm:1098
RESTRT           = $D4F2 = 54514  _TEXT       zcpr1_ccp_nfs.asm:727
RESTTMP          = $D731 = 55089  _TEXT       zcpr1_ccp_nfs.asm:1276
RNGSUB           = $D4E2 = 54498  _TEXT       zcpr1_ccp_nfs.asm:714
RS00             = $D510 = 54544  _TEXT       zcpr1_ccp_nfs.asm:750
RS000            = $D515 = 54549  _TEXT       zcpr1_ccp_nfs.asm:756 (unused)
RS1              = $D518 = 54552  _TEXT       zcpr1_ccp_nfs.asm:761
RSTCPR           = $D540 = 54592  _TEXT       zcpr1_ccp_nfs.asm:788
RSTJP            = $DAE2 = 56034  _TEXT       zcpr1_ccp_nfs.asm:2128
SAVE             = $DA12 = 55826  _TEXT       zcpr1_ccp_nfs.asm:1986
SAVE0            = $DA32 = 55858  _TEXT       zcpr1_ccp_nfs.asm:2004
SAVE1            = $DA39 = 55865  _TEXT       zcpr1_ccp_nfs.asm:2007
SAVE2            = $DA55 = 55893  _TEXT       zcpr1_ccp_nfs.asm:2024
SAVE3            = $DA65 = 55909  _TEXT       zcpr1_ccp_nfs.asm:2036
SBLANK           = $D755 = 55125  _TEXT       zcpr1_ccp_nfs.asm:1310
SCAN15           = $D845 = 55365  _TEXT       zcpr1_ccp_nfs.asm:1535
SCAN16           = $D848 = 55368  _TEXT       zcpr1_ccp_nfs.asm:1540
SCAN17           = $D84A = 55370  _TEXT       zcpr1_ccp_nfs.asm:1542
SCAN2            = $D824 = 55332  _TEXT       zcpr1_ccp_nfs.asm:1509
SCAN3            = $D82A = 55338  _TEXT       zcpr1_ccp_nfs.asm:1513
SCAN4            = $D830 = 55344  _TEXT       zcpr1_ccp_nfs.asm:1521
SCANER           = $D808 = 55304  _TEXT       zcpr1_ccp_nfs.asm:1492
SCANF            = $D858 = 55384  _TEXT       zcpr1_ccp_nfs.asm:1561
SCANF1           = $D869 = 55401  _TEXT       zcpr1_ccp_nfs.asm:1570
SCANF2           = $D870 = 55408  _TEXT       zcpr1_ccp_nfs.asm:1575
SCANF3           = $D872 = 55410  _TEXT       zcpr1_ccp_nfs.asm:1577
SCANF4           = $D879 = 55417  _TEXT       zcpr1_ccp_nfs.asm:1585
SCANX            = $D80B = 55307  _TEXT       zcpr1_ccp_nfs.asm:1494
SCQ              = $D87F = 55423  _TEXT       zcpr1_ccp_nfs.asm:1595
SDELM            = $D734 = 55092  _TEXT       zcpr1_ccp_nfs.asm:1280
SEAR1            = $D64C = 54860  _TEXT       zcpr1_ccp_nfs.asm:1074
SEARF            = $D649 = 54857  _TEXT       zcpr1_ccp_nfs.asm:1072
SEARN            = $D650 = 54864  _TEXT       zcpr1_ccp_nfs.asm:1078
SECTFLG          = $0053 =    83  _TEXT       zcpr1_ccp_nfs.asm:467
SECURE           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:335
SETTSE           = $DBBC = 56252  _TEXT       zcpr1_ccp_nfs.asm:2376
SETU0D           = $D67D = 54909  _TEXT       zcpr1_ccp_nfs.asm:1130
SETUD            = $D66E = 54894  _TEXT       zcpr1_ccp_nfs.asm:1117
SETUSR           = $D66A = 54890  _TEXT       zcpr1_ccp_nfs.asm:1105
SLOGIN           = $D7EA = 55274  _TEXT       zcpr1_ccp_nfs.asm:1454
SOFLG            = $0053 =    83  _TEXT       zcpr1_ccp_nfs.asm:457
SPRMPT           = $0024 =    36  _TEXT       zcpr1_ccp_nfs.asm:461
STACK            = $D474 = 54388  _TEXT       zcpr1_ccp_nfs.asm:584
SUBA             = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:421
SUBFCB           = $D477 = 54391  _TEXT       zcpr1_ccp_nfs.asm:593
SUBFCR           = $D497 = 54423  _TEXT       zcpr1_ccp_nfs.asm:613
SUBFRC           = $D486 = 54406  _TEXT       zcpr1_ccp_nfs.asm:610
SUBFS2           = $D485 = 54405  _TEXT       zcpr1_ccp_nfs.asm:608 (unused)
SUBKIL           = $D654 = 54868  _TEXT       zcpr1_ccp_nfs.asm:1084
SUPRES           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:459
SUSER            = $DADF = 56031  _TEXT       zcpr1_ccp_nfs.asm:2126
SYSFLG           = $0041 =    65  _TEXT       zcpr1_ccp_nfs.asm:455
SYSTST           = $D8F9 = 55545  _TEXT       zcpr1_ccp_nfs.asm:1714
TAB              = $0009 =     9  _TEXT       zcpr1_ccp_nfs.asm:473
TBUFF            = $0080 =   128  _TEXT       zcpr1_ccp_nfs.asm:16
TDRIVE           = $D67E = 54910  _TEXT       zcpr1_ccp_nfs.asm:1131
TEMPDR           = $D7FF = 55295  _TEXT       zcpr1_ccp_nfs.asm:1473
TFCB             = $005C =    92  _TEXT       zcpr1_ccp_nfs.asm:15
TMPUSR           = $D664 = 54884  _TEXT       zcpr1_ccp_nfs.asm:1099
TPA              = $0100 =   256  _TEXT       zcpr1_ccp_nfs.asm:484
TRUE             = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:147
TSELUSR          = $DBB9 = 56249  _TEXT       zcpr1_ccp_nfs.asm:2371
TWOCOL           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:377
TWOPOK           = $D901 = 55553  _TEXT       zcpr1_ccp_nfs.asm:1728 (unused)
TYPE             = $D985 = 55685  _TEXT       zcpr1_ccp_nfs.asm:1869
TYPE0            = $D986 = 55686  _TEXT       zcpr1_ccp_nfs.asm:1877
TYPE1            = $D9B4 = 55732  _TEXT       zcpr1_ccp_nfs.asm:1900
TYPE2            = $D9C5 = 55749  _TEXT       zcpr1_ccp_nfs.asm:1911
TYPE2L           = $DA03 = 55811  _TEXT       zcpr1_ccp_nfs.asm:1958
TYPE3            = $DA0D = 55821  _TEXT       zcpr1_ccp_nfs.asm:1964
TYPE4            = $DA0F = 55823  _TEXT       zcpr1_ccp_nfs.asm:1967
UCASE            = $D5BA = 54714  _TEXT       zcpr1_ccp_nfs.asm:905
UDFLAG           = $0004 =     4  _TEXT       zcpr1_ccp_nfs.asm:11
USER             = $DADB = 56027  _TEXT       zcpr1_ccp_nfs.asm:2123
USRMAX           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:319
USRNUM           = $D711 = 55057  _TEXT       zcpr1_ccp_nfs.asm:1245
WIDE             = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:448
WSTYPE           = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:353
YESCR            = $D9FD = 55805  _TEXT       zcpr1_ccp_nfs.asm:1950
_BSS             = $F934 = 63796  _BSS        config_nfs_hybrid.asm:44 (unused)
_BSS_end         = $FE06 = 65030  _BSS        config_nfs_hybrid.asm:44 (unused)
_BSS_size        = $04D2 =  1234  _BSS        config_nfs_hybrid.asm:44
_JUMP_TABLE      = $FF00 = 65280  _JUMP_TABLE config_nfs_hybrid.asm:45 (unused)
_JUMP_TABLE_end  = $FF90 = 65424  _JUMP_TABLE config_nfs_hybrid.asm:45 (unused)
_JUMP_TABLE_size = $0090 =   144  _JUMP_TABLE config_nfs_hybrid.asm:45 (unused)
_TEXT            = $D400 = 54272  _TEXT       config_nfs_hybrid.asm:43 (unused)
_TEXT_end        = $F934 = 63796  _TEXT       config_nfs_hybrid.asm:43
_TEXT_size       = $2534 =  9524  _TEXT       config_nfs_hybrid.asm:43 (unused)
active           = $DF4D = 57165  _TEXT       bdos.asm:493
adda2hl          = $E16F = 57711  _TEXT       bdos.asm:922
alloc0           = $E9D5 = 59861  _TEXT       bdos.asm:2470
alloc1           = $E9D7 = 59863  _TEXT       bdos.asm:2471
alocvect         = $E9CA = 59850  _TEXT       bdos.asm:2460
auto             = $E9E9 = 59881  _TEXT       bdos.asm:2485
autoflag         = $E9EB = 59883  _TEXT       bdos.asm:2487
autosel          = $E85C = 59484  _TEXT       bdos.asm:2200
autosl1          = $E880 = 59520  _TEXT       bdos.asm:2216
backup           = $DDAF = 56751  _TEXT       bdos.asm:253
backup1          = $DDB7 = 56759  _TEXT       bdos.asm:256
badsctr          = $DC0C = 56332  _TEXT       bdos.asm:34
badsec           = $DCD5 = 56533  _TEXT       bdos.asm:108
badsel           = $DCE0 = 56544  _TEXT       bdos.asm:109
badslct          = $DC0E = 56334  _TEXT       bdos.asm:35
batch            = $D4E2 = 54498  _TEXT       zcpr1_ccp_nfs.asm:713
bdevsw           = $EB6C = 60268  _TEXT       config_nfs_hybrid.asm:161
bdosdrv          = $DCD1 = 56529  _TEXT       bdos.asm:107
bdoserr          = $DCC5 = 56517  _TEXT       bdos.asm:106
bigdisk          = $E9E8 = 59880  _TEXT       bdos.asm:2484
biodma           = $EB49 = 60233  _TEXT       bios.asm:326
bitmap           = $E2AE = 58030  _TEXT       bdos.asm:1215
bitmap1          = $E2BC = 58044  _TEXT       bdos.asm:1230
bitmap2          = $E2DD = 58077  _TEXT       bdos.asm:1251
bitmap3          = $E301 = 58113  _TEXT       bdos.asm:1268
blkmask          = $E9CF = 59855  _TEXT       bdos.asm:2466
blknmbr          = $E9F0 = 59888  _TEXT       bdos.asm:2491
blkshft          = $E9CE = 59854  _TEXT       bdos.asm:2465
boot             = $EA3A = 59962  _TEXT       bios.asm:42
bs               = $0008 =     8  _TEXT       zcpr1_ccp_nfs.asm:24
callbd           = $EAF8 = 60152  _TEXT       bios.asm:225
callmj           = $EB46 = 60230  _TEXT       bios.asm:320
cbase            = $D400 = 54272  _TEXT       zcpr1_ccp_nfs.asm:515
cbinit           = $EB5A = 60250  _TEXT       config_nfs_hybrid.asm:92
cdevsw           = $EBAC = 60332  _TEXT       config_nfs_hybrid.asm:200
cdindi0          = $EB1E = 60190  _TEXT       bios.asm:285
cdindi1          = $EB24 = 60196  _TEXT       bios.asm:289
cdindir          = $EB1A = 60186  _TEXT       bios.asm:283
cfirq            = $EB60 = 60256  _TEXT       config_nfs_hybrid.asm:108 (unused)
charbuf          = $DF19 = 57113  _TEXT       bdos.asm:482
checkdir         = $E1A9 = 57769  _TEXT       bdos.asm:995
checksum         = $E102 = 57602  _TEXT       bdos.asm:834
chgnam1          = $E432 = 58418  _TEXT       bdos.asm:1507
chgnames         = $E421 = 58401  _TEXT       bdos.asm:1499
chkblk           = $E08F = 57487  _TEXT       bdos.asm:741
chkchar          = $DD1F = 56607  _TEXT       bdos.asm:150
chkdir1          = $E1CF = 57807  _TEXT       bdos.asm:1015
chknmbr          = $E197 = 57751  _TEXT       bdos.asm:968
chkrofl          = $E14F = 57679  _TEXT       bdos.asm:898
chksum1          = $E108 = 57608  _TEXT       bdos.asm:837
chkvect          = $E9C8 = 59848  _TEXT       bdos.asm:2459
chkwprt          = $E15F = 57695  _TEXT       bdos.asm:909
chrout           = $EABB = 60091  _TEXT       bios.asm:166
ckbitmap         = $E240 = 57920  _TEXT       bdos.asm:1109
ckbmap1          = $E261 = 57953  _TEXT       bdos.asm:1144
ckcon1           = $DD4D = 56653  _TEXT       bdos.asm:180
ckcon2           = $DD50 = 56656  _TEXT       bdos.asm:181
ckconsol         = $DD2E = 56622  _TEXT       bdos.asm:166
ckfilpos         = $E200 = 57856  _TEXT       bdos.asm:1058
ckrof1           = $E152 = 57682  _TEXT       bdos.asm:899
cksumtbl         = $E9F7 = 59895  _TEXT       bdos.asm:2499
clears2          = $E17D = 57725  _TEXT       bdos.asm:939
closefil         = $E8B0 = 59568  _TEXT       bdos.asm:2247
closeflg         = $E9DD = 59869  _TEXT       bdos.asm:2476
closeit          = $E4AD = 58541  _TEXT       bdos.asm:1593
closeit1         = $E4D8 = 58584  _TEXT       bdos.asm:1613
closeit2         = $E4E6 = 58598  _TEXT       bdos.asm:1621
closeit3         = $E4EC = 58604  _TEXT       bdos.asm:1625
closeit4         = $E4F3 = 58611  _TEXT       bdos.asm:1628
closeit5         = $E508 = 58632  _TEXT       bdos.asm:1641
closeit6         = $E522 = 58658  _TEXT       bdos.asm:1659
closeit7         = $E52A = 58666  _TEXT       bdos.asm:1662
cntrlc           = $0003 =     3  _TEXT       zcpr1_ccp_nfs.asm:22
cntrle           = $0005 =     5  _TEXT       zcpr1_ccp_nfs.asm:23
cntrlp           = $0010 =    16  _TEXT       zcpr1_ccp_nfs.asm:29
cntrlr           = $0012 =    18  _TEXT       zcpr1_ccp_nfs.asm:30
cntrls           = $0013 =    19  _TEXT       zcpr1_ccp_nfs.asm:31
cntrlu           = $0015 =    21  _TEXT       zcpr1_ccp_nfs.asm:32
cntrlx           = $0018 =    24  _TEXT       zcpr1_ccp_nfs.asm:33
cntrlz           = $001A =    26  _TEXT       zcpr1_ccp_nfs.asm:34 (unused)
comblk           = $E082 = 57474  _TEXT       bdos.asm:732
comprand         = $E7B0 = 59312  _TEXT       bdos.asm:2066
conin            = $EAAD = 60077  _TEXT       bios.asm:153
conout           = $EAB9 = 60089  _TEXT       bios.asm:165
const            = $EAA2 = 60066  _TEXT       bios.asm:141
counter          = $E9E3 = 59875  _TEXT       bdos.asm:2482
cpmlow           = $EA9A = 60058  _TEXT       bios.asm:130
cr               = $000D =    13  _TEXT       zcpr1_ccp_nfs.asm:28
curpos           = $DF17 = 57111  _TEXT       bdos.asm:480
de2hl            = $DF5A = 57178  _TEXT       bdos.asm:511
de2hl1           = $DF5B = 57179  _TEXT       bdos.asm:512
default          = $0000 =     0              config_nfs_hybrid.asm:19
defdma           = $E1E5 = 57829  _TEXT       bdos.asm:1033
del              = $007F =   127  _TEXT       zcpr1_ccp_nfs.asm:35
delfile          = $E8E2 = 59618  _TEXT       bdos.asm:2278
dirbuf           = $E9C4 = 59844  _TEXT       bdos.asm:2457
dirc1            = $DEEB = 57067  _TEXT       bdos.asm:438
dircbuf          = $FF10 = 65296  _JUMP_TABLE config_nfs_hybrid.asm:47
dircio           = $DEDF = 57055  _TEXT       bdos.asm:432
dirdma           = $E1EB = 57835  _TEXT       bdos.asm:1038
dirdma1          = $E1EE = 57838  _TEXT       bdos.asm:1043
dirread          = $E1DF = 57823  _TEXT       bdos.asm:1028
dirsize          = $E9D3 = 59859  _TEXT       bdos.asm:2469
dirwrite         = $E1D1 = 57809  _TEXT       bdos.asm:1020
diskpb           = $E9C6 = 59846  _TEXT       bdos.asm:2458
diskro           = $DCEC = 56556  _TEXT       bdos.asm:111
doread           = $DFBD = 57277  _TEXT       bdos.asm:582
dowrite          = $DFC3 = 57283  _TEXT       bdos.asm:587
dsksize          = $E9D1 = 59857  _TEXT       bdos.asm:2468
emptyfcb         = $E9B7 = 59831  _TEXT       bdos.asm:2444
entry            = $0005 =     5  _TEXT       zcpr1_ccp_nfs.asm:12 (unused)
eparam           = $E9E1 = 59873  _TEXT       bdos.asm:2480
erafil1          = $E3AF = 58287  _TEXT       bdos.asm:1385
erafile          = $E3A7 = 58279  _TEXT       bdos.asm:1382
error1           = $DC9F = 56479  _TEXT       bdos.asm:87
error2           = $DCAB = 56491  _TEXT       bdos.asm:93
error3           = $DCB1 = 56497  _TEXT       bdos.asm:96
error4           = $DCB7 = 56503  _TEXT       bdos.asm:99
error5           = $DCBA = 56506  _TEXT       bdos.asm:101
extblk           = $E069 = 57449  _TEXT       bdos.asm:713
extblk1          = $E07C = 57468  _TEXT       bdos.asm:723
extmask          = $E9D0 = 59856  _TEXT       bdos.asm:2467
fbase            = $DC06 = 56326  _TEXT       bdos.asm:29
fbase1           = $DC14 = 56340  _TEXT       bdos.asm:42
fcb2hl           = $E169 = 57705  _TEXT       bdos.asm:917
fcbpos           = $E9F4 = 59892  _TEXT       bdos.asm:2493
fcbset           = $E408 = 58376  _TEXT       bdos.asm:1477
fcreate          = $E8F7 = 59639  _TEXT       bdos.asm:2295
ff               = $000C =    12  _TEXT       zcpr1_ccp_nfs.asm:27 (unused)
filepos          = $E9F5 = 59893  _TEXT       bdos.asm:2494
filero           = $DCE7 = 56551  _TEXT       bdos.asm:110
filesize         = $E958 = 59736  _TEXT       bdos.asm:2369
findfst          = $E323 = 58147  _TEXT       bdos.asm:1302
findnxt          = $E338 = 58168  _TEXT       bdos.asm:1315
fndnxt1          = $E355 = 58197  _TEXT       bdos.asm:1328
fndnxt2          = $E35E = 58206  _TEXT       bdos.asm:1332
fndnxt3          = $E37E = 58238  _TEXT       bdos.asm:1348
fndnxt4          = $E387 = 58247  _TEXT       bdos.asm:1357
fndnxt5          = $E38E = 58254  _TEXT       bdos.asm:1362
fndnxt6          = $E39F = 58271  _TEXT       bdos.asm:1375
fndspa1          = $E3CB = 58315  _TEXT       bdos.asm:1415
fndspa2          = $E3DC = 58332  _TEXT       bdos.asm:1438
fndspa3          = $E3F7 = 58359  _TEXT       bdos.asm:1459
fndspa4          = $E3FF = 58367  _TEXT       bdos.asm:1469
fndspace         = $E3C9 = 58313  _TEXT       bdos.asm:1409
fndstat          = $E9DF = 59871  _TEXT       bdos.asm:2478
functns          = $DC4D = 56397  _TEXT       bdos.asm:78
getaloc          = $E91C = 59676  _TEXT       bdos.asm:2323
getblk1          = $E050 = 57424  _TEXT       bdos.asm:691
getblk2          = $E05E = 57438  _TEXT       bdos.asm:700
getblk3          = $E067 = 57447  _TEXT       bdos.asm:705
getblock         = $E049 = 57417  _TEXT       bdos.asm:688
getchar          = $DD06 = 56582  _TEXT       bdos.asm:128
getcon           = $DED3 = 57043  _TEXT       bdos.asm:420
getcrnt          = $E90F = 59663  _TEXT       bdos.asm:2312
getcsts          = $DF09 = 57097  _TEXT       bdos.asm:465
getecho          = $DD11 = 56593  _TEXT       bdos.asm:137
getempty         = $E52F = 58671  _TEXT       bdos.asm:1669
getfst           = $E8B6 = 59574  _TEXT       bdos.asm:2254
getfst1          = $E8CD = 59597  _TEXT       bdos.asm:2265
getiob           = $DEF8 = 57080  _TEXT       bdos.asm:446
getlog           = $E909 = 59657  _TEXT       bdos.asm:2307
getmt1           = $E551 = 58705  _TEXT       bdos.asm:1685
getnext          = $E565 = 58725  _TEXT       bdos.asm:1699
getnxt           = $E8D3 = 59603  _TEXT       bdos.asm:2270
getparm          = $E931 = 59697  _TEXT       bdos.asm:2340
getprm1          = $E934 = 59700  _TEXT       bdos.asm:2341
getrdr           = $DED9 = 57049  _TEXT       bdos.asm:425
getrov           = $E922 = 59682  _TEXT       bdos.asm:2328
gets2            = $E174 = 57716  _TEXT       bdos.asm:931
getuser          = $E938 = 59704  _TEXT       bdos.asm:2348
getver           = $E889 = 59529  _TEXT       bdos.asm:2224
getwprt          = $E129 = 57641  _TEXT       bdos.asm:871
goback           = $E97F = 59775  _TEXT       bdos.asm:2404
goback1          = $E99C = 59804  _TEXT       bdos.asm:2416
gtnext1          = $E58E = 58766  _TEXT       bdos.asm:1719
gtnext2          = $E599 = 58777  _TEXT       bdos.asm:1728
gtnext3          = $E5B7 = 58807  _TEXT       bdos.asm:1739
gtnext4          = $E5BA = 58810  _TEXT       bdos.asm:1740
gtnext5          = $E5C1 = 58817  _TEXT       bdos.asm:1747
home             = $EADB = 60123  _TEXT       bios.asm:199
homedrv          = $DFAC = 57260  _TEXT       bdos.asm:568
inbuff           = $D403 = 54275  _TEXT       zcpr1_ccp_nfs.asm:554
intvec           = $FF00 = 65280  _JUMP_TABLE config_nfs_hybrid.asm:46
iobyte           = $0003 =     3  _TEXT       zcpr1_ccp_nfs.asm:9
ioerr1           = $DF10 = 57104  _TEXT       bdos.asm:475
ioret            = $DFC6 = 57286  _TEXT       bdos.asm:588
jumphl           = $DF55 = 57173  _TEXT       bdos.asm:503
lf               = $000A =    10  _TEXT       zcpr1_ccp_nfs.asm:26
list             = $EAC5 = 60101  _TEXT       bios.asm:176
logical          = $E095 = 57493  _TEXT       bdos.asm:752
logicl1          = $E09B = 57499  _TEXT       bdos.asm:754
login            = $E9BA = 59834  _TEXT       bdos.asm:2446
logindrv         = $E82C = 59436  _TEXT       bdos.asm:2168
logoff           = $E95E = 59742  _TEXT       bdos.asm:2378
logsect          = $E9F2 = 59890  _TEXT       bdos.asm:2492
mem              = $0035 =    53              config_nfs_hybrid.asm:38
mode             = $E9E0 = 59872  _TEXT       bdos.asm:2479
morefls          = $E18A = 57738  _TEXT       bdos.asm:955
movedir          = $E1F4 = 57844  _TEXT       bdos.asm:1050
moveword         = $E49F = 58527  _TEXT       bdos.asm:1576
newline          = $DDBC = 56764  _TEXT       bdos.asm:262
newln1           = $DDC4 = 56772  _TEXT       bdos.asm:265
nf_asva          = $F9B4 = 63924  _BSS        nabu_fdc.asm:34
nf_asvb          = $F9CE = 63950  _BSS        nabu_fdc.asm:35
nf_atla          = $0041 =    65  _TEXT       nabu_fdc.asm:46
nf_ayda          = $0040 =    64  _TEXT       nabu_fdc.asm:45
nf_busy          = $F917 = 63767  _TEXT       nabu_fdc.asm:532
nf_cach          = $FA06 = 64006  _BSS        nabu_fdc.asm:39
nf_ccp           = $F89C = 63644  _TEXT       nabu_fdc.asm:428 (unused)
nf_csva          = $F9E8 = 63976  _BSS        nabu_fdc.asm:36
nf_csvb          = $F9F7 = 63991  _BSS        nabu_fdc.asm:37
nf_curd          = $F9AF = 63919  _BSS        nabu_fdc.asm:28
nf_dint          = $F922 = 63778  _TEXT       nabu_fdc.asm:548
nf_dirt          = $F9B3 = 63923  _BSS        nabu_fdc.asm:32
nf_dpb           = $F6E8 = 63208  _TEXT       nabu_fdc.asm:73
nf_dpha          = $F6C8 = 63176  _TEXT       nabu_fdc.asm:57
nf_dphb          = $F6D8 = 63192  _TEXT       nabu_fdc.asm:65
nf_dvsc          = $F900 = 63744  _TEXT       nabu_fdc.asm:513
nf_dvsl          = $F906 = 63750  _TEXT       nabu_fdc.asm:516
nf_eint          = $F92B = 63787  _TEXT       nabu_fdc.asm:557
nf_grb           = $F895 = 63637  _TEXT       nabu_fdc.asm:423 (unused)
nf_home          = $F73A = 63290  _TEXT       nabu_fdc.asm:147
nf_inco          = $F9B2 = 63922  _BSS        nabu_fdc.asm:31
nf_ini1          = $F715 = 63253  _TEXT       nabu_fdc.asm:111
nf_ini2          = $F723 = 63267  _TEXT       nabu_fdc.asm:122
nf_init          = $F70F = 63247  _TEXT       nabu_fdc.asm:106
nf_io            = $F9AD = 63917  _BSS        nabu_fdc.asm:25
nf_r2k           = $F8A1 = 63649  _TEXT       nabu_fdc.asm:433
nf_r2k0          = $F8CA = 63690  _TEXT       nabu_fdc.asm:462
nf_r2ks          = $F9AE = 63918  _BSS        nabu_fdc.asm:26
nf_rdsk          = $0002 =     2  _TEXT       nabu_fdc.asm:42
nf_rdw0          = $F81A = 63514  _TEXT       nabu_fdc.asm:322
nf_rdw1          = $F828 = 63528  _TEXT       nabu_fdc.asm:329
nf_rdwr          = $F7FB = 63483  _TEXT       nabu_fdc.asm:301
nf_read          = $F82D = 63533  _TEXT       nabu_fdc.asm:335
nf_rph1          = $F8EA = 63722  _TEXT       nabu_fdc.asm:495
nf_rph2          = $F8F8 = 63736  _TEXT       nabu_fdc.asm:504
nf_rphy          = $F8DE = 63710  _TEXT       nabu_fdc.asm:485
nf_sel           = $F752 = 63314  _TEXT       nabu_fdc.asm:170
nf_sel0          = $F76C = 63340  _TEXT       nabu_fdc.asm:189
nf_sel1          = $F786 = 63366  _TEXT       nabu_fdc.asm:203
nf_sel2          = $F798 = 63384  _TEXT       nabu_fdc.asm:216
nf_selc          = $F779 = 63353  _TEXT       nabu_fdc.asm:197 (unused)
nf_seld          = $F75D = 63325  _TEXT       nabu_fdc.asm:178
nf_ssec          = $F7DC = 63452  _TEXT       nabu_fdc.asm:274
nf_stal          = $F91D = 63773  _TEXT       nabu_fdc.asm:540
nf_str0          = $F7BF = 63423  _TEXT       nabu_fdc.asm:248
nf_strk          = $F7A6 = 63398  _TEXT       nabu_fdc.asm:229
nf_subs          = $F9B0 = 63920  _BSS        nabu_fdc.asm:29
nf_sync          = $F9B1 = 63921  _BSS        nabu_fdc.asm:30
nf_udsl          = $F905 = 63749  _TEXT       nabu_fdc.asm:515
nf_wde1          = $F86B = 63595  _TEXT       nabu_fdc.asm:385
nf_wde2          = $F879 = 63609  _TEXT       nabu_fdc.asm:394
nf_wde3          = $F88D = 63629  _TEXT       nabu_fdc.asm:414
nf_wde4          = $F890 = 63632  _TEXT       nabu_fdc.asm:417
nf_wdef          = $F84D = 63565  _TEXT       nabu_fdc.asm:365
nf_writ          = $F835 = 63541  _TEXT       nabu_fdc.asm:343
nfddev           = $F6F7 = 63223  _TEXT       nabu_fdc.asm:90
nfsdev           = $EF6C = 61292  _TEXT       nabu_nfs.asm:73
nfuncts          = $0029 =    41  _TEXT       bdos.asm:76
ns_ace0          = $F1F0 = 61936  _TEXT       nabu_nfs.asm:594
ns_ace1          = $F1FC = 61948  _TEXT       nabu_nfs.asm:604
ns_aces          = $F1DD = 61917  _TEXT       nabu_nfs.asm:581
ns_alv           = $EF6B = 61291  _TEXT       nabu_nfs.asm:67
ns_atla          = $0041 =    65  _TEXT       nabu_nfs.asm:31
ns_ayda          = $0040 =    64  _TEXT       nabu_nfs.asm:30
ns_buff          = $F960 = 63840  _BSS        nabu_nfs.asm:20
ns_ccp           = $EFD0 = 61392  _TEXT       nabu_nfs.asm:165
ns_cfcb          = $F9A8 = 63912  _BSS        nabu_nfs.asm:24
ns_deco          = $F2D6 = 62166  _TEXT       nabu_nfs.asm:816
ns_del0          = $F1B9 = 61881  _TEXT       nabu_nfs.asm:552
ns_dele          = $F1A6 = 61862  _TEXT       nabu_nfs.asm:536
ns_dfl0          = $EFB7 = 61367  _TEXT       nabu_nfs.asm:141
ns_dflt          = $EFAF = 61359  _TEXT       nabu_nfs.asm:136
ns_dom0          = $F377 = 62327  _TEXT       nabu_nfs.asm:959
ns_domk          = $F373 = 62323  _TEXT       nabu_nfs.asm:957
ns_dore          = $F9AA = 63914  _BSS        nabu_nfs.asm:25
ns_dpb           = $EF5C = 61276  _TEXT       nabu_nfs.asm:55
ns_dph           = $EF4C = 61260  _TEXT       nabu_nfs.asm:47
ns_dsnd          = $EFC6 = 61382  _TEXT       nabu_nfs.asm:158
ns_esnd          = $EFBC = 61372  _TEXT       nabu_nfs.asm:149
ns_exit          = $F3A7 = 62375  _TEXT       nabu_nfs.asm:996
ns_fcls          = $F080 = 61568  _TEXT       nabu_nfs.asm:295
ns_ffm0          = $F14D = 61773  _TEXT       nabu_nfs.asm:457
ns_ffm1          = $F150 = 61776  _TEXT       nabu_nfs.asm:459
ns_ffmt          = $F142 = 61762  _TEXT       nabu_nfs.asm:451
ns_fild          = $0080 =   128  _TEXT       nabu_nfs.asm:35
ns_find          = $F0D6 = 61654  _TEXT       nabu_nfs.asm:357
ns_fmak          = $F2DE = 62174  _TEXT       nabu_nfs.asm:828
ns_fop0          = $F07D = 61565  _TEXT       nabu_nfs.asm:287
ns_fopn          = $F040 = 61504  _TEXT       nabu_nfs.asm:238
ns_for1          = $F50A = 62730  _TEXT       nabu_nfs.asm:1269
ns_for2          = $F51A = 62746  _TEXT       nabu_nfs.asm:1277
ns_for3          = $F525 = 62757  _TEXT       nabu_nfs.asm:1283
ns_for4          = $F535 = 62773  _TEXT       nabu_nfs.asm:1291
ns_form          = $F500 = 62720  _TEXT       nabu_nfs.asm:1265
ns_fre0          = $F26A = 62058  _TEXT       nabu_nfs.asm:704
ns_fre1          = $F272 = 62066  _TEXT       nabu_nfs.asm:710
ns_fre2          = $F285 = 62085  _TEXT       nabu_nfs.asm:725
ns_frea          = $F25F = 62047  _TEXT       nabu_nfs.asm:693
ns_frn0          = $F325 = 62245  _TEXT       nabu_nfs.asm:888
ns_frnm          = $F305 = 62213  _TEXT       nabu_nfs.asm:864
ns_fwr0          = $F296 = 62102  _TEXT       nabu_nfs.asm:745
ns_fwri          = $F28B = 62091  _TEXT       nabu_nfs.asm:734
ns_gcre          = $F224 = 61988  _TEXT       nabu_nfs.asm:637
ns_get0          = $F3D9 = 62425  _TEXT       nabu_nfs.asm:1041
ns_get1          = $F402 = 62466  _TEXT       nabu_nfs.asm:1063
ns_get2          = $F40C = 62476  _TEXT       nabu_nfs.asm:1070
ns_getb          = $F3D3 = 62419  _TEXT       nabu_nfs.asm:1039
ns_getd          = $F3AA = 62378  _TEXT       nabu_nfs.asm:1005
ns_grb           = $EFD5 = 61397  _TEXT       nabu_nfs.asm:169
ns_grb0          = $EFD8 = 61400  _TEXT       nabu_nfs.asm:170
ns_grb1          = $EFEF = 61423  _TEXT       nabu_nfs.asm:178
ns_hcca          = $0080 =   128  _TEXT       nabu_nfs.asm:32
ns_hcer          = $F48B = 62603  _TEXT       nabu_nfs.asm:1172
ns_hcr0          = $F478 = 62584  _TEXT       nabu_nfs.asm:1157
ns_hcr1          = $F492 = 62610  _TEXT       nabu_nfs.asm:1177
ns_hcr2          = $F49B = 62619  _TEXT       nabu_nfs.asm:1183
ns_hcrd          = $F469 = 62569  _TEXT       nabu_nfs.asm:1150
ns_hcre          = $F46C = 62572  _TEXT       nabu_nfs.asm:1151
ns_hcw0          = $F4C8 = 62664  _TEXT       nabu_nfs.asm:1220
ns_hcw1          = $F4E0 = 62688  _TEXT       nabu_nfs.asm:1237
ns_hcw2          = $F4E5 = 62693  _TEXT       nabu_nfs.asm:1239
ns_hcwr          = $F4B6 = 62646  _TEXT       nabu_nfs.asm:1212
ns_hini          = $EF95 = 61333  _TEXT       nabu_nfs.asm:118
ns_inb           = $F563 = 62819  _TEXT       nabu_nfs.asm:1354
ns_inf           = $F564 = 62820  _TEXT       nabu_nfs.asm:1357
ns_init          = $EF76 = 61302  _TEXT       nabu_nfs.asm:87
ns_isls          = $F9AB = 63915  _BSS        nabu_nfs.asm:26
ns_lis0          = $F0DF = 61663  _TEXT       nabu_nfs.asm:371
ns_lis1          = $F10D = 61709  _TEXT       nabu_nfs.asm:397
ns_lis2          = $F116 = 61718  _TEXT       nabu_nfs.asm:405
ns_lis3          = $F123 = 61731  _TEXT       nabu_nfs.asm:413
ns_lis4          = $F12E = 61742  _TEXT       nabu_nfs.asm:421
ns_list          = $F0D9 = 61657  _TEXT       nabu_nfs.asm:367
ns_ltou          = $F54B = 62795  _TEXT       nabu_nfs.asm:1326
ns_m0            = $F57F = 62847  _TEXT       nabu_nfs.asm:1369
ns_m0fl          = $F585 = 62853  _TEXT       nabu_nfs.asm:1373
ns_m0na          = $F588 = 62856  _TEXT       nabu_nfs.asm:1375
ns_m1            = $F59C = 62876  _TEXT       nabu_nfs.asm:1380
ns_m2            = $F5A2 = 62882  _TEXT       nabu_nfs.asm:1387
ns_m2bn          = $F5A8 = 62888  _TEXT       nabu_nfs.asm:1391
ns_m3            = $F5AE = 62894  _TEXT       nabu_nfs.asm:1396
ns_m3bn          = $F5B4 = 62900  _TEXT       nabu_nfs.asm:1400
ns_m4            = $F5BA = 62906  _TEXT       nabu_nfs.asm:1405
ns_m5            = $F5C1 = 62913  _TEXT       nabu_nfs.asm:1413
ns_m6            = $F5C8 = 62920  _TEXT       nabu_nfs.asm:1421
ns_m6na          = $F5D0 = 62928  _TEXT       nabu_nfs.asm:1426
ns_m7            = $F5E3 = 62947  _TEXT       nabu_nfs.asm:1430
ns_m7n0          = $F5E9 = 62953  _TEXT       nabu_nfs.asm:1434
ns_m7n1          = $F5FD = 62973  _TEXT       nabu_nfs.asm:1436
ns_mask          = $F9A6 = 63910  _BSS        nabu_nfs.asm:23
ns_name          = $F99B = 63899  _BSS        nabu_nfs.asm:22
ns_nblk          = $F361 = 62305  _TEXT       nabu_nfs.asm:938
ns_nctl          = $0000 =     0  _TEXT       nabu_nfs.asm:33
ns_opef          = $F3B4 = 62388  _TEXT       nabu_nfs.asm:1018
ns_open          = $F3B1 = 62385  _TEXT       nabu_nfs.asm:1017
ns_outb          = $F561 = 62817  _TEXT       nabu_nfs.asm:1348
ns_outf          = $F562 = 62818  _TEXT       nabu_nfs.asm:1351
ns_own0          = $F38F = 62351  _TEXT       nabu_nfs.asm:981
ns_own1          = $F39B = 62363  _TEXT       nabu_nfs.asm:986
ns_own2          = $F3A1 = 62369  _TEXT       nabu_nfs.asm:990
ns_ownr          = $F37F = 62335  _TEXT       nabu_nfs.asm:972
ns_p0            = $F565 = 62821  _TEXT       nabu_nfs.asm:1361
ns_p1            = $F572 = 62834  _TEXT       nabu_nfs.asm:1365
ns_ptrn          = $F990 = 63888  _BSS        nabu_nfs.asm:21
ns_put0          = $F41A = 62490  _TEXT       nabu_nfs.asm:1084
ns_put1          = $F42C = 62508  _TEXT       nabu_nfs.asm:1094
ns_putb          = $F414 = 62484  _TEXT       nabu_nfs.asm:1082
ns_rec0          = $F44B = 62539  _TEXT       nabu_nfs.asm:1115
ns_rec1          = $F456 = 62550  _TEXT       nabu_nfs.asm:1122
ns_rece          = $F442 = 62530  _TEXT       nabu_nfs.asm:1112
ns_rirq          = $F4A8 = 62632  _TEXT       nabu_nfs.asm:1195
ns_rrea          = $F2A5 = 62117  _TEXT       nabu_nfs.asm:759
ns_rrec          = $F2C3 = 62147  _TEXT       nabu_nfs.asm:794
ns_rwri          = $F2B4 = 62132  _TEXT       nabu_nfs.asm:777
ns_scre          = $F240 = 62016  _TEXT       nabu_nfs.asm:664
ns_sdir          = $F538 = 62776  _TEXT       nabu_nfs.asm:1301
ns_sel           = $EF87 = 61319  _TEXT       nabu_nfs.asm:105
ns_send          = $F460 = 62560  _TEXT       nabu_nfs.asm:1136
ns_sfir          = $F131 = 61745  _TEXT       nabu_nfs.asm:429
ns_size          = $F349 = 62281  _TEXT       nabu_nfs.asm:912
ns_sls0          = $F0CD = 61645  _TEXT       nabu_nfs.asm:343
ns_slst          = $F092 = 61586  _TEXT       nabu_nfs.asm:314
ns_snx0          = $F15E = 61790  _TEXT       nabu_nfs.asm:477
ns_snx1          = $F18A = 61834  _TEXT       nabu_nfs.asm:509
ns_snx2          = $F18E = 61838  _TEXT       nabu_nfs.asm:512
ns_snx3          = $F195 = 61845  _TEXT       nabu_nfs.asm:519
ns_snx4          = $F19B = 61851  _TEXT       nabu_nfs.asm:524
ns_snxt          = $F156 = 61782  _TEXT       nabu_nfs.asm:469
ns_stmp          = $F03A = 61498  _TEXT       nabu_nfs.asm:227
ns_sysh          = $EFF9 = 61433  _TEXT       nabu_nfs.asm:189
ns_tran          = $F9AC = 63916  _BSS        nabu_nfs.asm:27
ns_utol          = $F556 = 62806  _TEXT       nabu_nfs.asm:1339
ns_wchd          = $F548 = 62792  _TEXT       nabu_nfs.asm:1317
ns_wirq          = $F4EF = 62703  _TEXT       nabu_nfs.asm:1248
nulldev          = $EB45 = 60229  _TEXT       bios.asm:317 (unused)
nxent1           = $E224 = 57892  _TEXT       bdos.asm:1088
nxent2           = $E22B = 57899  _TEXT       bdos.asm:1091
nxentry          = $E210 = 57872  _TEXT       bdos.asm:1080
offset           = $E9D9 = 59865  _TEXT       bdos.asm:2472
olddrv           = $E9EA = 59882  _TEXT       bdos.asm:2486
openfil          = $E8A7 = 59559  _TEXT       bdos.asm:2241
openit           = $E45C = 58460  _TEXT       bdos.asm:1533
openit1          = $E465 = 58469  _TEXT       bdos.asm:1537
openit2          = $E496 = 58518  _TEXT       bdos.asm:1565
outchar          = $DD53 = 56659  _TEXT       bdos.asm:188
outchr1          = $DD6D = 56685  _TEXT       bdos.asm:202
outchr2          = $DD84 = 56708  _TEXT       bdos.asm:218
outcon           = $DD9B = 56731  _TEXT       bdos.asm:239
outcon1          = $DDA1 = 56737  _TEXT       bdos.asm:242
outcrlf          = $DDD4 = 56788  _TEXT       bdos.asm:275
outflag          = $DF15 = 57109  _TEXT       bdos.asm:478
params           = $DF4E = 57166  _TEXT       bdos.asm:494
pattrn2          = $DC00 = 56320  _TEXT       bdos.asm:21 (unused)
position         = $E70E = 59150  _TEXT       bdos.asm:1943
positn1          = $E712 = 59154  _TEXT       bdos.asm:1948
positn2          = $E752 = 59218  _TEXT       bdos.asm:1994
positn3          = $E78A = 59274  _TEXT       bdos.asm:2026
positn4          = $E78F = 59279  _TEXT       bdos.asm:2032
positn5          = $E796 = 59286  _TEXT       bdos.asm:2039
pr_atla          = $0041 =    65  _TEXT       nabu_prt.asm:14
pr_ayda          = $0040 =    64  _TEXT       nabu_prt.asm:13
pr_ctrl          = $0000 =     0  _TEXT       nabu_prt.asm:16
pr_init          = $F61B = 63003  _TEXT       nabu_prt.asm:31
pr_prnt          = $00B0 =   176  _TEXT       nabu_prt.asm:15
pr_read          = $F61E = 63006  _TEXT       nabu_prt.asm:46
pr_stat          = $F61C = 63004  _TEXT       nabu_prt.asm:38
pr_wri0          = $F624 = 63012  _TEXT       nabu_prt.asm:56
pr_wri1          = $F633 = 63027  _TEXT       nabu_prt.asm:67
pr_writ          = $F620 = 63008  _TEXT       nabu_prt.asm:53
prstat           = $EB14 = 60180  _TEXT       bios.asm:271
prtdev           = $F610 = 62992  _TEXT       nabu_prt.asm:19
prterr           = $DCF0 = 56560  _TEXT       bdos.asm:115
prtflag          = $DF18 = 57112  _TEXT       bdos.asm:481
prtmesg          = $DDDE = 56798  _TEXT       bdos.asm:282
prtstr           = $DF03 = 57091  _TEXT       bdos.asm:458
punch            = $EAC9 = 60105  _TEXT       bios.asm:182
putdma           = $E915 = 59669  _TEXT       bdos.asm:2317
ransiz1          = $E7EF = 59375  _TEXT       bdos.asm:2122
ransiz2          = $E811 = 59409  _TEXT       bdos.asm:2144
ransiz3          = $E817 = 59415  _TEXT       bdos.asm:2146
ransize          = $E7DD = 59357  _TEXT       bdos.asm:2111
rdbuf1           = $DDFA = 56826  _TEXT       bdos.asm:301
rdbuf10          = $DE7B = 56955  _TEXT       bdos.asm:363
rdbuf11          = $DE83 = 56963  _TEXT       bdos.asm:369
rdbuf12          = $DE95 = 56981  _TEXT       bdos.asm:381
rdbuf13          = $DEA4 = 56996  _TEXT       bdos.asm:388
rdbuf14          = $DEB1 = 57009  _TEXT       bdos.asm:396
rdbuf15          = $DEB4 = 57012  _TEXT       bdos.asm:399
rdbuf16          = $DEC8 = 57032  _TEXT       bdos.asm:411
rdbuf17          = $DECC = 57036  _TEXT       bdos.asm:413
rdbuf2           = $DDFC = 56828  _TEXT       bdos.asm:303
rdbuf3           = $DE21 = 56865  _TEXT       bdos.asm:320
rdbuf4           = $DE31 = 56881  _TEXT       bdos.asm:329
rdbuf5           = $DE42 = 56898  _TEXT       bdos.asm:337
rdbuf6           = $DE53 = 56915  _TEXT       bdos.asm:346
rdbuf7           = $DE59 = 56921  _TEXT       bdos.asm:349
rdbuf8           = $DE6A = 56938  _TEXT       bdos.asm:356
rdbuf9           = $DE76 = 56950  _TEXT       bdos.asm:361
rdbuff           = $DDEC = 56812  _TEXT       bdos.asm:294
rdrandom         = $E94C = 59724  _TEXT       bdos.asm:2359
rdseq            = $E5C7 = 58823  _TEXT       bdos.asm:1752
rdseq1           = $E5CC = 58828  _TEXT       bdos.asm:1754
rdseq2           = $E5F1 = 58865  _TEXT       bdos.asm:1769
rdseq3           = $E606 = 58886  _TEXT       bdos.asm:1779
rdwrtflg         = $E9DE = 59870  _TEXT       bdos.asm:2477
read             = $EB0C = 60172  _TEXT       bios.asm:256
reader           = $EACD = 60109  _TEXT       bios.asm:188
readran          = $E79E = 59294  _TEXT       bdos.asm:2046
readseq          = $E8EB = 59627  _TEXT       bdos.asm:2285
relblock         = $E9E2 = 59874  _TEXT       bdos.asm:2481
renfile          = $E900 = 59648  _TEXT       bdos.asm:2301
resccp           = $EB66 = 60262  _TEXT       config_nfs_hybrid.asm:150
resgrb           = $EB69 = 60265  _TEXT       config_nfs_hybrid.asm:156
rodisk           = $DC10 = 56336  _TEXT       bdos.asm:36
rofile           = $DC12 = 56338  _TEXT       bdos.asm:37
rstdsk           = $E88E = 59534  _TEXT       bdos.asm:2229
rtn              = $DF0F = 57103  _TEXT       bdos.asm:471
samext           = $E312 = 58130  _TEXT       bdos.asm:1283
savatr1          = $E44B = 58443  _TEXT       bdos.asm:1523
saveattr         = $E446 = 58438  _TEXT       bdos.asm:1521
savefcb          = $E9E4 = 59876  _TEXT       bdos.asm:2483
savext           = $E9ED = 59885  _TEXT       bdos.asm:2489
savnrec          = $E9EE = 59886  _TEXT       bdos.asm:2490
savnxt           = $E9EC = 59884  _TEXT       bdos.asm:2488
scratch1         = $E9BE = 59838  _TEXT       bdos.asm:2451
scratch2         = $E9C0 = 59840  _TEXT       bdos.asm:2452
scratch3         = $E9C2 = 59842  _TEXT       bdos.asm:2453
sectors          = $E9CC = 59852  _TEXT       bdos.asm:2464
sectrn           = $EB17 = 60183  _TEXT       bios.asm:276
seldsk           = $EAE0 = 60128  _TEXT       bios.asm:208
select           = $DF64 = 57188  _TEXT       bdos.asm:522
select1          = $DFA8 = 57256  _TEXT       bdos.asm:562
setattr          = $E928 = 59688  _TEXT       bdos.asm:2333
setbit           = $E116 = 57622  _TEXT       bdos.asm:854
setdir           = $E1A7 = 57767  _TEXT       bdos.asm:988
setdma           = $EB06 = 60166  _TEXT       bios.asm:248
setdsk           = $E850 = 59472  _TEXT       bdos.asm:2189
setext           = $E0B1 = 57521  _TEXT       bdos.asm:769
setfile          = $E276 = 57974  _TEXT       bdos.asm:1173
setfl1           = $E280 = 57984  _TEXT       bdos.asm:1178
setfl2           = $E293 = 58003  _TEXT       bdos.asm:1190
setfl3           = $E299 = 58009  _TEXT       bdos.asm:1196
setfl4           = $E2A8 = 58024  _TEXT       bdos.asm:1205
sethlde          = $E0B9 = 57529  _TEXT       bdos.asm:777
setiob           = $DEFE = 57086  _TEXT       bdos.asm:451
setnrec          = $E0DD = 57565  _TEXT       bdos.asm:803
setran           = $E819 = 59417  _TEXT       bdos.asm:2152
sets2b7          = $E183 = 57731  _TEXT       bdos.asm:945
setsec           = $EB02 = 60162  _TEXT       bios.asm:241
setstat          = $DF0C = 57100  _TEXT       bdos.asm:470
settrk           = $EAFE = 60158  _TEXT       bios.asm:234
setuser          = $E946 = 59718  _TEXT       bdos.asm:2353
shiftl           = $E10F = 57615  _TEXT       bdos.asm:845
shiftl1          = $E110 = 57616  _TEXT       bdos.asm:846
shiftr           = $E0F5 = 57589  _TEXT       bdos.asm:819
shiftr1          = $E0F6 = 57590  _TEXT       bdos.asm:820
showit           = $DD8A = 56714  _TEXT       bdos.asm:226
siodev           = $F63A = 63034  _TEXT       nabu_sio.asm:20
slcterr          = $DF52 = 57170  _TEXT       bdos.asm:499
so_atab          = $F6AA = 63146  _TEXT       nabu_sio.asm:131
so_conf          = $F6AE = 63150  _TEXT       nabu_sio.asm:135
so_ini0          = $F64D = 63053  _TEXT       nabu_sio.asm:39
so_ini1          = $F653 = 63059  _TEXT       nabu_sio.asm:43
so_ini2          = $F65A = 63066  _TEXT       nabu_sio.asm:49
so_ini3          = $F666 = 63078  _TEXT       nabu_sio.asm:59
so_init          = $F645 = 63045  _TEXT       nabu_sio.asm:33
so_rea0          = $F68D = 63117  _TEXT       nabu_sio.asm:102
so_read          = $F684 = 63108  _TEXT       nabu_sio.asm:95
so_sta0          = $F67C = 63100  _TEXT       nabu_sio.asm:83
so_stat          = $F673 = 63091  _TEXT       nabu_sio.asm:76
so_wri0          = $F6A0 = 63136  _TEXT       nabu_sio.asm:121
so_writ          = $F696 = 63126  _TEXT       nabu_sio.asm:113
starting         = $DF16 = 57110  _TEXT       bdos.asm:479
status           = $DF50 = 57168  _TEXT       bdos.asm:495
stbitmap         = $E267 = 57959  _TEXT       bdos.asm:1153
stbmap1          = $E26F = 57967  _TEXT       bdos.asm:1164
stfilpos         = $E209 = 57865  _TEXT       bdos.asm:1068
stkarea          = $DF4C = 57164  _TEXT       bdos.asm:490
stnrec1          = $E0E9 = 57577  _TEXT       bdos.asm:808
strdata          = $E0C6 = 57542  _TEXT       bdos.asm:787
ststatus         = $E30C = 58124  _TEXT       bdos.asm:1275
subhl            = $E1A0 = 57760  _TEXT       bdos.asm:978
swindi0          = $EB2D = 60205  _TEXT       bios.asm:300
swindi1          = $EB33 = 60211  _TEXT       bios.asm:304
swindir          = $EB29 = 60201  _TEXT       bios.asm:298
syshook          = $EB63 = 60259  _TEXT       config_nfs_hybrid.asm:128
tab              = $0009 =     9  _TEXT       zcpr1_ccp_nfs.asm:25
tbase            = $0100 =   256  _TEXT       zcpr1_ccp_nfs.asm:18 (unused)
tbuff            = $0080 =   128  _TEXT       zcpr1_ccp_nfs.asm:17
tdrive           = $0004 =     4  _TEXT       zcpr1_ccp_nfs.asm:10
tfcb             = $005C =    92  _TEXT       zcpr1_ccp_nfs.asm:14 (unused)
tm_40c           = $EDF2 = 60914  _TEXT       nabu_vdp.asm:462
tm_80c           = $EDFF = 60927  _TEXT       nabu_vdp.asm:469
tm_addh          = $EF16 = 61206  _TEXT       nabu_vdp.asm:707
tm_addr          = $EF18 = 61208  _TEXT       nabu_vdp.asm:709
tm_atla          = $0041 =    65  _TEXT       nabu_vdp.asm:37
tm_ayda          = $0040 =    64  _TEXT       nabu_vdp.asm:36
tm_bs            = $ED48 = 60744  _TEXT       nabu_vdp.asm:348
tm_cbuf          = $F938 = 63800  _BSS        nabu_vdp.asm:26
tm_cha0          = $EEBA = 61114  _TEXT       nabu_vdp.asm:630
tm_chat          = $EEB4 = 61108  _TEXT       nabu_vdp.asm:625
tm_cle0          = $EDDE = 60894  _TEXT       nabu_vdp.asm:447
tm_clea          = $EDCF = 60879  _TEXT       nabu_vdp.asm:438
tm_cles          = $EDCD = 60877  _TEXT       nabu_vdp.asm:437
tm_cloc          = $EC59 = 60505  _TEXT       nabu_vdp.asm:172
tm_cls           = $EEFB = 61179  _TEXT       nabu_vdp.asm:684
tm_cls0          = $EF04 = 61188  _TEXT       nabu_vdp.asm:687
tm_cold          = $EF4B = 61259  _TEXT       nabu_vdp.asm:754
tm_colr          = $EF46 = 61254  _TEXT       nabu_vdp.asm:749
tm_cr            = $ED45 = 60741  _TEXT       nabu_vdp.asm:345
tm_cshm          = $ED57 = 60759  _TEXT       nabu_vdp.asm:362
tm_cupd          = $EDF6 = 60918  _TEXT       nabu_vdp.asm:464
tm_curx          = $EF49 = 61257  _TEXT       nabu_vdp.asm:752
tm_cury          = $EF4A = 61258  _TEXT       nabu_vdp.asm:753
tm_data          = $00A0 =   160  _TEXT       nabu_vdp.asm:30
tm_dint          = $EF29 = 61225  _TEXT       nabu_vdp.asm:728
tm_dsc0          = $EE25 = 60965  _TEXT       nabu_vdp.asm:495
tm_dsco          = $EE12 = 60946  _TEXT       nabu_vdp.asm:488
tm_eint          = $EF39 = 61241  _TEXT       nabu_vdp.asm:740
tm_esc           = $ED8C = 60812  _TEXT       nabu_vdp.asm:394
tm_esc0          = $ED9D = 60829  _TEXT       nabu_vdp.asm:405
tm_esc1          = $EDB7 = 60855  _TEXT       nabu_vdp.asm:420
tm_esc2          = $EDC2 = 60866  _TEXT       nabu_vdp.asm:427
tm_escd          = $ED98 = 60824  _TEXT       nabu_vdp.asm:402
tm_esci          = $EDB1 = 60849  _TEXT       nabu_vdp.asm:417
tm_escr          = $ED99 = 60825  _TEXT       nabu_vdp.asm:403
tm_escs          = $F936 = 63798  _BSS        nabu_vdp.asm:24
tm_get0          = $EE4E = 61006  _TEXT       nabu_vdp.asm:530
tm_getc          = $EE38 = 60984  _TEXT       nabu_vdp.asm:516
tm_home          = $ED5A = 60762  _TEXT       nabu_vdp.asm:363
tm_inb           = $EF47 = 61255  _TEXT       nabu_vdp.asm:750
tm_inf           = $EF48 = 61256  _TEXT       nabu_vdp.asm:751
tm_ini0          = $EC2C = 60460  _TEXT       nabu_vdp.asm:140
tm_ini1          = $EC4C = 60492  _TEXT       nabu_vdp.asm:161
tm_inir          = $EBD2 = 60370  _TEXT       nabu_vdp.asm:79
tm_init          = $EC04 = 60420  _TEXT       nabu_vdp.asm:116
tm_inr0          = $EBD3 = 60371  _TEXT       nabu_vdp.asm:80
tm_keyd          = $0090 =   144  _TEXT       nabu_vdp.asm:33
tm_keys          = $0091 =   145  _TEXT       nabu_vdp.asm:34
tm_kirq          = $EE56 = 61014  _TEXT       nabu_vdp.asm:539
tm_last          = $F937 = 63799  _BSS        nabu_vdp.asm:25
tm_latc          = $00A1 =   161  _TEXT       nabu_vdp.asm:31
tm_lf            = $ED39 = 60729  _TEXT       nabu_vdp.asm:336
tm_map           = $EE64 = 61028  _TEXT       nabu_vdp.asm:554
tm_map0          = $EE68 = 61032  _TEXT       nabu_vdp.asm:558
tm_map2          = $EE74 = 61044  _TEXT       nabu_vdp.asm:571
tm_mapt          = $EE7B = 61051  _TEXT       nabu_vdp.asm:578
tm_mode          = $EF44 = 61252  _TEXT       nabu_vdp.asm:748
tm_oti0          = $EBCA = 60362  _TEXT       nabu_vdp.asm:66
tm_otir          = $EBC9 = 60361  _TEXT       nabu_vdp.asm:65
tm_outc          = $F934 = 63796  _BSS        nabu_vdp.asm:22
tm_putc          = $EE90 = 61072  _TEXT       nabu_vdp.asm:596
tm_putf          = $EE9E = 61086  _TEXT       nabu_vdp.asm:604 (unused)
tm_rea0          = $ECB2 = 60594  _TEXT       nabu_vdp.asm:237
tm_rea1          = $ECC8 = 60616  _TEXT       nabu_vdp.asm:249
tm_rea2          = $ECDD = 60637  _TEXT       nabu_vdp.asm:262
tm_rea3          = $ECED = 60653  _TEXT       nabu_vdp.asm:272
tm_read          = $ECA6 = 60582  _TEXT       nabu_vdp.asm:231
tm_ri            = $ED32 = 60722  _TEXT       nabu_vdp.asm:330
tm_sclf          = $EC71 = 60529  _TEXT       nabu_vdp.asm:188
tm_scol          = $EE05 = 60933  _TEXT       nabu_vdp.asm:474
tm_scr0          = $EC69 = 60521  _TEXT       nabu_vdp.asm:185
tm_scr1          = $EC6F = 60527  _TEXT       nabu_vdp.asm:187
tm_scri          = $EC5F = 60511  _TEXT       nabu_vdp.asm:180
tm_scro          = $F935 = 63797  _BSS        nabu_vdp.asm:23
tm_setp          = $EC7B = 60539  _TEXT       nabu_vdp.asm:198
tm_sta0          = $EBE7 = 60391  _TEXT       nabu_vdp.asm:98
tm_sta1          = $EBF2 = 60402  _TEXT       nabu_vdp.asm:103
tm_sta2          = $ECFE = 60670  _TEXT       nabu_vdp.asm:286
tm_stal          = $ECFB = 60667  _TEXT       nabu_vdp.asm:284
tm_stat          = $EBDB = 60379  _TEXT       nabu_vdp.asm:92
tm_up            = $ED52 = 60754  _TEXT       nabu_vdp.asm:357
tm_updc          = $EE09 = 60937  _TEXT       nabu_vdp.asm:478
tm_usc0          = $EEE7 = 61159  _TEXT       nabu_vdp.asm:663
tm_usco          = $EED8 = 61144  _TEXT       nabu_vdp.asm:656
tm_vcpy          = $EEC0 = 61120  _TEXT       nabu_vdp.asm:642
tm_virq          = $EF23 = 61219  _TEXT       nabu_vdp.asm:718
tm_wri0          = $ED1F = 60703  _TEXT       nabu_vdp.asm:318
tm_wri1          = $ED5E = 60766  _TEXT       nabu_vdp.asm:368
tm_writ          = $ED04 = 60676  _TEXT       nabu_vdp.asm:298
trksec           = $DFCE = 57294  _TEXT       bdos.asm:596
trksec1          = $DFDC = 57308  _TEXT       bdos.asm:605
trksec2          = $DFEF = 57327  _TEXT       bdos.asm:618
trksec3          = $E005 = 57349  _TEXT       bdos.asm:634
trksec4          = $E01A = 57370  _TEXT       bdos.asm:651
update           = $E40C = 58380  _TEXT       bdos.asm:1484
update1          = $E41B = 58395  _TEXT       bdos.asm:1492
userdma          = $E9BC = 59836  _TEXT       bdos.asm:2447
userno           = $DF4C = 57164  _TEXT       bdos.asm:492
usrstack         = $DF1A = 57114  _TEXT       bdos.asm:486
vdpdev           = $EBBC = 60348  _TEXT       nabu_vdp.asm:51
wbinit           = $EB4B = 60235  _TEXT       config_nfs_hybrid.asm:66
wboot            = $EA48 = 59976  _TEXT       bios.asm:57
wboot0           = $EA6F = 60015  _TEXT       bios.asm:94
wbootin          = $EA0A = 59914  _TEXT       bios.asm:22
wbootr           = $EA5F = 59999  _TEXT       bios.asm:82
write            = $EB10 = 60176  _TEXT       bios.asm:263
writeran         = $E7A7 = 59303  _TEXT       bdos.asm:2053
wrtprt           = $E9B8 = 59832  _TEXT       bdos.asm:2445
wrtprtd          = $E137 = 57655  _TEXT       bdos.asm:881
wrtseq           = $E8F1 = 59633  _TEXT       bdos.asm:2290
wtrandom         = $E952 = 59730  _TEXT       bdos.asm:2364
wtseq            = $E609 = 58889  _TEXT       bdos.asm:1783
wtseq1           = $E60E = 58894  _TEXT       bdos.asm:1785
wtseq10          = $E6DD = 59101  _TEXT       bdos.asm:1900
wtseq11          = $E709 = 59145  _TEXT       bdos.asm:1924
wtseq12          = $E70B = 59147  _TEXT       bdos.asm:1925
wtseq2           = $E646 = 58950  _TEXT       bdos.asm:1808
wtseq3           = $E653 = 58963  _TEXT       bdos.asm:1814
wtseq4           = $E66F = 58991  _TEXT       bdos.asm:1826
wtseq5           = $E677 = 58999  _TEXT       bdos.asm:1833
wtseq6           = $E679 = 59001  _TEXT       bdos.asm:1834
wtseq7           = $E697 = 59031  _TEXT       bdos.asm:1857
wtseq8           = $E6A5 = 59045  _TEXT       bdos.asm:1864
wtseq9           = $E6C6 = 59078  _TEXT       bdos.asm:1884
wtseq99          = $E6EA = 59114  _TEXT       bdos.asm:1911 (unused)
wtspecl          = $E9A6 = 59814  _TEXT       bdos.asm:2430
xlate            = $E9DB = 59867  _TEXT       bdos.asm:2473


total time: 0.0859 sec.
no errors
