              	; --------------------------------------
              	; zasm: assemble "futil.asm"
              	; date: 2023-05-02 23:25:20
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*       N A B U   F D C   I M A G E   U T I L I T Y
              	;*
              	;*     This utility allows for floppy disk data to be
              	;*     directly interacted with by the user. Disks can
              	;*     be imaged, formatted, or re-imaged. At the moment,
              	;*     only .IMG style images are supported.
              	;*
              	;**************************************************************
              	;
              	
              	; Equates
0005:         	bdos	equ	0x0005
005C:         	fcb	equ	0x005C
              	
0001:         	b_coin	equ	0x01
0002:         	b_cout	equ	0x02
0009:         	b_print	equ	0x09
000F:         	b_open	equ	0x0F
0016:         	b_make	equ	0x16
              	
              	; Program start
0100:         		org	0x0100
              		
              		
              		; Print banner
0100: 0E09    	start:	ld	c,b_print
0102: 110703  		ld	de,splash
0105: CD0500  		call	bdos
              	
              		; Look for the FDC
0108: 0ECF    		ld	c,0xCF
010A: ED78    	search:	in	a,(c)
010C: FE10    		cp	0x10
010E: 2814    		jr	z,foundit
0110: 0C      		inc	c
0111: 2806    		jr	z,nofdc
0113: 3E0F    		ld	a,0x0F
0115: 81      		add	a,c
0116: 4F      		ld	c,a
0117: 18F1    		jr	search
              		
              		; No FDC found!
0119: 0E09    	nofdc:	ld	c,b_print
011B: 113604  		ld	de,nfdcmsg
011E: CD0500  		call	bdos
0121: C38502  		jp	waitex
              		
              		; Place address in nf_io, and get the user profile
0124: 79      	foundit:ld	a,c
0125: D60F    		sub	15
0127: 4F      		ld	c,a
0128: 320403  		ld	(nf_io),a
              	
              		; Get user profile
012B: 0E09    	getpro: ld	c,b_print
012D: 113A03  		ld	de,cfgmsg
0130: CD0500  		call	bdos
0133: CDAF02  		call	getopt
              		
              		; Exit option
0136: FE39    		cp	'9'
0138: 280F    		jr	z,exit
              		
              		; Profile 1 (5.25 SSDD)
013A: 210004  		ld	hl,1024	; length of sector
013D: 0E28    		ld	c,40	; blocks per track
013F: 1605    		ld	d,5	; sectors per track
0141: 1E28    		ld	e,40	; track 
0143: FE31    		cp	'1'
0145: 2807    		jr	z,setpro
              	
              	
              		; Invalid, reprompt
0147: 18E2    		jr	getpro
              	
              		; Soft reboot
0149: 0E00    	exit:	ld	c,0x00
014B: C30500  		jp	bdos
              		
              		
              		; Set profile variables
014E: 32FD02  	setpro:	ld	(profile),a
0151: 22FE02  		ld	(seclen),hl
0154: 79      		ld	a,c
0155: 320103  		ld	(blkcnt),a
0158: 7A      		ld	a,d
0159: 320003  		ld	(seccnt),a
015C: 7B      		ld	a,e
015D: 320203  		ld	(trkcnt),a
              		
              		; Now lets get the logical drive #
0160: 0E09    	getcurd:ld	c,b_print
0162: 119F03  		ld	de,drvmsg
0165: CD0500  		call	bdos
0168: CDAF02  		call	getopt
              		
016B: 0602    		ld	b,2
016D: FE30    		cp	'0'
016F: 2808    		jr	z,setcurd
0171: 0604    		ld	b,4
0173: FE31    		cp	'1'
0175: 2802    		jr	z,setcurd
0177: 18E7    		jr	getcurd
              		
0179: 78      	setcurd:ld	a,b
017A: 320303  		ld	(nf_curd),a
              		
              		; Finally, we get the actual operation
017D: 0E09    	getcmd:	ld	c,b_print
017F: 11B903  		ld	de,cmdmsg
0182: CD0500  		call	bdos
0185: CDAF02  		call	getopt
              		
0188: FE52    		cp	'R'
018A: CA8F01  		jp	z,read
              		
018D: 18EE    		jr	getcmd
              		
              	; Read operation
              	; First, make sure user is ready
              	; Second, the defined file will be opened
              	; Then the user will be prompted for what image type they want
018F: 0E09    	read:	ld	c,b_print
0191: 11E103  		ld	de,readymsg
0194: CD0500  		call	bdos
0197: CDAF02  		call	getopt
019A: FE59    		cp	'Y'
019C: C22B01  		jp	nz,getpro
              	
              		; Alright, we are commited
              	
019F: 3A5D00  		ld	a,(fcb+1)
01A2: FE30    		cp	'0'
01A4: DA7D02  		jp	c,ferror
              	
              		; There is a file, try to open it
01A7: 0E0F    		ld	c,b_open
01A9: 115C00  		ld	de,fcb
01AC: CD0500  		call	bdos
              		
              		; Did it work?
01AF: B7      		or	a
01B0: F2BF01  		jp	p,readr
01B3: 0E16    		ld	c,b_make
01B5: 115C00  		ld	de,fcb
01B8: CD0500  		call	bdos
01BB: B7      		or	a
01BC: FA7D02  		jp	m,ferror
              		
              		; Read (real)
              		; Start by readying the disk
01BF: CD4B02  	readr:	call	dskrdy
              		
              		; Set the starting track
01C2: AF      		xor	a
01C3: 320503  		ld	(curtrk),a
              		
              		; Print out current track
01C6: 0E09    	readr0:	ld	c,b_print
01C8: 116804  		ld	de,readmsg
01CB: CD0500  		call	bdos
01CE: 3A0503  		ld	a,(curtrk)
01D1: 6F      		ld	l,a
01D2: 2600    		ld	h,0
01D4: CDC502  		call	putd
              	
01D7: 3E01    		ld	a,1
01D9: 320603  		ld	(cursec),a
              		
              		; Where do we want to output?
01DC: 21A004  		ld	hl,top
              		
              		; Read the sector in
01DF: 3A0403  	readr1:	ld	a,(nf_io)
01E2: 4F      		ld	c,a
01E3: CD2902  		call	nf_rphy
01E6: B7      		or	a
01E7: C26402  		jp	nz,nready
              		
              		; Do we need to read another in?
01EA: 3A0003  		ld	a,(seccnt)
01ED: 47      		ld	b,a
01EE: 3A0603  		ld	a,(cursec)
01F1: B8      		cp	b
01F2: 2806    		jr	z,readr2
01F4: 3C      		inc	a
01F5: 320603  		ld	(cursec),a
01F8: 18E5    		jr	readr1
              		
              		; Write track to storage and continue
01FA: 0E09    	readr2: ld	c,b_print
01FC: 117904  		ld	de,stormsg
01FF: CD0500  		call	bdos
              		
              		; TODO write to image
              		
              		; Read next track
0202: 3A0203  		ld	a,(trkcnt)
0205: 47      		ld	b,a
0206: 3A0503  		ld	a,(curtrk)
0209: 3C      		inc	a
020A: B8      		cp	b
020B: 2811    		jr	z,alldone	; No more tracks
020D: 320503  		ld	(curtrk),a
              		
              		; Step in 1 track
              		; This should be BDOS load code
0210: 3A0403  		ld	a,(nf_io)
0213: 4F      		ld	c,a
0214: 3E59    		ld	a,0x59
0216: ED79    		out	(c),a
0218: CDA402  		call	nf_busy
              		
              		; Read another track
021B: C3C601  		jp	readr0
              		
              		; Reading is done
021E: 0E09    	alldone:ld	c,b_print
0220: 118604  		ld	de,donemsg
0223: CD0500  		call	bdos
              		
0226: C34901  		jp	exit
              	
              	
              	; Reads a physical sector
              	; Track and sector should be set up
              	; (cursec) = Sector to read
              	; c = FDC command address
              	; hl = memory location of result
              	;
              	; Returns a=0 if successful
              	; uses: af, bc, de, hl
0229: 59      	nf_rphy:ld	e,c
022A: 0C      		inc	c
022B: 0C      		inc	c
022C: 3A0603  		ld	a,(cursec)
022F: ED79    		out	(c),a
0231: 0C      		inc	c
0232: 51      		ld	d,c
0233: 4B      		ld	c,e
              		
              		; Read command
0234: 3E88    		ld	a,0x88
0236: ED79    		out	(c),a
0238: ED78    	nf_rph1:in	a,(c)
023A: 1F      		rra	
023B: 3009    		jr	nc,nf_rph2
023D: 1F      		rra
023E: 30F8    		jr	nc,nf_rph1
0240: 4A      		ld	c,d
0241: EDA2    		ini
0243: 4B      		ld	c,e
0244: 18F2    		jr	nf_rph1
0246: ED78    	nf_rph2:in	a,(c)
0248: E6FC    		and	0xFC
024A: C9      		ret
              	
              	
              	; Gets the drive ready, this means:
              	; 1. Force an interrupt
              	; 2. Make sure that there is actually a disk in the drive
              	; 3. Move the drive to track 0
              	;
              	; uses: af, bc, d
024B: 16FF    	dskrdy:	ld	d,255
024D: CD8D02  		call	nf_dvsc
0250: 3A0403  		ld	a,(nf_io)
0253: 4F      		ld	c,a
0254: 3ED0    		ld	a,0xD0
0256: ED79    		out	(c),a		; Force FDC interrupt
0258: CDAA02  	dskrdy0:call	nf_stal
025B: ED78    		in	a,(c)
025D: E602    		and	0x02
025F: 2010    		jr	nz,dskrdy1
0261: 15      		dec	d
0262: 20F4    		jr	nz,dskrdy0
              		
              		; No disk!
0264: CD9202  	nready:	call	nf_udsl
              		
0267: 0E09    		ld	c,b_print
0269: 114F04  		ld	de,nrdymsg
026C: CD0500  		call	bdos
026F: 1814    		jr	waitex
              	
              		; Found disk
              		; Restore to track 0
0271: 3A0403  	dskrdy1:ld	a,(nf_io)
0274: 4F      		ld	c,a
0275: 3E09    		ld	a,0x09
0277: ED79    		out	(c),a 
0279: CDA402  		call	nf_busy
              		
027C: C9      		ret
              	
              	; "Handle" a file error
              	; Complain to user and exit out
027D: 0E09    	ferror:	ld	c,b_print
027F: 11FB03  		ld	de,ferrmsg
0282: CD0500  		call	bdos
              		
0285: 0E01    	waitex:	ld	c,b_coin
0287: CD0500  		call	bdos
              		
028A: C34901  		jp	exit
              		
              	; Selects or deselects a drive
              	; a = Drive density / selection
              	;
              	; uses: af
028D: 3A0303  	nf_dvsc:ld	a,(nf_curd)	; Select current drive
0290: 1801    		jr	nf_dvsl
0292: AF      	nf_udsl:xor	a		; Unselects a drive
0293: C5      	nf_dvsl:push	bc
0294: 47      		ld	b,a
0295: 3A0403  		ld	a,(nf_io)
0298: C60F    		add	a,0x0F
029A: 4F      		ld	c,a
029B: ED41    		out	(c),b
029D: 06FF    		ld	b,0xFF
029F: CDAA02  		call	nf_stal
02A2: C1      		pop	bc
02A3: C9      		ret
              		
              	; Waits until FDC is not busy
              	; c = FDC command address
              	;
              	; uses: af
02A4: ED78    	nf_busy:in	a,(c)
02A6: 1F      		rra
02A7: 38FB    		jr	c,nf_busy
02A9: C9      		ret
              		
              	; Waits a little bit
              	;
              	; uses: b
02AA: C5      	nf_stal:push	bc
02AB: C1      		pop	bc
02AC: 10FC    		djnz	nf_stal
02AE: C9      		ret
              		
              	; Gets a single character option from the user
              	; Letters will be converted to upper case
              	;
              	; Returns character in A
              	; uses: all
02AF: 0E0A    	getopt:	ld	c,0x0A
02B1: 119C04  		ld	de,inpbuf
02B4: CD0500  		call	bdos
02B7: 3A9E04  		ld	a,(inpbuf+2)
              		
              	; Converts lowercase to uppercase
              	; a = Character to convert
              	;
              	; Returns uppercase in A
              	; uses: af
02BA: E67F    	ltou:	and	0x7F
02BC: FE61    		cp	0x61		; 'a'
02BE: D8      		ret	c
02BF: FE7B    		cp	0x7B		; '{'
02C1: D0      		ret	nc
02C2: D620    		sub	0x20
02C4: C9      		ret
              		
              	; Print decimal
              	; hl = value to print
              	;
              	; uses: all
02C5: 1630    	putd:	ld	d,'0'
02C7: 01F0D8  		ld	bc,0-10000
02CA: CDE302  		call	putd0
02CD: 0118FC  		ld	bc,0-1000
02D0: CDE302  		call	putd0
02D3: 019CFF  		ld	bc,0-100
02D6: CDE302  		call	putd0
02D9: 01F6FF  		ld	bc,0-10
02DC: CDE302  		call	putd0
02DF: 01FFFF  		ld	bc,0-1
02E2: 15      		dec	d
02E3: 3E2F    	putd0:	ld	a,'0'-1		; get character
02E5: 3C      	putd1:	inc	a
02E6: 09      		add	hl,bc
02E7: 38FC    		jr	c,putd1
02E9: ED42    		sbc	hl,bc
02EB: 47      		ld	b,a
02EC: BA      		cp	d		; check for leading zeros
02ED: C8      		ret	z
02EE: 15      		dec	d
              		
              		; Actually print character out
02EF: C5      		push	bc
02F0: D5      		push	de
02F1: E5      		push	hl
02F2: 58      		ld	e,b
02F3: 0E02    		ld	c,b_cout
02F5: CD0500  		call	bdos
02F8: E1      		pop	hl
02F9: D1      		pop	de
02FA: C1      		pop	bc
02FB: C9      		ret
              		
              	; Variables
              		
02FC:         	iocnt:
02FC: 00      		defb	0x00
              	
02FD:         	profile:
02FD: 00      		defb	0x00
              		
02FE:         	seclen:
02FE: 0000    		defw	0x0000
              		
0300:         	seccnt:
0300: 00      		defb	0x00
              		
0301:         	blkcnt:
0301: 00      		defb	0x00
              		
0302:         	trkcnt:
0302: 00      		defb	0x00
              		
0303:         	nf_curd:
0303: 00      		defb	0x00
              		
0304:         	nf_io:
0304: 00      		defb	0x00
              		
0305:         	curtrk:
0305: 00      		defb	0x00
              		
0306:         	cursec:
0306: 00      		defb	0x00
              		
              	; Strings
              		
0307:         	splash:
0307: 4E414255		defb	'NABU FDC Image Utility',0x0A,0x0D
030B: 20464443	
030F: 20496D61	
0313: 67652055	
0317: 74696C69	
031B: 74790A0D	
031F: 52657620		defb	'Rev 1a, tergav17 (Gavin)',0x0A,0x0D,'$'
0323: 31612C20	
0327: 74657267	
032B: 61763137	
032F: 20284761	
0333: 76696E29	
0337: 0A0D24  	
              	
033A:         	cfgmsg:
033A: 0A0D5365		defb	0x0A,0x0D,'Select a disk profile:',0x0A,0x0A,0x0D
033E: 6C656374	
0342: 20612064	
0346: 69736B20	
034A: 70726F66	
034E: 696C653A	
0352: 0A0A0D  	
              		
0355: 20202020		defb	'    1: NABU 5.25 SSDD (Len=1024, Sec=5, Track=40)',0x0A,0x0D
0359: 313A204E	
035D: 41425520	
0361: 352E3235	
0365: 20535344	
0369: 4420284C	
036D: 656E3D31	
0371: 3032342C	
0375: 20536563	
0379: 3D352C20	
037D: 54726163	
0381: 6B3D3430	
0385: 290A0D  	
0388: 20202020		defb	'    9: Exit',0x0A,0x0A,0x0D
038C: 393A2045	
0390: 7869740A	
0394: 0A0D    	
0396: 4F707469		defb	'Option: $'
039A: 6F6E3A20	
039E: 24      	
              		
              		
039F:         	drvmsg:	
039F: 0A0D4C6F		defb	0x0A,0x0D,'Logical Drive # (0,1): $'
03A3: 67696361	
03A7: 6C204472	
03AB: 69766520	
03AF: 23202830	
03B3: 2C31293A	
03B7: 2024    	
              		
03B9:         	cmdmsg:	
03B9: 0A0D436F		defb	0x0A,0x0D,'Command ([R]ead, [W]rite, [F]ormat): $'
03BD: 6D6D616E	
03C1: 6420285B	
03C5: 525D6561	
03C9: 642C205B	
03CD: 575D7269	
03D1: 74652C20	
03D5: 5B465D6F	
03D9: 726D6174	
03DD: 293A2024	
              		
03E1:         	readymsg:	
03E1: 0A0D5265		defb	0x0A,0x0D,'Ready to begin? (Y,N): $'
03E5: 61647920	
03E9: 746F2062	
03ED: 6567696E	
03F1: 3F202859	
03F5: 2C4E293A	
03F9: 2024    	
              	
03FB:         	ferrmsg:	
03FB: 0A0D4572		defb	0x0A,0x0D,'Error! Cannot open image file'
03FF: 726F7221	
0403: 2043616E	
0407: 6E6F7420	
040B: 6F70656E	
040F: 20696D61	
0413: 67652066	
0417: 696C65  	
041A: 0A0D5573		defb	0x0A,0x0D,'Usage: FUTIL [Image file]$'
041E: 6167653A	
0422: 20465554	
0426: 494C205B	
042A: 496D6167	
042E: 65206669	
0432: 6C655D24	
              		
0436:         	nfdcmsg:	
0436: 0A0D4572		defb	0x0A,0x0D,'Error! No FDC detected$'
043A: 726F7221	
043E: 204E6F20	
0442: 46444320	
0446: 64657465	
044A: 63746564	
044E: 24      	
              		
044F:         	nrdymsg:	
044F: 0A0D4572		defb	0x0A,0x0D,'Error! Drive Not Ready$'
0453: 726F7221	
0457: 20447269	
045B: 7665204E	
045F: 6F742052	
0463: 65616479	
0467: 24      	
              	
0468:         	readmsg:	
0468: 0A0D5265		defb	0x0A,0x0D,'Reading Track $'
046C: 6164696E	
0470: 67205472	
0474: 61636B20	
0478: 24      	
              		
0479:         	stormsg:	
0479: 2053746F		defb	' Storing... $'
047D: 72696E67	
0481: 2E2E2E20	
0485: 24      	
              		
0486:         	donemsg:	
0486: 0A0D4F70		defb	0x0A,0x0D,'Operation Complete!$'
048A: 65726174	
048E: 696F6E20	
0492: 436F6D70	
0496: 6C657465	
049A: 2124    	
              	
              	
              		
              	; Input buffer
049C: 02000000	inpbuf:	defb	0x02, 0x00, 0x00, 0x00
              		
              	; Top of program, use it to store stuff
04A0:         	top:


; +++ segments +++

#CODE          = $0100 =   256,  size = $03A0 =   928

; +++ global symbols +++

_end     = $04A0 =  1184          futil.asm:25 (unused)
_size    = $03A0 =   928          futil.asm:25 (unused)
alldone  = $021E =   542          futil.asm:221
b_coin   = $0001 =     1          futil.asm:18
b_cout   = $0002 =     2          futil.asm:19
b_make   = $0016 =    22          futil.asm:22
b_open   = $000F =    15          futil.asm:21
b_print  = $0009 =     9          futil.asm:20
bdos     = $0005 =     5          futil.asm:15
blkcnt   = $0301 =   769          futil.asm:419
cfgmsg   = $033A =   826          futil.asm:443
cmdmsg   = $03B9 =   953          futil.asm:454
cursec   = $0306 =   774          futil.asm:434
curtrk   = $0305 =   773          futil.asm:431
donemsg  = $0486 =  1158          futil.asm:476
drvmsg   = $039F =   927          futil.asm:451
dskrdy   = $024B =   587          futil.asm:268
dskrdy0  = $0258 =   600          futil.asm:274
dskrdy1  = $0271 =   625          futil.asm:291
exit     = $0149 =   329          futil.asm:80
fcb      = $005C =    92          futil.asm:16
ferrmsg  = $03FB =  1019          futil.asm:460
ferror   = $027D =   637          futil.asm:301
foundit  = $0124 =   292          futil.asm:52
getcmd   = $017D =   381          futil.asm:112
getcurd  = $0160 =   352          futil.asm:95
getopt   = $02AF =   687          futil.asm:350
getpro   = $012B =   299          futil.asm:58
inpbuf   = $049C =  1180          futil.asm:482
iocnt    = $02FC =   764          futil.asm:407 (unused)
ltou     = $02BA =   698          futil.asm:360 (unused)
nf_busy  = $02A4 =   676          futil.asm:332
nf_curd  = $0303 =   771          futil.asm:425
nf_dvsc  = $028D =   653          futil.asm:314
nf_dvsl  = $0293 =   659          futil.asm:317
nf_io    = $0304 =   772          futil.asm:428
nf_rph1  = $0238 =   568          futil.asm:248
nf_rph2  = $0246 =   582          futil.asm:257
nf_rphy  = $0229 =   553          futil.asm:236
nf_stal  = $02AA =   682          futil.asm:340
nf_udsl  = $0292 =   658          futil.asm:316
nfdcmsg  = $0436 =  1078          futil.asm:464
nofdc    = $0119 =   281          futil.asm:46
nrdymsg  = $044F =  1103          futil.asm:467
nready   = $0264 =   612          futil.asm:282
profile  = $02FD =   765          futil.asm:410
putd     = $02C5 =   709          futil.asm:372
putd0    = $02E3 =   739          futil.asm:383
putd1    = $02E5 =   741          futil.asm:384
read     = $018F =   399          futil.asm:126
readmsg  = $0468 =  1128          futil.asm:470
readr    = $01BF =   447          futil.asm:155
readr0   = $01C6 =   454          futil.asm:162
readr1   = $01DF =   479          futil.asm:177
readr2   = $01FA =   506          futil.asm:194
readymsg = $03E1 =   993          futil.asm:457
search   = $010A =   266          futil.asm:35
seccnt   = $0300 =   768          futil.asm:416
seclen   = $02FE =   766          futil.asm:413
setcurd  = $0179 =   377          futil.asm:108
setpro   = $014E =   334          futil.asm:85
splash   = $0307 =   775          futil.asm:439
start    = $0100 =   256          futil.asm:29 (unused)
stormsg  = $0479 =  1145          futil.asm:473
top      = $04A0 =  1184          futil.asm:485
trkcnt   = $0302 =   770          futil.asm:422
waitex   = $0285 =   645          futil.asm:305


total time: 0.0033 sec.
no errors
