              	; --------------------------------------
              	; zasm: assemble "futil.asm"
              	; date: 2023-05-03 00:27:06
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*       N A B U   F D C   I M A G E   U T I L I T Y
              	;*
              	;*     This utility allows for floppy disk data to be
              	;*     directly interacted with by the user. Disks can
              	;*     be imaged, formatted, or re-imaged. At the moment,
              	;*     only .IMG style images are supported.
              	;*
              	;**************************************************************
              	;
              	
              	; Equates
0005:         	bdos	equ	0x0005
005C:         	fcb	equ	0x005C
              	
0001:         	b_coin	equ	0x01
0002:         	b_cout	equ	0x02
0009:         	b_print	equ	0x09
000F:         	b_open	equ	0x0F
0010:         	b_close	equ	0x10
0014:         	b_read	equ	0x14
0015:         	b_write	equ	0x15
0016:         	b_make	equ	0x16
001A:         	b_dma	equ	0x1A
              	
              	; Program start
0100:         		org	0x0100
              		
              		
              		; Print banner
0100: 0E09    	start:	ld	c,b_print
0102: 11F903  		ld	de,splash
0105: CD0500  		call	bdos
              	
              		; Look for the FDC
0108: 0ECF    		ld	c,0xCF
010A: ED78    	search:	in	a,(c)
010C: FE10    		cp	0x10
010E: 2814    		jr	z,foundit
0110: 0C      		inc	c
0111: 2806    		jr	z,nofdc
0113: 3E0F    		ld	a,0x0F
0115: 81      		add	a,c
0116: 4F      		ld	c,a
0117: 18F1    		jr	search
              		
              		; No FDC found!
0119: 0E09    	nofdc:	ld	c,b_print
011B: 112805  		ld	de,nfdcmsg
011E: CD0500  		call	bdos
0121: C37703  		jp	waitex
              		
              		; Place address in nf_io, and get the user profile
0124: 79      	foundit:ld	a,c
0125: D60F    		sub	15
0127: 4F      		ld	c,a
0128: 32F603  		ld	(nf_io),a
              	
              		; Get user profile
012B: 0E09    	getpro: ld	c,b_print
012D: 112C04  		ld	de,cfgmsg
0130: CD0500  		call	bdos
0133: CDA103  		call	getopt
              		
              		; Exit option
0136: FE39    		cp	'9'
0138: 280F    		jr	z,exit
              		
              		; Profile 1 (5.25 SSDD)
013A: 210004  		ld	hl,1024	; length of sector
013D: 0E28    		ld	c,40	; blocks per track
013F: 1605    		ld	d,5	; sectors per track
0141: 1E28    		ld	e,40	; tracks 
0143: FE31    		cp	'1'
0145: 2807    		jr	z,setpro
              	
              	
              		; Invalid, reprompt
0147: 18E2    		jr	getpro
              	
              		; Soft reboot
0149: 0E00    	exit:	ld	c,0x00
014B: C30500  		jp	bdos
              		
              		
              		; Set profile variables
014E: 32EF03  	setpro:	ld	(profile),a
0151: 22F003  		ld	(seclen),hl
0154: 79      		ld	a,c
0155: 32F303  		ld	(blkcnt),a
0158: 7A      		ld	a,d
0159: 32F203  		ld	(seccnt),a
015C: 7B      		ld	a,e
015D: 32F403  		ld	(trkcnt),a
              		
              		; Now lets get the logical drive #
0160: 0E09    	getcurd:ld	c,b_print
0162: 119104  		ld	de,drvmsg
0165: CD0500  		call	bdos
0168: CDA103  		call	getopt
              		
016B: 0602    		ld	b,2
016D: FE30    		cp	'0'
016F: 2808    		jr	z,setcurd
0171: 0604    		ld	b,4
0173: FE31    		cp	'1'
0175: 2802    		jr	z,setcurd
0177: 18E7    		jr	getcurd
              		
0179: 78      	setcurd:ld	a,b
017A: 32F503  		ld	(nf_curd),a
              		
              		; Finally, we get the actual operation
017D: 0E09    	getcmd:	ld	c,b_print
017F: 11AB04  		ld	de,cmdmsg
0182: CD0500  		call	bdos
0185: CDA103  		call	getopt
              		
0188: FE52    		cp	'R'
018A: CA3202  		jp	z,read
              		
018D: FE57    		cp	'W'
018F: CA9401  		jp	z,write
              		
0192: 18E9    		jr	getcmd
              		
              	; Write operation
              	; First, make sure user is ready
              	; Second, the defined file will be opened
0194: 0E09    	write:	ld	c,b_print
0196: 11D304  		ld	de,readymsg
0199: CD0500  		call	bdos
019C: CDA103  		call	getopt
019F: FE59    		cp	'Y'
01A1: C22B01  		jp	nz,getpro
              		
              		; If there is a file, try to open it
01A4: 0E0F    		ld	c,b_open
01A6: 115C00  		ld	de,fcb
01A9: CD0500  		call	bdos
              		
              		; Did it work?
01AC: B7      		or	a
01AD: F2B301  		jp	p,writr
              		
              		; Nope, error!
01B0: C36C03  		jp	ferror
              		
              		; Write (real)
              		; Start by readying the disk
01B3: CD3A03  	writr:	call	dskrdy
              	
              		; Set the starting track
01B6: AF      		xor	a
01B7: 32F703  		ld	(curtrk),a
              		
              		; Print out the current track	
01BA: 0E09    	writr1:	ld	c,b_print
01BC: 117805  		ld	de,fetcmsg
01BF: CD0500  		call	bdos
01C2: 3AF703  		ld	a,(curtrk)
01C5: 6F      		ld	l,a
01C6: 2600    		ld	h,0
01C8: CDB703  		call	putd
              		
              		; Get the track to write into memory
01CB: 11B105  		ld	de,top
01CE: 3AF303  		ld	a,(blkcnt)
              		
              		; Loop to read from disk
01D1: F5      	writr2:	push	af
01D2: D5      		push	de
              		
01D3: 0E1A    		ld	c,b_dma
01D5: CD0500  		call	bdos
01D8: 0E14    		ld	c,b_read
01DA: 115C00  		ld	de,fcb
01DD: CD0500  		call	bdos
              		
01E0: D1      		pop	de
01E1: F1      		pop	af
01E2: 218000  		ld	hl,128
01E5: 19      		add	hl,de
01E6: EB      		ex	de,hl
01E7: 3D      		dec	a
01E8: 20E7    		jr	nz,writr2
              		
              		; Print write message
01EA: 0E09    		ld	c,b_print
01EC: 118A05  		ld	de,writmsg
01EF: CD0500  		call	bdos
              		
              		; Start at sector 1
01F2: 3E01    		ld	a,1
01F4: 32F803  		ld	(cursec),a
              		
              		; Where do we want to input?
01F7: 21B105  		ld	hl,top
              		
              		; Write the sector out
01FA: 3AF603  	writr3:	ld	a,(nf_io)
01FD: 4F      		ld	c,a
01FE: CD1803  		call	nf_wphy
0201: B7      		or	a
0202: C25303  		jp	nz,nready
              		
              		; Do we need to read another in?
0205: 3AF203  		ld	a,(seccnt)
0208: 47      		ld	b,a
0209: 3AF803  		ld	a,(cursec)
020C: B8      		cp	b
020D: 2806    		jr	z,writr4
020F: 3C      		inc	a
0210: 32F803  		ld	(cursec),a
0213: 18E5    		jr	writr3
              		
              		; All done, move on to next track
0215: 3AF403  	writr4:	ld	a,(trkcnt)
0218: 47      		ld	b,a
0219: 3AF703  		ld	a,(curtrk)
021C: 3C      		inc	a
021D: B8      		cp	b
021E: CAE002  		jp	z,alldone	; No more tracks
0221: 32F703  		ld	(curtrk),a
              		
              		; Step in 1 track
              		; This should be BDOS load code
0224: 3AF603  		ld	a,(nf_io)
0227: 4F      		ld	c,a
0228: 3E59    		ld	a,0x59
022A: ED79    		out	(c),a
022C: CD9603  		call	nf_busy
              		
              		; Read another track
022F: C3BA01  		jp	writr1
              		
              	; Read operation
              	; First, make sure user is ready
              	; Second, the defined file will be opened (and maybe created)
0232: 0E09    	read:	ld	c,b_print
0234: 11D304  		ld	de,readymsg
0237: CD0500  		call	bdos
023A: CDA103  		call	getopt
023D: FE59    		cp	'Y'
023F: C22B01  		jp	nz,getpro
              	
              		; Alright, we are commited
              	
0242: 3A5D00  		ld	a,(fcb+1)
0245: FE30    		cp	'0'
0247: DA6C03  		jp	c,ferror
              	
              		; There is a file, try to open it
024A: 0E0F    		ld	c,b_open
024C: 115C00  		ld	de,fcb
024F: CD0500  		call	bdos
              		
              		; Did it work?
0252: B7      		or	a
0253: F26202  		jp	p,readr
0256: 0E16    		ld	c,b_make
0258: 115C00  		ld	de,fcb
025B: CD0500  		call	bdos
025E: B7      		or	a
025F: FA6C03  		jp	m,ferror
              		
              		; Read (real)
              		; Start by readying the disk
0262: CD3A03  	readr:	call	dskrdy
              		
              		; Set the starting track
0265: AF      		xor	a
0266: 32F703  		ld	(curtrk),a
              		
              		; Print out current track
0269: 0E09    	readr0:	ld	c,b_print
026B: 115A05  		ld	de,readmsg
026E: CD0500  		call	bdos
0271: 3AF703  		ld	a,(curtrk)
0274: 6F      		ld	l,a
0275: 2600    		ld	h,0
0277: CDB703  		call	putd
              	
027A: 3E01    		ld	a,1
027C: 32F803  		ld	(cursec),a
              		
              		; Where do we want to output?
027F: 21B105  		ld	hl,top
              		
              		; Read the sector in
0282: 3AF603  	readr1:	ld	a,(nf_io)
0285: 4F      		ld	c,a
0286: CDF602  		call	nf_rphy
0289: B7      		or	a
028A: C25303  		jp	nz,nready
              		
              		; Do we need to read another in?
028D: 3AF203  		ld	a,(seccnt)
0290: 47      		ld	b,a
0291: 3AF803  		ld	a,(cursec)
0294: B8      		cp	b
0295: 2806    		jr	z,readr2
0297: 3C      		inc	a
0298: 32F803  		ld	(cursec),a
029B: 18E5    		jr	readr1
              		
              		; Write track to storage and continue
029D: 0E09    	readr2: ld	c,b_print
029F: 116B05  		ld	de,stormsg
02A2: CD0500  		call	bdos
              		
02A5: 11B105  		ld	de,top
02A8: 3AF303  		ld	a,(blkcnt)
              		
              		; Loop to write to disk
02AB: F5      	readr3:	push	af
02AC: D5      		push	de
              		
02AD: 0E1A    		ld	c,b_dma
02AF: CD0500  		call	bdos
02B2: 0E15    		ld	c,b_write
02B4: 115C00  		ld	de,fcb
02B7: CD0500  		call	bdos
              		
02BA: D1      		pop	de
02BB: F1      		pop	af
02BC: 218000  		ld	hl,128
02BF: 19      		add	hl,de
02C0: EB      		ex	de,hl
02C1: 3D      		dec	a
02C2: 20E7    		jr	nz,readr3
              		
              		; Read next track
02C4: 3AF403  		ld	a,(trkcnt)
02C7: 47      		ld	b,a
02C8: 3AF703  		ld	a,(curtrk)
02CB: 3C      		inc	a
02CC: B8      		cp	b
02CD: 2811    		jr	z,alldone	; No more tracks
02CF: 32F703  		ld	(curtrk),a
              		
              		; Step in 1 track
              		; This should be BDOS load code
02D2: 3AF603  		ld	a,(nf_io)
02D5: 4F      		ld	c,a
02D6: 3E59    		ld	a,0x59
02D8: ED79    		out	(c),a
02DA: CD9603  		call	nf_busy
              		
              		; Read another track
02DD: C36902  		jp	readr0
              		
              		; Operation is done
02E0: CD8403  	alldone:call	nf_udsl
              	
              		; State all done!
02E3: 0E09    		ld	c,b_print
02E5: 119705  		ld	de,donemsg
02E8: CD0500  		call	bdos
              		
              		; Close file
02EB: 0E10    		ld	c,b_close
02ED: 115C00  		ld	de,fcb
02F0: CD0500  		call	bdos
              		
02F3: C34901  		jp	exit
              	
              	
              	; Reads a physical sector
              	; Track should be set up
              	; (cursec) = Sector to read
              	; c = FDC command address
              	; hl = memory location of result
              	;
              	; Returns a=0 if successful
              	; uses: af, bc, de, hl
02F6: 59      	nf_rphy:ld	e,c
02F7: 0C      		inc	c
02F8: 0C      		inc	c
02F9: 3AF803  		ld	a,(cursec)
02FC: ED79    		out	(c),a
02FE: 0C      		inc	c
02FF: 51      		ld	d,c
0300: 4B      		ld	c,e
              		
              		; Read command
0301: 3E88    		ld	a,0x88
0303: ED79    		out	(c),a
0305: ED78    	nf_rph1:in	a,(c)
0307: 1F      		rra	
0308: 3009    		jr	nc,nf_rph2
030A: 1F      		rra
030B: 30F8    		jr	nc,nf_rph1
030D: 4A      		ld	c,d
030E: EDA2    		ini
0310: 4B      		ld	c,e
0311: 18F2    		jr	nf_rph1
0313: ED78    	nf_rph2:in	a,(c)
0315: E6FC    		and	0xFC
0317: C9      		ret
              		
              	; Writes a physical sector
              	; Track should be set up
              	; (cursec) = Sector to write
              	; c = FDC command address
              	; hl = memory location to store
              	;
              	; Returns a=0 if successful
              	; uses: af, bc, de, hl
0318: 59      	nf_wphy:ld	e,c
0319: 0C      		inc	c
031A: 0C      		inc	c
031B: 3AF803  		ld	a,(cursec)
031E: ED79    		out	(c),a
0320: 0C      		inc	c
0321: 51      		ld	d,c
0322: 4B      		ld	c,e
              		
              		; Read command
0323: 3EA8    		ld	a,0xA8
0325: ED79    		out	(c),a
0327: ED78    	nf_wph1:in	a,(c)
0329: 1F      		rra	
032A: 3009    		jr	nc,nf_wph2
032C: 1F      		rra
032D: 30F8    		jr	nc,nf_wph1
032F: 4A      		ld	c,d
0330: EDA3    		outi
0332: 4B      		ld	c,e
0333: 18F2    		jr	nf_wph1
0335: ED78    	nf_wph2:in	a,(c)
0337: E6FC    		and	0xFC
0339: C9      		ret
              	
              	
              	; Gets the drive ready, this means:
              	; 1. Force an interrupt
              	; 2. Make sure that there is actually a disk in the drive
              	; 3. Move the drive to track 0
              	;
              	; uses: af, bc, d
033A: 16FF    	dskrdy:	ld	d,255
033C: CD7F03  		call	nf_dvsc
033F: 3AF603  		ld	a,(nf_io)
0342: 4F      		ld	c,a
0343: 3ED0    		ld	a,0xD0
0345: ED79    		out	(c),a		; Force FDC interrupt
0347: CD9C03  	dskrdy0:call	nf_stal
034A: ED78    		in	a,(c)
034C: E602    		and	0x02
034E: 2010    		jr	nz,dskrdy1
0350: 15      		dec	d
0351: 20F4    		jr	nz,dskrdy0
              		
              		; No disk!
0353: CD8403  	nready:	call	nf_udsl
              		
0356: 0E09    		ld	c,b_print
0358: 114105  		ld	de,nrdymsg
035B: CD0500  		call	bdos
035E: 1817    		jr	waitex
              	
              		; Found disk
              		; Restore to track 0
0360: 3AF603  	dskrdy1:ld	a,(nf_io)
0363: 4F      		ld	c,a
0364: 3E09    		ld	a,0x09
0366: ED79    		out	(c),a 
0368: CD9603  		call	nf_busy
              		
036B: C9      		ret
              	
              	; "Handle" a file error
              	; Complain to user and exit out
036C: CD8403  	ferror:	call	nf_udsl
              	
036F: 0E09    		ld	c,b_print
0371: 11ED04  		ld	de,ferrmsg
0374: CD0500  		call	bdos
              		
0377: 0E01    	waitex:	ld	c,b_coin
0379: CD0500  		call	bdos
              		
037C: C34901  		jp	exit
              		
              	; Selects or deselects a drive
              	; a = Drive density / selection
              	;
              	; uses: af
037F: 3AF503  	nf_dvsc:ld	a,(nf_curd)	; Select current drive
0382: 1801    		jr	nf_dvsl
0384: AF      	nf_udsl:xor	a		; Unselects a drive
0385: C5      	nf_dvsl:push	bc
0386: 47      		ld	b,a
0387: 3AF603  		ld	a,(nf_io)
038A: C60F    		add	a,0x0F
038C: 4F      		ld	c,a
038D: ED41    		out	(c),b
038F: 06FF    		ld	b,0xFF
0391: CD9C03  		call	nf_stal
0394: C1      		pop	bc
0395: C9      		ret
              		
              	; Waits until FDC is not busy
              	; c = FDC command address
              	;
              	; uses: af
0396: ED78    	nf_busy:in	a,(c)
0398: 1F      		rra
0399: 38FB    		jr	c,nf_busy
039B: C9      		ret
              		
              	; Waits a little bit
              	;
              	; uses: b
039C: C5      	nf_stal:push	bc
039D: C1      		pop	bc
039E: 10FC    		djnz	nf_stal
03A0: C9      		ret
              		
              	; Gets a single character option from the user
              	; Letters will be converted to upper case
              	;
              	; Returns character in A
              	; uses: all
03A1: 0E0A    	getopt:	ld	c,0x0A
03A3: 11AD05  		ld	de,inpbuf
03A6: CD0500  		call	bdos
03A9: 3AAF05  		ld	a,(inpbuf+2)
              		
              	; Converts lowercase to uppercase
              	; a = Character to convert
              	;
              	; Returns uppercase in A
              	; uses: af
03AC: E67F    	ltou:	and	0x7F
03AE: FE61    		cp	0x61		; 'a'
03B0: D8      		ret	c
03B1: FE7B    		cp	0x7B		; '{'
03B3: D0      		ret	nc
03B4: D620    		sub	0x20
03B6: C9      		ret
              		
              	; Print decimal
              	; hl = value to print
              	;
              	; uses: all
03B7: 1630    	putd:	ld	d,'0'
03B9: 01F0D8  		ld	bc,0-10000
03BC: CDD503  		call	putd0
03BF: 0118FC  		ld	bc,0-1000
03C2: CDD503  		call	putd0
03C5: 019CFF  		ld	bc,0-100
03C8: CDD503  		call	putd0
03CB: 01F6FF  		ld	bc,0-10
03CE: CDD503  		call	putd0
03D1: 01FFFF  		ld	bc,0-1
03D4: 15      		dec	d
03D5: 3E2F    	putd0:	ld	a,'0'-1		; get character
03D7: 3C      	putd1:	inc	a
03D8: 09      		add	hl,bc
03D9: 38FC    		jr	c,putd1
03DB: ED42    		sbc	hl,bc
03DD: 47      		ld	b,a
03DE: BA      		cp	d		; check for leading zeros
03DF: C8      		ret	z
03E0: 15      		dec	d
              		
              		; Actually print character out
03E1: C5      		push	bc
03E2: D5      		push	de
03E3: E5      		push	hl
03E4: 58      		ld	e,b
03E5: 0E02    		ld	c,b_cout
03E7: CD0500  		call	bdos
03EA: E1      		pop	hl
03EB: D1      		pop	de
03EC: C1      		pop	bc
03ED: C9      		ret
              		
              	; Variables
              		
03EE:         	iocnt:
03EE: 00      		defb	0x00
              	
03EF:         	profile:
03EF: 00      		defb	0x00
              		
03F0:         	seclen:
03F0: 0000    		defw	0x0000
              		
03F2:         	seccnt:
03F2: 00      		defb	0x00
              		
03F3:         	blkcnt:
03F3: 00      		defb	0x00
              		
03F4:         	trkcnt:
03F4: 00      		defb	0x00
              		
03F5:         	nf_curd:
03F5: 00      		defb	0x00
              		
03F6:         	nf_io:
03F6: 00      		defb	0x00
              		
03F7:         	curtrk:
03F7: 00      		defb	0x00
              		
03F8:         	cursec:
03F8: 00      		defb	0x00
              		
              	; Strings
              		
03F9:         	splash:
03F9: 4E414255		defb	'NABU FDC Image Utility',0x0A,0x0D
03FD: 20464443	
0401: 20496D61	
0405: 67652055	
0409: 74696C69	
040D: 74790A0D	
0411: 52657620		defb	'Rev 1a, tergav17 (Gavin)',0x0A,0x0D,'$'
0415: 31612C20	
0419: 74657267	
041D: 61763137	
0421: 20284761	
0425: 76696E29	
0429: 0A0D24  	
              	
042C:         	cfgmsg:
042C: 0A0D5365		defb	0x0A,0x0D,'Select a disk profile:',0x0A,0x0A,0x0D
0430: 6C656374	
0434: 20612064	
0438: 69736B20	
043C: 70726F66	
0440: 696C653A	
0444: 0A0A0D  	
              		
0447: 20202020		defb	'    1: NABU 5.25 SSDD (Len=1024, Sec=5, Track=40)',0x0A,0x0D
044B: 313A204E	
044F: 41425520	
0453: 352E3235	
0457: 20535344	
045B: 4420284C	
045F: 656E3D31	
0463: 3032342C	
0467: 20536563	
046B: 3D352C20	
046F: 54726163	
0473: 6B3D3430	
0477: 290A0D  	
047A: 20202020		defb	'    9: Exit',0x0A,0x0A,0x0D
047E: 393A2045	
0482: 7869740A	
0486: 0A0D    	
0488: 4F707469		defb	'Option: $'
048C: 6F6E3A20	
0490: 24      	
              		
              		
0491:         	drvmsg:	
0491: 0A0D4C6F		defb	0x0A,0x0D,'Logical Drive # (0,1): $'
0495: 67696361	
0499: 6C204472	
049D: 69766520	
04A1: 23202830	
04A5: 2C31293A	
04A9: 2024    	
              		
04AB:         	cmdmsg:	
04AB: 0A0D436F		defb	0x0A,0x0D,'Command ([R]ead, [W]rite, [F]ormat): $'
04AF: 6D6D616E	
04B3: 6420285B	
04B7: 525D6561	
04BB: 642C205B	
04BF: 575D7269	
04C3: 74652C20	
04C7: 5B465D6F	
04CB: 726D6174	
04CF: 293A2024	
              		
04D3:         	readymsg:	
04D3: 0A0D5265		defb	0x0A,0x0D,'Ready to begin? (Y,N): $'
04D7: 61647920	
04DB: 746F2062	
04DF: 6567696E	
04E3: 3F202859	
04E7: 2C4E293A	
04EB: 2024    	
              	
04ED:         	ferrmsg:	
04ED: 0A0D4572		defb	0x0A,0x0D,'Error! Cannot open image file'
04F1: 726F7221	
04F5: 2043616E	
04F9: 6E6F7420	
04FD: 6F70656E	
0501: 20696D61	
0505: 67652066	
0509: 696C65  	
050C: 0A0D5573		defb	0x0A,0x0D,'Usage: FUTIL [Image file]$'
0510: 6167653A	
0514: 20465554	
0518: 494C205B	
051C: 496D6167	
0520: 65206669	
0524: 6C655D24	
              		
0528:         	nfdcmsg:	
0528: 0A0D4572		defb	0x0A,0x0D,'Error! No FDC detected$'
052C: 726F7221	
0530: 204E6F20	
0534: 46444320	
0538: 64657465	
053C: 63746564	
0540: 24      	
              		
0541:         	nrdymsg:	
0541: 0A0D4572		defb	0x0A,0x0D,'Error! Drive Not Ready$'
0545: 726F7221	
0549: 20447269	
054D: 7665204E	
0551: 6F742052	
0555: 65616479	
0559: 24      	
              	
055A:         	readmsg:	
055A: 0A0D5265		defb	0x0A,0x0D,'Reading Track $'
055E: 6164696E	
0562: 67205472	
0566: 61636B20	
056A: 24      	
              		
056B:         	stormsg:	
056B: 2053746F		defb	' Storing... $'
056F: 72696E67	
0573: 2E2E2E20	
0577: 24      	
              		
0578:         	fetcmsg:	
0578: 0A0D4665		defb	0x0A,0x0D,'Fetching Track $'
057C: 74636869	
0580: 6E672054	
0584: 7261636B	
0588: 2024    	
              		
058A:         	writmsg:	
058A: 20577269		defb	' Writing... $'
058E: 74696E67	
0592: 2E2E2E20	
0596: 24      	
              		
0597:         	donemsg:	
0597: 0A0D4F70		defb	0x0A,0x0D,'Operation Complete!$'
059B: 65726174	
059F: 696F6E20	
05A3: 436F6D70	
05A7: 6C657465	
05AB: 2124    	
              	
              	
              		
              	; Input buffer
05AD: 02000000	inpbuf:	defb	0x02, 0x00, 0x00, 0x00
              		
              	; Top of program, use it to store stuff
05B1:         	top:


; +++ segments +++

#CODE          = $0100 =   256,  size = $04B1 =  1201

; +++ global symbols +++

_end     = $05B1 =  1457          futil.asm:29 (unused)
_size    = $04B1 =  1201          futil.asm:29 (unused)
alldone  = $02E0 =   736          futil.asm:356
b_close  = $0010 =    16          futil.asm:22
b_coin   = $0001 =     1          futil.asm:18
b_cout   = $0002 =     2          futil.asm:19
b_dma    = $001A =    26          futil.asm:26
b_make   = $0016 =    22          futil.asm:25
b_open   = $000F =    15          futil.asm:21
b_print  = $0009 =     9          futil.asm:20
b_read   = $0014 =    20          futil.asm:23
b_write  = $0015 =    21          futil.asm:24
bdos     = $0005 =     5          futil.asm:15
blkcnt   = $03F3 =  1011          futil.asm:597
cfgmsg   = $042C =  1068          futil.asm:621
cmdmsg   = $04AB =  1195          futil.asm:632
cursec   = $03F8 =  1016          futil.asm:612
curtrk   = $03F7 =  1015          futil.asm:609
donemsg  = $0597 =  1431          futil.asm:660
drvmsg   = $0491 =  1169          futil.asm:629
dskrdy   = $033A =   826          futil.asm:444
dskrdy0  = $0347 =   839          futil.asm:450
dskrdy1  = $0360 =   864          futil.asm:467
exit     = $0149 =   329          futil.asm:84
fcb      = $005C =    92          futil.asm:16
ferrmsg  = $04ED =  1261          futil.asm:638
ferror   = $036C =   876          futil.asm:477
fetcmsg  = $0578 =  1400          futil.asm:654
foundit  = $0124 =   292          futil.asm:56
getcmd   = $017D =   381          futil.asm:116
getcurd  = $0160 =   352          futil.asm:99
getopt   = $03A1 =   929          futil.asm:528
getpro   = $012B =   299          futil.asm:62
inpbuf   = $05AD =  1453          futil.asm:666
iocnt    = $03EE =  1006          futil.asm:585 (unused)
ltou     = $03AC =   940          futil.asm:538 (unused)
nf_busy  = $0396 =   918          futil.asm:510
nf_curd  = $03F5 =  1013          futil.asm:603
nf_dvsc  = $037F =   895          futil.asm:492
nf_dvsl  = $0385 =   901          futil.asm:495
nf_io    = $03F6 =  1014          futil.asm:606
nf_rph1  = $0305 =   773          futil.asm:391
nf_rph2  = $0313 =   787          futil.asm:400
nf_rphy  = $02F6 =   758          futil.asm:379
nf_stal  = $039C =   924          futil.asm:518
nf_udsl  = $0384 =   900          futil.asm:494
nf_wph1  = $0327 =   807          futil.asm:424
nf_wph2  = $0335 =   821          futil.asm:433
nf_wphy  = $0318 =   792          futil.asm:412
nfdcmsg  = $0528 =  1320          futil.asm:642
nofdc    = $0119 =   281          futil.asm:50
nrdymsg  = $0541 =  1345          futil.asm:645
nready   = $0353 =   851          futil.asm:458
profile  = $03EF =  1007          futil.asm:588
putd     = $03B7 =   951          futil.asm:550
putd0    = $03D5 =   981          futil.asm:561
putd1    = $03D7 =   983          futil.asm:562
read     = $0232 =   562          futil.asm:242
readmsg  = $055A =  1370          futil.asm:648
readr    = $0262 =   610          futil.asm:271
readr0   = $0269 =   617          futil.asm:278
readr1   = $0282 =   642          futil.asm:293
readr2   = $029D =   669          futil.asm:310
readr3   = $02AB =   683          futil.asm:318
readymsg = $04D3 =  1235          futil.asm:635
search   = $010A =   266          futil.asm:39
seccnt   = $03F2 =  1010          futil.asm:594
seclen   = $03F0 =  1008          futil.asm:591
setcurd  = $0179 =   377          futil.asm:112
setpro   = $014E =   334          futil.asm:89
splash   = $03F9 =  1017          futil.asm:617
start    = $0100 =   256          futil.asm:33 (unused)
stormsg  = $056B =  1387          futil.asm:651
top      = $05B1 =  1457          futil.asm:669
trkcnt   = $03F4 =  1012          futil.asm:600
waitex   = $0377 =   887          futil.asm:483
write    = $0194 =   404          futil.asm:132
writmsg  = $058A =  1418          futil.asm:657
writr    = $01B3 =   435          futil.asm:153
writr1   = $01BA =   442          futil.asm:160
writr2   = $01D1 =   465          futil.asm:173
writr3   = $01FA =   506          futil.asm:203
writr4   = $0215 =   533          futil.asm:220


total time: 0.0038 sec.
no errors
