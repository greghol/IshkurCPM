              	; --------------------------------------
              	; zasm: assemble "config\config_ndsk_hybrid.asm"
              	; date: 2023-06-03 15:28:09
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*          I S H K U R   S Y S T E M   C O N F I G
              	;*
              	;*      This file contains points that should be modifed
              	;*      if new devices are to be added to IshkurCP/M. At
              	;*      a mimumum, they need to be included at the bottom
              	;*      of the file, and added to their appropriate dev
              	;*      switch. Some devices may need additional config
              	;*      directly in their source files
              	;*       
              	;*
              	;**************************************************************
              	;
              	;   Set default drive / user
              	;   (uuuudddd) where 'uuuu' is the user number and 'dddd' is the drive number.
              	;
0000:         	default	equ	0
              	
              	;
              	;**************************************************************
              	;*
              	;*                M E M O R Y   C O N F I G
              	;*
              	;*        CP/M memory will start at mem*1024. For example,
              	;*        if memory is configured to be 40, then the image
              	;*        will start at 40kb. The higher memory is configured
              	;*        to, the more memory user programs will have. If memory
              	;*        is configured to be too high, then the core image and
              	;*        BSS space will not fit.
              	;*
              	;**************************************************************
              	;
              	;
              	;   Set memory base here. 
              	;
0036:         	mem	equ	54		; CP/M image starts at mem*1024
              	
              	#target	BIN			; Set up memory segments
D800:         	#code	_TEXT,(mem)*1024
F8ED:         	#data	_BSS,_TEXT_end
FF00:         	#data	_JUMP_TABLE,0xFF00
FF00: 00000000	intvec:	defs	16
FF04: 00...   	
FF10: 00000000	dircbuf:defs	128
FF14: 00...   	
              	.area	_TEXT
              	
              	; Include CP/M and BIOS
              	#include "CPM22.asm"
              	;**************************************************************
              	;*
              	;*             C P / M   version   2 . 2
              	;*
              	;*   Reconstructed from memory image on February 27, 1981
              	;*
              	;*                by Clark A. Calkins
              	;*
              	;*      Modified to build as single image from source
              	;*
              	;*         Custom CCP prompt by NabuNetwork.com
              	;*
              	;**************************************************************
              	;
              	;   set origin for cp/m
              	;
              	;	org	(mem)*1024
              	;
              	
0003:         	iobyte	equ	3		;i/o definition byte.
0004:         	tdrive	equ	4		;current drive name and user number.
0005:         	entry	equ	5		;entry point for the cp/m bdos.
005C:         	tfcb	equ	5ch		;default file control block.
0080:         	tbuff	equ	80h		;i/o buffer and command line storage.
0100:         	tbase	equ	100h		;transiant program storage area.
              	;
              	;   set control character equates.
              	;
0003:         	cntrlc	equ	3		;control-c
0005:         	cntrle	equ	05h		;control-e
0008:         	bs	equ	08h		;backspace
0009:         	tab	equ	09h		;tab
000A:         	lf	equ	0ah		;line feed
000C:         	ff	equ	0ch		;form feed
000D:         	cr	equ	0dh		;carriage return
0010:         	cntrlp	equ	10h		;control-p
0012:         	cntrlr	equ	12h		;control-r
0013:         	cntrls	equ	13h		;control-s
0015:         	cntrlu	equ	15h		;control-u
0018:         	cntrlx	equ	18h		;control-x
001A:         	cntrlz	equ	1ah		;control-z (end-of-file mark)
007F:         	del	equ	7fh		;rubout
              	
D800: C364DB  	cbase:	jp	command		;execute command processor (ccp).
D803: C360DB  		jp	clearbuf	;entry to empty input buffer before starting ccp.
              	
              	;
              	;   standard cp/m ccp input buffer. format is (max length),
              	; (actual length), (char #1), (char #2), (char #3), etc.
              	;
D806: 7F      	inbuff:	defb	127		;length of input buffer.
D807: 00      		defb	0		;current length of contents.
D808: 494E4954		defb	'INIT '
D80C: 20      	
D80D: FF000000		defb	255,0,0,0
D811: 20313937		defb	' 1979 (c) by Digital Research      '
D815: 39202863	
D819: 29206279	
D81D: 20446967	
D821: 6974616C	
D825: 20526573	
D829: 65617263	
D82D: 68202020	
D831: 202020  	
D834: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
D838: 00...   	
D84B: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
D84F: 00...   	
D862: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
D866: 00...   	
D879: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
D87D: 00...   	
D888: 08D8    	inpoint:defw	inbuff+2	;input line pointer
D88A: 0000    	namepnt:defw	0		;input line pointer used for error message. points to
              	;			;start of name in error.
              	;
              	;   routine to print (a) on the console. all registers used.
              	;
D88C: 5F      	print:	ld	e,a		;setup bdos call.
D88D: 0E02    		ld	c,2
D88F: C30500  		jp	entry
              	;
              	;   routine to print (a) on the console and to save (bc).
              	;
D892: C5      	printb:	push	bc
D893: CD8CD8  		call	print
D896: C1      		pop	bc
D897: C9      		ret	
              	;
              	;   routine to send a carriage return, line feed combination
              	; to the console.
              	;
D898: 3E0D    	crlf:	ld	a,cr
D89A: CD92D8  		call	printb
D89D: 3E0A    		ld	a,lf
D89F: 18F1    		jr	printb
              	;
              	;   routine to send one space to the console and save (bc).
              	;
D8A1: 3E20    	space:	ld	a,' '
D8A3: C392D8  		jp	printb
              	;
              	;   routine to print character string pointed to be (bc) on the
              	; console. it must terminate with a null byte.
              	;
D8A6: C5      	pline:	push	bc
D8A7: CD98D8  		call	crlf
D8AA: E1      		pop	hl
D8AB: 7E      	pline2:	ld	a,(hl)
D8AC: B7      		or	a
D8AD: C8      		ret	z
D8AE: 23      		inc	hl
D8AF: E5      		push	hl
D8B0: CD8CD8  		call	print
D8B3: E1      		pop	hl
D8B4: C3ABD8  		jp	pline2
              	;
              	;   routine to reset the disk system.
              	;
D8B7: 0E0D    	resdsk:	ld	c,13
D8B9: C30500  		jp	entry
              	;
              	;   routine to select disk (a).
              	;
D8BC: 5F      	dsksel:	ld	e,a
D8BD: 0E0E    		ld	c,14
D8BF: C30500  		jp	entry
              	;
              	;   routine to call bdos and save the return code. the zero
              	; flag is set on a return of 0ffh.
              	;
D8C2: CD0500  	entry1:	call	entry
D8C5: 32FBDF  		ld	(rtncode),a	;save return code.
D8C8: 3C      		inc	a		;set zero if 0ffh returned.
D8C9: C9      		ret	
              	;
              	;   routine to open a file. (de) must point to the fcb.
              	;
D8CA: 0E0F    	open:	ld	c,15
D8CC: C3C2D8  		jp	entry1
              	;
              	;   routine to open file at (fcb).
              	;
D8CF: AF      	openfcb:xor	a		;clear the record number byte at fcb+32
D8D0: 32FADF  		ld	(fcb+32),a
D8D3: 11DADF  		ld	de,fcb
D8D6: C3CAD8  		jp	open
              	;
              	;   routine to close a file. (de) points to fcb.
              	;
D8D9: 0E10    	close:	ld	c,16
D8DB: C3C2D8  		jp	entry1
              	;
              	;   routine to search for the first file with ambigueous name
              	; (de).
              	;
D8DE: 0E11    	srchfst:ld	c,17
D8E0: C3C2D8  		jp	entry1
              	;
              	;   search for the next ambigeous file name.
              	;
D8E3: 0E12    	srchnxt:ld	c,18
D8E5: C3C2D8  		jp	entry1
              	;
              	;   search for file at (fcb).
              	;
D8E8: 11DADF  	srchfcb:ld	de,fcb
D8EB: C3DED8  		jp	srchfst
              	;
              	;   routine to delete a file pointed to by (de).
              	;
D8EE: 0E13    	delete:	ld	c,19
D8F0: C30500  		jp	entry
              	;
              	;   routine to call the bdos and set the zero flag if a zero
              	; status is returned.
              	;
D8F3: CD0500  	entry2:	call	entry
D8F6: B7      		or	a		;set zero flag if appropriate.
D8F7: C9      		ret	
              	;
              	;   routine to read the next record from a sequential file.
              	; (de) points to the fcb.
              	;
D8F8: 0E14    	rdrec:	ld	c,20
D8FA: C3F3D8  		jp	entry2
              	;
              	;   routine to read file at (fcb).
              	;
D8FD: 11DADF  	readfcb:ld	de,fcb
D900: C3F8D8  		jp	rdrec
              	;
              	;   routine to write the next record of a sequential file.
              	; (de) points to the fcb.
              	;
D903: 0E15    	wrtrec:	ld	c,21
D905: C3F3D8  		jp	entry2
              	;
              	;   routine to create the file pointed to by (de).
              	;
D908: 0E16    	create:	ld	c,22
D90A: C3C2D8  		jp	entry1
              	;
              	;   routine to rename the file pointed to by (de). note that
              	; the new name starts at (de+16).
              	;
D90D: 0E17    	renam:	ld	c,23
D90F: C30500  		jp	entry
              	;
              	;   get the current user code.
              	;
D912: 1EFF    	getusr:	ld	e,0ffh
              	;
              	;   routne to get or set the current user code.
              	; if (e) is ff then this is a get, else it is a set.
              	;
D914: 0E20    	getsetuc: ld	c,32
D916: C30500  		jp	entry
              	;
              	;   routine to set the current drive byte at (tdrive).
              	;
D919: CD12D9  	setcdrv:call	getusr		;get user number
D91C: 87      		add	a,a		;and shift into the upper 4 bits.
D91D: 87      		add	a,a
D91E: 87      		add	a,a
D91F: 87      		add	a,a
D920: 21FCDF  		ld	hl,cdrive	;now add in the current drive number.
D923: B6      		or	(hl)
D924: 320400  		ld	(tdrive),a	;and save.
D927: C9      		ret	
              	;
              	;   move currently active drive down to (tdrive).
              	;
D928: 3AFCDF  	movecd:	ld	a,(cdrive)
D92B: 320400  		ld	(tdrive),a
D92E: C9      		ret	
              	;
              	;   routine to convert (a) into upper case ascii. only letters
              	; are affected.
              	;
D92F: FE61    	upper:	cp	'a'		;check for letters in the range of 'a' to 'z'.
D931: D8      		ret	c
D932: FE7B    		cp	'{'
D934: D0      		ret	nc
D935: E65F    		and	5fh		;convert it if found.
D937: C9      		ret	
              	;
              	;   routine to get a line of input. we must check to see if the
              	; user is in (batch) mode. if so, then read the input from file
              	; ($$$.sub). at the end, reset to console input.
              	;
D938: 3AB8DF  	getinp:	ld	a,(batch)	;if =0, then use console input.
D93B: B7      		or	a
D93C: CAA0D9  		jp	z,getinp1
              	;
              	;   use the submit file ($$$.sub) which is prepared by a
              	; submit run. it must be on drive (a) and it will be deleted
              	; if and error occures (like eof).
              	;
D93F: 3AFCDF  		ld	a,(cdrive)	;select drive 0 if need be.
D942: B7      		or	a
D943: 3E00    		ld	a,0		;always use drive a for submit.
D945: C4BCD8  		call	nz,dsksel	;select it if required.
D948: 11B9DF  		ld	de,batchfcb
D94B: CDCAD8  		call	open		;look for it.
D94E: CAA0D9  		jp	z,getinp1	;if not there, use normal input.
D951: 3AC8DF  		ld	a,(batchfcb+15)	;get last record number+1.
D954: 3D      	getinp0:dec	a
D955: 32D9DF  		ld	(batchfcb+32),a
D958: 11B9DF  		ld	de,batchfcb
D95B: F5      		push	af
D95C: CDF8D8  		call	rdrec		;read last record.
D95F: D1      		pop	de
D960: C2A0D9  		jp	nz,getinp1	;quit on end of file.
D963: 218000  		ld	hl,tbuff	;data was read into buffer here.
D966: AF      		xor	a		;skip if entry has nothing in it
D967: BE      		cp	(hl)
D968: 7A      		ld	a,d
D969: 28E9    		jr	z,getinp0
              	
              	;   move this record into input buffer.
              	;
D96B: 1107D8  		ld	de,inbuff+1
D96E: 0680    		ld	b,128		;all 128 characters may be used.
D970: E5      		push	hl		;save tbuff
D971: CD4FDC  		call	hl2de		;(hl) to (de), (b) bytes.
D974: E1      		pop	hl		;zero out first in tbuff
D975: 3600    		ld	(hl),0
D977: 21D9DF  		ld	hl,batchfcb+32
D97A: 35      		dec	(hl)		;decrement the record count.
D97B: 11B9DF  		ld	de,batchfcb	;close the batch file now.
D97E: D5      		push	de
D97F: CD03D9  		call	wrtrec		;write out record
D982: D1      		pop	de
D983: CDD9D8  		call	close
D986: 2818    		jr	z,getinp1	;quit on an error.
D988: 3AFCDF  		ld	a,(cdrive)	;re-select previous drive if need be.
D98B: B7      		or	a
D98C: C4BCD8  		call	nz,dsksel	;don't do needless selects.
              	;
              	;   print line just read on console.
              	;
D98F: 2108D8  		ld	hl,inbuff+2
D992: CDABD8  		call	pline2
D995: CDCAD9  		call	chkcon		;check console, quit on a key.
D998: 2817    		jr	z,getinp2	;jump if no key is pressed.
              	;
              	;   terminate the submit job on any keyboard input. delete this
              	; file such that it is not re-started and jump to normal keyboard
              	; input section.
              	;
D99A: CDE5D9  		call	delbatch	;delete the batch file.
D99D: C387DB  		jp	cmmnd1		;and restart command input.
              	;
              	;   get here for normal keyboard input. delete the submit file
              	; incase there was one.
              	;
D9A0: CDE5D9  	getinp1:call	delbatch	;delete file ($$$.sub).
D9A3: CD19D9  		call	setcdrv		;reset active disk.
D9A6: 0E0A    		ld	c,10		;get line from console device.
D9A8: 1106D8  		ld	de,inbuff
D9AB: CD0500  		call	entry
D9AE: CD28D9  		call	movecd		;reset current drive (again).
              	;
              	;   convert input line to upper case.
              	;
D9B1: 2107D8  	getinp2:ld	hl,inbuff+1
D9B4: 46      		ld	b,(hl)		;(b)=character counter.
D9B5: 23      	getinp3:inc	hl
D9B6: 78      		ld	a,b		;end of the line?
D9B7: B7      		or	a
D9B8: 2808    		jr	z,getinp4
D9BA: 7E      		ld	a,(hl)		;convert to upper case.
D9BB: CD2FD9  		call	upper
D9BE: 77      		ld	(hl),a
D9BF: 05      		dec	b		;adjust character count.
D9C0: 18F3    		jr	getinp3
D9C2: 77      	getinp4:ld	(hl),a		;add trailing null.
D9C3: 2108D8  		ld	hl,inbuff+2
D9C6: 2288D8  		ld	(inpoint),hl	;reset input line pointer.
D9C9: C9      		ret	
              	;
              	;   routine to check the console for a key pressed. the zero
              	; flag is set is none, else the character is returned in (a).
              	;
D9CA: 0E0B    	chkcon:	ld	c,11		;check console.
D9CC: CD0500  		call	entry
D9CF: B7      		or	a
D9D0: C8      		ret	z		;return if nothing.
D9D1: 0E01    		ld	c,1		;else get character.
D9D3: CD0500  		call	entry
D9D6: B7      		or	a		;clear zero flag and return.
D9D7: C9      		ret	
              	;
              	;   routine to get the currently active drive number.
              	;
D9D8: 0E19    	getdsk:	ld	c,25
D9DA: C30500  		jp	entry
              	;
              	;   set the stabdard dma address.
              	;
D9DD: 118000  	stddma:	ld	de,tbuff
              	;
              	;   routine to set the dma address to (de).
              	;
D9E0: 0E1A    	dmaset:	ld	c,26
D9E2: C30500  		jp	entry
              	;
              	;  delete the batch file created by submit.
              	;
D9E5: 21B8DF  	delbatch: ld	hl,batch	;is batch active?
D9E8: 7E      		ld	a,(hl)
D9E9: B7      		or	a
D9EA: C8      		ret	z
D9EB: 3600    		ld	(hl),0		;yes, de-activate it.
D9ED: AF      		xor	a
D9EE: CDBCD8  		call	dsksel		;select drive 0 for sure.
D9F1: 11B9DF  		ld	de,batchfcb	;and delete this file.
D9F4: CDEED8  		call	delete
D9F7: 3AFCDF  		ld	a,(cdrive)	;reset current drive.
D9FA: C3BCD8  		jp	dsksel
              	;
              	;   check to two strings at (pattrn1) and (pattrn2). they must be
              	; the same or we halt....
              	;
D9FD: 1132DB  	verify:	ld	de,pattrn1+2	;these are the serial number bytes.
DA00: 2102E0  		ld	hl,pattrn2+2	;ditto, but how could they be different?
DA03: 0604    		ld	b,4		;6 bytes each.
DA05: 1A      	verify1:ld	a,(de)
DA06: BE      		cp	(hl)
DA07: C2DCDB  		jp	nz,halt		;jump to halt routine.
DA0A: 13      		inc	de
DA0B: 23      		inc	hl
DA0C: 05      		dec	b
DA0D: C205DA  		jp	nz,verify1
DA10: C9      		ret	
              	;
              	;   print back file name with a '?' to indicate a syntax error.
              	;
DA11: CD98D8  	synerr:	call	crlf		;end current line.
DA14: 2A8AD8  		ld	hl,(namepnt)	;this points to name in error.
DA17: 7E      	synerr1:ld	a,(hl)		;print it until a space or null is found.
DA18: FE20    		cp	' '
DA1A: CA2ADA  		jp	z,synerr2
DA1D: B7      		or	a
DA1E: CA2ADA  		jp	z,synerr2
DA21: E5      		push	hl
DA22: CD8CD8  		call	print
DA25: E1      		pop	hl
DA26: 23      		inc	hl
DA27: C317DA  		jp	synerr1
DA2A: 3E3F    	synerr2:ld	a,'?'		;add trailing '?'.
DA2C: CD8CD8  		call	print
DA2F: CD98D8  		call	crlf
DA32: CDE5D9  		call	delbatch	;delete any batch file.
DA35: C387DB  		jp	cmmnd1		;and restart from console input.
              	;
              	;   check character at (de) for legal command input. note that the
              	; zero flag is set if the character is a delimiter.
              	;
DA38: 1A      	check:	ld	a,(de)
DA39: B7      		or	a
DA3A: C8      		ret	z
DA3B: FE20    		cp	' '		;control characters are not legal here.
DA3D: DA11DA  		jp	c,synerr
DA40: C8      		ret	z		;check for valid delimiter.
DA41: FE3D    		cp	'='
DA43: C8      		ret	z
DA44: FE5F    		cp	'_'
DA46: C8      		ret	z
DA47: FE2E    		cp	'.'
DA49: C8      		ret	z
DA4A: FE3A    		cp	':'
DA4C: C8      		ret	z
DA4D: FE3B    		cp	';'
DA4F: C8      		ret	z
DA50: FE3C    		cp	'<'
DA52: C8      		ret	z
DA53: FE3E    		cp	'>'
DA55: C8      		ret	z
DA56: C9      		ret	
              	;
              	;   get the next non-blank character from (de).
              	;
DA57: 1A      	nonblank: ld	a,(de)
DA58: B7      		or	a		;string ends with a null.
DA59: C8      		ret	z
DA5A: FE20    		cp	' '
DA5C: C0      		ret	nz
DA5D: 13      		inc	de
DA5E: C357DA  		jp	nonblank
              	;
              	;   add (hl)=(hl)+(a)
              	;
DA61: 85      	addhl:	add	a,l
DA62: 6F      		ld	l,a
DA63: D0      		ret	nc		;take care of any carry.
DA64: 24      		inc	h
DA65: C9      		ret	
              	;
              	;   convert the first name in (fcb).
              	;
DA66: 3E00    	convfst:ld	a,0
              	;
              	;   format a file name (convert * to '?', etc.). on return,
              	; (a)=0 is an unambigeous name was specified. enter with (a) equal to
              	; the position within the fcb for the name (either 0 or 16).
              	;
DA68: 21DADF  	convert:ld	hl,fcb
DA6B: CD61DA  		call	addhl
DA6E: E5      		push	hl
DA6F: E5      		push	hl
DA70: AF      		xor	a
DA71: 32FDDF  		ld	(chgdrv),a	;initialize drive change flag.
DA74: 2A88D8  		ld	hl,(inpoint)	;set (hl) as pointer into input line.
DA77: EB      		ex	de,hl
DA78: CD57DA  		call	nonblank	;get next non-blank character.
DA7B: EB      		ex	de,hl
DA7C: 228AD8  		ld	(namepnt),hl	;save pointer here for any error message.
DA7F: EB      		ex	de,hl
DA80: E1      		pop	hl
DA81: 1A      		ld	a,(de)		;get first character.
DA82: B7      		or	a
DA83: CA91DA  		jp	z,convrt1
DA86: DE40    		sbc	a,'A'-1		;might be a drive name, convert to binary.
DA88: 47      		ld	b,a		;and save.
DA89: 13      		inc	de		;check next character for a ':'.
DA8A: 1A      		ld	a,(de)
DA8B: FE3A    		cp	':'
DA8D: CA98DA  		jp	z,convrt2
DA90: 1B      		dec	de		;nope, move pointer back to the start of the line.
DA91: 3AFCDF  	convrt1:ld	a,(cdrive)
DA94: 77      		ld	(hl),a
DA95: C39EDA  		jp	convrt3
DA98: 78      	convrt2:ld	a,b
DA99: 32FDDF  		ld	(chgdrv),a	;set change in drives flag.
DA9C: 70      		ld	(hl),b
DA9D: 13      		inc	de
              	;
              	;   convert the basic file name.
              	;
DA9E: 0608    	convrt3:ld	b,08h
DAA0: CD38DA  	convrt4:call	check
DAA3: CAC1DA  		jp	z,convrt8
DAA6: 23      		inc	hl
DAA7: FE2A    		cp	'*'		;note that an '*' will fill the remaining
DAA9: C2B1DA  		jp	nz,convrt5	;field with '?'.
DAAC: 363F    		ld	(hl),'?'
DAAE: C3B3DA  		jp	convrt6
DAB1: 77      	convrt5:ld	(hl),a
DAB2: 13      		inc	de
DAB3: 05      	convrt6:dec	b
DAB4: C2A0DA  		jp	nz,convrt4
DAB7: CD38DA  	convrt7:call	check		;get next delimiter.
DABA: CAC8DA  		jp	z,getext
DABD: 13      		inc	de
DABE: C3B7DA  		jp	convrt7
DAC1: 23      	convrt8:inc	hl		;blank fill the file name.
DAC2: 3620    		ld	(hl),' '
DAC4: 05      		dec	b
DAC5: C2C1DA  		jp	nz,convrt8
              	;
              	;   get the extension and convert it.
              	;
DAC8: 0603    	getext:	ld	b,03h
DACA: FE2E    		cp	'.'
DACC: C2F1DA  		jp	nz,getext5
DACF: 13      		inc	de
DAD0: CD38DA  	getext1:call	check
DAD3: CAF1DA  		jp	z,getext5
DAD6: 23      		inc	hl
DAD7: FE2A    		cp	'*'
DAD9: C2E1DA  		jp	nz,getext2
DADC: 363F    		ld	(hl),'?'
DADE: C3E3DA  		jp	getext3
DAE1: 77      	getext2:ld	(hl),a
DAE2: 13      		inc	de
DAE3: 05      	getext3:dec	b
DAE4: C2D0DA  		jp	nz,getext1
DAE7: CD38DA  	getext4:call	check
DAEA: CAF8DA  		jp	z,getext6
DAED: 13      		inc	de
DAEE: C3E7DA  		jp	getext4
DAF1: 23      	getext5:inc	hl
DAF2: 3620    		ld	(hl),' '
DAF4: 05      		dec	b
DAF5: C2F1DA  		jp	nz,getext5
DAF8: 0603    	getext6:ld	b,3
DAFA: 23      	getext7:inc	hl
DAFB: 3600    		ld	(hl),0
DAFD: 05      		dec	b
DAFE: C2FADA  		jp	nz,getext7
DB01: EB      		ex	de,hl
DB02: 2288D8  		ld	(inpoint),hl	;save input line pointer.
DB05: E1      		pop	hl
              	;
              	;   check to see if this is an ambigeous file name specification.
              	; set the (a) register to non zero if it is.
              	;
DB06: 010B00  		ld	bc,11		;set name length.
DB09: 23      	getext8:inc	hl
DB0A: 7E      		ld	a,(hl)
DB0B: FE3F    		cp	'?'		;any question marks?
DB0D: C211DB  		jp	nz,getext9
DB10: 04      		inc	b		;count them.
DB11: 0D      	getext9:dec	c
DB12: C209DB  		jp	nz,getext8
DB15: 78      		ld	a,b
DB16: B7      		or	a
DB17: C9      		ret	
              	;
              	;   cp/m command table. note commands can be either 3 or 4 characters long.
              	;
0006:         	numcmds equ	6		;number of commands
DB18: 44495220	cmdtbl:	defb	'DIR '
DB1C: 45524120		defb	'ERA '
DB20: 54595045		defb	'TYPE'
DB24: 53415645		defb	'SAVE'
DB28: 52454E20		defb	'REN '
DB2C: 55534552		defb	'USER'
              	;
              	;   the following six bytes must agree with those at (pattrn2)
              	; or cp/m will halt. why?
              	;
DB30: 00160000	pattrn1:defb	0,22,0,0,0,0	;(* serial number bytes *).
DB34: 0000    	
              	;
              	;   search the command table for a match with what has just
              	; been entered. if a match is found, then we jump to the
              	; proper section. else jump to (unknown).
              	; on return, the (c) register is set to the command number
              	; that matched (or numcmds+1 if no match).
              	;
DB36: 2118DB  	search:	ld	hl,cmdtbl
DB39: 0E00    		ld	c,0
DB3B: 79      	search1:ld	a,c
DB3C: FE06    		cp	numcmds		;this commands exists.
DB3E: D0      		ret	nc
DB3F: 11DBDF  		ld	de,fcb+1	;check this one.
DB42: 0604    		ld	b,4		;max command length.
DB44: 1A      	search2:ld	a,(de)
DB45: BE      		cp	(hl)
DB46: C257DB  		jp	nz,search3	;not a match.
DB49: 13      		inc	de
DB4A: 23      		inc	hl
DB4B: 05      		dec	b
DB4C: C244DB  		jp	nz,search2
DB4F: 1A      		ld	a,(de)		;allow a 3 character command to match.
DB50: FE20    		cp	' '
DB52: C25CDB  		jp	nz,search4
DB55: 79      		ld	a,c		;set return register for this command.
DB56: C9      		ret	
DB57: 23      	search3:inc	hl
DB58: 05      		dec	b
DB59: C257DB  		jp	nz,search3
DB5C: 0C      	search4:inc	c
DB5D: C33BDB  		jp	search1
              	;
              	;   set the input buffer to empty and then start the command
              	; processor (ccp).
              	;
DB60: AF      	clearbuf: xor	a
DB61: 3207D8  		ld	(inbuff+1),a	;second byte is actual length.
              	;
              	;**************************************************************
              	;*
              	;*
              	;* C C P  -   C o n s o l e   C o m m a n d   P r o c e s s o r
              	;*
              	;**************************************************************
              	;*
DB64: 31B8DF  	command:ld	sp,ccpstack	;setup stack area.
DB67: C5      		push	bc		;note that (c) should be equal to:
DB68: 79      		ld	a,c		;(uuuudddd) where 'uuuu' is the user number
DB69: 1F      		rra			;and 'dddd' is the drive number.
DB6A: 1F      		rra	
DB6B: 1F      		rra	
DB6C: 1F      		rra	
DB6D: E60F    		and	0fh		;isolate the user number.
DB6F: 5F      		ld	e,a
DB70: CD14D9  		call	getsetuc	;and set it.
DB73: CDB7D8  		call	resdsk		;reset the disk system.
              		;ld	(batch),a	;clear batch mode flag.
DB76: C1      		pop	bc
DB77: 79      		ld	a,c
DB78: E60F    		and	0fh		;isolate the drive number.
DB7A: 32FCDF  		ld	(cdrive),a	;and save.
DB7D: CDBCD8  		call	dsksel		;...and select.
DB80: 3A07D8  		ld	a,(inbuff+1)
DB83: B7      		or	a		;anything in input buffer already?
DB84: C2A5DB  		jp	nz,cmmnd2	;yes, we just process it.
              	;
              	;   entry point to get a command line from the console.
              	;
              	;   Big thanks to NabuNetwork.com for the modified prompt!
              	;
DB87: 31B8DF  	cmmnd1:	ld	sp,ccpstack	;set stack straight.
DB8A: CD98D8  		call	crlf		;start a new line on the screen.
DB8D: CDD8D9  		call	getdsk		;get current drive.
DB90: C641    		add	a,'A'
DB92: CD8CD8  		call	print		;print current drive.
DB95: CD12D9  		call	getusr		;get current user.
DB98: C630    		add	a,'0'
DB9A: CD07EE  		call	printdc		;print current user.
DB9D: 3E3E    		ld	a,'>'
DB9F: CD8CD8  		call	print		;and add prompt.
DBA2: CD38D9  		call	getinp		;get line from user.
              	;
              	;   process command line here.
              	;
DBA5: 118000  	cmmnd2:	ld	de,tbuff
DBA8: CDE0D9  		call	dmaset		;set standard dma address.
DBAB: CDD8D9  		call	getdsk
DBAE: 32FCDF  		ld	(cdrive),a	;set current drive.
DBB1: CD66DA  		call	convfst		;convert name typed in.
DBB4: C411DA  		call	nz,synerr	;wild cards are not allowed.
DBB7: 3AFDDF  		ld	a,(chgdrv)	;if a change in drives was indicated,
DBBA: B7      		or	a		;then treat this as an unknown command
DBBB: C2B2DE  		jp	nz,unknown	;which gets executed.
DBBE: CD36DB  		call	search		;else search command table for a match.
              	;
              	;   note that an unknown command returns
              	; with (a) pointing to the last address
              	; in our table which is (unknown).
              	;
DBC1: 21CEDB  		ld	hl,cmdadr	;now, look thru our address table for command (a).
DBC4: 5F      		ld	e,a		;set (de) to command number.
DBC5: 1600    		ld	d,0
DBC7: 19      		add	hl,de
DBC8: 19      		add	hl,de		;(hl)=(cmdadr)+2*(command number).
DBC9: 7E      		ld	a,(hl)		;now pick out this address.
DBCA: 23      		inc	hl
DBCB: 66      		ld	h,(hl)
DBCC: 6F      		ld	l,a
DBCD: E9      		jp	(hl)		;now execute it.
              	;
              	;   cp/m command address table.
              	;
DBCE: 84DC2CDD	cmdadr:	defw	direct,erase,type,save
DBD2: 6ADDBADD	
DBD6: 1DDE9BDE		defw	rename,user,unknown
DBDA: B2DE    	
              	;
              	;   halt the system. reason for this is unknown at present.
              	;
DBDC: 21F376  	halt:	ld	hl,76f3h	;'di hlt' instructions.
DBDF: 2200D8  		ld	(cbase),hl
DBE2: 2100D8  		ld	hl,cbase
DBE5: E9      		jp	(hl)
              	;
              	;   read error while typeing a file.
              	;
DBE6: 01ECDB  	rderror:ld	bc,rderr
DBE9: C3A6D8  		jp	pline
DBEC: 72656164	rderr:	defb	'read error',0
DBF0: 20657272	
DBF4: 6F7200  	
              	;
              	;   required file was not located.
              	;
DBF7: 01FDDB  	none:	ld	bc,nofile
DBFA: C3A6D8  		jp	pline
DBFD: 6E6F2066	nofile:	defb	'no file',0
DC01: 696C6500	
              	;
              	;   decode a command of the form 'a>filename number{ filename}.
              	; note that a drive specifier is not allowed on the first file
              	; name. on return, the number is in register (a). any error
              	; causes 'filename?' to be printed and the command is aborted.
              	;
DC05: CD66DA  	decode:	call	convfst		;convert filename.
DC08: 3AFDDF  		ld	a,(chgdrv)	;do not allow a drive to be specified.
DC0B: B7      		or	a
DC0C: C211DA  		jp	nz,synerr
DC0F: 21DBDF  		ld	hl,fcb+1	;convert number now.
DC12: 010B00  		ld	bc,11		;(b)=sum register, (c)=max digit count.
DC15: 7E      	decode1:ld	a,(hl)
DC16: FE20    		cp	' '		;a space terminates the numeral.
DC18: CA40DC  		jp	z,decode3
DC1B: 23      		inc	hl
DC1C: D630    		sub	'0'		;make binary from ascii.
DC1E: FE0A    		cp	10		;legal digit?
DC20: D211DA  		jp	nc,synerr
DC23: 57      		ld	d,a		;yes, save it in (d).
DC24: 78      		ld	a,b		;compute (b)=(b)*10 and check for overflow.
DC25: E6E0    		and	0e0h
DC27: C211DA  		jp	nz,synerr
DC2A: 78      		ld	a,b
DC2B: 07      		rlca	
DC2C: 07      		rlca	
DC2D: 07      		rlca			;(a)=(b)*8
DC2E: 80      		add	a,b		;.......*9
DC2F: DA11DA  		jp	c,synerr
DC32: 80      		add	a,b		;.......*10
DC33: DA11DA  		jp	c,synerr
DC36: 82      		add	a,d		;add in new digit now.
DC37: DA11DA  	decode2:jp	c,synerr
DC3A: 47      		ld	b,a		;and save result.
DC3B: 0D      		dec	c		;only look at 11 digits.
DC3C: C215DC  		jp	nz,decode1
DC3F: C9      		ret	
DC40: 7E      	decode3:ld	a,(hl)		;spaces must follow (why?).
DC41: FE20    		cp	' '
DC43: C211DA  		jp	nz,synerr
DC46: 23      		inc	hl
DC47: 0D      	decode4:dec	c
DC48: C240DC  		jp	nz,decode3
DC4B: 78      		ld	a,b		;set (a)=the numeric value entered.
DC4C: C9      		ret	
              	;
              	;   move 3 bytes from (hl) to (de). note that there is only
              	; one reference to this at (a2d5h).
              	;
DC4D: 0603    	move3:	ld	b,3
              	;
              	;   move (b) bytes from (hl) to (de).
              	;
DC4F: 7E      	hl2de:	ld	a,(hl)
DC50: 12      		ld	(de),a
DC51: 23      		inc	hl
DC52: 13      		inc	de
DC53: 05      		dec	b
DC54: C24FDC  		jp	nz,hl2de
DC57: C9      		ret	
              	;
              	;   compute (hl)=(tbuff)+(a)+(c) and get the byte that's here.
              	;
DC58: 218000  	extract:ld	hl,tbuff
DC5B: 81      		add	a,c
DC5C: CD61DA  		call	addhl
DC5F: 7E      		ld	a,(hl)
DC60: C9      		ret	
              	;
              	;  check drive specified. if it means a change, then the new
              	; drive will be selected. in any case, the drive byte of the
              	; fcb will be set to null (means use current drive).
              	;
DC61: AF      	dselect:xor	a		;null out first byte of fcb.
DC62: 32DADF  		ld	(fcb),a
DC65: 3AFDDF  		ld	a,(chgdrv)	;a drive change indicated?
DC68: B7      		or	a
DC69: C8      		ret	z
DC6A: 3D      		dec	a		;yes, is it the same as the current drive?
DC6B: 21FCDF  		ld	hl,cdrive
DC6E: BE      		cp	(hl)
DC6F: C8      		ret	z
DC70: C3BCD8  		jp	dsksel		;no. select it then.
              	;
              	;   check the drive selection and reset it to the previous
              	; drive if it was changed for the preceeding command.
              	;
DC73: 3AFDDF  	resetdr:ld	a,(chgdrv)	;drive change indicated?
DC76: B7      		or	a
DC77: C8      		ret	z
DC78: 3D      		dec	a		;yes, was it a different drive?
DC79: 21FCDF  		ld	hl,cdrive
DC7C: BE      		cp	(hl)
DC7D: C8      		ret	z
DC7E: 3AFCDF  		ld	a,(cdrive)	;yes, re-select our old drive.
DC81: C3BCD8  		jp	dsksel
              	;
              	;**************************************************************
              	;*
              	;*           D I R E C T O R Y   C O M M A N D
              	;*
              	;**************************************************************
              	;
DC84: CD66DA  	direct:	call	convfst		;convert file name.
DC87: CD61DC  		call	dselect		;select indicated drive.
DC8A: 21DBDF  		ld	hl,fcb+1	;was any file indicated?
DC8D: 7E      		ld	a,(hl)
DC8E: FE20    		cp	' '
DC90: C29CDC  		jp	nz,direct2
DC93: 060B    		ld	b,11		;no. fill field with '?' - same as *.*.
DC95: 363F    	direct1:ld	(hl),'?'
DC97: 23      		inc	hl
DC98: 05      		dec	b
DC99: C295DC  		jp	nz,direct1
DC9C: 1E00    	direct2:ld	e,0		;set initial cursor position.
DC9E: D5      		push	de
DC9F: CDE8D8  		call	srchfcb		;get first file name.
DCA2: CCF7DB  		call	z,none		;none found at all?
DCA5: CA28DD  	direct3:jp	z,direct9	;terminate if no more names.
DCA8: 3AFBDF  		ld	a,(rtncode)	;get file's position in segment (0-3).
DCAB: 0F      		rrca	
DCAC: 0F      		rrca	
DCAD: 0F      		rrca	
DCAE: E660    		and	60h		;(a)=position*32
DCB0: 4F      		ld	c,a
DCB1: 3E0A    		ld	a,10
DCB3: CD58DC  		call	extract		;extract the tenth entry in fcb.
DCB6: 17      		rla			;check system file status bit.
DCB7: DA1CDD  		jp	c,direct8	;we don't list them.
DCBA: D1      		pop	de
DCBB: 7B      		ld	a,e		;bump name count.
DCBC: 1C      		inc	e
DCBD: D5      		push	de
DCBE: E603    		and	03h		;at end of line?
DCC0: F5      		push	af
DCC1: C2D9DC  		jp	nz,direct4
DCC4: CD98D8  		call	crlf		;yes, end this line and start another.
DCC7: C5      		push	bc
DCC8: CDD8D9  		call	getdsk		;start line with ('a:').
DCCB: C1      		pop	bc
DCCC: C641    		add	a,'A'
DCCE: CD92D8  		call	printb
DCD1: 3E3A    		ld	a,':'
DCD3: CD92D8  		call	printb
DCD6: C3E1DC  		jp	direct5
DCD9: CDA1D8  	direct4:call	space		;add seperator between file names.
DCDC: 3E3A    		ld	a,':'
DCDE: CD92D8  		call	printb
DCE1: CDA1D8  	direct5:call	space
DCE4: 0601    		ld	b,1		;'extract' each file name character at a time.
DCE6: 78      	direct6:ld	a,b
DCE7: CD58DC  		call	extract
DCEA: E67F    		and	7fh		;strip bit 7 (status bit).
DCEC: FE20    		cp	' '		;are we at the end of the name?
DCEE: C206DD  		jp	nz,drect65
DCF1: F1      		pop	af		;yes, don't print spaces at the end of a line.
DCF2: F5      		push	af
DCF3: FE03    		cp	3
DCF5: C204DD  		jp	nz,drect63
DCF8: 3E09    		ld	a,9		;first check for no extension.
DCFA: CD58DC  		call	extract
DCFD: E67F    		and	7fh
DCFF: FE20    		cp	' '
DD01: CA1BDD  		jp	z,direct7	;don't print spaces.
DD04: 3E20    	drect63:ld	a,' '		;else print them.
DD06: CD92D8  	drect65:call	printb
DD09: 04      		inc	b		;bump to next character psoition.
DD0A: 78      		ld	a,b
DD0B: FE0C    		cp	12		;end of the name?
DD0D: D21BDD  		jp	nc,direct7
DD10: FE09    		cp	9		;nope, starting extension?
DD12: C2E6DC  		jp	nz,direct6
DD15: CDA1D8  		call	space		;yes, add seperating space.
DD18: C3E6DC  		jp	direct6
DD1B: F1      	direct7:pop	af		;get the next file name.
DD1C: CDCAD9  	direct8:call	chkcon		;first check console, quit on anything.
DD1F: C228DD  		jp	nz,direct9
DD22: CDE3D8  		call	srchnxt		;get next name.
DD25: C3A5DC  		jp	direct3		;and continue with our list.
DD28: D1      	direct9:pop	de		;restore the stack and return to command level.
DD29: C393DF  		jp	getback
              	;
              	;**************************************************************
              	;*
              	;*                E R A S E   C O M M A N D
              	;*
              	;**************************************************************
              	;
DD2C: CD66DA  	erase:	call	convfst		;convert file name.
DD2F: FE0B    		cp	11		;was '*.*' entered?
DD31: C24FDD  		jp	nz,erase1
DD34: 015FDD  		ld	bc,yesno	;yes, ask for confirmation.
DD37: CDA6D8  		call	pline
DD3A: CD38D9  		call	getinp
DD3D: 2107D8  		ld	hl,inbuff+1
DD40: 35      		dec	(hl)		;must be exactly 'y'.
DD41: C287DB  		jp	nz,cmmnd1
DD44: 23      		inc	hl
DD45: 7E      		ld	a,(hl)
DD46: FE79    		cp	'y'
DD48: C287DB  		jp	nz,cmmnd1
DD4B: 23      		inc	hl
DD4C: 2288D8  		ld	(inpoint),hl	;save input line pointer.
DD4F: CD61DC  	erase1:	call	dselect		;select desired disk.
DD52: 11DADF  		ld	de,fcb
DD55: CDEED8  		call	delete		;delete the file.
DD58: 3C      		inc	a
DD59: CCF7DB  		call	z,none		;not there?
DD5C: C393DF  		jp	getback		;return to command level now.
DD5F: 616C6C20	yesno:	defb	'all (y/n)?',0
DD63: 28792F6E	
DD67: 293F00  	
              	;
              	;**************************************************************
              	;*
              	;*            T Y P E   C O M M A N D
              	;*
              	;**************************************************************
              	;
DD6A: CD66DA  	type:	call	convfst		;convert file name.
DD6D: C211DA  		jp	nz,synerr	;wild cards not allowed.
DD70: CD61DC  		call	dselect		;select indicated drive.
DD73: CDCFD8  		call	openfcb		;open the file.
DD76: CAB4DD  		jp	z,type5		;not there?
DD79: CD98D8  		call	crlf		;ok, start a new line on the screen.
DD7C: 21FEDF  		ld	hl,nbytes	;initialize byte counter.
DD7F: 36FF    		ld	(hl),0ffh	;set to read first sector.
DD81: 21FEDF  	type1:	ld	hl,nbytes
DD84: 7E      	type2:	ld	a,(hl)		;have we written the entire sector?
DD85: FE80    		cp	128
DD87: DA94DD  		jp	c,type3
DD8A: E5      		push	hl		;yes, read in the next one.
DD8B: CDFDD8  		call	readfcb
DD8E: E1      		pop	hl
DD8F: C2ADDD  		jp	nz,type4	;end or error?
DD92: AF      		xor	a		;ok, clear byte counter.
DD93: 77      		ld	(hl),a
DD94: 34      	type3:	inc	(hl)		;count this byte.
DD95: 218000  		ld	hl,tbuff	;and get the (a)th one from the buffer (tbuff).
DD98: CD61DA  		call	addhl
DD9B: 7E      		ld	a,(hl)
DD9C: FE1A    		cp	cntrlz		;end of file mark?
DD9E: CA93DF  		jp	z,getback
DDA1: CD8CD8  		call	print		;no, print it.
DDA4: CDCAD9  		call	chkcon		;check console, quit if anything ready.
DDA7: C293DF  		jp	nz,getback
DDAA: C381DD  		jp	type1
              	;
              	;   get here on an end of file or read error.
              	;
DDAD: 3D      	type4:	dec	a		;read error?
DDAE: CA93DF  		jp	z,getback
DDB1: CDE6DB  		call	rderror		;yes, print message.
DDB4: CD73DC  	type5:	call	resetdr		;and reset proper drive
DDB7: C311DA  		jp	synerr		;now print file name with problem.
              	;
              	;**************************************************************
              	;*
              	;*            S A V E   C O M M A N D
              	;*
              	;**************************************************************
              	;
DDBA: CD05DC  	save:	call	decode		;get numeric number that follows save.
DDBD: F5      		push	af		;save number of pages to write.
DDBE: CD66DA  		call	convfst		;convert file name.
DDC1: C211DA  		jp	nz,synerr	;wild cards not allowed.
DDC4: CD61DC  		call	dselect		;select specified drive.
DDC7: 11DADF  		ld	de,fcb		;now delete this file.
DDCA: D5      		push	de
DDCB: CDEED8  		call	delete
DDCE: D1      		pop	de
DDCF: CD08D9  		call	create		;and create it again.
DDD2: CA08DE  		jp	z,save3		;can't create?
DDD5: AF      		xor	a		;clear record number byte.
DDD6: 32FADF  		ld	(fcb+32),a
DDD9: F1      		pop	af		;convert pages to sectors.
DDDA: 6F      		ld	l,a
DDDB: 2600    		ld	h,0
DDDD: 29      		add	hl,hl		;(hl)=number of sectors to write.
DDDE: 110001  		ld	de,tbase	;and we start from here.
DDE1: 7C      	save1:	ld	a,h		;done yet?
DDE2: B5      		or	l
DDE3: CAFEDD  		jp	z,save2
DDE6: 2B      		dec	hl		;nope, count this and compute the start
DDE7: E5      		push	hl		;of the next 128 byte sector.
DDE8: 218000  		ld	hl,128
DDEB: 19      		add	hl,de
DDEC: E5      		push	hl		;save it and set the transfer address.
DDED: CDE0D9  		call	dmaset
DDF0: 11DADF  		ld	de,fcb		;write out this sector now.
DDF3: CD03D9  		call	wrtrec
DDF6: D1      		pop	de		;reset (de) to the start of the last sector.
DDF7: E1      		pop	hl		;restore sector count.
DDF8: C208DE  		jp	nz,save3	;write error?
DDFB: C3E1DD  		jp	save1
              	;
              	;   get here after writing all of the file.
              	;
DDFE: 11DADF  	save2:	ld	de,fcb		;now close the file.
DE01: CDD9D8  		call	close
DE04: 3C      		inc	a		;did it close ok?
DE05: C20EDE  		jp	nz,save4
              	;
              	;   print out error message (no space).
              	;
DE08: 0114DE  	save3:	ld	bc,nospace
DE0B: CDA6D8  		call	pline
DE0E: CDDDD9  	save4:	call	stddma		;reset the standard dma address.
DE11: C393DF  		jp	getback
DE14: 6E6F2073	nospace:defb	'no space',0
DE18: 70616365	
DE1C: 00      	
              	;
              	;**************************************************************
              	;*
              	;*           R E N A M E   C O M M A N D
              	;*
              	;**************************************************************
              	;
DE1D: CD66DA  	rename:	call	convfst		;convert first file name.
DE20: C211DA  		jp	nz,synerr	;wild cards not allowed.
DE23: 3AFDDF  		ld	a,(chgdrv)	;remember any change in drives specified.
DE26: F5      		push	af
DE27: CD61DC  		call	dselect		;and select this drive.
DE2A: CDE8D8  		call	srchfcb		;is this file present?
DE2D: C286DE  		jp	nz,rename6	;yes, print error message.
DE30: 21DADF  		ld	hl,fcb		;yes, move this name into second slot.
DE33: 11EADF  		ld	de,fcb+16
DE36: 0610    		ld	b,16
DE38: CD4FDC  		call	hl2de
DE3B: 2A88D8  		ld	hl,(inpoint)	;get input pointer.
DE3E: EB      		ex	de,hl
DE3F: CD57DA  		call	nonblank	;get next non blank character.
DE42: FE3D    		cp	'='		;only allow an '=' or '_' seperator.
DE44: CA4CDE  		jp	z,rename1
DE47: FE5F    		cp	'_'
DE49: C280DE  		jp	nz,rename5
DE4C: EB      	rename1:ex	de,hl
DE4D: 23      		inc	hl		;ok, skip seperator.
DE4E: 2288D8  		ld	(inpoint),hl	;save input line pointer.
DE51: CD66DA  		call	convfst		;convert this second file name now.
DE54: C280DE  		jp	nz,rename5	;again, no wild cards.
DE57: F1      		pop	af		;if a drive was specified, then it
DE58: 47      		ld	b,a		;must be the same as before.
DE59: 21FDDF  		ld	hl,chgdrv
DE5C: 7E      		ld	a,(hl)
DE5D: B7      		or	a
DE5E: CA66DE  		jp	z,rename2
DE61: B8      		cp	b
DE62: 70      		ld	(hl),b
DE63: C280DE  		jp	nz,rename5	;they were different, error.
DE66: 70      	rename2:ld	(hl),b		;	reset as per the first file specification.
DE67: AF      		xor	a
DE68: 32DADF  		ld	(fcb),a		;clear the drive byte of the fcb.
DE6B: CDE8D8  	rename3:call	srchfcb		;and go look for second file.
DE6E: CA7ADE  		jp	z,rename4	;doesn't exist?
DE71: 11DADF  		ld	de,fcb
DE74: CD0DD9  		call	renam		;ok, rename the file.
DE77: C393DF  		jp	getback
              	;
              	;   process rename errors here.
              	;
DE7A: CDF7DB  	rename4:call	none		;file not there.
DE7D: C393DF  		jp	getback
DE80: CD73DC  	rename5:call	resetdr		;bad command format.
DE83: C311DA  		jp	synerr
DE86: 018FDE  	rename6:ld	bc,exists	;destination file already exists.
DE89: CDA6D8  		call	pline
DE8C: C393DF  		jp	getback
DE8F: 66696C65	exists:	defb	'file exists',0
DE93: 20657869	
DE97: 73747300	
              	;
              	;**************************************************************
              	;*
              	;*             U S E R   C O M M A N D
              	;*
              	;**************************************************************
              	;
DE9B: CD05DC  	user:	call	decode		;get numeric value following command.
DE9E: FE10    		cp	16		;legal user number?
DEA0: D211DA  		jp	nc,synerr
DEA3: 5F      		ld	e,a		;yes but is there anything else?
DEA4: 3ADBDF  		ld	a,(fcb+1)
DEA7: FE20    		cp	' '
DEA9: CA11DA  		jp	z,synerr	;yes, that is not allowed.
DEAC: CD14D9  		call	getsetuc	;ok, set user code.
DEAF: C396DF  		jp	getback1
              	;
              	;**************************************************************
              	;*
              	;*        T R A N S I A N T   P R O G R A M   C O M M A N D
              	;*
              	;**************************************************************
              	;
DEB2: CDFDD9  	unknown:call	verify		;check for valid system (why?).
DEB5: 3ADBDF  		ld	a,(fcb+1)	;anything to execute?
DEB8: FE20    		cp	' '
DEBA: C2D1DE  		jp	nz,unkwn1
DEBD: 3AFDDF  		ld	a,(chgdrv)	;nope, only a drive change?
DEC0: B7      		or	a
DEC1: CA96DF  		jp	z,getback1	;neither???
DEC4: 3D      		dec	a
DEC5: 32FCDF  		ld	(cdrive),a	;ok, store new drive.
DEC8: CD28D9  		call	movecd		;set (tdrive) also.
DECB: CDBCD8  		call	dsksel		;and select this drive.
DECE: C396DF  		jp	getback1	;then return.
              	;
              	;   here a file name was typed. prepare to execute it.
              	;
DED1: 11E3DF  	unkwn1:	ld	de,fcb+9	;an extension specified?
DED4: 1A      		ld	a,(de)
DED5: FE20    		cp	' '
DED7: C211DA  		jp	nz,synerr	;yes, not allowed.
DEDA: D5      	unkwn2:	push	de
DEDB: CD61DC  		call	dselect		;select specified drive.
DEDE: D1      		pop	de
DEDF: 2190DF  		ld	hl,comfile	;set the extension to 'com'.
DEE2: CD4DDC  		call	move3
DEE5: CDCFD8  		call	openfcb		;and open this file.
DEE8: CA78DF  		jp	z,unkwn9	;not present?
              	;
              	;   load in the program.
              	;
DEEB: 210001  		ld	hl,tbase	;store the program starting here.
DEEE: E5      	unkwn3:	push	hl
DEEF: EB      		ex	de,hl
DEF0: CDE0D9  		call	dmaset		;set transfer address.
DEF3: 11DADF  		ld	de,fcb		;and read the next record.
DEF6: CDF8D8  		call	rdrec
DEF9: C20EDF  		jp	nz,unkwn4	;end of file or read error?
DEFC: E1      		pop	hl		;nope, bump pointer for next sector.
DEFD: 118000  		ld	de,128
DF00: 19      		add	hl,de
DF01: 1100D8  		ld	de,cbase	;enough room for the whole file?
DF04: 7D      		ld	a,l
DF05: 93      		sub	e
DF06: 7C      		ld	a,h
DF07: 9A      		sbc	a,d
DF08: D27EDF  		jp	nc,unkwn0	;no, it can't fit.
DF0B: C3EEDE  		jp	unkwn3
              	;
              	;   get here after finished reading.
              	;
DF0E: E1      	unkwn4:	pop	hl
DF0F: 3D      		dec	a		;normal end of file?
DF10: C27EDF  		jp	nz,unkwn0
DF13: CD73DC  		call	resetdr		;yes, reset previous drive.
DF16: CD66DA  		call	convfst		;convert the first file name that follows
DF19: 21FDDF  		ld	hl,chgdrv	;command name.
DF1C: E5      		push	hl
DF1D: 7E      		ld	a,(hl)		;set drive code in default fcb.
DF1E: 32DADF  		ld	(fcb),a
DF21: 3E10    		ld	a,16		;put second name 16 bytes later.
DF23: CD68DA  		call	convert		;convert second file name.
DF26: E1      		pop	hl
DF27: 7E      		ld	a,(hl)		;and set the drive for this second file.
DF28: 32EADF  		ld	(fcb+16),a
DF2B: AF      		xor	a		;clear record byte in fcb.
DF2C: 32FADF  		ld	(fcb+32),a
DF2F: 115C00  		ld	de,tfcb		;move it into place at(005ch).
DF32: 21DADF  		ld	hl,fcb
DF35: 0621    		ld	b,33
DF37: CD4FDC  		call	hl2de
DF3A: 2108D8  		ld	hl,inbuff+2	;now move the remainder of the input
DF3D: 7E      	unkwn5:	ld	a,(hl)		;line down to (0080h). look for a non blank.
DF3E: B7      		or	a		;or a null.
DF3F: CA4BDF  		jp	z,unkwn6
DF42: FE20    		cp	' '
DF44: CA4BDF  		jp	z,unkwn6
DF47: 23      		inc	hl
DF48: C33DDF  		jp	unkwn5
              	;
              	;   do the line move now. it ends in a null byte.
              	;
DF4B: 0600    	unkwn6:	ld	b,0		;keep a character count.
DF4D: 118100  		ld	de,tbuff+1	;data gets put here.
DF50: 7E      	unkwn7:	ld	a,(hl)		;move it now.
DF51: 12      		ld	(de),a
DF52: B7      		or	a
DF53: CA5CDF  		jp	z,unkwn8
DF56: 04      		inc	b
DF57: 23      		inc	hl
DF58: 13      		inc	de
DF59: C350DF  		jp	unkwn7
DF5C: 78      	unkwn8:	ld	a,b		;now store the character count.
DF5D: 328000  		ld	(tbuff),a
DF60: CD98D8  		call	crlf		;clean up the screen.
DF63: CDDDD9  		call	stddma		;set standard transfer address.
DF66: CD19D9  		call	setcdrv		;reset current drive.
DF69: CD0001  		call	tbase		;and execute the program.
              	;
              	;   transiant programs return here (or reboot).
              	;
DF6C: 31B8DF  		ld	sp,batch	;set stack first off.
DF6F: CD28D9  		call	movecd		;move current drive into place (tdrive).
DF72: CDBCD8  		call	dsksel		;and reselect it.
DF75: C387DB  		jp	cmmnd1		;back to comand mode.
              	;
              	;   get here if some error occured.
              	;
DF78: CD73DC  	unkwn9:	call	resetdr		;inproper format.
DF7B: C311DA  		jp	synerr
DF7E: 0187DF  	unkwn0:	ld	bc,badload	;read error or won't fit.
DF81: CDA6D8  		call	pline
DF84: C393DF  		jp	getback
DF87: 42616420	badload:defb	'Bad load',0
DF8B: 6C6F6164	
DF8F: 00      	
DF90: 434F4D  	comfile:defb	'COM'		;command file extension.
              	;
              	;   get here to return to command level. we will reset the
              	; previous active drive and then either return to command
              	; level directly or print error message and then return.
              	;
DF93: CD73DC  	getback:call	resetdr		;reset previous drive.
DF96: CD66DA  	getback1: call	convfst		;convert first name in (fcb).
DF99: 3ADBDF  		ld	a,(fcb+1)	;if this was just a drive change request,
DF9C: D620    		sub	' '		;make sure it was valid.
DF9E: 21FDDF  		ld	hl,chgdrv
DFA1: B6      		or	(hl)
DFA2: C211DA  		jp	nz,synerr
DFA5: C387DB  		jp	cmmnd1		;ok, return to command level.
              	;
              	;   ccp stack area.
              	;
DFA8: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DFAC: 00...   	
DFB8:         	ccpstack equ	$	;end of ccp stack area.
              	;
              	;   batch (or submit) processing information storage.
              	;
DFB8: 00      	batch:	defb	0		;batch mode flag (0=not active).
DFB9: 00242424	batchfcb: defb	0,'$$$     SUB',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DFBD: 20202020	
DFC1: 20535542	
DFC5: 00000000	
DFC9: 00...   	
              	;
              	;   file control block setup by the ccp.
              	;
DFDA: 00202020	fcb:	defb	0,'           ',0,0,0,0,0,'           ',0,0,0,0,0
DFDE: 20202020	
DFE2: 20202020	
DFE6: 00000000	
DFEA: 00202020	
DFEE: 20202020	
DFF2: 20202020	
DFF6: 00000000	
DFFA: 00      	
DFFB: 00      	rtncode:defb	0		;status returned from bdos call.
DFFC: 00      	cdrive:	defb	0		;currently active drive.
DFFD: 00      	chgdrv:	defb	0		;change in drives flag (0=no change).
DFFE: 0000    	nbytes:	defw	0		;byte counter used by type.
              	
              	;
              	;   note that the following six bytes must match those at
              	; (pattrn1) or cp/m will halt. why?
              	;
E000: 00160000	pattrn2:defb	0,22,0,0,0,0	;(* serial number bytes *).
E004: 0000    	
              	;
              	;**************************************************************
              	;*
              	;*                    B D O S   E N T R Y
              	;*
              	;**************************************************************
              	;
E006: C314E0  	fbase:	jp	fbase1
E009: C34AEE  		jp	boot
              	;
              	;   bdos error table.
              	;
E00C: 9FE0    	badsctr:defw	error1		;bad sector on read or write.
E00E: ABE0    	badslct:defw	error2		;bad disk select.
E010: B1E0    	rodisk:	defw	error3		;disk is read only.
E012: B7E0    	rofile:	defw	error4		;file is read only.
              	;
              	;   entry into bdos. (de) or (e) are the parameters passed. the
              	; function number desired is in register (c).
              	;
E014: EB      	fbase1:	ex	de,hl		;save the (de) parameters.
E015: 224EE3  		ld	(params),hl
E018: EB      		ex	de,hl
E019: 7B      		ld	a,e		;and save register (e) in particular.
E01A: 32E1ED  		ld	(eparam),a
E01D: 210000  		ld	hl,0
E020: 2250E3  		ld	(status),hl	;clear return status.
E023: 39      		add	hl,sp
E024: 221AE3  		ld	(usrstack),hl	;save users stack pointer.
E027: 314CE3  		ld	sp,stkarea	;and set our own.
E02A: AF      		xor	a		;clear auto select storage space.
E02B: 32EBED  		ld	(autoflag),a
E02E: 32E9ED  		ld	(auto),a
E031: 217FED  		ld	hl,goback	;set return address.
E034: E5      		push	hl
E035: CD73EF  		call	syshook		; see if anyone wants to intercept the call
E038: 79      		ld	a,c		;get function number.
E039: FE29    		cp	nfuncts		;valid function number?
E03B: D0      		ret	nc
E03C: 4B      		ld	c,e		;keep single register function here.
E03D: 214DE0  		ld	hl,functns	;now look thru the function table.
E040: 5F      		ld	e,a
E041: 1600    		ld	d,0		;(de)=function number.
E043: 19      		add	hl,de
E044: 19      		add	hl,de		;(hl)=(start of table)+2*(function number).
E045: 5E      		ld	e,(hl)
E046: 23      		inc	hl
E047: 56      		ld	d,(hl)		;now (de)=address for this function.
E048: 2A4EE3  		ld	hl,(params)	;retrieve parameters.
E04B: EB      		ex	de,hl		;now (de) has the original parameters.
E04C: E9      		jp	(hl)		;execute desired function.
              	;
              	;   bdos function jump table.
              	;
0029:         	nfuncts equ	41		;number of functions in followin table.
              	;
E04D: 58EED3E2	functns:defw	wboot,getcon,outcon,getrdr,punch,list,dircio,getiob
E051: 9BE1D9E2	
E055: D9EED5EE	
E059: DFE2F8E2	
E05D: FEE203E3		defw	setiob,prtstr,rdbuff,getcsts,getver,rstdsk,setdsk,openfil
E061: ECE109E3	
E065: 89EC8EEC	
E069: 50ECA7EC	
E06D: B0ECB6EC		defw	closefil,getfst,getnxt,delfile,readseq,wrtseq,fcreate
E071: D3ECE2EC	
E075: EBECF1EC	
E079: F7EC    	
E07B: 00ED09ED		defw	renfile,getlog,getcrnt,putdma,getaloc,wrtprtd,getrov,setattr
E07F: 0FED15ED	
E083: 1CED37E5	
E087: 22ED28ED	
E08B: 31ED38ED		defw	getparm,getuser,rdrandom,wtrandom,filesize,setran,logoff,rtn
E08F: 4CED52ED	
E093: 58ED19EC	
E097: 5EED0FE3	
E09B: 0FE3A6ED		defw	rtn,wtspecl
              	;
              	;   bdos error message section.
              	;
E09F: 21D5E0  	error1:	ld	hl,badsec	;bad sector message.
E0A2: CDF0E0  		call	prterr		;print it and get a 1 char responce.
E0A5: FE03    		cp	cntrlc		;re-boot request (control-c)?
E0A7: CA0000  		jp	z,0		;yes.
E0AA: C9      		ret			;no, return to retry i/o function.
              	;
E0AB: 21E0E0  	error2:	ld	hl,badsel	;bad drive selected.
E0AE: C3BAE0  		jp	error5
              	;
E0B1: 21ECE0  	error3:	ld	hl,diskro	;disk is read only.
E0B4: C3BAE0  		jp	error5
              	;
E0B7: 21E7E0  	error4:	ld	hl,filero	;file is read only.
              	;
E0BA: 3E00    	error5:	ld	a,default
E0BC: 320400  		ld	(tdrive),a
E0BF: CDF0E0  		call	prterr
E0C2: C30000  		jp	0		;always reboot on these errors.
              	;
E0C5: 42646F73	bdoserr:defb	'Bdos Err on '
E0C9: 20457272	
E0CD: 206F6E20	
E0D1: 203A2024	bdosdrv:defb	' : $'
E0D5: 42616420	badsec:	defb	'Bad Sector$'
E0D9: 53656374	
E0DD: 6F7224  	
E0E0: 53656C65	badsel:	defb	'Select$'
E0E4: 637424  	
E0E7: 46696C65	filero:	defb	'File '
E0EB: 20      	
E0EC: 522F4F24	diskro:	defb	'R/O$'
              	;
              	;   print bdos error message.
              	;
E0F0: E5      	prterr:	push	hl		;save second message pointer.
E0F1: CDD4E1  		call	outcrlf		;send (cr)(lf).
E0F4: 3A4DE3  		ld	a,(active)	;get active drive.
E0F7: C641    		add	a,'A'		;make ascii.
E0F9: 32D1E0  		ld	(bdosdrv),a	;and put in message.
E0FC: 01C5E0  		ld	bc,bdoserr	;and print it.
E0FF: CDDEE1  		call	prtmesg
E102: C1      		pop	bc		;print second message line now.
E103: CDDEE1  		call	prtmesg
              	;
              	;   get an input character. we will check our 1 character
              	; buffer first. this may be set by the console status routine.
              	;
E106: 2119E3  	getchar:ld	hl,charbuf	;check character buffer.
E109: 7E      		ld	a,(hl)		;anything present already?
E10A: 3600    		ld	(hl),0		;...either case clear it.
E10C: B7      		or	a
E10D: C0      		ret	nz		;yes, use it.
E10E: C3BDEE  		jp	conin		;nope, go get a character responce.
              	;
              	;   input and echo a character.
              	;
E111: CD06E1  	getecho:call	getchar		;input a character.
E114: CD1FE1  		call	chkchar		;carriage control?
E117: D8      		ret	c		;no, a regular control char so don't echo.
E118: F5      		push	af		;ok, save character now.
E119: 4F      		ld	c,a
E11A: CD9BE1  		call	outcon		;and echo it.
E11D: F1      		pop	af		;get character and return.
E11E: C9      		ret	
              	;
              	;   check character in (a). set the zero flag on a carriage
              	; control character and the carry flag on any other control
              	; character.
              	;
E11F: FE0D    	chkchar:cp	cr		;check for carriage return, line feed, backspace,
E121: C8      		ret	z		;or a tab.
E122: FE0A    		cp	lf
E124: C8      		ret	z
E125: FE09    		cp	tab
E127: C8      		ret	z
E128: FE08    		cp	bs
E12A: C8      		ret	z
E12B: FE20    		cp	' '		;other control char? set carry flag.
E12D: C9      		ret	
              	;
              	;   check the console during output. halt on a control-s, then
              	; reboot on a control-c. if anything else is ready, clear the
              	; zero flag and return (the calling routine may want to do
              	; something).
              	;
E12E: 3A19E3  	ckconsol: ld	a,(charbuf)	;check buffer.
E131: B7      		or	a		;if anything, just return without checking.
E132: C250E1  		jp	nz,ckcon2
E135: CDB2EE  		call	const		;nothing in buffer. check console.
E138: E601    		and	01h		;look at bit 0.
E13A: C8      		ret	z		;return if nothing.
E13B: CDBDEE  		call	conin		;ok, get it.
E13E: FE13    		cp	cntrls		;if not control-s, return with zero cleared.
E140: C24DE1  		jp	nz,ckcon1
E143: CDBDEE  		call	conin		;halt processing until another char
E146: FE03    		cp	cntrlc		;is typed. control-c?
E148: CA0000  		jp	z,0		;yes, reboot now.
E14B: AF      		xor	a		;no, just pretend nothing was ever ready.
E14C: C9      		ret	
E14D: 3219E3  	ckcon1:	ld	(charbuf),a	;save character in buffer for later processing.
E150: 3E01    	ckcon2:	ld	a,1		;set (a) to non zero to mean something is ready.
E152: C9      		ret	
              	;
              	;   output (c) to the screen. if the printer flip-flop flag
              	; is set, we will send character to printer also. the console
              	; will be checked in the process.
              	;
E153: 3A15E3  	outchar:ld	a,(outflag)	;check output flag.
E156: B7      		or	a		;anything and we won't generate output.
E157: C26DE1  		jp	nz,outchr1
E15A: C5      		push	bc
E15B: CD2EE1  		call	ckconsol	;check console (we don't care whats there).
E15E: C1      		pop	bc
E15F: C5      		push	bc
E160: CDC9EE  		call	conout		;output (c) to the screen.
E163: C1      		pop	bc
E164: C5      		push	bc
E165: 3A18E3  		ld	a,(prtflag)	;check printer flip-flop flag.
E168: B7      		or	a
E169: C4D5EE  		call	nz,list		;print it also if non-zero.
E16C: C1      		pop	bc
E16D: 79      	outchr1:ld	a,c		;update cursors position.
E16E: 2117E3  		ld	hl,curpos
E171: FE7F    		cp	del		;rubouts don't do anything here.
E173: C8      		ret	z
E174: 34      		inc	(hl)		;bump line pointer.
E175: FE20    		cp	' '		;and return if a normal character.
E177: D0      		ret	nc
E178: 35      		dec	(hl)		;restore and check for the start of the line.
E179: 7E      		ld	a,(hl)
E17A: B7      		or	a
E17B: C8      		ret	z		;ingnore control characters at the start of the line.
E17C: 79      		ld	a,c
E17D: FE08    		cp	bs		;is it a backspace?
E17F: C284E1  		jp	nz,outchr2
E182: 35      		dec	(hl)		;yes, backup pointer.
E183: C9      		ret	
E184: FE0A    	outchr2:cp	lf		;is it a line feed?
E186: C0      		ret	nz		;ignore anything else.
E187: 3600    		ld	(hl),0		;reset pointer to start of line.
E189: C9      		ret	
              	;
              	;   output (a) to the screen. if it is a control character
              	; (other than carriage control), use ^x format.
              	;
E18A: 79      	showit:	ld	a,c
E18B: CD1FE1  		call	chkchar		;check character.
E18E: D29BE1  		jp	nc,outcon	;not a control, use normal output.
E191: F5      		push	af
E192: 0E5E    		ld	c,'^'		;for a control character, preceed it with '^'.
E194: CD53E1  		call	outchar
E197: F1      		pop	af
E198: F640    		or	'@'		;and then use the letter equivelant.
E19A: 4F      		ld	c,a
              	;
              	;   function to output (c) to the console device and expand tabs
              	; if necessary.
              	;
E19B: 79      	outcon:	ld	a,c
E19C: FE09    		cp	tab		;is it a tab?
E19E: C253E1  		jp	nz,outchar	;use regular output.
E1A1: 0E20    	outcon1:ld	c,' '		;yes it is, use spaces instead.
E1A3: CD53E1  		call	outchar
E1A6: 3A17E3  		ld	a,(curpos)	;go until the cursor is at a multiple of 8
              	
E1A9: E607    		and	07h		;position.
E1AB: C2A1E1  		jp	nz,outcon1
E1AE: C9      		ret	
              	;
              	;   echo a backspace character. erase the prevoius character
              	; on the screen.
              	;
E1AF: CDB7E1  	backup:	call	backup1		;backup the screen 1 place.
E1B2: 0E20    		ld	c,' '		;then blank that character.
E1B4: CDC9EE  		call	conout
E1B7: 0E08    	backup1:ld	c,bs		;then back space once more.
E1B9: C3C9EE  		jp	conout
              	;
              	;   signal a deleted line. print a '#' at the end and start
              	; over.
              	;
E1BC: 0E23    	newline:ld	c,'#'
E1BE: CD53E1  		call	outchar		;print this.
E1C1: CDD4E1  		call	outcrlf		;start new line.
E1C4: 3A17E3  	newln1:	ld	a,(curpos)	;move the cursor to the starting position.
E1C7: 2116E3  		ld	hl,starting
E1CA: BE      		cp	(hl)
E1CB: D0      		ret	nc		;there yet?
E1CC: 0E20    		ld	c,' '
E1CE: CD53E1  		call	outchar		;nope, keep going.
E1D1: C3C4E1  		jp	newln1
              	;
              	;   output a (cr) (lf) to the console device (screen).
              	;
E1D4: 0E0D    	outcrlf:ld	c,cr
E1D6: CD53E1  		call	outchar
E1D9: 0E0A    		ld	c,lf
E1DB: C353E1  		jp	outchar
              	;
              	;   print message pointed to by (bc). it will end with a '$'.
              	;
E1DE: 0A      	prtmesg:ld	a,(bc)		;check for terminating character.
E1DF: FE24    		cp	'$'
E1E1: C8      		ret	z
E1E2: 03      		inc	bc
E1E3: C5      		push	bc		;otherwise, bump pointer and print it.
E1E4: 4F      		ld	c,a
E1E5: CD9BE1  		call	outcon
E1E8: C1      		pop	bc
E1E9: C3DEE1  		jp	prtmesg
              	;
              	;   function to execute a buffered read.
              	;
E1EC: 3A17E3  	rdbuff:	ld	a,(curpos)	;use present location as starting one.
E1EF: 3216E3  		ld	(starting),a
E1F2: 2A4EE3  		ld	hl,(params)	;get the maximum buffer space.
E1F5: 4E      		ld	c,(hl)
E1F6: 23      		inc	hl		;point to first available space.
E1F7: E5      		push	hl		;and save.
E1F8: 0600    		ld	b,0		;keep a character count.
E1FA: C5      	rdbuf1:	push	bc
E1FB: E5      		push	hl
E1FC: CD06E1  	rdbuf2:	call	getchar		;get the next input character.
E1FF: E67F    		and	7fh		;strip bit 7.
E201: E1      		pop	hl		;reset registers.
E202: C1      		pop	bc
E203: FE0D    		cp	cr		;en of the line?
E205: CACCE2  		jp	z,rdbuf17
E208: FE0A    		cp	lf
E20A: CACCE2  		jp	z,rdbuf17
E20D: FE08    		cp	bs		;how about a backspace?
E20F: C221E2  		jp	nz,rdbuf3
E212: 78      		ld	a,b		;yes, but ignore at the beginning of the line.
E213: B7      		or	a
E214: CAFAE1  		jp	z,rdbuf1
E217: 05      		dec	b		;ok, update counter.
E218: 3A17E3  		ld	a,(curpos)	;if we backspace to the start of the line,
E21B: 3215E3  		ld	(outflag),a	;treat as a cancel (control-x).
E21E: C37BE2  		jp	rdbuf10
E221: FE7F    	rdbuf3:	cp	del		;user typed a rubout?
E223: C231E2  		jp	nz,rdbuf4
E226: 78      		ld	a,b		;ignore at the start of the line.
E227: B7      		or	a
E228: CAFAE1  		jp	z,rdbuf1
E22B: 7E      		ld	a,(hl)		;ok, echo the prevoius character.
E22C: 05      		dec	b		;and reset pointers (counters).
E22D: 2B      		dec	hl
E22E: C3B4E2  		jp	rdbuf15
E231: FE05    	rdbuf4:	cp	cntrle		;physical end of line?
E233: C242E2  		jp	nz,rdbuf5
E236: C5      		push	bc		;yes, do it.
E237: E5      		push	hl
E238: CDD4E1  		call	outcrlf
E23B: AF      		xor	a		;and update starting position.
E23C: 3216E3  		ld	(starting),a
E23F: C3FCE1  		jp	rdbuf2
E242: FE10    	rdbuf5:	cp	cntrlp		;control-p?
E244: C253E2  		jp	nz,rdbuf6
E247: E5      		push	hl		;yes, flip the print flag filp-flop byte.
E248: 2118E3  		ld	hl,prtflag
E24B: 3E01    		ld	a,1		;prtflag=1-prtflag
E24D: 96      		sub	(hl)
E24E: 77      		ld	(hl),a
E24F: E1      		pop	hl
E250: C3FAE1  		jp	rdbuf1
E253: FE18    	rdbuf6:	cp	cntrlx		;control-x (cancel)?
E255: C26AE2  		jp	nz,rdbuf8
E258: E1      		pop	hl
E259: 3A16E3  	rdbuf7:	ld	a,(starting)	;yes, backup the cursor to here.
E25C: 2117E3  		ld	hl,curpos
E25F: BE      		cp	(hl)
E260: D2ECE1  		jp	nc,rdbuff	;done yet?
E263: 35      		dec	(hl)		;no, decrement pointer and output back up one space.
E264: CDAFE1  		call	backup
E267: C359E2  		jp	rdbuf7
E26A: FE15    	rdbuf8:	cp	cntrlu		;cntrol-u (cancel line)?
E26C: C276E2  		jp	nz,rdbuf9
E26F: CDBCE1  		call	newline		;start a new line.
E272: E1      		pop	hl
E273: C3ECE1  		jp	rdbuff
E276: FE12    	rdbuf9:	cp	cntrlr		;control-r?
E278: C2B1E2  		jp	nz,rdbuf14
E27B: C5      	rdbuf10:push	bc		;yes, start a new line and retype the old one.
E27C: CDBCE1  		call	newline
E27F: C1      		pop	bc
E280: E1      		pop	hl
E281: E5      		push	hl
E282: C5      		push	bc
E283: 78      	rdbuf11:ld	a,b		;done whole line yet?
E284: B7      		or	a
E285: CA95E2  		jp	z,rdbuf12
E288: 23      		inc	hl		;nope, get next character.
E289: 4E      		ld	c,(hl)
E28A: 05      		dec	b		;count it.
E28B: C5      		push	bc
E28C: E5      		push	hl
E28D: CD8AE1  		call	showit		;and display it.
E290: E1      		pop	hl
E291: C1      		pop	bc
E292: C383E2  		jp	rdbuf11
E295: E5      	rdbuf12:push	hl		;done with line. if we were displaying
E296: 3A15E3  		ld	a,(outflag)	;then update cursor position.
E299: B7      		or	a
E29A: CAFCE1  		jp	z,rdbuf2
E29D: 2117E3  		ld	hl,curpos	;because this line is shorter, we must
E2A0: 96      		sub	(hl)		;back up the cursor (not the screen however)
E2A1: 3215E3  		ld	(outflag),a	;some number of positions.
E2A4: CDAFE1  	rdbuf13:call	backup		;note that as long as (outflag) is non
E2A7: 2115E3  		ld	hl,outflag	;zero, the screen will not be changed.
E2AA: 35      		dec	(hl)
E2AB: C2A4E2  		jp	nz,rdbuf13
E2AE: C3FCE1  		jp	rdbuf2		;now just get the next character.
              	;
              	;   just a normal character, put this in our buffer and echo.
              	;
E2B1: 23      	rdbuf14:inc	hl
E2B2: 77      		ld	(hl),a		;store character.
E2B3: 04      		inc	b		;and count it.
E2B4: C5      	rdbuf15:push	bc
E2B5: E5      		push	hl
E2B6: 4F      		ld	c,a		;echo it now.
E2B7: CD8AE1  		call	showit
E2BA: E1      		pop	hl
E2BB: C1      		pop	bc
E2BC: 7E      		ld	a,(hl)		;was it an abort request?
E2BD: FE03    		cp	cntrlc		;control-c abort?
E2BF: 78      		ld	a,b
E2C0: C2C8E2  		jp	nz,rdbuf16
E2C3: FE01    		cp	1		;only if at start of line.
E2C5: CA0000  		jp	z,0
E2C8: B9      	rdbuf16:cp	c		;nope, have we filled the buffer?
E2C9: DAFAE1  		jp	c,rdbuf1
E2CC: E1      	rdbuf17:pop	hl		;yes end the line and return.
E2CD: 70      		ld	(hl),b
E2CE: 0E0D    		ld	c,cr
E2D0: C353E1  		jp	outchar		;output (cr) and return.
              	;
              	;   function to get a character from the console device.
              	;
E2D3: CD11E1  	getcon:	call	getecho		;get and echo.
E2D6: C30CE3  		jp	setstat		;save status and return.
              	;
              	;   function to get a character from the tape reader device.
              	;
E2D9: CDDDEE  	getrdr:	call	reader		;get a character from reader, set status and return.
E2DC: C30CE3  		jp	setstat
              	;
              	;  function to perform direct console i/o. if (c) contains (ff)
              	; then this is an input request. if (c) contains (fe) then
              	; this is a status request. otherwise we are to output (c).
              	;
E2DF: 79      	dircio:	ld	a,c		;test for (ff).
E2E0: 3C      		inc	a
E2E1: CAEBE2  		jp	z,dirc1
E2E4: 3C      		inc	a		;test for (fe).
E2E5: CAB2EE  		jp	z,const
E2E8: C3C9EE  		jp	conout		;just output (c).
E2EB: CDB2EE  	dirc1:	call	const		;this is an input request.
E2EE: B7      		or	a
E2EF: CA9CED  		jp	z,goback1	;not ready? just return (directly).
E2F2: CDBDEE  		call	conin		;yes, get character.
E2F5: C30CE3  		jp	setstat		;set status and return.
              	;
              	;   function to return the i/o byte.
              	;
E2F8: 3A0300  	getiob:	ld	a,(iobyte)
E2FB: C30CE3  		jp	setstat
              	;
              	;   function to set the i/o byte.
              	;
E2FE: 210300  	setiob:	ld	hl,iobyte
E301: 71      		ld	(hl),c
E302: C9      		ret	
              	;
              	;   function to print the character string pointed to by (de)
              	; on the console device. the string ends with a '$'.
              	;
E303: EB      	prtstr:	ex	de,hl
E304: 4D      		ld	c,l
E305: 44      		ld	b,h		;now (bc) points to it.
E306: C3DEE1  		jp	prtmesg
              	;
              	;   function to interigate the console device.
              	;
E309: CD2EE1  	getcsts:call	ckconsol
              	;
              	;   get here to set the status and return to the cleanup
              	; section. then back to the user.
              	;
E30C: 3250E3  	setstat:ld	(status),a
E30F: C9      	rtn:	ret	
              	;
              	;   set the status to 1 (read or write error code).
              	;
E310: 3E01    	ioerr1:	ld	a,1
E312: C30CE3  		jp	setstat
              	;
E315: 00      	outflag:defb	0		;output flag (non zero means no output).
E316: 02      	starting: defb	2		;starting position for cursor.
E317: 00      	curpos:	defb	0		;cursor position (0=start of line).
E318: 00      	prtflag:defb	0		;printer flag (control-p toggle). list if non zero.
E319: 00      	charbuf:defb	0		;single input character buffer.
              	;
              	;   stack area for bdos calls.
              	;
E31A: 0000    	usrstack: defw	0		;save users stack pointer here.
              	;
E31C: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
E320: 00...   	
E334: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
E338: 00...   	
E34C:         	stkarea equ	$		;end of stack area.
              	;
E34C: 00      	userno:	defb	0		;current user number.
E34D: 00      	active:	defb	0		;currently active drive.
E34E: 0000    	params:	defw	0		;save (de) parameters here on entry.
E350: 0000    	status:	defw	0		;status returned from bdos function.
              	;
              	;   select error occured, jump to error routine.
              	;
E352: 210EE0  	slcterr:ld	hl,badslct
              	;
              	;   jump to (hl) indirectly.
              	;
E355: 5E      	jumphl:	ld	e,(hl)
E356: 23      		inc	hl
E357: 56      		ld	d,(hl)		;now (de) contain the desired address.
E358: EB      		ex	de,hl
E359: E9      		jp	(hl)
              	;
              	;   block move. (de) to (hl), (c) bytes total.
              	;
E35A: 0C      	de2hl:	inc	c		;is count down to zero?
E35B: 0D      	de2hl1:	dec	c
E35C: C8      		ret	z		;yes, we are done.
E35D: 1A      		ld	a,(de)		;no, move one more byte.
E35E: 77      		ld	(hl),a
E35F: 13      		inc	de
E360: 23      		inc	hl
E361: C35BE3  		jp	de2hl1		;and repeat.
              	;
              	;   select the desired drive.
              	;
E364: 3A4DE3  	select:	ld	a,(active)	;get active disk.
E367: 4F      		ld	c,a
E368: CDF0EE  		call	seldsk		;select it.
E36B: 7C      		ld	a,h		;valid drive?
E36C: B5      		or	l		;valid drive?
E36D: C8      		ret	z		;return if not.
              	;
              	;   here, the bios returned the address of the parameter block
              	; in (hl). we will extract the necessary pointers and save them.
              	;
E36E: 5E      		ld	e,(hl)		;yes, get address of translation table into (de).
E36F: 23      		inc	hl
E370: 56      		ld	d,(hl)
E371: 23      		inc	hl
E372: 22BEED  		ld	(scratch1),hl	;save pointers to scratch areas.
E375: 23      		inc	hl
E376: 23      		inc	hl
E377: 22C0ED  		ld	(scratch2),hl	;ditto.
E37A: 23      		inc	hl
E37B: 23      		inc	hl
E37C: 22C2ED  		ld	(scratch3),hl	;ditto.
E37F: 23      		inc	hl
E380: 23      		inc	hl
E381: EB      		ex	de,hl		;now save the translation table address.
E382: 22DBED  		ld	(xlate),hl
E385: 21C4ED  		ld	hl,dirbuf	;put the next 8 bytes here.
E388: 0E08    		ld	c,8		;they consist of the directory buffer
E38A: CD5AE3  		call	de2hl		;pointer, parameter block pointer,
E38D: 2AC6ED  		ld	hl,(diskpb)	;check and allocation vectors.
E390: EB      		ex	de,hl
E391: 21CCED  		ld	hl,sectors	;move parameter block into our ram.
E394: 0E0F    		ld	c,15		;it is 15 bytes long.
E396: CD5AE3  		call	de2hl
E399: 2AD1ED  		ld	hl,(dsksize)	;check disk size.
E39C: 7C      		ld	a,h		;more than 256 blocks on this?
E39D: 21E8ED  		ld	hl,bigdisk
E3A0: 36FF    		ld	(hl),0ffh	;set to samll.
E3A2: B7      		or	a
E3A3: CAA8E3  		jp	z,select1
E3A6: 3600    		ld	(hl),0		;wrong, set to large.
E3A8: 3EFF    	select1:ld	a,0ffh		;clear the zero flag.
E3AA: B7      		or	a
E3AB: C9      		ret	
              	;
              	;   routine to home the disk track head and clear pointers.
              	;
E3AC: CDEBEE  	homedrv:call	home		;home the head.
E3AF: AF      		xor	a
E3B0: 2AC0ED  		ld	hl,(scratch2)	;set our track pointer also.
E3B3: 77      		ld	(hl),a
E3B4: 23      		inc	hl
E3B5: 77      		ld	(hl),a
E3B6: 2AC2ED  		ld	hl,(scratch3)	;and our sector pointer.
E3B9: 77      		ld	(hl),a
E3BA: 23      		inc	hl
E3BB: 77      		ld	(hl),a
E3BC: C9      		ret	
              	;
              	;   do the actual disk read and check the error return status.
              	;
E3BD: CD1CEF  	doread:	call	read
E3C0: C3C6E3  		jp	ioret
              	;
              	;   do the actual disk write and handle any bios error.
              	;
E3C3: CD20EF  	dowrite:call	write
E3C6: B7      	ioret:	or	a
E3C7: C8      		ret	z		;return unless an error occured.
E3C8: 210CE0  		ld	hl,badsctr	;bad read/write on this sector.
E3CB: C355E3  		jp	jumphl
              	;
              	;   routine to select the track and sector that the desired
              	; block number falls in.
              	;
E3CE: 2AF5ED  	trksec:	ld	hl,(filepos)	;get position of last accessed file
E3D1: 0E02    		ld	c,2		;in directory and compute sector #.
E3D3: CDF5E4  		call	shiftr		;sector #=file-position/4.
E3D6: 22F0ED  		ld	(blknmbr),hl	;save this as the block number of interest.
E3D9: 22F7ED  		ld	(cksumtbl),hl	;what's it doing here too?
              	;
              	;   if the sector number has already been set (blknmbr), enter
              	; at this point.
              	;
E3DC: 21F0ED  	trksec1:ld	hl,blknmbr
E3DF: 4E      		ld	c,(hl)		;move sector number into (bc).
E3E0: 23      		inc	hl
E3E1: 46      		ld	b,(hl)
E3E2: 2AC2ED  		ld	hl,(scratch3)	;get current sector number and
E3E5: 5E      		ld	e,(hl)		;move this into (de).
E3E6: 23      		inc	hl
E3E7: 56      		ld	d,(hl)
E3E8: 2AC0ED  		ld	hl,(scratch2)	;get current track number.
E3EB: 7E      		ld	a,(hl)		;and this into (hl).
E3EC: 23      		inc	hl
E3ED: 66      		ld	h,(hl)
E3EE: 6F      		ld	l,a
E3EF: 79      	trksec2:ld	a,c		;is desired sector before current one?
E3F0: 93      		sub	e
E3F1: 78      		ld	a,b
E3F2: 9A      		sbc	a,d
E3F3: D205E4  		jp	nc,trksec3
E3F6: E5      		push	hl		;yes, decrement sectors by one track.
E3F7: 2ACCED  		ld	hl,(sectors)	;get sectors per track.
E3FA: 7B      		ld	a,e
E3FB: 95      		sub	l
E3FC: 5F      		ld	e,a
E3FD: 7A      		ld	a,d
E3FE: 9C      		sbc	a,h
E3FF: 57      		ld	d,a		;now we have backed up one full track.
E400: E1      		pop	hl
E401: 2B      		dec	hl		;adjust track counter.
E402: C3EFE3  		jp	trksec2
E405: E5      	trksec3:push	hl		;desired sector is after current one.
E406: 2ACCED  		ld	hl,(sectors)	;get sectors per track.
E409: 19      		add	hl,de		;bump sector pointer to next track.
E40A: DA1AE4  		jp	c,trksec4
E40D: 79      		ld	a,c		;is desired sector now before current one?
E40E: 95      		sub	l
E40F: 78      		ld	a,b
E410: 9C      		sbc	a,h
E411: DA1AE4  		jp	c,trksec4
E414: EB      		ex	de,hl		;not yes, increment track counter
E415: E1      		pop	hl		;and continue until it is.
E416: 23      		inc	hl
E417: C305E4  		jp	trksec3
              	;
              	;   here we have determined the track number that contains the
              	; desired sector.
              	;
E41A: E1      	trksec4:pop	hl		;get track number (hl).
E41B: C5      		push	bc
E41C: D5      		push	de
E41D: E5      		push	hl
E41E: EB      		ex	de,hl
E41F: 2AD9ED  		ld	hl,(offset)	;adjust for first track offset.
E422: 19      		add	hl,de
E423: 44      		ld	b,h
E424: 4D      		ld	c,l
E425: CD0EEF  		call	settrk		;select this track.
E428: D1      		pop	de		;reset current track pointer.
E429: 2AC0ED  		ld	hl,(scratch2)
E42C: 73      		ld	(hl),e
E42D: 23      		inc	hl
E42E: 72      		ld	(hl),d
E42F: D1      		pop	de
E430: 2AC2ED  		ld	hl,(scratch3)	;reset the first sector on this track.
E433: 73      		ld	(hl),e
E434: 23      		inc	hl
E435: 72      		ld	(hl),d
E436: C1      		pop	bc
E437: 79      		ld	a,c		;now subtract the desired one.
E438: 93      		sub	e		;to make it relative (1-# sectors/track).
E439: 4F      		ld	c,a
E43A: 78      		ld	a,b
E43B: 9A      		sbc	a,d
E43C: 47      		ld	b,a
E43D: 2ADBED  		ld	hl,(xlate)	;translate this sector according to this table.
E440: EB      		ex	de,hl
E441: CD27EF  		call	sectrn		;let the bios translate it.
E444: 4D      		ld	c,l
E445: 44      		ld	b,h
E446: C312EF  		jp	setsec		;and select it.
              	;
              	;   compute block number from record number (savnrec) and
              	; extent number (savext).
              	;
E449: 21CEED  	getblock: ld	hl,blkshft	;get logical to physical conversion.
E44C: 4E      		ld	c,(hl)		;note that this is base 2 log of ratio.
E44D: 3AEEED  		ld	a,(savnrec)	;get record number.
E450: B7      	getblk1:or	a		;compute (a)=(a)/2^blkshft.
E451: 1F      		rra	
E452: 0D      		dec	c
E453: C250E4  		jp	nz,getblk1
E456: 47      		ld	b,a		;save result in (b).
E457: 3E08    		ld	a,8
E459: 96      		sub	(hl)
E45A: 4F      		ld	c,a		;compute (c)=8-blkshft.
E45B: 3AEDED  		ld	a,(savext)
E45E: 0D      	getblk2:dec	c		;compute (a)=savext*2^(8-blkshft).
E45F: CA67E4  		jp	z,getblk3
E462: B7      		or	a
E463: 17      		rla	
E464: C35EE4  		jp	getblk2
E467: 80      	getblk3:add	a,b
E468: C9      		ret	
              	;
              	;   routine to extract the (bc) block byte from the fcb pointed
              	; to by (params). if this is a big-disk, then these are 16 bit
              	; block numbers, else they are 8 bit numbers.
              	; number is returned in (hl).
              	;
E469: 2A4EE3  	extblk:	ld	hl,(params)	;get fcb address.
E46C: 111000  		ld	de,16		;block numbers start 16 bytes into fcb.
E46F: 19      		add	hl,de
E470: 09      		add	hl,bc
E471: 3AE8ED  		ld	a,(bigdisk)	;are we using a big-disk?
E474: B7      		or	a
E475: CA7CE4  		jp	z,extblk1
E478: 6E      		ld	l,(hl)		;no, extract an 8 bit number from the fcb.
E479: 2600    		ld	h,0
E47B: C9      		ret	
E47C: 09      	extblk1:add	hl,bc		;yes, extract a 16 bit number.
E47D: 5E      		ld	e,(hl)
E47E: 23      		inc	hl
E47F: 56      		ld	d,(hl)
E480: EB      		ex	de,hl		;return in (hl).
E481: C9      		ret	
              	;
              	;   compute block number.
              	;
E482: CD49E4  	comblk:	call	getblock
E485: 4F      		ld	c,a
E486: 0600    		ld	b,0
E488: CD69E4  		call	extblk
E48B: 22F0ED  		ld	(blknmbr),hl
E48E: C9      		ret	
              	;
              	;   check for a zero block number (unused).
              	;
E48F: 2AF0ED  	chkblk:	ld	hl,(blknmbr)
E492: 7D      		ld	a,l		;is it zero?
E493: B4      		or	h
E494: C9      		ret	
              	;
              	;   adjust physical block (blknmbr) and convert to logical
              	; sector (logsect). this is the starting sector of this block.
              	; the actual sector of interest is then added to this and the
              	; resulting sector number is stored back in (blknmbr). this
              	; will still have to be adjusted for the track number.
              	;
E495: 3ACEED  	logical:ld	a,(blkshft)	;get log2(physical/logical sectors).
E498: 2AF0ED  		ld	hl,(blknmbr)	;get physical sector desired.
E49B: 29      	logicl1:add	hl,hl		;compute logical sector number.
E49C: 3D      		dec	a		;note logical sectors are 128 bytes long.
E49D: C29BE4  		jp	nz,logicl1
E4A0: 22F2ED  		ld	(logsect),hl	;save logical sector.
E4A3: 3ACFED  		ld	a,(blkmask)	;get block mask.
E4A6: 4F      		ld	c,a
E4A7: 3AEEED  		ld	a,(savnrec)	;get next sector to access.
E4AA: A1      		and	c		;extract the relative position within physical block.
E4AB: B5      		or	l		;and add it too logical sector.
E4AC: 6F      		ld	l,a
E4AD: 22F0ED  		ld	(blknmbr),hl	;and store.
E4B0: C9      		ret	
              	;
              	;   set (hl) to point to extent byte in fcb.
              	;
E4B1: 2A4EE3  	setext:	ld	hl,(params)
E4B4: 110C00  		ld	de,12		;it is the twelth byte.
E4B7: 19      		add	hl,de
E4B8: C9      		ret	
              	;
              	;   set (hl) to point to record count byte in fcb and (de) to
              	; next record number byte.
              	;
E4B9: 2A4EE3  	sethlde:ld	hl,(params)
E4BC: 110F00  		ld	de,15		;record count byte (#15).
E4BF: 19      		add	hl,de
E4C0: EB      		ex	de,hl
E4C1: 211100  		ld	hl,17		;next record number (#32).
E4C4: 19      		add	hl,de
E4C5: C9      		ret	
              	;
              	;   save current file data from fcb.
              	;
E4C6: CDB9E4  	strdata:call	sethlde
E4C9: 7E      		ld	a,(hl)		;get and store record count byte.
E4CA: 32EEED  		ld	(savnrec),a
E4CD: EB      		ex	de,hl
E4CE: 7E      		ld	a,(hl)		;get and store next record number byte.
E4CF: 32ECED  		ld	(savnxt),a
E4D2: CDB1E4  		call	setext		;point to extent byte.
E4D5: 3AD0ED  		ld	a,(extmask)	;get extent mask.
E4D8: A6      		and	(hl)
E4D9: 32EDED  		ld	(savext),a	;and save extent here.
E4DC: C9      		ret	
              	;
              	;   set the next record to access. if (mode) is set to 2, then
              	; the last record byte (savnrec) has the correct number to access.
              	; for sequential access, (mode) will be equal to 1.
              	;
E4DD: CDB9E4  	setnrec:call	sethlde
E4E0: 3AE0ED  		ld	a,(mode)	;get sequential flag (=1).
E4E3: FE02    		cp	2		;a 2 indicates that no adder is needed.
E4E5: C2E9E4  		jp	nz,stnrec1
E4E8: AF      		xor	a		;clear adder (random access?).
E4E9: 4F      	stnrec1:ld	c,a
E4EA: 3AEEED  		ld	a,(savnrec)	;get last record number.
E4ED: 81      		add	a,c		;increment record count.
E4EE: 77      		ld	(hl),a		;and set fcb's next record byte.
E4EF: EB      		ex	de,hl
E4F0: 3AECED  		ld	a,(savnxt)	;get next record byte from storage.
E4F3: 77      		ld	(hl),a		;and put this into fcb as number of records used.
E4F4: C9      		ret	
              	;
              	;   shift (hl) right (c) bits.
              	;
E4F5: 0C      	shiftr:	inc	c
E4F6: 0D      	shiftr1:dec	c
E4F7: C8      		ret	z
E4F8: 7C      		ld	a,h
E4F9: B7      		or	a
E4FA: 1F      		rra	
E4FB: 67      		ld	h,a
E4FC: 7D      		ld	a,l
E4FD: 1F      		rra	
E4FE: 6F      		ld	l,a
E4FF: C3F6E4  		jp	shiftr1
              	;
              	;   compute the check-sum for the directory buffer. return
              	; integer sum in (a).
              	;
E502: 0E80    	checksum: ld	c,128		;length of buffer.
E504: 2AC4ED  		ld	hl,(dirbuf)	;get its location.
E507: AF      		xor	a		;clear summation byte.
E508: 86      	chksum1:add	a,(hl)		;and compute sum ignoring carries.
E509: 23      		inc	hl
E50A: 0D      		dec	c
E50B: C208E5  		jp	nz,chksum1
E50E: C9      		ret	
              	;
              	;   shift (hl) left (c) bits.
              	;
E50F: 0C      	shiftl:	inc	c
E510: 0D      	shiftl1:dec	c
E511: C8      		ret	z
E512: 29      		add	hl,hl		;shift left 1 bit.
E513: C310E5  		jp	shiftl1
              	;
              	;   routine to set a bit in a 16 bit value contained in (bc).
              	; the bit set depends on the current drive selection.
              	;
E516: C5      	setbit:	push	bc		;save 16 bit word.
E517: 3A4DE3  		ld	a,(active)	;get active drive.
E51A: 4F      		ld	c,a
E51B: 210100  		ld	hl,1
E51E: CD0FE5  		call	shiftl		;shift bit 0 into place.
E521: C1      		pop	bc		;now 'or' this with the original word.
E522: 79      		ld	a,c
E523: B5      		or	l
E524: 6F      		ld	l,a		;low byte done, do high byte.
E525: 78      		ld	a,b
E526: B4      		or	h
E527: 67      		ld	h,a
E528: C9      		ret	
              	;
              	;   extract the write protect status bit for the current drive.
              	; the result is returned in (a), bit 0.
              	;
E529: 2AB8ED  	getwprt:ld	hl,(wrtprt)	;get status bytes.
E52C: 3A4DE3  		ld	a,(active)	;which drive is current?
E52F: 4F      		ld	c,a
E530: CDF5E4  		call	shiftr		;shift status such that bit 0 is the
E533: 7D      		ld	a,l		;one of interest for this drive.
E534: E601    		and	01h		;and isolate it.
E536: C9      		ret	
              	;
              	;   function to write protect the current disk.
              	;
E537: 21B8ED  	wrtprtd:ld	hl,wrtprt	;point to status word.
E53A: 4E      		ld	c,(hl)		;set (bc) equal to the status.
E53B: 23      		inc	hl
E53C: 46      		ld	b,(hl)
E53D: CD16E5  		call	setbit		;and set this bit according to current drive.
E540: 22B8ED  		ld	(wrtprt),hl	;then save.
E543: 2AD3ED  		ld	hl,(dirsize)	;now save directory size limit.
E546: 23      		inc	hl		;remember the last one.
E547: EB      		ex	de,hl
E548: 2ABEED  		ld	hl,(scratch1)	;and store it here.
E54B: 73      		ld	(hl),e		;put low byte.
E54C: 23      		inc	hl
E54D: 72      		ld	(hl),d		;then high byte.
E54E: C9      		ret	
              	;
              	;   check for a read only file.
              	;
E54F: CD69E5  	chkrofl:call	fcb2hl		;set (hl) to file entry in directory buffer.
E552: 110900  	ckrof1:	ld	de,9		;look at bit 7 of the ninth byte.
E555: 19      		add	hl,de
E556: 7E      		ld	a,(hl)
E557: 17      		rla	
E558: D0      		ret	nc		;return if ok.
E559: 2112E0  		ld	hl,rofile	;else, print error message and terminate.
E55C: C355E3  		jp	jumphl
              	;
              	;   check the write protect status of the active disk.
              	;
E55F: CD29E5  	chkwprt:call	getwprt
E562: C8      		ret	z		;return if ok.
E563: 2110E0  		ld	hl,rodisk	;else print message and terminate.
E566: C355E3  		jp	jumphl
              	;
              	;   routine to set (hl) pointing to the proper entry in the
              	; directory buffer.
              	;
E569: 2AC4ED  	fcb2hl:	ld	hl,(dirbuf)	;get address of buffer.
E56C: 3AF4ED  		ld	a,(fcbpos)	;relative position of file.
              	;
              	;   routine to add (a) to (hl).
              	;
E56F: 85      	adda2hl:add	a,l
E570: 6F      		ld	l,a
E571: D0      		ret	nc
E572: 24      		inc	h		;take care of any carry.
E573: C9      		ret	
              	;
              	;   routine to get the 's2' byte from the fcb supplied in
              	; the initial parameter specification.
              	;
E574: 2A4EE3  	gets2:	ld	hl,(params)	;get address of fcb.
E577: 110E00  		ld	de,14		;relative position of 's2'.
E57A: 19      		add	hl,de
E57B: 7E      		ld	a,(hl)		;extract this byte.
E57C: C9      		ret	
              	;
              	;   clear the 's2' byte in the fcb.
              	;
E57D: CD74E5  	clears2:call	gets2		;this sets (hl) pointing to it.
E580: 3600    		ld	(hl),0		;now clear it.
E582: C9      		ret	
              	;
              	;   set bit 7 in the 's2' byte of the fcb.
              	;
E583: CD74E5  	sets2b7:call	gets2		;get the byte.
E586: F680    		or	80h		;and set bit 7.
E588: 77      		ld	(hl),a		;then store.
E589: C9      		ret	
              	;
              	;   compare (filepos) with (scratch1) and set flags based on
              	; the difference. this checks to see if there are more file
              	; names in the directory. we are at (filepos) and there are
              	; (scratch1) of them to check.
              	;
E58A: 2AF5ED  	morefls:ld	hl,(filepos)	;we are here.
E58D: EB      		ex	de,hl
E58E: 2ABEED  		ld	hl,(scratch1)	;and don't go past here.
E591: 7B      		ld	a,e		;compute difference but don't keep.
E592: 96      		sub	(hl)
E593: 23      		inc	hl
E594: 7A      		ld	a,d
E595: 9E      		sbc	a,(hl)		;set carry if no more names.
E596: C9      		ret	
              	;
              	;   call this routine to prevent (scratch1) from being greater
              	; than (filepos).
              	;
E597: CD8AE5  	chknmbr:call	morefls		;scratch1 too big?
E59A: D8      		ret	c
E59B: 13      		inc	de		;yes, reset it to (filepos).
E59C: 72      		ld	(hl),d
E59D: 2B      		dec	hl
E59E: 73      		ld	(hl),e
E59F: C9      		ret	
              	;
              	;   compute (hl)=(de)-(hl)
              	;
E5A0: 7B      	subhl:	ld	a,e		;compute difference.
E5A1: 95      		sub	l
E5A2: 6F      		ld	l,a		;store low byte.
E5A3: 7A      		ld	a,d
E5A4: 9C      		sbc	a,h
E5A5: 67      		ld	h,a		;and then high byte.
E5A6: C9      		ret	
              	;
              	;   set the directory checksum byte.
              	;
E5A7: 0EFF    	setdir:	ld	c,0ffh
              	;
              	;   routine to set or compare the directory checksum byte. if
              	; (c)=0ffh, then this will set the checksum byte. else the byte
              	; will be checked. if the check fails (the disk has been changed),
              	; then this disk will be write protected.
              	;
E5A9: 2AF7ED  	checkdir: ld	hl,(cksumtbl)
E5AC: EB      		ex	de,hl
E5AD: 2AD7ED  		ld	hl,(alloc1)
E5B0: CDA0E5  		call	subhl
E5B3: D0      		ret	nc		;ok if (cksumtbl) > (alloc1), so return.
E5B4: C5      		push	bc
E5B5: CD02E5  		call	checksum	;else compute checksum.
E5B8: 2AC8ED  		ld	hl,(chkvect)	;get address of checksum table.
E5BB: EB      		ex	de,hl
E5BC: 2AF7ED  		ld	hl,(cksumtbl)
E5BF: 19      		add	hl,de		;set (hl) to point to byte for this drive.
E5C0: C1      		pop	bc
E5C1: 0C      		inc	c		;set or check ?
E5C2: CACFE5  		jp	z,chkdir1
E5C5: BE      		cp	(hl)		;check them.
E5C6: C8      		ret	z		;return if they are the same.
E5C7: CD8AE5  		call	morefls		;not the same, do we care?
E5CA: D0      		ret	nc
E5CB: CD37E5  		call	wrtprtd		;yes, mark this as write protected.
E5CE: C9      		ret	
E5CF: 77      	chkdir1:ld	(hl),a		;just set the byte.
E5D0: C9      		ret	
              	;
              	;   do a write to the directory of the current disk.
              	;
E5D1: CDA7E5  	dirwrite: call	setdir		;set checksum byte.
E5D4: CDEBE5  		call	dirdma		;set directory dma address.
E5D7: 0E01    		ld	c,1		;tell the bios to actually write.
E5D9: CDC3E3  		call	dowrite		;then do the write.
E5DC: C3E5E5  		jp	defdma
              	;
              	;   read from the directory.
              	;
E5DF: CDEBE5  	dirread:call	dirdma		;set the directory dma address.
E5E2: CDBDE3  		call	doread		;and read it.
              	;
              	;   routine to set the dma address to the users choice.
              	;
E5E5: 21BCED  	defdma:	ld	hl,userdma	;reset the default dma address and return.
E5E8: C3EEE5  		jp	dirdma1
              	;
              	;   routine to set the dma address for directory work.
              	;
E5EB: 21C4ED  	dirdma:	ld	hl,dirbuf
              	;
              	;   set the dma address. on entry, (hl) points to
              	; word containing the desired dma address.
              	;
E5EE: 4E      	dirdma1:ld	c,(hl)
E5EF: 23      		inc	hl
E5F0: 46      		ld	b,(hl)		;setup (bc) and go to the bios to set it.
E5F1: C316EF  		jp	setdma
              	;
              	;   move the directory buffer into user's dma space.
              	;
E5F4: 2AC4ED  	movedir:ld	hl,(dirbuf)	;buffer is located here, and
E5F7: EB      		ex	de,hl
E5F8: 2ABCED  		ld	hl,(userdma)	; put it here.
E5FB: 0E80    		ld	c,128		;this is its length.
E5FD: C35AE3  		jp	de2hl		;move it now and return.
              	;
              	;   check (filepos) and set the zero flag if it equals 0ffffh.
              	;
E600: 21F5ED  	ckfilpos: ld	hl,filepos
E603: 7E      		ld	a,(hl)
E604: 23      		inc	hl
E605: BE      		cp	(hl)		;are both bytes the same?
E606: C0      		ret	nz
E607: 3C      		inc	a		;yes, but are they each 0ffh?
E608: C9      		ret	
              	;
              	;   set location (filepos) to 0ffffh.
              	;
E609: 21FFFF  	stfilpos: ld	hl,0ffffh
E60C: 22F5ED  		ld	(filepos),hl
E60F: C9      		ret	
              	;
              	;   move on to the next file position within the current
              	; directory buffer. if no more exist, set pointer to 0ffffh
              	; and the calling routine will check for this. enter with (c)
              	; equal to 0ffh to cause the checksum byte to be set, else we
              	; will check this disk and set write protect if checksums are
              	; not the same (applies only if another directory sector must
              	; be read).
              	;
E610: 2AD3ED  	nxentry:ld	hl,(dirsize)	;get directory entry size limit.
E613: EB      		ex	de,hl
E614: 2AF5ED  		ld	hl,(filepos)	;get current count.
E617: 23      		inc	hl		;go on to the next one.
E618: 22F5ED  		ld	(filepos),hl
E61B: CDA0E5  		call	subhl		;(hl)=(dirsize)-(filepos)
E61E: D224E6  		jp	nc,nxent1	;is there more room left?
E621: C309E6  		jp	stfilpos	;no. set this flag and return.
E624: 3AF5ED  	nxent1:	ld	a,(filepos)	;get file position within directory.
E627: E603    		and	03h		;only look within this sector (only 4 entries fit).
E629: 0605    		ld	b,5		;convert to relative position (32 bytes each).
E62B: 87      	nxent2:	add	a,a		;note that this is not efficient code.
E62C: 05      		dec	b		;5 'add a's would be better.
E62D: C22BE6  		jp	nz,nxent2
E630: 32F4ED  		ld	(fcbpos),a	;save it as position of fcb.
E633: B7      		or	a
E634: C0      		ret	nz		;return if we are within buffer.
E635: C5      		push	bc
E636: CDCEE3  		call	trksec		;we need the next directory sector.
E639: CDDFE5  		call	dirread
E63C: C1      		pop	bc
E63D: C3A9E5  		jp	checkdir
              	;
              	;   routine to to get a bit from the disk space allocation
              	; map. it is returned in (a), bit position 0. on entry to here,
              	; set (bc) to the block number on the disk to check.
              	; on return, (d) will contain the original bit position for
              	; this block number and (hl) will point to the address for it.
              	;
E640: 79      	ckbitmap: ld	a,c		;determine bit number of interest.
E641: E607    		and	07h		;compute (d)=(e)=(c and 7)+1.
E643: 3C      		inc	a
E644: 5F      		ld	e,a		;save particular bit number.
E645: 57      		ld	d,a
              	;
              	;   compute (bc)=(bc)/8.
              	;
E646: 79      		ld	a,c
E647: 0F      		rrca			;now shift right 3 bits.
E648: 0F      		rrca	
E649: 0F      		rrca	
E64A: E61F    		and	1fh		;and clear bits 7,6,5.
E64C: 4F      		ld	c,a
E64D: 78      		ld	a,b
E64E: 87      		add	a,a		;now shift (b) into bits 7,6,5.
E64F: 87      		add	a,a
E650: 87      		add	a,a
E651: 87      		add	a,a
E652: 87      		add	a,a
E653: B1      		or	c		;and add in (c).
E654: 4F      		ld	c,a		;ok, (c) ha been completed.
E655: 78      		ld	a,b		;is there a better way of doing this?
E656: 0F      		rrca	
E657: 0F      		rrca	
E658: 0F      		rrca	
E659: E61F    		and	1fh
E65B: 47      		ld	b,a		;and now (b) is completed.
              	;
              	;   use this as an offset into the disk space allocation
              	; table.
              	;
E65C: 2ACAED  		ld	hl,(alocvect)
E65F: 09      		add	hl,bc
E660: 7E      		ld	a,(hl)		;now get correct byte.
E661: 07      	ckbmap1:rlca			;get correct bit into position 0.
E662: 1D      		dec	e
E663: C261E6  		jp	nz,ckbmap1
E666: C9      		ret	
              	;
              	;   set or clear the bit map such that block number (bc) will be marked
              	; as used. on entry, if (e)=0 then this bit will be cleared, if it equals
              	; 1 then it will be set (don't use anyother values).
              	;
E667: D5      	stbitmap: push	de
E668: CD40E6  		call	ckbitmap	;get the byte of interest.
E66B: E6FE    		and	0feh		;clear the affected bit.
E66D: C1      		pop	bc
E66E: B1      		or	c		;and now set it acording to (c).
              	;
              	;  entry to restore the original bit position and then store
              	; in table. (a) contains the value, (d) contains the bit
              	; position (1-8), and (hl) points to the address within the
              	; space allocation table for this byte.
              	;
E66F: 0F      	stbmap1:rrca			;restore original bit position.
E670: 15      		dec	d
E671: C26FE6  		jp	nz,stbmap1
E674: 77      		ld	(hl),a		;and stor byte in table.
E675: C9      		ret	
              	;
              	;   set/clear space used bits in allocation map for this file.
              	; on entry, (c)=1 to set the map and (c)=0 to clear it.
              	;
E676: CD69E5  	setfile:call	fcb2hl		;get address of fcb
E679: 111000  		ld	de,16
E67C: 19      		add	hl,de		;get to block number bytes.
E67D: C5      		push	bc
E67E: 0E11    		ld	c,17		;check all 17 bytes (max) of table.
E680: D1      	setfl1:	pop	de
E681: 0D      		dec	c		;done all bytes yet?
E682: C8      		ret	z
E683: D5      		push	de
E684: 3AE8ED  		ld	a,(bigdisk)	;check disk size for 16 bit block numbers.
E687: B7      		or	a
E688: CA93E6  		jp	z,setfl2
E68B: C5      		push	bc		;only 8 bit numbers. set (bc) to this one.
E68C: E5      		push	hl
E68D: 4E      		ld	c,(hl)		;get low byte from table, always
E68E: 0600    		ld	b,0		;set high byte to zero.
E690: C399E6  		jp	setfl3
E693: 0D      	setfl2:	dec	c		;for 16 bit block numbers, adjust counter.
E694: C5      		push	bc
E695: 4E      		ld	c,(hl)		;now get both the low and high bytes.
E696: 23      		inc	hl
E697: 46      		ld	b,(hl)
E698: E5      		push	hl
E699: 79      	setfl3:	ld	a,c		;block used?
E69A: B0      		or	b
E69B: CAA8E6  		jp	z,setfl4
E69E: 2AD1ED  		ld	hl,(dsksize)	;is this block number within the
E6A1: 7D      		ld	a,l		;space on the disk?
E6A2: 91      		sub	c
E6A3: 7C      		ld	a,h
E6A4: 98      		sbc	a,b
E6A5: D467E6  		call	nc,stbitmap	;yes, set the proper bit.
E6A8: E1      	setfl4:	pop	hl		;point to next block number in fcb.
E6A9: 23      		inc	hl
E6AA: C1      		pop	bc
E6AB: C380E6  		jp	setfl1
              	;
              	;   construct the space used allocation bit map for the active
              	; drive. if a file name starts with '$' and it is under the
              	; current user number, then (status) is set to minus 1. otherwise
              	; it is not set at all.
              	;
E6AE: 2AD1ED  	bitmap:	ld	hl,(dsksize)	;compute size of allocation table.
E6B1: 0E03    		ld	c,3
E6B3: CDF5E4  		call	shiftr		;(hl)=(hl)/8.
E6B6: 23      		inc	hl		;at lease 1 byte.
E6B7: 44      		ld	b,h
E6B8: 4D      		ld	c,l		;set (bc) to the allocation table length.
              	;
              	;   initialize the bitmap for this drive. right now, the first
              	; two bytes are specified by the disk parameter block. however
              	; a patch could be entered here if it were necessary to setup
              	; this table in a special mannor. for example, the bios could
              	; determine locations of 'bad blocks' and set them as already
              	; 'used' in the map.
              	;
E6B9: 2ACAED  		ld	hl,(alocvect)	;now zero out the table now.
E6BC: 3600    	bitmap1:ld	(hl),0
E6BE: 23      		inc	hl
E6BF: 0B      		dec	bc
E6C0: 78      		ld	a,b
E6C1: B1      		or	c
E6C2: C2BCE6  		jp	nz,bitmap1
E6C5: 2AD5ED  		ld	hl,(alloc0)	;get initial space used by directory.
E6C8: EB      		ex	de,hl
E6C9: 2ACAED  		ld	hl,(alocvect)	;and put this into map.
E6CC: 73      		ld	(hl),e
E6CD: 23      		inc	hl
E6CE: 72      		ld	(hl),d
              	;
              	;   end of initialization portion.
              	;
E6CF: CDACE3  		call	homedrv		;now home the drive.
E6D2: 2ABEED  		ld	hl,(scratch1)
E6D5: 3603    		ld	(hl),3		;force next directory request to read
E6D7: 23      		inc	hl		;in a sector.
E6D8: 3600    		ld	(hl),0
E6DA: CD09E6  		call	stfilpos	;clear initial file position also.
E6DD: 0EFF    	bitmap2:ld	c,0ffh		;read next file name in directory
E6DF: CD10E6  		call	nxentry		;and set checksum byte.
E6E2: CD00E6  		call	ckfilpos	;is there another file?
E6E5: C8      		ret	z
E6E6: CD69E5  		call	fcb2hl		;yes, get its address.
E6E9: 3EE5    		ld	a,0e5h
E6EB: BE      		cp	(hl)		;empty file entry?
E6EC: CADDE6  		jp	z,bitmap2
E6EF: 3A4CE3  		ld	a,(userno)	;no, correct user number?
E6F2: BE      		cp	(hl)
E6F3: C201E7  		jp	nz,bitmap3
E6F6: 23      		inc	hl
E6F7: 7E      		ld	a,(hl)		;yes, does name start with a '$'?
E6F8: D624    		sub	'$'
E6FA: C201E7  		jp	nz,bitmap3
E6FD: 3D      		dec	a		;yes, set atatus to minus one.
E6FE: 3250E3  		ld	(status),a
E701: 0E01    	bitmap3:ld	c,1		;now set this file's space as used in bit map.
E703: CD76E6  		call	setfile
E706: CD97E5  		call	chknmbr		;keep (scratch1) in bounds.
E709: C3DDE6  		jp	bitmap2
              	;
              	;   set the status (status) and return.
              	;
E70C: 3ADFED  	ststatus: ld	a,(fndstat)
E70F: C30CE3  		jp	setstat
              	;
              	;   check extents in (a) and (c). set the zero flag if they
              	; are the same. the number of 16k chunks of disk space that
              	; the directory extent covers is expressad is (extmask+1).
              	; no registers are modified.
              	;
E712: C5      	samext:	push	bc
E713: F5      		push	af
E714: 3AD0ED  		ld	a,(extmask)	;get extent mask and use it to
E717: 2F      		cpl			;to compare both extent numbers.
E718: 47      		ld	b,a		;save resulting mask here.
E719: 79      		ld	a,c		;mask first extent and save in (c).
E71A: A0      		and	b
E71B: 4F      		ld	c,a
E71C: F1      		pop	af		;now mask second extent and compare
E71D: A0      		and	b		;with the first one.
E71E: 91      		sub	c
E71F: E61F    		and	1fh		;(* only check buts 0-4 *)
E721: C1      		pop	bc		;the zero flag is set if they are the same.
E722: C9      		ret			;restore (bc) and return.
              	;
              	;   search for the first occurence of a file name. on entry,
              	; register (c) should contain the number of bytes of the fcb
              	; that must match.
              	;
E723: 3EFF    	findfst:ld	a,0ffh
E725: 32DFED  		ld	(fndstat),a
E728: 21E3ED  		ld	hl,counter	;save character count.
E72B: 71      		ld	(hl),c
E72C: 2A4EE3  		ld	hl,(params)	;get filename to match.
E72F: 22E4ED  		ld	(savefcb),hl	;and save.
E732: CD09E6  		call	stfilpos	;clear initial file position (set to 0ffffh).
E735: CDACE3  		call	homedrv		;home the drive.
              	;
              	;   entry to locate the next occurence of a filename within the
              	; directory. the disk is not expected to have been changed. if
              	; it was, then it will be write protected.
              	;
E738: 0E00    	findnxt:ld	c,0		;write protect the disk if changed.
E73A: CD10E6  		call	nxentry		;get next filename entry in directory.
E73D: CD00E6  		call	ckfilpos	;is file position = 0ffffh?
E740: CA9FE7  		jp	z,fndnxt6	;yes, exit now then.
E743: 2AE4ED  		ld	hl,(savefcb)	;set (de) pointing to filename to match.
E746: EB      		ex	de,hl
E747: 1A      		ld	a,(de)
E748: FEE5    		cp	0e5h		;empty directory entry?
E74A: CA55E7  		jp	z,fndnxt1	;(* are we trying to reserect erased entries? *)
E74D: D5      		push	de
E74E: CD8AE5  		call	morefls		;more files in directory?
E751: D1      		pop	de
E752: D29FE7  		jp	nc,fndnxt6	;no more. exit now.
E755: CD69E5  	fndnxt1:call	fcb2hl		;get address of this fcb in directory.
E758: 3AE3ED  		ld	a,(counter)	;get number of bytes (characters) to check.
E75B: 4F      		ld	c,a
E75C: 0600    		ld	b,0		;initialize byte position counter.
E75E: 79      	fndnxt2:ld	a,c		;are we done with the compare?
E75F: B7      		or	a
E760: CA8EE7  		jp	z,fndnxt5
E763: 1A      		ld	a,(de)		;no, check next byte.
E764: FE3F    		cp	'?'		;don't care about this character?
E766: CA87E7  		jp	z,fndnxt4
E769: 78      		ld	a,b		;get bytes position in fcb.
E76A: FE0D    		cp	13		;don't care about the thirteenth byte either.
E76C: CA87E7  		jp	z,fndnxt4
E76F: FE0C    		cp	12		;extent byte?
E771: 1A      		ld	a,(de)
E772: CA7EE7  		jp	z,fndnxt3
E775: 96      		sub	(hl)		;otherwise compare characters.
E776: E67F    		and	7fh
E778: C238E7  		jp	nz,findnxt	;not the same, check next entry.
E77B: C387E7  		jp	fndnxt4		;so far so good, keep checking.
E77E: C5      	fndnxt3:push	bc		;check the extent byte here.
E77F: 4E      		ld	c,(hl)
E780: CD12E7  		call	samext
E783: C1      		pop	bc
E784: C238E7  		jp	nz,findnxt	;not the same, look some more.
              	;
              	;   so far the names compare. bump pointers to the next byte
              	; and continue until all (c) characters have been checked.
              	;
E787: 13      	fndnxt4:inc	de		;bump pointers.
E788: 23      		inc	hl
E789: 04      		inc	b
E78A: 0D      		dec	c		;adjust character counter.
E78B: C35EE7  		jp	fndnxt2
E78E: 3AF5ED  	fndnxt5:ld	a,(filepos)	;return the position of this entry.
E791: E603    		and	03h
E793: 3250E3  		ld	(status),a
E796: 21DFED  		ld	hl,fndstat
E799: 7E      		ld	a,(hl)
E79A: 17      		rla	
E79B: D0      		ret	nc
E79C: AF      		xor	a
E79D: 77      		ld	(hl),a
E79E: C9      		ret	
              	;
              	;   filename was not found. set appropriate status.
              	;
E79F: CD09E6  	fndnxt6:call	stfilpos	;set (filepos) to 0ffffh.
E7A2: 3EFF    		ld	a,0ffh		;say not located.
E7A4: C30CE3  		jp	setstat
              	;
              	;   erase files from the directory. only the first byte of the
              	; fcb will be affected. it is set to (e5).
              	;
E7A7: CD5FE5  	erafile:call	chkwprt		;is disk write protected?
E7AA: 0E0C    		ld	c,12		;only compare file names.
E7AC: CD23E7  		call	findfst		;get first file name.
E7AF: CD00E6  	erafil1:call	ckfilpos	;any found?
E7B2: C8      		ret	z		;nope, we must be done.
E7B3: CD4FE5  		call	chkrofl		;is file read only?
E7B6: CD69E5  		call	fcb2hl		;nope, get address of fcb and
E7B9: 36E5    		ld	(hl),0e5h	;set first byte to 'empty'.
E7BB: 0E00    		ld	c,0		;clear the space from the bit map.
E7BD: CD76E6  		call	setfile
E7C0: CDD1E5  		call	dirwrite	;now write the directory sector back out.
E7C3: CD38E7  		call	findnxt		;find the next file name.
E7C6: C3AFE7  		jp	erafil1		;and repeat process.
              	;
              	;   look through the space allocation map (bit map) for the
              	; next available block. start searching at block number (bc-1).
              	; the search procedure is to look for an empty block that is
              	; before the starting block. if not empty, look at a later
              	; block number. in this way, we return the closest empty block
              	; on either side of the 'target' block number. this will speed
              	; access on random devices. for serial devices, this should be
              	; changed to look in the forward direction first and then start
              	; at the front and search some more.
              	;
              	;   on return, (de)= block number that is empty and (hl) =0
              	; if no empry block was found.
              	;
E7C9: 50      	fndspace: ld	d,b		;set (de) as the block that is checked.
E7CA: 59      		ld	e,c
              	;
              	;   look before target block. registers (bc) are used as the lower
              	; pointer and (de) as the upper pointer.
              	;
E7CB: 79      	fndspa1:ld	a,c		;is block 0 specified?
E7CC: B0      		or	b
E7CD: CADCE7  		jp	z,fndspa2
E7D0: 0B      		dec	bc		;nope, check previous block.
E7D1: D5      		push	de
E7D2: C5      		push	bc
E7D3: CD40E6  		call	ckbitmap
E7D6: 1F      		rra			;is this block empty?
E7D7: D2F7E7  		jp	nc,fndspa3	;yes. use this.
              	;
              	;   note that the above logic gets the first block that it finds
              	; that is empty. thus a file could be written 'backward' making
              	; it very slow to access. this could be changed to look for the
              	; first empty block and then continue until the start of this
              	; empty space is located and then used that starting block.
              	; this should help speed up access to some files especially on
              	; a well used disk with lots of fairly small 'holes'.
              	;
E7DA: C1      		pop	bc		;nope, check some more.
E7DB: D1      		pop	de
              	;
              	;   now look after target block.
              	;
E7DC: 2AD1ED  	fndspa2:ld	hl,(dsksize)	;is block (de) within disk limits?
E7DF: 7B      		ld	a,e
E7E0: 95      		sub	l
E7E1: 7A      		ld	a,d
E7E2: 9C      		sbc	a,h
E7E3: D2FFE7  		jp	nc,fndspa4
E7E6: 13      		inc	de		;yes, move on to next one.
E7E7: C5      		push	bc
E7E8: D5      		push	de
E7E9: 42      		ld	b,d
E7EA: 4B      		ld	c,e
E7EB: CD40E6  		call	ckbitmap	;check it.
E7EE: 1F      		rra			;empty?
E7EF: D2F7E7  		jp	nc,fndspa3
E7F2: D1      		pop	de		;nope, continue searching.
E7F3: C1      		pop	bc
E7F4: C3CBE7  		jp	fndspa1
              	;
              	;   empty block found. set it as used and return with (hl)
              	; pointing to it (true?).
              	;
E7F7: 17      	fndspa3:rla			;reset byte.
E7F8: 3C      		inc	a		;and set bit 0.
E7F9: CD6FE6  		call	stbmap1		;update bit map.
E7FC: E1      		pop	hl		;set return registers.
E7FD: D1      		pop	de
E7FE: C9      		ret	
              	;
              	;   free block was not found. if (bc) is not zero, then we have
              	; not checked all of the disk space.
              	;
E7FF: 79      	fndspa4:ld	a,c
E800: B0      		or	b
E801: C2CBE7  		jp	nz,fndspa1
E804: 210000  		ld	hl,0		;set 'not found' status.
E807: C9      		ret	
              	;
              	;   move a complete fcb entry into the directory and write it.
              	;
E808: 0E00    	fcbset:	ld	c,0
E80A: 1E20    		ld	e,32		;length of each entry.
              	;
              	;   move (e) bytes from the fcb pointed to by (params) into
              	; fcb in directory starting at relative byte (c). this updated
              	; directory buffer is then written to the disk.
              	;
E80C: D5      	update:	push	de
E80D: 0600    		ld	b,0		;set (bc) to relative byte position.
E80F: 2A4EE3  		ld	hl,(params)	;get address of fcb.
E812: 09      		add	hl,bc		;compute starting byte.
E813: EB      		ex	de,hl
E814: CD69E5  		call	fcb2hl		;get address of fcb to update in directory.
E817: C1      		pop	bc		;set (c) to number of bytes to change.
E818: CD5AE3  		call	de2hl
E81B: CDCEE3  	update1:call	trksec		;determine the track and sector affected.
E81E: C3D1E5  		jp	dirwrite	;then write this sector out.
              	;
              	;   routine to change the name of all files on the disk with a
              	; specified name. the fcb contains the current name as the
              	; first 12 characters and the new name 16 bytes into the fcb.
              	;
E821: CD5FE5  	chgnames: call	chkwprt		;check for a write protected disk.
E824: 0E0C    		ld	c,12		;match first 12 bytes of fcb only.
E826: CD23E7  		call	findfst		;get first name.
E829: 2A4EE3  		ld	hl,(params)	;get address of fcb.
E82C: 7E      		ld	a,(hl)		;get user number.
E82D: 111000  		ld	de,16		;move over to desired name.
E830: 19      		add	hl,de
E831: 77      		ld	(hl),a		;keep same user number.
E832: CD00E6  	chgnam1:call	ckfilpos	;any matching file found?
E835: C8      		ret	z		;no, we must be done.
E836: CD4FE5  		call	chkrofl		;check for read only file.
E839: 0E10    		ld	c,16		;start 16 bytes into fcb.
E83B: 1E0C    		ld	e,12		;and update the first 12 bytes of directory.
E83D: CD0CE8  		call	update
E840: CD38E7  		call	findnxt		;get te next file name.
E843: C332E8  		jp	chgnam1		;and continue.
              	;
              	;   update a files attributes. the procedure is to search for
              	; every file with the same name as shown in fcb (ignoring bit 7)
              	; and then to update it (which includes bit 7). no other changes
              	; are made.
              	;
E846: 0E0C    	saveattr: ld	c,12		;match first 12 bytes.
E848: CD23E7  		call	findfst		;look for first filename.
E84B: CD00E6  	savatr1:call	ckfilpos	;was one found?
E84E: C8      		ret	z		;nope, we must be done.
E84F: 0E00    		ld	c,0		;yes, update the first 12 bytes now.
E851: 1E0C    		ld	e,12
E853: CD0CE8  		call	update		;update filename and write directory.
E856: CD38E7  		call	findnxt		;and get the next file.
E859: C34BE8  		jp	savatr1		;then continue until done.
              	;
              	;  open a file (name specified in fcb).
              	;
E85C: 0E0F    	openit:	ld	c,15		;compare the first 15 bytes.
E85E: CD23E7  		call	findfst		;get the first one in directory.
E861: CD00E6  		call	ckfilpos	;any at all?
E864: C8      		ret	z
E865: CDB1E4  	openit1:call	setext		;point to extent byte within users fcb.
E868: 7E      		ld	a,(hl)		;and get it.
E869: F5      		push	af		;save it and address.
E86A: E5      		push	hl
E86B: CD69E5  		call	fcb2hl		;point to fcb in directory.
E86E: EB      		ex	de,hl
E86F: 2A4EE3  		ld	hl,(params)	;this is the users copy.
E872: 0E20    		ld	c,32		;move it into users space.
E874: D5      		push	de
E875: CD5AE3  		call	de2hl
E878: CD83E5  		call	sets2b7		;set bit 7 in 's2' byte (unmodified).
E87B: D1      		pop	de		;now get the extent byte from this fcb.
E87C: 210C00  		ld	hl,12
E87F: 19      		add	hl,de
E880: 4E      		ld	c,(hl)		;into (c).
E881: 210F00  		ld	hl,15		;now get the record count byte into (b).
E884: 19      		add	hl,de
E885: 46      		ld	b,(hl)
E886: E1      		pop	hl		;keep the same extent as the user had originally.
E887: F1      		pop	af
E888: 77      		ld	(hl),a
E889: 79      		ld	a,c		;is it the same as in the directory fcb?
E88A: BE      		cp	(hl)
E88B: 78      		ld	a,b		;if yes, then use the same record count.
E88C: CA96E8  		jp	z,openit2
E88F: 3E00    		ld	a,0		;if the user specified an extent greater than
E891: DA96E8  		jp	c,openit2	;the one in the directory, then set record count to 0.
E894: 3E80    		ld	a,128		;otherwise set to maximum.
E896: 2A4EE3  	openit2:ld	hl,(params)	;set record count in users fcb to (a).
E899: 110F00  		ld	de,15
E89C: 19      		add	hl,de		;compute relative position.
E89D: 77      		ld	(hl),a		;and set the record count.
E89E: C9      		ret	
              	;
              	;   move two bytes from (de) to (hl) if (and only if) (hl)
              	; point to a zero value (16 bit).
              	;   return with zero flag set it (de) was moved. registers (de)
              	; and (hl) are not changed. however (a) is.
              	;
E89F: 7E      	moveword: ld	a,(hl)		;check for a zero word.
E8A0: 23      		inc	hl
E8A1: B6      		or	(hl)		;both bytes zero?
E8A2: 2B      		dec	hl
E8A3: C0      		ret	nz		;nope, just return.
E8A4: 1A      		ld	a,(de)		;yes, move two bytes from (de) into
E8A5: 77      		ld	(hl),a		;this zero space.
E8A6: 13      		inc	de
E8A7: 23      		inc	hl
E8A8: 1A      		ld	a,(de)
E8A9: 77      		ld	(hl),a
E8AA: 1B      		dec	de		;don't disturb these registers.
E8AB: 2B      		dec	hl
E8AC: C9      		ret	
              	;
              	;   get here to close a file specified by (fcb).
              	;
E8AD: AF      	closeit:xor	a		;clear status and file position bytes.
E8AE: 3250E3  		ld	(status),a
E8B1: 32F5ED  		ld	(filepos),a
E8B4: 32F6ED  		ld	(filepos+1),a
E8B7: CD29E5  		call	getwprt		;get write protect bit for this drive.
E8BA: C0      		ret	nz		;just return if it is set.
E8BB: CD74E5  		call	gets2		;else get the 's2' byte.
E8BE: E680    		and	80h		;and look at bit 7 (file unmodified?).
E8C0: C0      		ret	nz		;just return if set.
E8C1: 0E0F    		ld	c,15		;else look up this file in directory.
E8C3: CD23E7  		call	findfst
E8C6: CD00E6  		call	ckfilpos	;was it found?
E8C9: C8      		ret	z		;just return if not.
E8CA: 011000  		ld	bc,16		;set (hl) pointing to records used section.
E8CD: CD69E5  		call	fcb2hl
E8D0: 09      		add	hl,bc
E8D1: EB      		ex	de,hl
E8D2: 2A4EE3  		ld	hl,(params)	;do the same for users specified fcb.
E8D5: 09      		add	hl,bc
E8D6: 0E10    		ld	c,16		;this many bytes are present in this extent.
E8D8: 3AE8ED  	closeit1: ld	a,(bigdisk)	;8 or 16 bit record numbers?
E8DB: B7      		or	a
E8DC: CAF3E8  		jp	z,closeit4
E8DF: 7E      		ld	a,(hl)		;just 8 bit. get one from users fcb.
E8E0: B7      		or	a
E8E1: 1A      		ld	a,(de)		;now get one from directory fcb.
E8E2: C2E6E8  		jp	nz,closeit2
E8E5: 77      		ld	(hl),a		;users byte was zero. update from directory.
E8E6: B7      	closeit2: or	a
E8E7: C2ECE8  		jp	nz,closeit3
E8EA: 7E      		ld	a,(hl)		;directories byte was zero, update from users fcb.
E8EB: 12      		ld	(de),a
E8EC: BE      	closeit3: cp	(hl)		;if neither one of these bytes were zero,
E8ED: C22AE9  		jp	nz,closeit7	;then close error if they are not the same.
E8F0: C308E9  		jp	closeit5	;ok so far, get to next byte in fcbs.
E8F3: CD9FE8  	closeit4: call	moveword	;update users fcb if it is zero.
E8F6: EB      		ex	de,hl
E8F7: CD9FE8  		call	moveword	;update directories fcb if it is zero.
E8FA: EB      		ex	de,hl
E8FB: 1A      		ld	a,(de)		;if these two values are no different,
E8FC: BE      		cp	(hl)		;then a close error occured.
E8FD: C22AE9  		jp	nz,closeit7
E900: 13      		inc	de		;check second byte.
E901: 23      		inc	hl
E902: 1A      		ld	a,(de)
E903: BE      		cp	(hl)
E904: C22AE9  		jp	nz,closeit7
E907: 0D      		dec	c		;remember 16 bit values.
E908: 13      	closeit5: inc	de		;bump to next item in table.
E909: 23      		inc	hl
E90A: 0D      		dec	c		;there are 16 entries only.
E90B: C2D8E8  		jp	nz,closeit1	;continue if more to do.
E90E: 01ECFF  		ld	bc,0ffech	;backup 20 places (extent byte).
E911: 09      		add	hl,bc
E912: EB      		ex	de,hl
E913: 09      		add	hl,bc
E914: 1A      		ld	a,(de)
E915: BE      		cp	(hl)		;directory's extent already greater than the
E916: DA22E9  		jp	c,closeit6	;users extent?
E919: 77      		ld	(hl),a		;no, update directory extent.
E91A: 010300  		ld	bc,3		;and update the record count byte in
E91D: 09      		add	hl,bc		;directories fcb.
E91E: EB      		ex	de,hl
E91F: 09      		add	hl,bc
E920: 7E      		ld	a,(hl)		;get from user.
E921: 12      		ld	(de),a		;and put in directory.
E922: 3EFF    	closeit6: ld	a,0ffh		;set 'was open and is now closed' byte.
E924: 32DDED  		ld	(closeflg),a
E927: C31BE8  		jp	update1		;update the directory now.
E92A: 2150E3  	closeit7: ld	hl,status	;set return status and then return.
E92D: 35      		dec	(hl)
E92E: C9      		ret	
              	;
              	;   routine to get the next empty space in the directory. it
              	; will then be cleared for use.
              	;
E92F: CD5FE5  	getempty: call	chkwprt		;make sure disk is not write protected.
E932: 2A4EE3  		ld	hl,(params)	;save current parameters (fcb).
E935: E5      		push	hl
E936: 21B7ED  		ld	hl,emptyfcb	;use special one for empty space.
E939: 224EE3  		ld	(params),hl
E93C: 0E01    		ld	c,1		;search for first empty spot in directory.
E93E: CD23E7  		call	findfst		;(* only check first byte *)
E941: CD00E6  		call	ckfilpos	;none?
E944: E1      		pop	hl
E945: 224EE3  		ld	(params),hl	;restore original fcb address.
E948: C8      		ret	z		;return if no more space.
E949: EB      		ex	de,hl
E94A: 210F00  		ld	hl,15		;point to number of records for this file.
E94D: 19      		add	hl,de
E94E: 0E11    		ld	c,17		;and clear all of this space.
E950: AF      		xor	a
E951: 77      	getmt1:	ld	(hl),a
E952: 23      		inc	hl
E953: 0D      		dec	c
E954: C251E9  		jp	nz,getmt1
E957: 210D00  		ld	hl,13		;clear the 's1' byte also.
E95A: 19      		add	hl,de
E95B: 77      		ld	(hl),a
E95C: CD97E5  		call	chknmbr		;keep (scratch1) within bounds.
E95F: CD08E8  		call	fcbset		;write out this fcb entry to directory.
E962: C383E5  		jp	sets2b7		;set 's2' byte bit 7 (unmodified at present).
              	;
              	;   routine to close the current extent and open the next one
              	; for reading.
              	;
E965: AF      	getnext:xor	a
E966: 32DDED  		ld	(closeflg),a	;clear close flag.
E969: CDADE8  		call	closeit		;close this extent.
E96C: CD00E6  		call	ckfilpos
E96F: C8      		ret	z		;not there???
E970: 2A4EE3  		ld	hl,(params)	;get extent byte.
E973: 010C00  		ld	bc,12
E976: 09      		add	hl,bc
E977: 7E      		ld	a,(hl)		;and increment it.
E978: 3C      		inc	a
E979: E61F    		and	1fh		;keep within range 0-31.
E97B: 77      		ld	(hl),a
E97C: CA8EE9  		jp	z,gtnext1	;overflow?
E97F: 47      		ld	b,a		;mask extent byte.
E980: 3AD0ED  		ld	a,(extmask)
E983: A0      		and	b
E984: 21DDED  		ld	hl,closeflg	;check close flag (0ffh is ok).
E987: A6      		and	(hl)
E988: CA99E9  		jp	z,gtnext2	;if zero, we must read in next extent.
E98B: C3B7E9  		jp	gtnext3		;else, it is already in memory.
E98E: 010200  	gtnext1:ld	bc,2		;point to the 's2' byte.
E991: 09      		add	hl,bc
E992: 34      		inc	(hl)		;and bump it.
E993: 7E      		ld	a,(hl)		;too many extents?
E994: E60F    		and	0fh
E996: CAC1E9  		jp	z,gtnext5	;yes, set error code.
              	;
              	;   get here to open the next extent.
              	;
E999: 0E0F    	gtnext2:ld	c,15		;set to check first 15 bytes of fcb.
E99B: CD23E7  		call	findfst		;find the first one.
E99E: CD00E6  		call	ckfilpos	;none available?
E9A1: C2B7E9  		jp	nz,gtnext3
E9A4: 3ADEED  		ld	a,(rdwrtflg)	;no extent present. can we open an empty one?
E9A7: 3C      		inc	a		;0ffh means reading (so not possible).
E9A8: CAC1E9  		jp	z,gtnext5	;or an error.
E9AB: CD2FE9  		call	getempty	;we are writing, get an empty entry.
E9AE: CD00E6  		call	ckfilpos	;none?
E9B1: CAC1E9  		jp	z,gtnext5	;error if true.
E9B4: C3BAE9  		jp	gtnext4		;else we are almost done.
E9B7: CD65E8  	gtnext3:call	openit1		;open this extent.
E9BA: CDC6E4  	gtnext4:call	strdata		;move in updated data (rec #, extent #, etc.)
E9BD: AF      		xor	a		;clear status and return.
E9BE: C30CE3  		jp	setstat
              	;
              	;   error in extending the file. too many extents were needed
              	; or not enough space on the disk.
              	;
E9C1: CD10E3  	gtnext5:call	ioerr1		;set error code, clear bit 7 of 's2'
E9C4: C383E5  		jp	sets2b7		;so this is not written on a close.
              	;
              	;   read a sequential file.
              	;
E9C7: 3E01    	rdseq:	ld	a,1		;set sequential access mode.
E9C9: 32E0ED  		ld	(mode),a
E9CC: 3EFF    	rdseq1:	ld	a,0ffh		;don't allow reading unwritten space.
E9CE: 32DEED  		ld	(rdwrtflg),a
E9D1: CDC6E4  		call	strdata		;put rec# and ext# into fcb.
E9D4: 3AEEED  		ld	a,(savnrec)	;get next record to read.
E9D7: 21ECED  		ld	hl,savnxt	;get number of records in extent.
E9DA: BE      		cp	(hl)		;within this extent?
E9DB: DAF1E9  		jp	c,rdseq2
E9DE: FE80    		cp	128		;no. is this extent fully used?
E9E0: C206EA  		jp	nz,rdseq3	;no. end-of-file.
E9E3: CD65E9  		call	getnext		;yes, open the next one.
E9E6: AF      		xor	a		;reset next record to read.
E9E7: 32EEED  		ld	(savnrec),a
E9EA: 3A50E3  		ld	a,(status)	;check on open, successful?
E9ED: B7      		or	a
E9EE: C206EA  		jp	nz,rdseq3	;no, error.
E9F1: CD82E4  	rdseq2:	call	comblk		;ok. compute block number to read.
E9F4: CD8FE4  		call	chkblk		;check it. within bounds?
E9F7: CA06EA  		jp	z,rdseq3	;no, error.
E9FA: CD95E4  		call	logical		;convert (blknmbr) to logical sector (128 byte).
E9FD: CDDCE3  		call	trksec1		;set the track and sector for this block #.
EA00: CDBDE3  		call	doread		;and read it.
EA03: C3DDE4  		jp	setnrec		;and set the next record to be accessed.
              	;
              	;   read error occured. set status and return.
              	;
EA06: C310E3  	rdseq3:	jp	ioerr1
              	;
              	;   write the next sequential record.
              	;
EA09: 3E01    	wtseq:	ld	a,1		;set sequential access mode.
EA0B: 32E0ED  		ld	(mode),a
EA0E: 3E00    	wtseq1:	ld	a,0		;allow an addition empty extent to be opened.
EA10: 32DEED  		ld	(rdwrtflg),a
EA13: CD5FE5  		call	chkwprt		;check write protect status.
EA16: 2A4EE3  		ld	hl,(params)
EA19: CD52E5  		call	ckrof1		;check for read only file, (hl) already set to fcb.
EA1C: CDC6E4  		call	strdata		;put updated data into fcb.
EA1F: 3AEEED  		ld	a,(savnrec)	;get record number to write.
EA22: FE80    		cp	128		;within range?
EA24: D210E3  		jp	nc,ioerr1	;no, error(?).
EA27: CD82E4  		call	comblk		;compute block number.
EA2A: CD8FE4  		call	chkblk		;check number.
EA2D: 0E00    		ld	c,0		;is there one to write to?
EA2F: C279EA  		jp	nz,wtseq6	;yes, go do it.
EA32: CD49E4  		call	getblock	;get next block number within fcb to use.
EA35: 32E2ED  		ld	(relblock),a	;and save.
EA38: 010000  		ld	bc,0		;start looking for space from the start
EA3B: B7      		or	a		;if none allocated as yet.
EA3C: CA46EA  		jp	z,wtseq2
EA3F: 4F      		ld	c,a		;extract previous block number from fcb
EA40: 0B      		dec	bc		;so we can be closest to it.
EA41: CD69E4  		call	extblk
EA44: 44      		ld	b,h
EA45: 4D      		ld	c,l
EA46: CDC9E7  	wtseq2:	call	fndspace	;find the next empty block nearest number (bc).
EA49: 7D      		ld	a,l		;check for a zero number.
EA4A: B4      		or	h
EA4B: C253EA  		jp	nz,wtseq3
EA4E: 3E02    		ld	a,2		;no more space?
EA50: C30CE3  		jp	setstat
EA53: 22F0ED  	wtseq3:	ld	(blknmbr),hl	;save block number to access.
EA56: EB      		ex	de,hl		;put block number into (de).
EA57: 2A4EE3  		ld	hl,(params)	;now we must update the fcb for this
EA5A: 011000  		ld	bc,16		;newly allocated block.
EA5D: 09      		add	hl,bc
EA5E: 3AE8ED  		ld	a,(bigdisk)	;8 or 16 bit block numbers?
EA61: B7      		or	a
EA62: 3AE2ED  		ld	a,(relblock)	;(* update this entry *)
EA65: CA6FEA  		jp	z,wtseq4	;zero means 16 bit ones.
EA68: CD6FE5  		call	adda2hl		;(hl)=(hl)+(a)
EA6B: 73      		ld	(hl),e		;store new block number.
EA6C: C377EA  		jp	wtseq5
EA6F: 4F      	wtseq4:	ld	c,a		;compute spot in this 16 bit table.
EA70: 0600    		ld	b,0
EA72: 09      		add	hl,bc
EA73: 09      		add	hl,bc
EA74: 73      		ld	(hl),e		;stuff block number (de) there.
EA75: 23      		inc	hl
EA76: 72      		ld	(hl),d
EA77: 0E02    	wtseq5:	ld	c,2		;set (c) to indicate writing to un-used disk space.
EA79: 3A50E3  	wtseq6:	ld	a,(status)	;are we ok so far?
EA7C: B7      		or	a
EA7D: C0      		ret	nz
EA7E: C5      		push	bc		;yes, save write flag for bios (register c).
EA7F: CD95E4  		call	logical		;convert (blknmbr) over to loical sectors.
EA82: 3AE0ED  		ld	a,(mode)	;get access mode flag (1=sequential,
EA85: 3D      		dec	a		;0=random, 2=special?).
EA86: 3D      		dec	a
EA87: C2C6EA  		jp	nz,wtseq9
              	;
              	;   special random i/o from function #40. maybe for m/pm, but the
              	; current block, if it has not been written to, will be zeroed
              	; out and then written (reason?).
              	;
EA8A: C1      		pop	bc
EA8B: C5      		push	bc
EA8C: 79      		ld	a,c		;get write status flag (2=writing unused space).
EA8D: 3D      		dec	a
EA8E: 3D      		dec	a
EA8F: C2C6EA  		jp	nz,wtseq9
EA92: E5      		push	hl
EA93: 2AC4ED  		ld	hl,(dirbuf)	;zero out the directory buffer.
EA96: 57      		ld	d,a		;note that (a) is zero here.
EA97: 77      	wtseq7:	ld	(hl),a
EA98: 23      		inc	hl
EA99: 14      		inc	d		;do 128 bytes.
EA9A: F297EA  		jp	p,wtseq7
EA9D: CDEBE5  		call	dirdma		;tell the bios the dma address for directory access.
EAA0: 2AF2ED  		ld	hl,(logsect)	;get sector that starts current block.
EAA3: 0E02    		ld	c,2		;set 'writing to unused space' flag.
EAA5: 22F0ED  	wtseq8:	ld	(blknmbr),hl	;save sector to write.
EAA8: C5      		push	bc
EAA9: CDDCE3  		call	trksec1		;determine its track and sector numbers.
EAAC: C1      		pop	bc
EAAD: CDC3E3  		call	dowrite		;now write out 128 bytes of zeros.
EAB0: 2AF0ED  		ld	hl,(blknmbr)	;get sector number.
EAB3: 0E00    		ld	c,0		;set normal write flag.
EAB5: 3ACFED  		ld	a,(blkmask)	;determine if we have written the entire
EAB8: 47      		ld	b,a		;physical block.
EAB9: A5      		and	l
EABA: B8      		cp	b
EABB: 23      		inc	hl		;prepare for the next one.
EABC: C2A5EA  		jp	nz,wtseq8	;continue until (blkmask+1) sectors written.
EABF: E1      		pop	hl		;reset next sector number.
EAC0: 22F0ED  		ld	(blknmbr),hl
EAC3: CDE5E5  		call	defdma		;and reset dma address.
              	;
              	;   normal disk write. set the desired track and sector then
              	; do the actual write.
              	;
EAC6: CDDCE3  	wtseq9:	call	trksec1		;determine track and sector for this write.
EAC9: C1      		pop	bc		;get write status flag.
EACA: C5      		push	bc
EACB: CDC3E3  		call	dowrite		;and write this out.
EACE: C1      		pop	bc
EACF: 3AEEED  		ld	a,(savnrec)	;get number of records in file.
EAD2: 21ECED  		ld	hl,savnxt	;get last record written.
EAD5: BE      		cp	(hl)
EAD6: DADDEA  		jp	c,wtseq10
EAD9: 77      		ld	(hl),a		;we have to update record count.
EADA: 34      		inc	(hl)
EADB: 0E02    		ld	c,2
              	;
              	;*   this area has been patched to correct disk update problem
              	;* when using blocking and de-blocking in the bios.
              	;
EADD: 00      	wtseq10:nop			;was 'dcr c'
EADE: 00      		nop			;was 'dcr c'
EADF: 210000  		ld	hl,0		;was 'jnz wtseq99'
              	;
              	; *   end of patch.
              	;
EAE2: F5      		push	af
EAE3: CD74E5  		call	gets2		;set 'extent written to' flag.
EAE6: E67F    		and	7fh		;(* clear bit 7 *)
EAE8: 77      		ld	(hl),a
EAE9: F1      		pop	af		;get record count for this extent.
EAEA: FE7F    	wtseq99:cp	127		;is it full?
EAEC: C20BEB  		jp	nz,wtseq12
EAEF: 3AE0ED  		ld	a,(mode)	;yes, are we in sequential mode?
EAF2: FE01    		cp	1
EAF4: C20BEB  		jp	nz,wtseq12
EAF7: CDDDE4  		call	setnrec		;yes, set next record number.
EAFA: CD65E9  		call	getnext		;and get next empty space in directory.
EAFD: 2150E3  		ld	hl,status	;ok?
EB00: 7E      		ld	a,(hl)
EB01: B7      		or	a
EB02: C209EB  		jp	nz,wtseq11
EB05: 3D      		dec	a		;yes, set record count to -1.
EB06: 32EEED  		ld	(savnrec),a
EB09: 3600    	wtseq11:ld	(hl),0		;clear status.
EB0B: C3DDE4  	wtseq12:jp	setnrec		;set next record to access.
              	;
              	;   for random i/o, set the fcb for the desired record number
              	; based on the 'r0,r1,r2' bytes. these bytes in the fcb are
              	; used as follows:
              	;
              	;       fcb+35            fcb+34            fcb+33
              	;  |     'r-2'      |      'r-1'      |      'r-0'     |
              	;  |7             0 | 7             0 | 7             0|
              	;  |0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0|
              	;  |    overflow   | | extra |  extent   |   record #  |
              	;  | ______________| |_extent|__number___|_____________|
              	;                     also 's2'
              	;
              	;   on entry, register (c) contains 0ffh if this is a read
              	; and thus we can not access unwritten disk space. otherwise,
              	; another extent will be opened (for writing) if required.
              	;
EB0E: AF      	position: xor	a		;set random i/o flag.
EB0F: 32E0ED  		ld	(mode),a
              	;
              	;   special entry (function #40). m/pm ?
              	;
EB12: C5      	positn1:push	bc		;save read/write flag.
EB13: 2A4EE3  		ld	hl,(params)	;get address of fcb.
EB16: EB      		ex	de,hl
EB17: 212100  		ld	hl,33		;now get byte 'r0'.
EB1A: 19      		add	hl,de
EB1B: 7E      		ld	a,(hl)
EB1C: E67F    		and	7fh		;keep bits 0-6 for the record number to access.
EB1E: F5      		push	af
EB1F: 7E      		ld	a,(hl)		;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
EB20: 17      		rla	
EB21: 23      		inc	hl
EB22: 7E      		ld	a,(hl)
EB23: 17      		rla	
EB24: E61F    		and	1fh		;and save this in bits 0-4 of (c).
EB26: 4F      		ld	c,a		;this is the extent byte.
EB27: 7E      		ld	a,(hl)		;now get the extra extent byte.
EB28: 1F      		rra	
EB29: 1F      		rra	
EB2A: 1F      		rra	
EB2B: 1F      		rra	
EB2C: E60F    		and	0fh
EB2E: 47      		ld	b,a		;and save it in (b).
EB2F: F1      		pop	af		;get record number back to (a).
EB30: 23      		inc	hl		;check overflow byte 'r2'.
EB31: 6E      		ld	l,(hl)
EB32: 2C      		inc	l
EB33: 2D      		dec	l
EB34: 2E06    		ld	l,6		;prepare for error.
EB36: C296EB  		jp	nz,positn5	;out of disk space error.
EB39: 212000  		ld	hl,32		;store record number into fcb.
EB3C: 19      		add	hl,de
EB3D: 77      		ld	(hl),a
EB3E: 210C00  		ld	hl,12		;and now check the extent byte.
EB41: 19      		add	hl,de
EB42: 79      		ld	a,c
EB43: 96      		sub	(hl)		;same extent as before?
EB44: C252EB  		jp	nz,positn2
EB47: 210E00  		ld	hl,14		;yes, check extra extent byte 's2' also.
EB4A: 19      		add	hl,de
EB4B: 78      		ld	a,b
EB4C: 96      		sub	(hl)
EB4D: E67F    		and	7fh
EB4F: CA8AEB  		jp	z,positn3	;same, we are almost done then.
              	;
              	;  get here when another extent is required.
              	;
EB52: C5      	positn2:push	bc
EB53: D5      		push	de
EB54: CDADE8  		call	closeit		;close current extent.
EB57: D1      		pop	de
EB58: C1      		pop	bc
EB59: 2E03    		ld	l,3		;prepare for error.
EB5B: 3A50E3  		ld	a,(status)
EB5E: 3C      		inc	a
EB5F: CA8FEB  		jp	z,positn4	;close error.
EB62: 210C00  		ld	hl,12		;put desired extent into fcb now.
EB65: 19      		add	hl,de
EB66: 71      		ld	(hl),c
EB67: 210E00  		ld	hl,14		;and store extra extent byte 's2'.
EB6A: 19      		add	hl,de
EB6B: 70      		ld	(hl),b
EB6C: CD5CE8  		call	openit		;try and get this extent.
EB6F: 3A50E3  		ld	a,(status)	;was it there?
EB72: 3C      		inc	a
EB73: C28AEB  		jp	nz,positn3
EB76: C1      		pop	bc		;no. can we create a new one (writing?).
EB77: C5      		push	bc
EB78: 2E04    		ld	l,4		;prepare for error.
EB7A: 0C      		inc	c
EB7B: CA8FEB  		jp	z,positn4	;nope, reading unwritten space error.
EB7E: CD2FE9  		call	getempty	;yes we can, try to find space.
EB81: 2E05    		ld	l,5		;prepare for error.
EB83: 3A50E3  		ld	a,(status)
EB86: 3C      		inc	a
EB87: CA8FEB  		jp	z,positn4	;out of space?
              	;
              	;   normal return location. clear error code and return.
              	;
EB8A: C1      	positn3:pop	bc		;restore stack.
EB8B: AF      		xor	a		;and clear error code byte.
EB8C: C30CE3  		jp	setstat
              	;
              	;   error. set the 's2' byte to indicate this (why?).
              	;
EB8F: E5      	positn4:push	hl
EB90: CD74E5  		call	gets2
EB93: 36C0    		ld	(hl),0c0h
EB95: E1      		pop	hl
              	;
              	;   return with error code (presently in l).
              	;
EB96: C1      	positn5:pop	bc
EB97: 7D      		ld	a,l		;get error code.
EB98: 3250E3  		ld	(status),a
EB9B: C383E5  		jp	sets2b7
              	;
              	;   read a random record.
              	;
EB9E: 0EFF    	readran:ld	c,0ffh		;set 'read' status.
EBA0: CD0EEB  		call	position	;position the file to proper record.
EBA3: CCCCE9  		call	z,rdseq1	;and read it as usual (if no errors).
EBA6: C9      		ret	
              	;
              	;   write to a random record.
              	;
EBA7: 0E00    	writeran: ld	c,0		;set 'writing' flag.
EBA9: CD0EEB  		call	position	;position the file to proper record.
EBAC: CC0EEA  		call	z,wtseq1	;and write as usual (if no errors).
EBAF: C9      		ret	
              	;
              	;   compute the random record number. enter with (hl) pointing
              	; to a fcb an (de) contains a relative location of a record
              	; number. on exit, (c) contains the 'r0' byte, (b) the 'r1'
              	; byte, and (a) the 'r2' byte.
              	;
              	;   on return, the zero flag is set if the record is within
              	; bounds. otherwise, an overflow occured.
              	;
EBB0: EB      	comprand: ex	de,hl		;save fcb pointer in (de).
EBB1: 19      		add	hl,de		;compute relative position of record #.
EBB2: 4E      		ld	c,(hl)		;get record number into (bc).
EBB3: 0600    		ld	b,0
EBB5: 210C00  		ld	hl,12		;now get extent.
EBB8: 19      		add	hl,de
EBB9: 7E      		ld	a,(hl)		;compute (bc)=(record #)+(extent)*128.
EBBA: 0F      		rrca			;move lower bit into bit 7.
EBBB: E680    		and	80h		;and ignore all other bits.
EBBD: 81      		add	a,c		;add to our record number.
EBBE: 4F      		ld	c,a
EBBF: 3E00    		ld	a,0		;take care of any carry.
EBC1: 88      		adc	a,b
EBC2: 47      		ld	b,a
EBC3: 7E      		ld	a,(hl)		;now get the upper bits of extent into
EBC4: 0F      		rrca			;bit positions 0-3.
EBC5: E60F    		and	0fh		;and ignore all others.
EBC7: 80      		add	a,b		;add this in to 'r1' byte.
EBC8: 47      		ld	b,a
EBC9: 210E00  		ld	hl,14		;get the 's2' byte (extra extent).
EBCC: 19      		add	hl,de
EBCD: 7E      		ld	a,(hl)
EBCE: 87      		add	a,a		;and shift it left 4 bits (bits 4-7).
EBCF: 87      		add	a,a
EBD0: 87      		add	a,a
EBD1: 87      		add	a,a
EBD2: F5      		push	af		;save carry flag (bit 0 of flag byte).
EBD3: 80      		add	a,b		;now add extra extent into 'r1'.
EBD4: 47      		ld	b,a
EBD5: F5      		push	af		;and save carry (overflow byte 'r2').
EBD6: E1      		pop	hl		;bit 0 of (l) is the overflow indicator.
EBD7: 7D      		ld	a,l
EBD8: E1      		pop	hl		;and same for first carry flag.
EBD9: B5      		or	l		;either one of these set?
EBDA: E601    		and	01h		;only check the carry flags.
EBDC: C9      		ret	
              	;
              	;   routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
              	; reflect the last record used for a random (or other) file.
              	; this reads the directory and looks at all extents computing
              	; the largerst record number for each and keeping the maximum
              	; value only. then 'r0', 'r1', and 'r2' will reflect this
              	; maximum record number. this is used to compute the space used
              	; by a random file.
              	;
EBDD: 0E0C    	ransize:ld	c,12		;look thru directory for first entry with
EBDF: CD23E7  		call	findfst		;this name.
EBE2: 2A4EE3  		ld	hl,(params)	;zero out the 'r0, r1, r2' bytes.
EBE5: 112100  		ld	de,33
EBE8: 19      		add	hl,de
EBE9: E5      		push	hl
EBEA: 72      		ld	(hl),d		;note that (d)=0.
EBEB: 23      		inc	hl
EBEC: 72      		ld	(hl),d
EBED: 23      		inc	hl
EBEE: 72      		ld	(hl),d
EBEF: CD00E6  	ransiz1:call	ckfilpos	;is there an extent to process?
EBF2: CA17EC  		jp	z,ransiz3	;no, we are done.
EBF5: CD69E5  		call	fcb2hl		;set (hl) pointing to proper fcb in dir.
EBF8: 110F00  		ld	de,15		;point to last record in extent.
EBFB: CDB0EB  		call	comprand	;and compute random parameters.
EBFE: E1      		pop	hl
EBFF: E5      		push	hl		;now check these values against those
EC00: 5F      		ld	e,a		;already in fcb.
EC01: 79      		ld	a,c		;the carry flag will be set if those
EC02: 96      		sub	(hl)		;in the fcb represent a larger size than
EC03: 23      		inc	hl		;this extent does.
EC04: 78      		ld	a,b
EC05: 9E      		sbc	a,(hl)
EC06: 23      		inc	hl
EC07: 7B      		ld	a,e
EC08: 9E      		sbc	a,(hl)
EC09: DA11EC  		jp	c,ransiz2
EC0C: 73      		ld	(hl),e		;we found a larger (in size) extent.
EC0D: 2B      		dec	hl		;stuff these values into fcb.
EC0E: 70      		ld	(hl),b
EC0F: 2B      		dec	hl
EC10: 71      		ld	(hl),c
EC11: CD38E7  	ransiz2:call	findnxt		;now get the next extent.
EC14: C3EFEB  		jp	ransiz1		;continue til all done.
EC17: E1      	ransiz3:pop	hl		;we are done, restore the stack and
EC18: C9      		ret			;return.
              	;
              	;   function to return the random record position of a given
              	; file which has been read in sequential mode up to now.
              	;
EC19: 2A4EE3  	setran:	ld	hl,(params)	;point to fcb.
EC1C: 112000  		ld	de,32		;and to last used record.
EC1F: CDB0EB  		call	comprand	;compute random position.
EC22: 212100  		ld	hl,33		;now stuff these values into fcb.
EC25: 19      		add	hl,de
EC26: 71      		ld	(hl),c		;move 'r0'.
EC27: 23      		inc	hl
EC28: 70      		ld	(hl),b		;and 'r1'.
EC29: 23      		inc	hl
EC2A: 77      		ld	(hl),a		;and lastly 'r2'.
EC2B: C9      		ret	
              	;
              	;   this routine select the drive specified in (active) and
              	; update the login vector and bitmap table if this drive was
              	; not already active.
              	;
EC2C: 2ABAED  	logindrv: ld	hl,(login)	;get the login vector.
EC2F: 3A4DE3  		ld	a,(active)	;get the default drive.
EC32: 4F      		ld	c,a
EC33: CDF5E4  		call	shiftr		;position active bit for this drive
EC36: E5      		push	hl		;into bit 0.
EC37: EB      		ex	de,hl
EC38: CD64E3  		call	select		;select this drive.
EC3B: E1      		pop	hl
EC3C: CC52E3  		call	z,slcterr	;valid drive?
EC3F: 7D      		ld	a,l		;is this a newly activated drive?
EC40: 1F      		rra	
EC41: D8      		ret	c
EC42: 2ABAED  		ld	hl,(login)	;yes, update the login vector.
EC45: 4D      		ld	c,l
EC46: 44      		ld	b,h
EC47: CD16E5  		call	setbit
EC4A: 22BAED  		ld	(login),hl	;and save.
EC4D: C3AEE6  		jp	bitmap		;now update the bitmap.
              	;
              	;   function to set the active disk number.
              	;
EC50: 3AE1ED  	setdsk:	ld	a,(eparam)	;get parameter passed and see if this
EC53: 214DE3  		ld	hl,active	;represents a change in drives.
EC56: BE      		cp	(hl)
EC57: C8      		ret	z
EC58: 77      		ld	(hl),a		;yes it does, log it in.
EC59: C32CEC  		jp	logindrv
              	;
              	;   this is the 'auto disk select' routine. the firsst byte
              	; of the fcb is examined for a drive specification. if non
              	; zero then the drive will be selected and loged in.
              	;
EC5C: 3EFF    	autosel:ld	a,0ffh		;say 'auto-select activated'.
EC5E: 32E9ED  		ld	(auto),a
EC61: 2A4EE3  		ld	hl,(params)	;get drive specified.
EC64: 7E      		ld	a,(hl)
EC65: E61F    		and	1fh		;look at lower 5 bits.
EC67: 3D      		dec	a		;adjust for (1=a, 2=b) etc.
EC68: 32E1ED  		ld	(eparam),a	;and save for the select routine.
EC6B: FE1E    		cp	1eh		;check for 'no change' condition.
EC6D: D280EC  		jp	nc,autosl1	;yes, don't change.
EC70: 3A4DE3  		ld	a,(active)	;we must change, save currently active
EC73: 32EAED  		ld	(olddrv),a	;drive.
EC76: 7E      		ld	a,(hl)		;and save first byte of fcb also.
EC77: 32EBED  		ld	(autoflag),a	;this must be non-zero.
EC7A: E6E0    		and	0e0h		;whats this for (bits 6,7 are used for
EC7C: 77      		ld	(hl),a		;something)?
EC7D: CD50EC  		call	setdsk		;select and log in this drive.
EC80: 3A4CE3  	autosl1:ld	a,(userno)	;move user number into fcb.
EC83: 2A4EE3  		ld	hl,(params)	;(* upper half of first byte *)
EC86: B6      		or	(hl)
EC87: 77      		ld	(hl),a
EC88: C9      		ret			;and return (all done).
              	;
              	;   function to return the current cp/m version number.
              	;
EC89: 3E22    	getver:	ld	a,022h		;version 2.2
EC8B: C30CE3  		jp	setstat
              	;
              	;   function to reset the disk system.
              	;
EC8E: 210000  	rstdsk:	ld	hl,0		;clear write protect status and log
EC91: 22B8ED  		ld	(wrtprt),hl	;in vector.
EC94: 22BAED  		ld	(login),hl
EC97: AF      		xor	a		;select drive 'a'.
EC98: 324DE3  		ld	(active),a
EC9B: 218000  		ld	hl,tbuff	;setup default dma address.
EC9E: 22BCED  		ld	(userdma),hl
ECA1: CDE5E5  		call	defdma
ECA4: C32CEC  		jp	logindrv	;now log in drive 'a'.
              	;
              	;   function to open a specified file.
              	;
ECA7: CD7DE5  	openfil:call	clears2		;clear 's2' byte.
ECAA: CD5CEC  		call	autosel		;select proper disk.
ECAD: C35CE8  		jp	openit		;and open the file.
              	;
              	;   function to close a specified file.
              	;
ECB0: CD5CEC  	closefil: call	autosel		;select proper disk.
ECB3: C3ADE8  		jp	closeit		;and close the file.
              	;
              	;   function to return the first occurence of a specified file
              	; name. if the first byte of the fcb is '?' then the name will
              	; not be checked (get the first entry no matter what).
              	;
ECB6: 0E00    	getfst:	ld	c,0		;prepare for special search.
ECB8: EB      		ex	de,hl
ECB9: 7E      		ld	a,(hl)		;is first byte a '?'?
ECBA: FE3F    		cp	'?'
ECBC: CACDEC  		jp	z,getfst1	;yes, just get very first entry (zero length match).
ECBF: CDB1E4  		call	setext		;get the extension byte from fcb.
ECC2: 7E      		ld	a,(hl)		;is it '?'? if yes, then we want
ECC3: FE3F    		cp	'?'		;an entry with a specific 's2' byte.
ECC5: C47DE5  		call	nz,clears2	;otherwise, look for a zero 's2' byte.
ECC8: CD5CEC  		call	autosel		;select proper drive.
ECCB: 0E0F    		ld	c,15		;compare bytes 0-14 in fcb (12&13 excluded).
ECCD: CD23E7  	getfst1:call	findfst		;find an entry and then move it into
ECD0: C3F4E5  		jp	movedir		;the users dma space.
              	;
              	;   function to return the next occurence of a file name.
              	;
ECD3: 2AE4ED  	getnxt:	ld	hl,(savefcb)	;restore pointers. note that no
ECD6: 224EE3  		ld	(params),hl	;other dbos calls are allowed.
ECD9: CD5CEC  		call	autosel		;no error will be returned, but the
ECDC: CD38E7  		call	findnxt		;results will be wrong.
ECDF: C3F4E5  		jp	movedir
              	;
              	;   function to delete a file by name.
              	;
ECE2: CD5CEC  	delfile:call	autosel		;select proper drive.
ECE5: CDA7E7  		call	erafile		;erase the file.
ECE8: C30CE7  		jp	ststatus	;set status and return.
              	;
              	;   function to execute a sequential read of the specified
              	; record number.
              	;
ECEB: CD5CEC  	readseq:call	autosel		;select proper drive then read.
ECEE: C3C7E9  		jp	rdseq
              	;
              	;   function to write the net sequential record.
              	;
ECF1: CD5CEC  	wrtseq:	call	autosel		;select proper drive then write.
ECF4: C309EA  		jp	wtseq
              	;
              	;   create a file function.
              	;
ECF7: CD7DE5  	fcreate:call	clears2		;clear the 's2' byte on all creates.
ECFA: CD5CEC  		call	autosel		;select proper drive and get the next
ECFD: C32FE9  		jp	getempty	;empty directory space.
              	;
              	;   function to rename a file.
              	;
ED00: CD5CEC  	renfile:call	autosel		;select proper drive and then switch
ED03: CD21E8  		call	chgnames	;file names.
ED06: C30CE7  		jp	ststatus
              	;
              	;   function to return the login vector.
              	;
ED09: 2ABAED  	getlog:	ld	hl,(login)
ED0C: C334ED  		jp	getprm1
              	;
              	;   function to return the current disk assignment.
              	;
ED0F: 3A4DE3  	getcrnt:ld	a,(active)
ED12: C30CE3  		jp	setstat
              	;
              	;   function to set the dma address.
              	;
ED15: EB      	putdma:	ex	de,hl
ED16: 22BCED  		ld	(userdma),hl	;save in our space and then get to
ED19: C3E5E5  		jp	defdma		;the bios with this also.
              	;
              	;   function to return the allocation vector.
              	;
ED1C: 2ACAED  	getaloc:ld	hl,(alocvect)
ED1F: C334ED  		jp	getprm1
              	;
              	;   function to return the read-only status vector.
              	;
ED22: 2AB8ED  	getrov:	ld	hl,(wrtprt)
ED25: C334ED  		jp	getprm1
              	;
              	;   function to set the file attributes (read-only, system).
              	;
ED28: CD5CEC  	setattr:call	autosel		;select proper drive then save attributes.
ED2B: CD46E8  		call	saveattr
ED2E: C30CE7  		jp	ststatus
              	;
              	;   function to return the address of the disk parameter block
              	; for the current drive.
              	;
ED31: 2AC6ED  	getparm:ld	hl,(diskpb)
ED34: 2250E3  	getprm1:ld	(status),hl
ED37: C9      		ret	
              	;
              	;   function to get or set the user number. if (e) was (ff)
              	; then this is a request to return the current user number.
              	; else set the user number from (e).
              	;
ED38: 3AE1ED  	getuser:ld	a,(eparam)	;get parameter.
ED3B: FEFF    		cp	0ffh		;get user number?
ED3D: C246ED  		jp	nz,setuser
ED40: 3A4CE3  		ld	a,(userno)	;yes, just do it.
ED43: C30CE3  		jp	setstat
ED46: E61F    	setuser:and	1fh		;no, we should set it instead. keep low
ED48: 324CE3  		ld	(userno),a	;bits (0-4) only.
ED4B: C9      		ret	
              	;
              	;   function to read a random record from a file.
              	;
ED4C: CD5CEC  	rdrandom: call	autosel		;select proper drive and read.
ED4F: C39EEB  		jp	readran
              	;
              	;   function to compute the file size for random files.
              	;
ED52: CD5CEC  	wtrandom: call	autosel		;select proper drive and write.
ED55: C3A7EB  		jp	writeran
              	;
              	;   function to compute the size of a random file.
              	;
ED58: CD5CEC  	filesize: call	autosel		;select proper drive and check file length
ED5B: C3DDEB  		jp	ransize
              	;
              	;   function #37. this allows a program to log off any drives.
              	; on entry, set (de) to contain a word with bits set for those
              	; drives that are to be logged off. the log-in vector and the
              	; write protect vector will be updated. this must be a m/pm
              	; special function.
              	;
ED5E: 2A4EE3  	logoff:	ld	hl,(params)	;get drives to log off.
ED61: 7D      		ld	a,l		;for each bit that is set, we want
ED62: 2F      		cpl			;to clear that bit in (login)
ED63: 5F      		ld	e,a		;and (wrtprt).
ED64: 7C      		ld	a,h
ED65: 2F      		cpl	
ED66: 2ABAED  		ld	hl,(login)	;reset the login vector.
ED69: A4      		and	h
ED6A: 57      		ld	d,a
ED6B: 7D      		ld	a,l
ED6C: A3      		and	e
ED6D: 5F      		ld	e,a
ED6E: 2AB8ED  		ld	hl,(wrtprt)
ED71: EB      		ex	de,hl
ED72: 22BAED  		ld	(login),hl	;and save.
ED75: 7D      		ld	a,l		;now do the write protect vector.
ED76: A3      		and	e
ED77: 6F      		ld	l,a
ED78: 7C      		ld	a,h
ED79: A2      		and	d
ED7A: 67      		ld	h,a
ED7B: 22B8ED  		ld	(wrtprt),hl	;and save. all done.
ED7E: C9      		ret	
              	;
              	;   get here to return to the user.
              	;
ED7F: 3AE9ED  	goback:	ld	a,(auto)	;was auto select activated?
ED82: B7      		or	a
ED83: CA9CED  		jp	z,goback1
ED86: 2A4EE3  		ld	hl,(params)	;yes, but was a change made?
ED89: 3600    		ld	(hl),0		;(* reset first byte of fcb *)
ED8B: 3AEBED  		ld	a,(autoflag)
ED8E: B7      		or	a
ED8F: CA9CED  		jp	z,goback1
ED92: 77      		ld	(hl),a		;yes, reset first byte properly.
ED93: 3AEAED  		ld	a,(olddrv)	;and get the old drive and select it.
ED96: 32E1ED  		ld	(eparam),a
ED99: CD50EC  		call	setdsk
ED9C: 2A1AE3  	goback1:ld	hl,(usrstack)	;reset the users stack pointer.
ED9F: F9      		ld	sp,hl
EDA0: 2A50E3  		ld	hl,(status)	;get return status.
EDA3: 7D      		ld	a,l		;force version 1.4 compatability.
EDA4: 44      		ld	b,h
EDA5: C9      		ret			;and go back to user.
              	;
              	;   function #40. this is a special entry to do random i/o.
              	; for the case where we are writing to unused disk space, this
              	; space will be zeroed out first. this must be a m/pm special
              	; purpose function, because why would any normal program even
              	; care about the previous contents of a sector about to be
              	; written over.
              	;
EDA6: CD5CEC  	wtspecl:call	autosel		;select proper drive.
EDA9: 3E02    		ld	a,2		;use special write mode.
EDAB: 32E0ED  		ld	(mode),a
EDAE: 0E00    		ld	c,0		;set write indicator.
EDB0: CD12EB  		call	positn1		;position the file.
EDB3: CC0EEA  		call	z,wtseq1	;and write (if no errors).
EDB6: C9      		ret	
              	;
              	;**************************************************************
              	;*
              	;*     bdos data storage pool.
              	;*
              	;**************************************************************
              	;
EDB7: E5      	emptyfcb: defb	0e5h		;empty directory segment indicator.
EDB8: 0000    	wrtprt:	defw	0		;write protect status for all 16 drives.
EDBA: 0000    	login:	defw	0		;drive active word (1 bit per drive).
EDBC: 8000    	userdma:defw	080h		;user's dma address (defaults to 80h).
              	;
              	;   scratch areas from parameter block.
              	;
EDBE: 0000    	scratch1: defw	0		;relative position within dir segment for file (0-3).
EDC0: 0000    	scratch2: defw	0		;last selected track number.
EDC2: 0000    	scratch3: defw	0		;last selected sector number.
              	;
              	;   disk storage areas from parameter block.
              	;
EDC4: 0000    	dirbuf:	defw	0		;address of directory buffer to use.
EDC6: 0000    	diskpb:	defw	0		;contains address of disk parameter block.
EDC8: 0000    	chkvect:defw	0		;address of check vector.
EDCA: 0000    	alocvect: defw	0		;address of allocation vector (bit map).
              	;
              	;   parameter block returned from the bios.
              	;
EDCC: 0000    	sectors:defw	0		;sectors per track from bios.
EDCE: 00      	blkshft:defb	0		;block shift.
EDCF: 00      	blkmask:defb	0		;block mask.
EDD0: 00      	extmask:defb	0		;extent mask.
EDD1: 0000    	dsksize:defw	0		;disk size from bios (number of blocks-1).
EDD3: 0000    	dirsize:defw	0		;directory size.
EDD5: 0000    	alloc0:	defw	0		;storage for first bytes of bit map (dir space used).
EDD7: 0000    	alloc1:	defw	0
EDD9: 0000    	offset:	defw	0		;first usable track number.
EDDB: 0000    	xlate:	defw	0		;sector translation table address.
              	;
              	;
EDDD: 00      	closeflg: defb	0		;close flag (=0ffh is extent written ok).
EDDE: 00      	rdwrtflg: defb	0		;read/write flag (0ffh=read, 0=write).
EDDF: 00      	fndstat:defb	0		;filename found status (0=found first entry).
EDE0: 00      	mode:	defb	0		;i/o mode select (0=random, 1=sequential, 2=special random).
EDE1: 00      	eparam:	defb	0		;storage for register (e) on entry to bdos.
EDE2: 00      	relblock: defb	0		;relative position within fcb of block number written.
EDE3: 00      	counter:defb	0		;byte counter for directory name searches.
EDE4: 00000000	savefcb:defw	0,0		;save space for address of fcb (for directory searches).
EDE8: 00      	bigdisk:defb	0		;if =0 then disk is > 256 blocks long.
EDE9: 00      	auto:	defb	0		;if non-zero, then auto select activated.
EDEA: 00      	olddrv:	defb	0		;on auto select, storage for previous drive.
EDEB: 00      	autoflag: defb	0		;if non-zero, then auto select changed drives.
EDEC: 00      	savnxt:	defb	0		;storage for next record number to access.
EDED: 00      	savext:	defb	0		;storage for extent number of file.
EDEE: 0000    	savnrec:defw	0		;storage for number of records in file.
EDF0: 0000    	blknmbr:defw	0		;block number (physical sector) used within a file or logical sect
EDF2: 0000    	logsect:defw	0		;starting logical (128 byte) sector of block (physical sector).
EDF4: 00      	fcbpos:	defb	0		;relative position within buffer for fcb of file of interest.
EDF5: 0000    	filepos:defw	0		;files position within directory (0 to max entries -1).
              	;
              	;   disk directory buffer checksum bytes. one for each of the
              	; 16 possible drives.
              	;
EDF7: 00000000	cksumtbl: defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
EDFB: 00...   	
              		
              	;
              	;*
              	;******************  P O S T - C C P   B O D G E S  *****************
              	;*
              		
              	; Small routine to print a decimal 0-19
EE07: FE3A    	printdc:cp	':'
EE09: DA8CD8  		jp	c,print
EE0C: D60A    		sub	10
EE0E: F5      		push	af
EE0F: 3E31    		ld	a,'1'
EE11: CD8CD8  		call	print
EE14: F1      		pop	af
EE15: 18F0    		jr	printdc
              	
              	;
              	;*
              	;******************   E N D   O F   C P / M   *****************
              	;*
              	
              	#include "bios.asm"
              	;
              	;**************************************************************
              	;*
              	;*        B I O S   B O O T   R O U T I N E S
              	;*
              	;**************************************************************
              	;
              	
              	;
              	;**************************************************************
              	;*
              	;*          B I O S   J U M P   T A B L E
              	;*
              	;*    This isn't actually used by the BDOS, but
              	;*    some applications (*cough* MBASIC) use it
              	;*    to directly address BIOS calls to get around
              	;*    the BDOS. 
              	;*
              	;**************************************************************
              	;
EE17: C34AEE  		jp	boot
EE1A: C358EE  	wbootin:jp	wboot	; Indirection to wboot, used by MBASIC
EE1D: C3B2EE  		jp	const
EE20: C3BDEE  		jp	conin
EE23: C3C9EE  		jp	conout
EE26: C3D5EE  		jp	list
EE29: C3D9EE  		jp	punch
EE2C: C3DDEE  		jp	reader
EE2F: C3EBEE  		jp	home
EE32: C3F0EE  		jp	seldsk
EE35: C30EEF  		jp	settrk
EE38: C312EF  		jp	setsec
EE3B: C316EF  		jp	setdma
EE3E: C31CEF  		jp	read
EE41: C320EF  		jp	write
EE44: C324EF  		jp	prstat
EE47: C327EF  		jp	sectrn
              	
              	; Cold boot entry
              	; Sets up some lower CP/M memory areas, and tells the INIT
              	; program to run on CP/M startup.
EE4A: 3100D8  	boot:	ld	sp,cbase
              	
              		; Run the warm boot common code
EE4D: CD6FEE  		call	wbootr
              		
              		; Special conditions for a cold boot
EE50: CD6AEF  		call	cbinit
              	
              		; Jump to CP/M
EE53: 0E00    		ld	c,default
EE55: C300D8  		jp	cbase
              	
              	
              	; Warm boot entry
              	; Mainly just calls wbootr and manages IOBYTE
EE58: 3100D8  	wboot:	ld	sp,cbase
              	
              		; Save current drive + user
EE5B: 3A0400  		ld	a,(tdrive)
EE5E: F5      		push	af
              	
              		; Save IOBYTE
EE5F: 3A0300  		ld	a,(iobyte)
EE62: F5      		push	af
              	
              		; Warm boot
EE63: CD6FEE  		call	wbootr
              		
              		; Restore IOBYTE
EE66: F1      		pop	af
EE67: 320300  		ld	(iobyte),a
              		
              		; Restore tdrive and warm boot
EE6A: F1      		pop	af
EE6B: 4F      		ld	c,a
EE6C: C300D8  		jp	cbase
              	
              	; Warm boot routine
              	; Sends init signal to device bus, loads CCP, and inits CP/M
              	; Does not actually jump to CP/M just yet
EE6F: F3      	wbootr:	di
              		
              		; Zero out BSS
EE70: AF      		xor	a
EE71: 21EDF8  		ld	hl,_TEXT_end
EE74: 77      		ld	(hl),a
EE75: 11EEF8  		ld	de,_TEXT_end+1
EE78: 01CA05  		ld	bc,_BSS_size
EE7B: EDB0    		ldir
              	
              		; Send init signals to all devices
EE7D: 0600    		ld	b,0
EE7F: C5      	wboot0:	push	bc
EE80: 217AEF  		ld	hl,bdevsw
EE83: 78      		ld	a,b
EE84: CD39EF  		call	swindir
EE87: AF      		xor	a
EE88: 14      		inc	d
EE89: CC56EF  		call	z,callmj
EE8C: C1      		pop	bc
EE8D: 04      		inc	b
EE8E: 3E14    		ld	a,20
EE90: B8      		cp	b
EE91: 20EC    		jr	nz,wboot0
              	
              		; Turn off batch mode
EE93: 3E00    		ld	a,0
EE95: 32B8DF  		ld	(batch),a
              	
              		; Load the CCP
EE98: CD74EF  		call	resccp
              	
              		; Call config init
EE9B: CD5BEF  		call	wbinit
              		
              		; Set up lower memory
EE9E: 21AAEE  		ld	hl,cpmlow
EEA1: 110000  		ld	de,0
EEA4: 010800  		ld	bc,8
EEA7: EDB0    		ldir
              	
              	
              		; Return
EEA9: C9      		ret
              	
              	
              	; This is not a true function, but a block of code to be copied
              	; to CP/M lower memory
EEAA: C31AEE  	cpmlow:	jp	wbootin	; Call jump table version instead
EEAD: 81      		defb	0x81	; Default IOBYTE
EEAE: 00      		defb	0	; Default drive
EEAF: C302E0  		jp	fbase-4	; 4 bytes before BDOS entry 
              	
              	
              	; Console status
              	;
              	; Returns a=0xFF if there is a character
              	; uses: all
              	; Defaults to device 0 right now
EEB2: 0600    	const:	ld	b,0
EEB4: CD2AEF  		call	cdindir
EEB7: 14      		inc	d
EEB8: C0      		ret	nz
EEB9: 3C      		inc	a
EEBA: C356EF  		jp	callmj
              		
              	; Console read
              	;
              	; Returns character in a
              	; uses: all
              	; Defaults to device 0 right now
EEBD: 0600    	conin:	ld	b,0
EEBF: CD2AEF  		call	cdindir
EEC2: 14      		inc	d
EEC3: C0      		ret	nz
EEC4: 3E02    		ld	a,2
EEC6: C356EF  		jp	callmj
              		
              	; Console write
              	; c = Character to display
              	;
              	; uses: all
              	; Defaults to device 0 right now
EEC9: 0600    	conout:	ld	b,0
EECB: CD2AEF  	chrout:	call	cdindir
EECE: 14      		inc	d
EECF: C0      		ret	nz
EED0: 3E03    		ld	a,3
EED2: C356EF  		jp	callmj
              		
              	; Printer write
              	; c = Character to print
              	;
              	; uses: all
EED5: 0606    	list:	ld	b,6
EED7: 18F2    		jr	chrout
              	
              	; Punch (or auxiliary) write
              	; c = Character to punch
              	;
EED9: 0604    	punch:	ld	b,4
EEDB: 18EE    		jr	chrout
              	
              	; Reader (or auxiliary) read
              	;
              	; Returns character in a, or a=0x1A
EEDD: 0602    	reader:	ld	b,2
EEDF: CD2AEF  		call	cdindir
EEE2: 14      		inc	d
EEE3: 3E1A    		ld	a,0x1A
EEE5: C0      		ret	nz
EEE6: 3E02    		ld	a,2
EEE8: C356EF  		jp	callmj
              		
              	; Move the current drive to track 0
              	;
              	; uses: all
EEEB: 3E01    	home:	ld	a,1
EEED: C308EF  		jp	callbd
              		
              	; Selects a block device
              	; c = Device to select
              	; e = Disk logging status
              	;
              	; return hl=0 if device not valid
              	; uses: all
EEF0: 79      	seldsk:	ld	a,c
EEF1: 43      		ld	b,e
EEF2: 217AEF  		ld	hl,bdevsw
EEF5: CD39EF  		call	swindir
EEF8: 2209EF  		ld	(callbd+1),hl
EEFB: 210000  		ld	hl,0
EEFE: 14      		inc	d
EEFF: C0      		ret	nz
EF00: 2A57EF  		ld	hl,(callmj+1)
EF03: 220CEF  		ld	(callbd+4),hl
EF06: 3E02    		ld	a,2
              		; Pass b = logging status, c = device #
              		
              	; Small stub to jump to the currently selected block device
              	; Also records hl as argument
              	;
              	; We love self-modfiying code!
EF08: 21      	callbd:	defb	0x21
EF09: 0000    		defw	0
EF0B: C3      		defb	0xC3
EF0C: 0000    		defw	0
              	
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	;
              	; uses: all
EF0E: 3E03    	settrk:	ld	a,3
EF10: 18F6    		jr	callbd
              		
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	;
              	; uses: all
EF12: 3E04    	setsec:	ld	a,4
EF14: 18F2    		jr	callbd
              	
              	; Sets the DMA address of the selected block device
              	; bc = DMA address
              	;
              	; uses: all
EF16: 60      	setdma:	ld	h,b
EF17: 69      		ld	l,c
EF18: 2259EF  		ld	(biodma),hl
EF1B: C9      		ret
              		
              	; Reads the configured block from the selected block device
              	;
              	; uses: all
EF1C: 3E05    	read:	ld	a,5
EF1E: 18E8    		jr	callbd
              	
              	; Writes the configured block to the selected block device
              	; c = Deferred mode
              	;
              	; uses: all
EF20: 3E06    	write:	ld	a,6
EF22: 18E4    		jr	callbd
              		
              	; "Printer" is always read for bytes
              	; Maybe in the future we will implement this, but for now
              	; this will do.
              	;
              	; Returns a=0xFF
EF24: 3EFF    	prstat:	ld	a,0xFF
EF26: C9      		ret
              		
              	; Provides sector translation
              	; Returns no translation for all devices
EF27: 60      	sectrn:	ld	h,b
EF28: 69      		ld	l,c
EF29: C9      		ret
              		
              	; Character device switch indirection
              	; Obtains device by doing IOBYTE indirection
              	; Sets hl to cdevsw and jumps to swindir
EF2A: 04      	cdindir:inc	b
EF2B: 3A0300  		ld	a,(iobyte)
EF2E: 05      	cdindi0:dec	b
EF2F: 2803    		jr	z,cdindi1
EF31: 1F      		rra
EF32: 18FA    		jr	cdindi0
EF34: E603    	cdindi1:and	0x03
EF36: 21BAEF  		ld	hl,cdevsw
              	
              	; Switch indirect helper function
              	; a = Device
              	; hl = Start of switch
              	;
              	; returns d=255 if device found, hl as argument
              	; uses: af, de, hl
EF39: 110400  	swindir:ld	de,4
EF3C: B7      		or	a
EF3D: 2804    	swindi0:jr	z,swindi1
EF3F: 19      		add	hl,de
EF40: 3D      		dec	a
EF41: 18FA    		jr	swindi0
EF43: 7E      	swindi1:ld	a,(hl)
EF44: 3257EF  		ld	(callmj+1),a
EF47: 23      		inc	hl
EF48: B6      		or	(hl)
EF49: C8      		ret	z
EF4A: 7E      		ld	a,(hl)
EF4B: 3258EF  		ld	(callmj+2),a
EF4E: 23      		inc	hl
EF4F: 7E      		ld	a,(hl)
EF50: 23      		inc	hl
EF51: 66      		ld	h,(hl)
EF52: 6F      		ld	l,a
EF53: 16FF    		ld	d,255
EF55: C9      	nulldev:ret		; Just points to a return
              	
              	; Small stub to jump to the memory jump register
EF56: C3      	callmj: defb	0xC3
EF57: 0000    		defw	0
              	
              	
              	
              	; Variables
EF59: 0000    	biodma:	defw	0	; Block device DMA address
              	
              	;
              	;**************************************************************
              	;*
              	;*        W A R M   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function is called at the end of a warm boot
              	;*    to set up hardware-specific stuff. 
              	;*
              	;**************************************************************
              	;
              	
EF5B: 3E01    	wbinit:	ld	a,0x01		; Bank out ROM
EF5D: D300    		out	(0x00),a
              	
              		; Turn on batch mode
EF5F: 3EFF    		ld	a,0xFF
EF61: 32B8DF  		ld	(batch),a
              		
              		; Also set interrupt mode 2 stuff
EF64: ED47    		ld	i,a
EF66: ED5E    		im	2		; Start interrupts
EF68: FB      		ei
              		
EF69: C9      		ret
              	
              	;
              	;**************************************************************
              	;*
              	;*        C O L D   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function will run once during the intial cold
              	;*    boot. It is the last task to run before control is
              	;*    given to the CCP. This function is run after wbinit
              	;*
              	;**************************************************************
              	;
              	
EF6A: 3E06    	cbinit:	ld	a,6	; Enable INIT to run
EF6C: 3207D8  		ld	(inbuff+1),a
EF6F: C9      		ret
              	
              	;
              	;**************************************************************
              	;*
              	;*            I N T E R R U P T   H A N D L I N G
              	;*
              	;*     This function will be called in order to handle an
              	;*     interrupt if the need arises. Hooking drivers up to
              	;*     this code may be a little bit more involved.
              	;*
              	;**************************************************************
              	;
              	
EF70: FB      	cfirq:	ei
EF71: ED4D    		reti
              	
              	;
              	;**************************************************************
              	;*
              	;*              B D O S   C A L L   H O O K
              	;*
              	;*     This function is called everytime a BDOS call occurs.
              	;*     It can be used by specialized drivers to either inject
              	;*     new BDOS calls, or intercept existing ones.
              	;*
              	;*     Registers 'bc' and 'e' must be preserved if a call is
              	;*     going to be forwarded to the system. Register 'c' will
              	;*     contain BDOS call number.
              	;*       
              	;*
              	;**************************************************************
              	;
              	
EF73: C9      	syshook:ret
              	
              	
              	;**************************************************************
              	;*
              	;*           B L O C K   D E V I C E   S W I T C H
              	;*
              	;*       IshkurCP/M can support up to 16 logical disks
              	;*       A single driver can be mapped to a number of
              	;*       these disks. Each logical disk is defined by a
              	;*       4-byte record. The first 2 bytes are a pointer
              	;*       to the device entry, and the last 2 are passed
              	;*       as an argument to the device. Usually this 
              	;*       takes the form of a minor number for indexing
              	;*       sub-disks on the same driver
              	;*
              	;*
              	;**************************************************************
              	;
              		
              	; One of the block devices needs to have the responsibiliy
              	; of loading the CCP into memory. Define the jump vector here
EF74: C31CF4  	resccp:	jp	nd_ccp
              	
              	; Additionally, if Ishkur is using a graphical device, that
              	; device may temporarily need to access the Graphical Resource
              	; Block (GRB) to load in fonts and such. This is up to 2k in
              	; size, and goes in the location that the CCP resides
EF77: C321F4  	resgrb:	jp	nd_grb
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
EF7A: 68F30000	bdevsw:	defw	ndkdev,	0	; 'A'
EF7E: 68F30100		defw	ndkdev,	1	; 'B'
EF82: F8F50000		defw	nfddev,	0	; 'C'
EF86: F8F50100		defw	nfddev,	1	; 'D'
EF8A: 00000000		defw	0,	0	; 'E'
EF8E: 00000000		defw	0,	0	; 'F'
EF92: 00000000		defw	0,	0	; 'G'
EF96: 00000000		defw	0,	0	; 'H'
EF9A: 00000000		defw	0,	0	; 'I'
EF9E: 00000000		defw	0,	0	; 'J'
EFA2: 00000000		defw	0,	0	; 'K'
EFA6: 00000000		defw	0,	0	; 'L'
EFAA: 00000000		defw	0,	0	; 'M'
EFAE: 00000000		defw	0,	0	; 'N'
EFB2: 00000000		defw	0,	0	; 'O'
EFB6: 00000000		defw	0,	0	; 'P'
              	
              	;
              	; Character device switch MUST come directly after in memory!
              	;
              	;**************************************************************
              	;*
              	;*        C H A R A C T E R   D E V I C E   S W I T C H
              	;*
              	;*      Currently, 4 character devices are supported. These
              	;*      devices are the console, the printer, and two "punches"
              	;*      (can be thought of as an auxillary serial device).
              	;*      All character devices use the same interface, which
              	;*      allows for easy indireciton. 
              	;*
              	;*	Device switch logic works about the same of the block
              	;*	devices.
              	;*
              	;**************************************************************
              	;
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
EFBA: 5FF80000	cdevsw:	defw	siodev,	0	; TTY device
EFBE: CAEF0000		defw	vdpdev,	0	; Console device
EFC2: 35F80000		defw	prtdev,	0	; Aux I/O device #1 (LPT)
EFC6: 00000000		defw	0,	0	; Aux I/O device #2 (GEN)
              	
              	;
              	;**************************************************************
              	;*
              	;*        D E V I C E   D R I V E R   I N C L U D E S
              	;*
              	;**************************************************************
              	;
              	
              	#include "dev/nabu_vdp.asm"
              	;
              	;**************************************************************
              	;*
              	;*      T M S 9 9 1 8   C H A R A C T E R   D E V I C E
              	;*
              	;*      This device emulated a VT52 terminal using the
              	;*      TMS9918A graphics chip. The 2kb font record is
              	;*      not resident is memory, and must be provided by
              	;*      a compatable block I/O device.
              	;*
              	;*      F18A style 80 column mode is supported
              	;*
              	;*      This specific version uses the NABU keyboard as
              	;*      an input to the emulated termina 
              	;*
              	;*      Device requires 48 bytes of bss space (tm_bss)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
F8ED: 00      	tm_outc:defs	1	; Output character
F8EE: 00      	tm_scro:defs	1	; Scroll width
F8EF: 00      	tm_escs:defs	1	; Escape state
F8F0: 00      	tm_last:defs	1	; Last character read
F8F1: 00000000	tm_cbuf:defs	40	; 40 byte character buffer
F8F5: 00...   	
              	.area	_TEXT
              	
              	; TMS9918 Configuration
00A0:         	tm_data	equ	0xA0	; TMS9918 data register (mode=0)
00A1:         	tm_latc	equ	0xA1	; TMS9918 latch register (mode=1)
              	
0090:         	tm_keyd	equ	0x90	; Keyboard data register
0091:         	tm_keys	equ	0x91	; Keyboard status register
              	
0040:         	tm_ayda	equ	0x40	; AY-3-8910 data port
0041:         	tm_atla	equ	0x41	; AY-3-8910 latch port
              	
              	; --- VRAM MAP ---
              	; 0x0000 - 0x07FF: Font
              	; 0x0800 - 0x0BFF: 40 column screen buffer
              	; 0x0C00 - 0x0FFF: Unused
              	; 0x1000 - 0x17FF: 80 column screen buffer
              	;
              	; Serial #
              	; 0x17FE: 0xE5
              	; 0x17FF: 0x81
              	
              	
              	; Driver jump table
EFCA: B7      	vdpdev:	or	a
EFCB: 2839    		jr	z,tm_init
EFCD: 3D      		dec	a
EFCE: 2819    		jr	z,tm_stat
EFD0: 3D      		dec	a
EFD1: CAA8F0  		jp	z,tm_read
EFD4: C3FAF0  		jp	tm_writ
              	
              	; A slower version of the OTIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
EFD7: F5      	tm_otir:push	af
EFD8: 7E      	tm_oti0:ld	a,(hl)
EFD9: ED79    		out	(c),a
EFDB: 23      		inc	hl
EFDC: 10FA    		djnz	tm_oti0
EFDE: F1      		pop	af
EFDF: C9      		ret
              		
              	; A slower version of the INIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
EFE0: F5      	tm_inir:push	af
EFE1: ED78    	tm_inr0:in	a,(c)
EFE3: 77      		ld	(hl),a
EFE4: 23      		inc	hl
EFE5: 10FA    		djnz	tm_inr0
EFE7: F1      		pop	af
EFE8: C9      		ret
              	
              	
              	; Gets the status of the keyboard
              	;
              	; Returns a=0xFF if there is a key to read 
              	; uses: af, bc, de, hl
EFE9: 3AF0F8  	tm_stat:ld	a,(tm_last)
EFEC: FEE4    		cp	0xE4
EFEE: 2871    		jr	z,tm_scri
EFF0: FEE5    		cp	0xE5
EFF2: 287F    		jr	z,tm_sclf
EFF4: 3AEDF8  	tm_sta0:ld	a,(tm_outc)
EFF7: 3C      		inc	a
EFF8: 3EFF    		ld	a,0xFF
EFFA: C0      		ret	nz
EFFB: CD2EF2  		call	tm_getc
EFFE: 32EDF8  		ld	(tm_outc),a
F001: 3C      		inc	a
F002: C8      		ret	z
F003: 3EFF    		ld	a,0xFF
F005: C9      		ret
              	
              	; TMS9918 init
              	; Load font record, set up terminal
F006: CD77EF  	tm_init:call	resgrb
              	
              		; Set up registers
F009: CD7DF0  		call	tm_setp
              		
              		; Set up interrupt vectors (if needed)
F00C: 2119F3  		ld	hl,tm_virq
F00F: 2206FF  		ld	(intvec+6),hl
F012: 214CF2  		ld	hl,tm_kirq
F015: 2204FF  		ld	(intvec+4),hl
              		
              		; Set TMS pattern generator block to 0
F018: DBA1    		in	a,(tm_latc)
F01A: AF      		xor	a
F01B: D3A1    		out	(tm_latc),a
F01D: 3E84    		ld	a,0x84
F01F: D3A1    		out	(tm_latc),a
              		
              		; Write the GRB
F021: 010040  		ld	bc,0x4000
F024: CD0EF3  		call	tm_addr
F027: 2100D8  		ld	hl,cbase
F02A: 0EA0    		ld	c,tm_data
F02C: 3E08    		ld	a,8	; Transfer 8*256 = 2048
F02E: 0600    	tm_ini0:ld	b,0
F030: CDD7EF  		call	tm_otir
F033: 3D      		dec	a
F034: 20F8    		jr	nz,tm_ini0
              		
              		; Cold boot?
F036: 3A38F3  		ld	a,(tm_cold)
F039: B7      		or	a
F03A: 2012    		jr	nz,tm_ini1
              		
              		; Check serial #
F03C: 01FE17  		ld	bc,0x17FE
F03F: CD0EF3  		call	tm_addr
F042: ED78    		in	a,(c)
F044: FEE5    		cp	0xE5
F046: 2006    		jr	nz,tm_ini1
F048: ED78    		in	a,(c)
F04A: FE81    		cp	0x81
F04C: 280D    		jr	z,tm_cloc
              		
              		; Reset the terminal
F04E: CDF1F2  	tm_ini1:call	tm_cls
F051: AF      		xor	a
F052: 3236F3  		ld	(tm_curx),a
F055: 3237F3  		ld	(tm_cury),a
F058: 3238F3  		ld	(tm_cold),a
              		
              		; Fall to tm_cloc
              		
              	; Clear the output character
              	;
              	; uses: af
F05B: 3EFF    	tm_cloc:ld	a,0xFF
F05D: 32EDF8  		ld	(tm_outc),a
              	
F060: C9      		ret
              		
              	; Scroll left / scroll right
              	;
              	; uses: af, bc, de, hl
F061: 3AEEF8  	tm_scri:ld	a,(tm_scro)
F064: B7      		or	a
F065: FE28    		cp	40
F067: 2808    		jr	z,tm_scr1
F069: C604    		add	a,4
F06B: 32EEF8  	tm_scr0:ld	(tm_scro),a
F06E: CDCEF2  		call	tm_usco
F071: 1881    	tm_scr1:jr	tm_sta0
F073: 3AEEF8  	tm_sclf:ld	a,(tm_scro)
F076: B7      		or	a
F077: 28F8    		jr	z,tm_scr1
F079: D604    		sub	4
F07B: 18EE    		jr	tm_scr0
              	
              	; Sets up registers depending on mode
              	; used to change between 40-col and 80-col
              	;
              	; uses: af, hl
F07D: 2A31F3  	tm_setp:ld	hl,(tm_mode)
              	
              		; Set TMS to text mode
F080: DBA1    		in	a,(tm_latc)
F082: 7C      		ld	a,h
F083: D3A1    		out	(tm_latc),a
F085: 3E80    		ld	a,0x80
F087: D3A1    		out	(tm_latc),a
F089: DBA1    		in	a,(tm_latc)
F08B: 3EF0    		ld	a,0xF0
F08D: D3A1    		out	(tm_latc),a
F08F: 3E81    		ld	a,0x81
F091: D3A1    		out	(tm_latc),a
              		
              		; Set TMS color
F093: DBA1    		in	a,(tm_latc)
F095: 3A33F3  		ld	a,(tm_colr)
F098: D3A1    		out	(tm_latc),a
F09A: 3E87    		ld	a,0x87
F09C: D3A1    		out	(tm_latc),a
              		
              		; Set TMS name table to 0x0800
F09E: DBA1    		in	a,(tm_latc)
F0A0: 7D      		ld	a,l
F0A1: D3A1    		out	(tm_latc),a
F0A3: 3E82    		ld	a,0x82
F0A5: D3A1    		out	(tm_latc),a
F0A7: C9      		ret
              	
              	; Waits for the user to press a key, and returns it
              	;
              	; Returns ASCII key in A
              	; uses: af, bc, de, hl
F0A8: 3A36F3  	tm_read:ld	a,(tm_curx)
F0AB: 4F      		ld	c,a
F0AC: 3A37F3  		ld	a,(tm_cury)
F0AF: 57      		ld	d,a
F0B0: 210010  		ld	hl,0x1000
F0B3: 3E50    		ld	a,80
F0B5: CDAAF2  		call	tm_chat
F0B8: DBA0    		in	a,(tm_data)	; char is in A
F0BA: 57      		ld	d,a		; char key
F0BB: 5F      		ld	e,a		; blinking char
F0BC: 0601    		ld	b,1
              		
F0BE: D5      	tm_rea0:push	de
F0BF: CDE9EF  		call	tm_stat
F0C2: D1      		pop	de
F0C3: 3C      		inc	a
F0C4: 200D    		jr	nz,tm_rea1
F0C6: 5A      		ld	e,d
F0C7: CDE3F0  		call	tm_rea2
F0CA: 3AEDF8  		ld	a,(tm_outc)
F0CD: 47      		ld	b,a
F0CE: CD5BF0  		call	tm_cloc
F0D1: 78      		ld	a,b
F0D2: C9      		ret
              		
F0D3: CDF1F0  	tm_rea1:call	tm_stal
F0D6: 10E6    		djnz	tm_rea0
F0D8: 3E80    		ld	a,0x80
F0DA: AB      		xor	e
F0DB: 5F      		ld	e,a
F0DC: CDE3F0  		call	tm_rea2
F0DF: 06BE    		ld	b,190
F0E1: 18DB    		jr	tm_rea0
              	
              	
F0E3: D5      	tm_rea2:push	de
F0E4: 3A36F3  		ld	a,(tm_curx)
F0E7: 4F      		ld	c,a
F0E8: 3A37F3  		ld	a,(tm_cury)
F0EB: 57      		ld	d,a
F0EC: CD86F2  		call	tm_putc
F0EF: D1      		pop	de
F0F0: C9      		ret
              	
              	; Stalls out for a little bit
              	;
              	; uses: none
F0F1: C5      	tm_stal:push	bc
F0F2: 06FF    		ld	b,255
F0F4: C5      	tm_sta1:push	bc
F0F5: C1      		pop	bc
F0F6: 10FC    		djnz	tm_sta1
F0F8: C1      		pop	bc
F0F9: C9      		ret
              	
              	
              	; Writes a character to the screen
              	; c = Character to write
              	;
              	; Returns c,b as next position 
              	; uses: af, bc, de, hl
F0FA: CD1FF3  	tm_writ:call	tm_dint
F0FD: 59      		ld	e,c
F0FE: 3A36F3  		ld	a,(tm_curx)
F101: 4F      		ld	c,a
F102: 3A37F3  		ld	a,(tm_cury)
F105: 57      		ld	d,a
F106: CD15F1  		call	tm_wri0
F109: 78      		ld	a,b
F10A: 3237F3  		ld	(tm_cury),a
F10D: 79      		ld	a,c
F10E: 3236F3  		ld	(tm_curx),a
F111: CD28F3  		call	tm_eint
F114: C9      		ret
              		
              	; Write helper routine
              	; c = X position
              	; d = Y position
              	; e = Character
              	;
              	; Returns c,b as next position
F115: 42      	tm_wri0:ld	b,d		; c = X, b = Y
F116: 3AEFF8  		ld	a,(tm_escs)
F119: B7      		or	a		; Process escape code
F11A: C282F1  		jp	nz,tm_esc
F11D: 3E1F    		ld	a,0x1F
F11F: BB      		cp	e
F120: D254F1  		jp	nc,tm_wri1	; Process control code
F123: C5      		push	bc
F124: CD86F2  		call	tm_putc		; Write character
F127: C1      		pop	bc
              		
              		; Increment character
F128: 0C      	tm_ri	inc	c
F129: 3E50    		ld	a,80
F12B: B9      		cp	c
F12C: C0      		ret	nz
F12D: AF      		xor	a
F12E: 4F      		ld	c,a
F12F: 04      	tm_lf:  inc	b	; Line feed
F130: 3E18    		ld	a,24
F132: B8      		cp	b
F133: C0      		ret	nz
F134: C5      		push	bc
F135: CD08F2  		call	tm_dsco
F138: C1      		pop	bc
F139: 05      		dec	b
F13A: C9      		ret
F13B: AF      	tm_cr:	xor	a	; Carriage return
F13C: 4F      		ld	c,a
F13D: C9      		ret
F13E: 0D      	tm_bs:	dec	c	; Backspace 
F13F: F0      		ret	p
F140: 0E4F    		ld	c,79
F142: 05      		dec	b
F143: F0      		ret	p
F144: AF      		xor	a
F145: 47      		ld	b,a
F146: 4F      		ld	c,a
F147: C9      		ret
F148: AF      	tm_up:	xor	a	; Move up
F149: B8      		cp	b
F14A: C8      		ret	z
F14B: 05      		dec	b
F14C: C9      		ret
F14D: CDF1F2  	tm_cshm:call	tm_cls
F150: AF      	tm_home:xor	a
F151: 47      		ld	b,a
F152: 4F      		ld	c,a
F153: C9      		ret
              	
F154: 7B      	tm_wri1:ld	a,e
F155: FE08    		cp	0x08	; '\b' (Cursor left)
F157: 28E5    		jr	z,tm_bs
F159: FE12    		cp	0x12	; Cursor right
F15B: 28CB    		jr	z,tm_ri
F15D: FE0A    		cp	0x0A	; '\n' (Cursor down)
F15F: 28CE    		jr	z,tm_lf
F161: FE0B    		cp	0x0B	; Cursor up
F163: 28E3    		jr	z,tm_up
F165: FE0D    		cp	0x0D	; '\r' 
F167: 28D2    		jr	z,tm_cr
F169: FE17    		cp	0x17	; Clear end of screen
F16B: 2856    		jr	z,tm_cles
F16D: FE18    		cp	0x18	; Clear end of line
F16F: 2854    		jr	z,tm_clea
F171: FE1A    		cp	0x1A	; Clear screen, home cursor
F173: 28D8    		jr	z,tm_cshm
F175: FE1E    		cp	0x1E	; Home cursor
F177: 28D7    		jr	z,tm_home
F179: FE1B    		cp	0x1B	; Escape
F17B: C0      		ret	nz
F17C: 3E01    		ld	a,1
F17E: 32EFF8  		ld	(tm_escs),a
F181: C9      		ret
              		
              		; Handle escape sequence
F182: 3D      	tm_esc:	dec	a
F183: 280E    		jr	z,tm_esc0
F185: 3D      		dec	a
F186: 2825    		jr	z,tm_esc1
F188: 3D      		dec	a
F189: 282D    		jr	z,tm_esc2
F18B: 3D      		dec	a
F18C: 2871    		jr	z,tm_updc
F18E: AF      	tm_escd:xor	a	; Escape done
F18F: 32EFF8  	tm_escr:ld	(tm_escs),a
F192: C9      		ret
F193: 3EFF    	tm_esc0:ld	a,0xFF	; Do 40-col
F195: BB      		cp	e
F196: 2850    		jr	z,tm_40c
F198: 3EFE    		ld	a,0xFE	; Do 80-col
F19A: BB      		cp	e
F19B: 2858    		jr	z,tm_80c
F19D: 3EFD    		ld	a,0xFD	; Set color
F19F: BB      		cp	e
F1A0: 2859    		jr	z,tm_scol
F1A2: 3E3D    		ld	a,0x3D	; '='
F1A4: BB      		cp	e
F1A5: 20E7    		jr	nz,tm_escd
F1A7: 3AEFF8  	tm_esci:ld	a,(tm_escs)
F1AA: 3C      		inc	a
F1AB: 18E2    		jr	tm_escr
F1AD: 7B      	tm_esc1:ld	a,e
F1AE: 1E20    		ld	e,0x20
F1B0: 93      		sub	e
F1B1: FE18    		cp	24
F1B3: 30D9    		jr	nc,tm_escd
F1B5: 47      		ld	b,a
F1B6: 18EF    		jr	tm_esci
F1B8: 7B      	tm_esc2:ld	a,e
F1B9: 1E20    		ld	e,0x20
F1BB: 93      		sub	e
F1BC: FE50    		cp	80
F1BE: 30CE    		jr	nc,tm_escd
F1C0: 4F      		ld	c,a
F1C1: 18CB    		jr	tm_escd
              		
              		; Clear segment
              		; B = ending line
F1C3: 0617    	tm_cles:ld	b,23
F1C5: 04      	tm_clea:inc	b
F1C6: 1E00    		ld	e,0
F1C8: C5      		push	bc
F1C9: D5      		push	de
F1CA: 3E50    		ld	a,80
F1CC: 210050  		ld	hl,0x5000
F1CF: CDAAF2  		call	tm_chat
F1D2: D1      		pop	de
F1D3: C1      		pop	bc
F1D4: AF      	tm_cle0:xor	a
F1D5: D3A0    		out	(tm_data),a
F1D7: 0C      		inc	c
F1D8: 3E50    		ld	a,80
F1DA: B9      		cp	c
F1DB: 20F7    		jr	nz,tm_cle0
F1DD: 14      		inc	d
F1DE: AF      		xor	a
F1DF: 4F      		ld	c,a
F1E0: 7A      		ld	a,d
F1E1: B8      		cp	b
F1E2: 20F0    		jr	nz,tm_cle0
F1E4: D1      		pop	de	; Do not update character
F1E5: C3CEF2  		jp	tm_usco
              		
F1E8: E5      	tm_40c:	push	hl
F1E9: 210200  		ld	hl,0x0002
F1EC: 2231F3  	tm_cupd:ld	(tm_mode),hl
F1EF: CD7DF0  		call	tm_setp
F1F2: E1      		pop	hl
F1F3: 1899    		jr	tm_escd
              		
F1F5: E5      	tm_80c:	push	hl
F1F6: 210704  		ld	hl,0x0407
F1F9: 18F1    		jr	tm_cupd
              		
              		; Set color command
F1FB: 3E04    	tm_scol:ld	a,4
F1FD: 1890    		jr	tm_escr
              		
              		; Update color here
F1FF: 7B      	tm_updc:ld	a,e
F200: 3233F3  		ld	(tm_colr),a
F203: CD7DF0  		call	tm_setp
F206: 1886    		jr	tm_escd
              		
              		
              		
              	; Scroll both frame buffers down one
              	;
              	; uses: af, bc, de, hl
F208: 212808  	tm_dsco:ld	hl,0x0800+40
F20B: 110048  		ld	de,0x4800
F20E: 0618    		ld	b,24
F210: CD1BF2  		call	tm_dsc0
F213: 215010  		ld	hl,0x1000+80
F216: 110050  		ld	de,0x5000
F219: 0630    		ld	b,48
F21B: C5      	tm_dsc0:push	bc
F21C: D5      		push	de
F21D: E5      		push	hl
F21E: CDB6F2  		call	tm_vcpy
F221: E1      		pop	hl
F222: D1      		pop	de
F223: 012800  		ld	bc,40
F226: 09      		add	hl,bc
F227: EB      		ex	de,hl
F228: 09      		add	hl,bc
F229: EB      		ex	de,hl
F22A: C1      		pop	bc
F22B: 10EE    		djnz	tm_dsc0
F22D: C9      		ret
              		
              	
              	; Grabs the latest key pressed by the keyboard
              	; Discard keyboard errors
              	; Returns key in A, or 0xFF if none
              	;
              	; uses: af, bc, de, hl
F22E: 3A35F3  	tm_getc:ld	a,(tm_inf)
F231: B7      		or	a
F232: 3E00    		ld	a,0
F234: 3235F3  		ld	(tm_inf),a
F237: 3A34F3  		ld	a,(tm_inb)
F23A: 2008    		jr	nz,tm_get0
              	
F23C: DB91    		in	a,(tm_keys)
F23E: E602    		and	2
F240: 3D      		dec	a
F241: F8      		ret	m
              		
              		; Grab the key
F242: DB90    		in	a,(tm_keyd)
F244: 32F0F8  	tm_get0:ld	(tm_last),a
F247: CD5AF2  		call	tm_map
F24A: 79      		ld	a,c
F24B: C9      		ret
              		
              	; Handles a keyboard interrupt for the VDP terminal driver
              	; Keypress stored in tm_inb and tm_inf flag is set
              	; 
              	; uses: none
F24C: F5      	tm_kirq:push	af
F24D: DB90    		in	a,(tm_keyd)
F24F: 3234F3  		ld	(tm_inb),a
F252: 3E01    		ld	a,1
F254: 3235F3  		ld	(tm_inf),a
F257: F1      		pop	af
F258: FB      		ei
F259: C9      		ret
              		
              		
              	; Maps keyboard input to ASCII
              	; a = Key to map
              	;
              	; Returns mapped key in c
              	; uses: af, c
F25A: 4F      	tm_map:	ld	c,a
              		
              		; Mapping function
F25B: 2171F2  		ld	hl,tm_mapt
F25E: 7E      	tm_map0:ld	a,(hl)
F25F: B7      		or	a
F260: 2808    		jr	z,tm_map2
F262: B9      		cp	c
F263: 23      		inc	hl
F264: 7E      		ld	a,(hl)
F265: 23      		inc	hl
F266: 20F6    		jr	nz,tm_map0
F268: 4F      		ld	c,a
F269: C9      		ret
              		
              		
              		; Filter non-ASCII
F26A: 79      	tm_map2:ld	a,c
F26B: E680    		and	0x80	
F26D: C8      		ret	z
F26E: 0EFF    		ld	c,0xFF
F270: C9      		ret
              		
              	; Map table
F271: 7F08    	tm_mapt:defb	0x7F,0x08	; DEL -> BS
F273: E108    		defb	0xE1,0x08	; '<-' -> BS
F275: EA7F    		defb	0xEA,0x7F	; TV -> DEL
F277: E00C    		defb	0xE0,0x0C	; '->' -> Right
F279: E20B    		defb	0xE2,0x0B	; '/\' -> Up
F27B: E30A    		defb	0xE3,0x0A	; '\/' -> Linefeed 
F27D: E95C    		defb	0xE9,0x5C	; PAUSE -> '\'
F27F: E860    		defb	0xE8,0x60	; SYM -> '@'
F281: E67C    		defb	0xE6,0x7C	; NO -> '|'
F283: E77E    		defb	0xE7,0x7E	; YES -> '~'
F285: 00      		defb	0
              	
              	; Puts a character on the screen
              	; c = X position
              	; d = Y position
              	; e = Character to put
              	;
              	; uses: af, bc, de, hl
F286: 210050  	tm_putc:ld	hl,0x5000
F289: 3E50    		ld	a,80
F28B: C5      		push	bc
F28C: D5      		push	de
F28D: CDAAF2  		call	tm_chat	; Place it in the 80 col buffer
F290: ED59    		out	(c),e
F292: D1      		pop	de
F293: C1      		pop	bc
F294: 3AEEF8  	tm_putf:ld	a,(tm_scro)	; Place into frame buffer
F297: 47      		ld	b,a
F298: 79      		ld	a,c
F299: 90      		sub	b	; If character is less than scroll...
F29A: 4F      		ld	c,a
F29B: F8      		ret	m
F29C: FE28    		cp	40	; If desired position is 40 or more
F29E: D0      		ret	nc
F29F: 210048  		ld	hl,0x4800
F2A2: 3E28    		ld	a,40
F2A4: CDAAF2  		call	tm_chat	; Place it in the 40 col screen buffer
F2A7: ED59    		out	(c),e
F2A9: C9      		ret
              	
              	; Sets the TMS address to a character at x,y
              	; a = Line width
              	; c = X position
              	; d = Y position
              	; hl = Buffer address
              	;
              	; uses: af, bc, d, hl
F2AA: 0600    	tm_chat:ld	b,0
F2AC: 09      		add	hl,bc
F2AD: 4F      		ld	c,a
F2AE: AF      		xor	a
F2AF: BA      		cp	d
F2B0: 285A    	tm_cha0:jr	z,tm_addh
F2B2: 09      		add	hl,bc
F2B3: 15      		dec	d
F2B4: 18FA    		jr	tm_cha0
              	
              	; Copies VRAM from one location to another
              	; Transfers occur in blocks of 40 bytes
              	; de = destination address
              	; hl = source location
              	;
              	; b = 0 on return
              	; uses: af, bc, de, hl
F2B6: CD0CF3  	tm_vcpy:call	tm_addh
F2B9: 0628    		ld	b,40
F2BB: 21F1F8  		ld	hl,tm_cbuf
F2BE: CDE0EF  		call	tm_inir
F2C1: EB      		ex	de,hl
F2C2: CD0CF3  		call	tm_addh
F2C5: 0628    		ld	b,40
F2C7: 21F1F8  		ld	hl,tm_cbuf
F2CA: CDD7EF  		call	tm_otir
F2CD: C9      		ret
              		
              	; Updates the frame buffer based on the scroll position
              	;
              	; uses: af, bc, de, hl
F2CE: 210010  	tm_usco:ld	hl,0x1000
F2D1: 110048  		ld	de,0x4800
F2D4: 3AEEF8  		ld	a,(tm_scro)
F2D7: 0600    		ld	b,0
F2D9: 4F      		ld	c,a
F2DA: 09      		add	hl,bc
F2DB: 0618    		ld	b,24
F2DD: C5      	tm_usc0:push	bc
F2DE: D5      		push	de
F2DF: E5      		push	hl
F2E0: CDB6F2  		call	tm_vcpy
F2E3: E1      		pop	hl
F2E4: D1      		pop	de
F2E5: 0E50    		ld	c,80
F2E7: 09      		add	hl,bc
F2E8: EB      		ex	de,hl
F2E9: 0E28    		ld	c,40
F2EB: 09      		add	hl,bc
F2EC: EB      		ex	de,hl
F2ED: C1      		pop	bc
F2EE: 10ED    		djnz	tm_usc0
F2F0: C9      		ret
              		
              	
              	; Clears out screen buffer and offscreen buffer
              	; Also includes clear limited function
              	;
              	; uses: af, bc, de
F2F1: 010048  	tm_cls:	ld	bc,0x4800
F2F4: 11FE0F  		ld	de,0x1000-2
F2F7: CD0EF3  		call	tm_addr
F2FA: ED71    	tm_cls0:out	(c),0
F2FC: 1B      		dec	de
F2FD: 7A      		ld	a,d
F2FE: B3      		or	e
F2FF: 20F9    		jr	nz,tm_cls0
              		
              		; Write super special serial #
F301: 3EE5    		ld	a,0xE5
F303: ED79    		out	(c),a
F305: F5      		push	af
F306: F1      		pop	af
F307: 3E81    		ld	a,0x81
F309: ED79    		out	(c),a
F30B: C9      		ret
              	
              	; Sets the TMS address for either reading or writing
              	; bc = Address 
              	;
              	; Returns tm_data in c
              	; uses: af, bc
F30C: 44      	tm_addh:ld	b,h		; Does HL instead of BC
F30D: 4D      		ld	c,l
F30E: DBA1    	tm_addr:in	a,(tm_latc)
F310: 79      		ld	a,c
F311: D3A1    		out	(tm_latc),a
F313: 78      		ld	a,b
F314: D3A1    		out	(tm_latc),a
F316: 0EA0    		ld	c,tm_data
F318: C9      		ret
              		
              	; Handles a TMS9918 irq
F319: F5      	tm_virq:push	af
F31A: DBA1    		in	a,(tm_latc)
F31C: F1      		pop	af
F31D: FB      		ei
F31E: C9      		ret
              		
              		
              	; Disables all interrupts while VDP operations occur
              	;
              	; uses: a
F31F: 3E0E    	tm_dint:ld	a,0x0E
F321: D341    		out	(tm_atla),a	; AY register = 14
F323: 3E00    		ld	a,0x00
F325: D340    		out	(tm_ayda),a	
F327: C9      		ret
              		
              	; Enables interrupts again
              	;
              	; uses: a
F328: 3E0E    	tm_eint:ld	a,0x0E
F32A: D341    		out	(tm_atla),a	; AY register = 14
F32C: 3EB0    		ld	a,0xB0
F32E: D340    		out	(tm_ayda),a
F330: C9      		ret
              		
              	; Variables
F331: 0200    	tm_mode:defw	0x0002
F333: E1      	tm_colr:defb	0xE1
F334: 00      	tm_inb:	defb	0
F335: 00      	tm_inf:	defb	0
F336: 00      	tm_curx:defb	0
F337: 00      	tm_cury:defb	0
F338: 01      	tm_cold:defb	1
              	#include "dev/nabu_ndsk.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   N H A C P   V I R T U A L   D I S K
              	;*
              	;*     This driver allows for IshkurCP/M to access a virtual
              	;*     disk using the NHACP protocol. Indiviual files are 
              	;*     mounted as file systems and accessed like a disk
              	;*     normally would.
              	;*
              	;*     This particular driver uses the Nabu HCCA port to 
              	;*     facilitate communication between it and an adapter
              	;*
              	;*     In order to service CCP and GRB requests, the 
              	;*     following special files must exist:
              	;*
              	;*     '${STORAGE}/CPM22.SYS' <- For CP/M system components
              	;*     '${STORAGE}/FONT.GRB' <- For graphical driver components
              	;*
              	;*
              	;*
              	;*
              	;*     Device requires 384 bytes of bss space (nd_bss)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
F919: 00      	nd_csec:defs	1	; Current sector (1b)
F91A: 0000    	nd_ctrk:defs	2	; Current track (2b)
F91C: 00000000	nd_buff:defs	64	; Buffer (64b)
F920: 00...   	
F95C: 00000000	nd_asva:defs	129	; ASV #1 (129b)
F960: 00...   	
F9DD: 00000000	nd_asvb:defs	129	; ASV #1 (129b)
F9E1: 00...   	
              	.area	_TEXT
              	
0040:         	nd_ayda	equ	0x40		; AY-3-8910 data port
0041:         	nd_atla	equ	0x41		; AY-3-8910 latch port
0080:         	nd_hcca	equ	0x80		; Modem data port
0000:         	nd_nctl	equ	0x00		; NABU control port
              	
0080:         	nd_fild	equ	0x80		; Default file access desc
              	
              	
              	;
              	;**************************************************************
              	;*
              	;*         D I S K   D R I V E   G E O M E T R Y
              	;* 
              	;**************************************************************
              	;
              	
              	; Disk A DPH
F339: 00000000	nd_dpha:defw	0,0,0,0
F33D: 00000000	
F341: 10FF    		defw	dircbuf	; DIRBUF
F343: 59F3    		defw	nd_dpb	; DPB
F345: 0000    		defw	0	; CSV
F347: 5CF9    		defw	nd_asva	; ALV (129 bytes)
              		
              	; Disk B DPH
F349: 00000000	nd_dphb:defw	0,0,0,0
F34D: 00000000	
F351: 10FF    		defw	dircbuf	; DIRBUF
F353: 59F3    		defw	nd_dpb	; DPB
F355: 0000    		defw	0	; CSV
F357: DDF9    		defw	nd_asvb	; ALV (129 bytes)
              		
              	; NSHD8 format
F359: 4000    	nd_dpb:	defw	64	; # sectors per track
F35B: 06      		defb	6	; BSH
F35C: 3F      		defb	63	; BLM
F35D: 03      		defb	3	; EXM
F35E: FF03    		defw	1023	; DSM
F360: FF00    		defw	255	; DRM
F362: 80      		defb	0x80	; AL0
F363: 00      		defb	0	; AL1
F364: 0000    		defw	0	; Size of directory check vector
F366: 0000    		defw	0	; Number of reserved tracks at the beginning of disk
              	
              	; Driver entry point
              	; a = Command #
              	;
              	; uses: all
F368: B7      	ndkdev:	or	a
F369: 2815    		jr	z,nd_init
F36B: 3D      		dec	a
F36C: 2813    		jr	z,nd_home
F36E: 3D      		dec	a
F36F: 2817    		jr	z,nd_sel
F371: 3D      		dec	a
F372: CAB2F3  		jp	z,nd_strk
F375: 3D      		dec	a
F376: CAB8F3  		jp	z,nd_ssec
F379: 3D      		dec	a
F37A: CABDF3  		jp	z,nd_read
F37D: C3CEF3  		jp	nd_writ
              		
              	; Inits the device
              	; Not really needed atm
              	; hl = Call argument
              	;
              	; uses: none
F380: C9      	nd_init:ret
              	
              	; Sets "track" back to zero
              	;
              	; uses: none
F381: 210000  	nd_home:ld	hl,0
F384: 221AF9  		ld	(nd_ctrk),hl
F387: C9      		ret
              	
              	; Selects the drive
              	; c = Logging status
              	; hl = Call argument
              	;
              	; uses: hl
F388: E5      	nd_sel:	push	hl
F389: CDEFF3  		call	nd_hini
F38C: E1      		pop	hl
F38D: E5      		push	hl
F38E: 7D      		ld	a,l
F38F: C641    		add	a,0x41		; Convert to ASCII
F391: 328BF5  		ld	(nd_p2im),a
F394: 2186F5  		ld	hl,nd_p2
F397: 119AF5  		ld	de,nd_m0na
F39A: 010B00  		ld	bc,11
F39D: EDB0    		ldir
F39F: CD45F4  		call	nd_open		; Open the file
F3A2: E1      		pop	hl		; Select DPH
F3A3: 7D      		ld	a,l
F3A4: B7      		or	a
F3A5: 2139F3  		ld	hl,nd_dpha
F3A8: C8      		ret	z
F3A9: 3D      		dec	a
F3AA: 2149F3  		ld	hl,nd_dphb
F3AD: C8      		ret	z
F3AE: 210000  		ld	hl,0
F3B1: C9      		ret
              		
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	; hl = Call argument
              	;
              	; uses: nonoe
F3B2: 60      	nd_strk:ld	h,b
F3B3: 69      		ld	l,c
F3B4: 221AF9  		ld	(nd_ctrk),hl
F3B7: C9      		ret
              	
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	; hl = Call argument
              	;
              	; uses: none
F3B8: 79      	nd_ssec:ld	a,c
F3B9: 3219F9  		ld	(nd_csec),a
F3BC: C9      		ret
              	
              	; Reads a sector and DMA transfers it to memory
              	;
              	; uses: af
F3BD: CDEFF3  	nd_read:call	nd_hini
F3C0: CDDFF3  		call	nd_gbno
F3C3: 2A59EF  		ld	hl,(biodma)
F3C6: CD62F4  		call	nd_getb
F3C9: 3E01    		ld	a,1
F3CB: D8      		ret	c
F3CC: AF      		xor	a
F3CD: C9      		ret
              		
              	; Write a sector from DMA
              	;
              	; uses: af
F3CE: CDEFF3  	nd_writ:call	nd_hini
F3D1: CDDFF3  		call	nd_gbno
F3D4: 2A59EF  		ld	hl,(biodma)
F3D7: CD95F4  		call	nd_putb
F3DA: 3E01    		ld	a,1
F3DC: D8      		ret	c
F3DD: AF      		xor	a
F3DE: C9      		ret
              		
              		
              	; Gets the block # for read / write operations
              	;
              	; Returns block # in de
              	; uses: af, de, hl 
F3DF: 2A1AF9  	nd_gbno:ld	hl,(nd_ctrk)
F3E2: 29      		add	hl,hl
F3E3: 29      		add	hl,hl
F3E4: 29      		add	hl,hl
F3E5: 29      		add	hl,hl
F3E6: 29      		add	hl,hl
F3E7: 29      		add	hl,hl
F3E8: 3A19F9  		ld	a,(nd_csec)
F3EB: B5      		or	l
F3EC: 6F      		ld	l,a
F3ED: EB      		ex	de,hl
F3EE: C9      		ret
              		
              	
              	; Set up the HCCA modem connection
              	; Configures the AY-3-8910 to monitor correct interrupts
              	; and leaves it in a state where the interrupt port is
              	; exposed
              	;
              	; uses: a, b
F3EF: 3E07    	nd_hini:ld	a,0x07
F3F1: D341    		out	(nd_atla),a	; AY register = 7
F3F3: 3E7F    		ld	a,0x7F
F3F5: D340    		out	(nd_ayda),a	; Configure AY port I/O
              		
              		; Claim interrupt vectors
F3F7: E5      		push	hl
F3F8: 2116F5  		ld	hl,nd_rirq
F3FB: 2200FF  		ld	(intvec),hl
F3FE: 215DF5  		ld	hl,nd_wirq
F401: 2202FF  		ld	(intvec+2),hl
F404: E1      		pop	hl
              		
              	; Set interrupts but disable send
              	;
              	; uses: a
F405: 3E0E    	nd_dsnd:ld	a,0x0E
F407: D341    		out	(nd_atla),a	; AY register = 14
F409: 3EB0    		ld	a,0xB0
F40B: D340    		out	(nd_ayda),a	; Enable HCCA receive and but not send
              		
F40D: 3E0F    	nd_dsn0:ld	a,0x0F		
F40F: D341    		out	(nd_atla),a	; AY register = 15
              		
F411: C9      		ret
              	
              	; Set interrupts and send
              	;
              	; uses: a
F412: 3E0E    	nd_esnd:ld	a,0x0E
F414: D341    		out	(nd_atla),a	; AY register = 14
F416: 3EF0    		ld	a,0xF0
F418: D340    		out	(nd_ayda),a	; Enable HCCA receive and send
F41A: 18F1    		jr	nd_dsn0
              		
              	
              	; Loads the CCP into the CCP space
F41C: 2172F5  	nd_ccp:	ld	hl,nd_p0
F41F: 1803    		jr	nd_grb0
              		
              	; Loads the GRB into the CCP space
F421: 217CF5  	nd_grb:	ld	hl,nd_p1
F424: 119AF5  	nd_grb0:ld	de,nd_m0na
F427: 010A00  		ld	bc,10
F42A: EDB0    		ldir			; Copy name to file open
F42C: CDEFF3  		call	nd_hini		; Go to HCCA mode
F42F: 210000  		ld	hl,0x0000	; O_RDONLY
F432: CD48F4  		call	nd_opef		; Open the file
F435: 110000  		ld	de,0
F438: 2100D8  		ld	hl,cbase
F43B: CD62F4  	nd_grb1:call	nd_getb
F43E: 1C      		inc	e
F43F: 3E10    		ld	a,16
F441: BB      		cp	e
F442: 20F7    		jr	nz,nd_grb1
F444: C9      		ret
              		
              	
              	; Open the prepared file
              	; Closes the existing file too
              	;
              	; uses: af, b, hl
F445: 210100  	nd_open:ld	hl,0x0001	; O_RDWR
F448: 2297F5  	nd_opef:ld	(nd_m0fl),hl
F44B: 21A9F5  		ld	hl,nd_m1
F44E: 0606    		ld	b,6
F450: CDD2F4  		call	nd_send
F453: 2191F5  		ld	hl,nd_m0
F456: 0617    		ld	b,23
F458: CDD2F4  		call	nd_send
F45B: 211CF9  		ld	hl,nd_buff
F45E: CDBDF4  		call	nd_rece
F461: C9      		ret
              		
              	; Gets a block from the currently open file
              	; and places it in (hl)
              	; de = Block to read
              	; hl = Destination for information
              	;
              	; Returns location directly after in hl
              	; Carry flag set on error
              	; uses: af, b, hl
F462: EB      	nd_getb:ex	de,hl
F463: 22B7F5  		ld	(nd_m2bn),hl
F466: EB      		ex	de,hl
F467: E5      		push	hl
F468: 21B1F5  		ld	hl,nd_m2
F46B: 060C    		ld	b,12
F46D: CDD2F4  		call	nd_send
F470: E1      		pop	hl
F471: D8      		ret	c
F472: CDDBF4  		call	nd_hcrd
F475: CDDEF4  		call	nd_hcre
F478: D8      		ret	c
F479: FE84    		cp	0x84
F47B: 37      		scf
F47C: 200F    		jr	nz,nh_get1
F47E: CDDBF4  		call	nd_hcrd
F481: 0680    		ld	b,128
F483: CDDEF4  	nd_get0:call	nd_hcre
F486: D8      		ret	c
F487: 77      		ld	(hl),a
F488: 23      		inc	hl
F489: 10F8    		djnz	nd_get0
F48B: B7      		or	a
F48C: C9      		ret
F48D: CDDBF4  	nh_get1:call	nd_hcrd	; Read the error message and exit
F490: CDDEF4  		call	nd_hcre
F493: 37      		scf
F494: C9      		ret
              		
              	; Puts a block into the currently open file
              	; from that location (hl)
              	; de = Block to write
              	; hl = Source of information
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F495: EB      	nd_putb:ex	de,hl
F496: 22C3F5  		ld	(nd_m3bn),hl
F499: EB      		ex	de,hl
F49A: E5      		push	hl
F49B: 21BDF5  		ld	hl,nd_m3
F49E: 060C    		ld	b,12
F4A0: CDD2F4  		call	nd_send		; Send message precursor
F4A3: E1      		pop	hl
F4A4: D8      		ret	c
F4A5: 0680    		ld	b,128
F4A7: 7E      	nd_put0:ld	a,(hl)		; Send the block
F4A8: CD24F5  		call	nd_hcwr
F4AB: D8      		ret	c
F4AC: 23      		inc	hl
F4AD: 10F8    		djnz	nd_put0
F4AF: 211CF9  		ld	hl,nd_buff
F4B2: CDBDF4  		call	nd_rece
F4B5: 3A1CF9  		ld	a,(nd_buff)
F4B8: FE81    		cp	0x81
F4BA: C8      		ret	z
F4BB: 37      		scf
F4BC: C9      		ret
              		
              	; Receives a general response from the NHACP server
              	; hl = Destination of message
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F4BD: CDDEF4  	nd_rece:call	nd_hcre
F4C0: D8      		ret	c		; Existing error
F4C1: 47      		ld	b,a
F4C2: CDDEF4  		call	nd_hcre
F4C5: D8      		ret	c		; Existing error
F4C6: 37      		scf
F4C7: C0      		ret	nz		; Message too big!
F4C8: CDDEF4  	nd_rec0:call	nd_hcre
F4CB: D8      		ret	c		; Error!
F4CC: 77      		ld	(hl),a
F4CD: 23      		inc	hl
F4CE: 10F8    		djnz	nd_rec0
F4D0: B7      		or	a
F4D1: C9      		ret
              		
              	; Write a number of bytes to the HCCA port
              	; b = Bytes to write
              	; hl = Start of message
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F4D2: 7E      	nd_send:ld	a,(hl)
F4D3: 23      		inc	hl
F4D4: CD24F5  		call	nd_hcwr
F4D7: D8      		ret	c		; Error!
F4D8: 10F8    		djnz	nd_send
F4DA: C9      		ret
              		
              	; Read from the HCCA port
              	; Assumes AY is set to reg 15
              	; Will panic on timeout
              	;
              	; Returns result in a
              	; Carry flag set on error
              	; Uses: af
F4DB: CDDEF4  	nd_hcrd:call	nd_hcre
F4DE: D5      	nd_hcre:push	de
F4DF: 3E09    		ld	a,0x09
F4E1: D300    		out	(nd_nctl),a	; Turn on recv light
F4E3: 11FFFF  		ld	de,0xFFFF
F4E6: 3A71F5  	nd_hcr0:ld	a,(nd_inf)
F4E9: B7      		or	a
F4EA: 201D    		jr	nz,nd_hcr2
F4EC: DB40    		in	a,(nd_ayda)
              		;bit	0,a
              		;jr	z,nd_hcr0	; Await an interrupt
              		;bit	1,a
              		;jr	z,nd_hcr1
F4EE: E60F    		and	0x0F
F4F0: EE01    		xor	0b00000001
F4F2: 280C    		jr	z,nd_hcr1
F4F4: 1B      		dec	de
F4F5: 7B      		ld	a,e
F4F6: B2      		or	d
F4F7: 20ED    		jr	nz,nd_hcr0
F4F9: 3E01    	nd_hcer:ld	a,0x01
F4FB: D300    		out	(nd_nctl),a	; Turn off recv light
F4FD: 37      		scf
F4FE: D1      		pop	de
F4FF: C9      		ret			; Timed out waiting
F500: 3E01    	nd_hcr1:ld	a,0x01
F502: D300    		out	(nd_nctl),a	; Turn off recv light
F504: DB80    		in	a,(nd_hcca)
F506: D1      		pop	de
F507: B7      		or	a
F508: C9      		ret
F509: 3E01    	nd_hcr2:ld	a,0x01
F50B: D300    		out	(nd_nctl),a	; Turn off recv light
F50D: AF      		xor	a
F50E: 3271F5  		ld	(nd_inf),a
F511: 3A70F5  		ld	a,(nd_inb)
F514: D1      		pop	de
F515: C9      		ret
              		
              	; HCCA read interrupt
              	; Reads from the HCCA, buffers it, and then sets the flag
              	;
              	; uses: none
F516: F5      	nd_rirq:push	af
F517: DB80    		in	a,(nd_hcca)
F519: 3270F5  		ld	(nd_inb),a
F51C: 3E01    		ld	a,1
F51E: 3271F5  		ld	(nd_inf),a
F521: F1      		pop	af
F522: FB      		ei
F523: C9      		ret
              		
              		
              	; Write to the HCCA port
              	; Assumes AY is set to reg 15
              	; Will panic on timeout
              	; a = Character to write
              	;
              	; Carry flag set on error
              	; Uses: f
F524: D5      	nd_hcwr:push	de
F525: 326EF5  		ld	(nd_outb),a
F528: AF      		xor	a
F529: 326FF5  		ld	(nd_outf),a
F52C: CD12F4  		call	nd_esnd
F52F: 11FFFF  		ld	de,0xFFFF
F532: 3E21    		ld	a,0x21
F534: D300    		out	(nd_nctl),a	; Turn on send light
F536: 3A6FF5  	nd_hcw0:ld	a,(nd_outf)
F539: B7      		or	a
F53A: 2017    		jr	nz,nd_hcw2
F53C: DB40    		in	a,(nd_ayda)
              		;bit	0,a
              		;jr	z,nd_hcw0	; Await an interrupt
              		;bit	1,a
              		;jr	nz,nd_hcw1
F53E: E60F    		and	0x0F
F540: EE03    		xor	0b00000011
F542: 280A    		jr	z,nd_hcw1
F544: 1B      		dec	de
F545: 7B      		ld	a,e
F546: B2      		or	d
F547: 20ED    		jr	nz,nd_hcw0
F549: CD05F4  		call	nd_dsnd
F54C: 18AB    		jr	nd_hcer		; Timed out waiting
F54E: 3A6EF5  	nd_hcw1:ld	a,(nd_outb)
F551: D380    		out	(nd_hcca),a
F553: D1      	nd_hcw2:pop	de
F554: 3E01    		ld	a,0x01
F556: D300    		out	(nd_nctl),a	; Turn off send light
F558: CD05F4  		call	nd_dsnd
F55B: B7      		or	a
F55C: C9      		ret
              		
              	; HCCA write interrupt
              	; Writes to the HCCA from the buffer, and 
F55D: F5      	nd_wirq:push	af
F55E: 3A6EF5  		ld	a,(nd_outb)
F561: D380    		out	(nd_hcca),a
F563: 3E01    		ld	a,1
F565: 326FF5  		ld	(nd_outf),a
F568: CD05F4  		call	nd_dsnd		; Y'all can't behave, turning off
F56B: F1      		pop	af
F56C: FB      		ei
F56D: C9      		ret
              		
              	; Byte to send out of HCCA
F56E: 00      	nd_outb:defb	0
              	
              	; HCCA output flag
F56F: 00      	nd_outf:defb	0
              	
              	; Byte received from HCCA
F570: 00      	nd_inb:	defb	0
              	
              	; HCCA input flag
F571: 00      	nd_inf: defb	0
              		
              	; Path to CP/M image
              	; Total length: 10 bytes
F572: 43504D32	nd_p0:	defb	'CPM22.SYS',0
F576: 322E5359	
F57A: 5300    	
              	
              	; Path to GRB image
              	; Total length: 10 bytes
F57C: 464F4E54	nd_p1:	defb	'FONT.GRB',0,0
F580: 2E475242	
F584: 0000    	
              	
              	; Path to a generic disk image
              	; Total length: 11
F586: 4E44534B	nd_p2:	defb	'NDSK_'
F58A: 5F      	
F58B: 3F      	nd_p2im:defb	'?'		; Disk image name
F58C: 2E494D47		defb	'.IMG',0
F590: 00      	
              	
              	; Message prototype to open a file
              	; Total length: 23 bytes
F591: 8F00    	nd_m0:	defb	0x8F,0x00
F593: 1300    		defw	19		; Message length
F595: 01      		defb	0x01		; Cmd: STORAGE-OPEN
F596: 80      		defb	nd_fild		; Default file descriptor
F597: 0100    	nd_m0fl:defw	0x01		; Read/Write flags
F599: 0E      		defb	0x0E		; Message length
F59A: 58585858	nd_m0na:defb	'XXXXXXXXXXXXXX'; File name field
F59E: 58...   	
F5A8: 00      		defb	0x00		; Padding
              		
              	; Message prototype to close a file
              	; Total length: 6 bytes
F5A9: 8F00    	nd_m1:	defb	0x8F,0x00
F5AB: 0200    		defw	2		; Message length
F5AD: 05      		defb	0x05		; Cmd: FILE-CLOSE
F5AE: 80      		defb	nd_fild		; Default file descriptor
F5AF: 0000    		defw	0x00		; Magic bytes
              		
              	; Message prototype to read a block
              	; Total length: 12 bytes
F5B1: 8F00    	nd_m2:	defb	0x8F,0x00
F5B3: 0800    		defw	8		; Message length
F5B5: 07      		defb	0x07		; Cmd: STORAGE-GET-BLOCK
F5B6: 80      		defb	nd_fild		; Default file descritor
F5B7: 00000000	nd_m2bn:defw	0x00,0x00	; Block number
F5BB: 8000    		defw	128		; Block length
              		
              	; Message prototype to write a block
              	; Total length: 12 bytes
F5BD: 8F00    	nd_m3:	defb	0x8F,0x00
F5BF: 8800    		defw	136		; Message length
F5C1: 08      		defb	0x08		; Cmd: STORAGE-PUT-BLOCK
F5C2: 80      		defb	nd_fild		; Default file descritor
F5C3: 00000000	nd_m3bn:defw	0x00,0x00	; Block number
F5C7: 8000    		defw	128		; Block length
              	#include "dev/nabu_fdc.asm"
              	;
              	;**************************************************************
              	;*
              	;*      N A B U   F D 1 7 9 7   F L O P P Y   D R I V E R
              	;*
              	;*      This driver interfaces the NABU FDC for use as a
              	;*      CP/M file system, graphical source, and boot device.
              	;*      The driver only supports double-density disks of 
              	;*      Osborne 1 format at the time, but this could be
              	;*      updated if it is needed. The directory table starts
              	;*      on track 2, the system sectors are as follows:
              	;*
              	;*      Track 0 Sector 1:	Boot Sector
              	;*      Track 0 Sector 2-3:	Graphical Resource Block
              	;*	Track 0 Sector 4-5:	CCP
              	;*	Track 1 Sector 1-5:	BDOS + BIOS Image
              	;*
              	;*	Device requires 90 bytes of bss space (nf_bss)
              	;*	Device requires 1024 byte buffer space (nf_cach)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
FA5E: 00      	nf_io:	defs	1	; FDC address
FA5F: 00      	nf_r2ks:defs	1	; Temp storaged used in nf_r2k
              	
FA60: 00      	nf_curd:defs	1	; Currently selected disk
FA61: 00      	nf_subs:defs	1	; Current subsector
FA62: 00      	nf_sync:defs	1	; Set if disk needs to be rehomed
FA63: 00      	nf_inco:defs	1	; Set if sector is in core already
FA64: 00      	nf_dirt:defs	1	; Set if cache is dirty
              	
FA65: 00000000	nf_asva:defs	26	; Misc CP/M buffer
FA69: 00...   	
FA7F: 00000000	nf_asvb:defs	26
FA83: 00...   	
FA99: 00000000	nf_csva:defs	15
FA9D: 00...   	
FAA8: 00000000	nf_csvb:defs	15
FAAC: 00...   	
              	
FAB7: 00000000	nf_cach:defs	1024	; Sector cache
FABB: 00...   	
              	.area	_TEXT
              	
0002:         	nf_rdsk	equ	2	; Defines which drives contains system
              				; resources (2 = A, 4 = B)
              				
0040:         	nf_ayda	equ	0x40	; AY-3-8910 data port
0041:         	nf_atla	equ	0x41	; AY-3-8910 latch port
              	
              	;
              	;**************************************************************
              	;*
              	;*         D I S K   D R I V E   G E O M E T R Y
              	;* 
              	;**************************************************************
              	;
              	
              	; Disk A DPH
F5C9:         	nf_dpha:
F5C9: 00000000		defw	0,0,0,0
F5CD: 00000000	
F5D1: 10FF    		defw	dircbuf	; DIRBUF
F5D3: E9F5    		defw	nf_dpb	; DPB
F5D5: 99FA    		defw	nf_csva	; CSV
F5D7: 65FA    		defw	nf_asva	; ALV
              	
              	; Disk B DPH
F5D9:         	nf_dphb:
F5D9: 00000000		defw	0,0,0,0
F5DD: 00000000	
F5E1: 10FF    		defw	dircbuf	; DIRBUF
F5E3: E9F5    		defw	nf_dpb	; DPB
F5E5: A8FA    		defw	nf_csvb	; CSV
F5E7: 7FFA    		defw	nf_asvb	; ALV
              	
              	; Osborne 1 format
F5E9:         	nf_dpb:
F5E9: 2800    		defw	40	; # sectors per track
F5EB: 03      		defb	3	; BSH
F5EC: 07      		defb	7	; BLM
F5ED: 00      		defb	0	; EXM
F5EE: B800    		defw	184	; DSM
F5F0: 3F00    		defw	63	; DRM
F5F2: C0      		defb	0xC0	; AL0
F5F3: 00      		defb	0	; AL1
F5F4: 1000    		defw	16	; Size of directory check vector
F5F6: 0300    		defw	3	; Number of reserved tracks at the beginning of disk
              	
              	
              	; Driver entry point
              	; a = Command #
              	;
              	; uses: all
F5F8: B7      	nfddev:	or	a
F5F9: 2815    		jr	z,nf_init
F5FB: 3D      		dec	a
F5FC: 283D    		jr	z,nf_home
F5FE: 3D      		dec	a
F5FF: 2852    		jr	z,nf_sel
F601: 3D      		dec	a
F602: CAA7F6  		jp	z,nf_strk
F605: 3D      		dec	a
F606: CADDF6  		jp	z,nf_ssec
F609: 3D      		dec	a
F60A: CA2EF7  		jp	z,nf_read
F60D: C336F7  		jp	nf_writ
              		
              	; Initialize device
              	; Sets the current track to 0
F610: AF      	nf_init:xor	a
F611: 325EFA  		ld	(nf_io),a
              	
              		; Look for the FDC
F614: 0ECF    		ld	c,0xCF
F616: ED78    	nf_ini1:in	a,(c)
F618: FE10    		cp	0x10
F61A: 2808    		jr	z,nf_ini2
F61C: 0C      		inc	c
F61D: C8      		ret	z	; Should not be possible!
F61E: 3E0F    		ld	a,0x0F
F620: 81      		add	a,c
F621: 4F      		ld	c,a
F622: 18F2    		jr	nf_ini1
              		
              		; Get command register
F624: 79      	nf_ini2:ld	a,c
F625: D60F    		sub	15
F627: 4F      		ld	c,a
F628: 325EFA  		ld	(nf_io),a
              		
              		; Select drive defined by hl
F62B: CB25    		sla	l
F62D: 3E02    		ld	a,2
F62F: 85      		add	l
F630: 3260FA  		ld	(nf_curd),a
              		
              		; Force FDC interrupt
F633: 3ED0    		ld	a,0xD0
F635: ED79    		out	(c),a
              		
              		; Re-home drive
F637: CD3BF6  		call	nf_home
              		
              		; De-select drive
              		
F63A: C9      		ret
              	
              	; Sends the drive to track 0, and syncs the drive
              	;
              	; uses : af, c
F63B: CD4EF7  	nf_home:call	nf_wdef
F63E: CD01F8  		call	nf_dvsc
              	
F641: 3A5EFA  		ld	a,(nf_io)
F644: 4F      		ld	c,a
              		
              		; Restore to track 0
F645: 3E09    		ld	a,0x09
F647: ED79    		out	(c),a 
F649: CD18F8  		call	nf_busy
              		
              		; Reset sync flag
F64C: AF      		xor	a
F64D: 3262FA  		ld	(nf_sync),a
              		
              		; De-select drive
F650: C306F8  		jp	nf_udsl
              		
              	; Selects the drive
              	; c = Logging status
              	; hl = Call argument
              	;
              	; uses; all
F653: 3A5EFA  	nf_sel:	ld	a,(nf_io)
F656: B7      		or	a
F657: FA5EF6  		jp	m,nf_seld
              		
              		; no FDC card
F65A: 210000  		ld	hl,0
F65D: C9      		ret
              	
F65E: 7D      	nf_seld:ld	a,l		; Select a disk
F65F: 0602    		ld	b,2
F661: B7      		or	a
F662: 2809    		jr	z,nf_sel0
F664: 3D      		dec	a
F665: 0604    		ld	b,4
F667: 2804    		jr	z,nf_sel0
F669: 210000  		ld	hl,0
F66C: C9      		ret
              	
              		; Move control of drive buffers
F66D: CD4EF7  	nf_sel0:call	nf_wdef		; Write back if needed
F670: 3EFF    		ld	a,0xFF
F672: 3262FA  		ld	(nf_sync),a	; Set sync flag
F675: 78      		ld	a,b
F676: 3260FA  		ld	(nf_curd),a	; Set current drive
F679: 5F      		ld	e,a
              		
              		; Check to make sure there is a disk
F67A: 16FF    	nf_selc	ld	d,255
F67C: CD01F8  		call	nf_dvsc
F67F: 3A5EFA  		ld	a,(nf_io)
F682: 4F      		ld	c,a
F683: 3ED0    		ld	a,0xD0
F685: ED79    		out	(c),a		; Force FDC interrupt
F687: CD1EF8  	nf_sel1:call	nf_stal
F68A: ED78    		in	a,(c)
F68C: E602    		and	0x02
F68E: 2009    		jr	nz,nf_sel2
F690: 15      		dec	d
F691: 20F4    		jr	nz,nf_sel1
              		
              		; No disk!
F693: 210000  		ld	hl,0
F696: C306F8  		jp	nf_udsl
              		
              		
              		; Output DPH
F699: CD06F8  	nf_sel2:call	nf_udsl
F69C: 21C9F5  		ld	hl,nf_dpha
F69F: 3E02    		ld	a,2
F6A1: BB      		cp	e
F6A2: C8      		ret	z
F6A3: 21D9F5  		ld	hl,nf_dphb
F6A6: C9      		ret
              	
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	; hl = Call argument
              	;
              	; uses: all
F6A7: 51      	nf_strk:ld	d,c		; Track = d
F6A8: 3A5EFA  		ld	a,(nf_io)
F6AB: 4F      		ld	c,a
F6AC: 3A62FA  		ld	a,(nf_sync)
F6AF: B7      		or	a
F6B0: 280E    		jr	z,nf_str0	; Check if disk direct
              		
F6B2: CD01F8  		call	nf_dvsc
              		
              		; Restore to track 0
F6B5: 3E09    		ld	a,0x09
F6B7: ED79    		out	(c),a 
F6B9: CD18F8  		call	nf_busy
              		
              		; Reset sync flag
F6BC: AF      		xor	a
F6BD: 3262FA  		ld	(nf_sync),a
              		
              		; Check to see if tracks match
F6C0: 59      	nf_str0:ld	e,c
F6C1: 0C      		inc	c
F6C2: ED78    		in	a,(c)
F6C4: BA      		cp	d
F6C5: CA06F8  		jp	z,nf_udsl	; They match, do nothing
              	
              		; Write a deferred block
F6C8: CD4EF7  		call	nf_wdef
              	
              		; Seek to track
F6CB: CD01F8  		call	nf_dvsc
F6CE: 0C      		inc	c
F6CF: 0C      		inc	c
F6D0: ED51    		out	(c),d
F6D2: 3E19    		ld	a,0x19
F6D4: 4B      		ld	c,e
F6D5: ED79    		out	(c),a 
F6D7: CD18F8  		call	nf_busy	
              		
F6DA: C306F8  		jp	nf_udsl
              	
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	; hl = Call argument
              	;
              	; uses: all
F6DD: 79      	nf_ssec:ld	a,c
F6DE: E607    		and	0x07
F6E0: 3261FA  		ld	(nf_subs),a
F6E3: 79      		ld	a,c
              		
              		; Compute physical sector
F6E4: CB3F    		srl	a
F6E6: CB3F    		srl	a
F6E8: CB3F    		srl	a
F6EA: 3C      		inc	a
F6EB: 47      		ld	b,a	; b = Physical sector
F6EC: 3A5EFA  		ld	a,(nf_io)
F6EF: 3C      		inc	a
F6F0: 3C      		inc	a
F6F1: 4F      		ld	c,a
F6F2: ED78    		in	a,(c)
F6F4: B8      		cp	b
F6F5: C8      		ret	z	; Return if the same
              		
              		; Set FDC sector, after writing back if needed
F6F6: CD4EF7  		call	nf_wdef
F6F9: ED41    		out	(c),b
F6FB: C9      		ret
              		
              	; Ensure sector is in core, and set up for DMA transfer
              	;
              	; uses: all
F6FC: 3A63FA  	nf_rdwr:ld	a,(nf_inco)
F6FF: B7      		or	a
F700: 2019    		jr	nz,nf_rdw0
              		
              		; Read in to cache
F702: CD01F8  		call	nf_dvsc
F705: 3A5EFA  		ld	a,(nf_io)
F708: 4F      		ld	c,a
F709: 21B7FA  		ld	hl,nf_cach
F70C: CDDFF7  		call	nf_rphy
F70F: 47      		ld	b,a
F710: CD06F8  		call	nf_udsl
F713: 78      		ld	a,b
              		
              		; Error checking
F714: B7      		or	a
F715: 3E01    		ld	a,1
F717: C0      		ret	nz
F718: 3263FA  		ld	(nf_inco),a
              		
              		; DMA subsector
F71B: 2A59EF  	nf_rdw0:ld	hl,(biodma)
F71E: EB      		ex	de,hl
              	
F71F: 3A61FA  		ld	a,(nf_subs)
F722: 2137FA  		ld	hl,nf_cach-128
F725: 018000  		ld	bc,128
F728: 3C      		inc	a
F729: 09      	nf_rdw1:add	hl,bc
F72A: 3D      		dec	a
F72B: 20FC    		jr	nz,nf_rdw1
F72D: C9      		ret
              	
              	; Reads a sector and DMA transfers it to memory
F72E: CDFCF6  	nf_read:call	nf_rdwr
F731: B7      		or	a
F732: C0      		ret	nz
F733: EDB0    		ldir
F735: C9      		ret
              	
              	
              	; Write a sector from DMA, and defer it if possible
F736: C5      	nf_writ:push	bc
F737: CDFCF6  		call	nf_rdwr
F73A: B7      		or	a
F73B: C1      		pop	bc
F73C: C0      		ret	nz
F73D: 3E01    		ld	a,1
F73F: 3264FA  		ld	(nf_dirt),a
F742: 79      		ld	a,c
F743: 018000  		ld	bc,128
F746: EB      		ex	de,hl
F747: EDB0    		ldir
F749: FE01    		cp	1
F74B: 3E00    		ld	a,0
F74D: C0      		ret	nz
              		
              		; Drop down to defer read
              	
              	
              	; Checks to see if the cache needs to be written back
              	; after a deferred write.
              	;
              	; uses, af
F74E: 3A64FA  	nf_wdef:ld	a,(nf_dirt)
F751: B7      		or	a
F752: 283D    		jr	z,nf_wde4
              	
F754: C5      		push	bc
F755: D5      		push	de
F756: E5      		push	hl
              		
              		
              		; Write physical sector
F757: CD23F8  		call	nf_dint
F75A: CD01F8  		call	nf_dvsc
F75D: 3A5EFA  		ld	a,(nf_io)
F760: 4F      		ld	c,a
F761: C603    		add	a,3
F763: 57      		ld	d,a
F764: 59      		ld	e,c
F765: 3EA8    		ld	a,0xA8		; Write command
F767: ED79    		out	(c),a
F769: 21B7FA  		ld	hl,nf_cach
F76C: ED78    	nf_wde1:in	a,(c)
F76E: 1F      		rra	
F76F: 3009    		jr	nc,nf_wde2
F771: 1F      		rra
F772: 30F8    		jr	nc,nf_wde1
F774: 4A      		ld	c,d
F775: EDA3    		outi 
F777: 4B      		ld	c,e
F778: 18F2    		jr	nf_wde1
F77A: CD2CF8  	nf_wde2:call	nf_eint
F77D: ED78    		in	a,(c)
              		
              		; Deselect drive
F77F: 47      		ld	b,a
F780: CD06F8  		call	nf_udsl
F783: 78      		ld	a,b
              		
F784: E1      		pop	hl
F785: D1      		pop	de
F786: C1      		pop	bc
              		
              		; Error checking
F787: E6FC    		and	0xFC
F789: 2803    		jr	z,nf_wde3
              		
F78B: 3E01    		ld	a,1
F78D: C9      		ret
              		
              		; Cache is no longer dirty
F78E: 3264FA  	nf_wde3:ld	(nf_dirt),a
              		
              		; Data no longer in core
F791: AF      	nf_wde4:xor	a
F792: 3263FA  		ld	(nf_inco),a
              		
F795: C9      		ret
              		
              	; Loads the GRB into memory from sector 2-3
F796: 3E02    	nf_grb:	ld	a,2
F798: 325FFA  		ld	(nf_r2ks),a
F79B: 1805    		jr	nf_r2k
              		
              	; Loads the CCP into memory from sectors 4-5
F79D: 3E04    	nf_ccp:	ld	a,4
F79F: 325FFA  		ld	(nf_r2ks),a
              	
              	; Reads in a 2K bytes, starting at track 0, sector (nf_r2ks)
              	; This is placed into the cbase
F7A2: 3E02    	nf_r2k: ld	a,nf_rdsk
F7A4: CD07F8  		call	nf_dvsl
              		
              		; Restore to track 0
F7A7: 3A5EFA  		ld	a,(nf_io)
F7AA: 4F      		ld	c,a
F7AB: 3E09    		ld	a,0x09
F7AD: ED79    		out	(c),a 
F7AF: CD18F8  		call	nf_busy
              		
              		; Set sector # to 4
F7B2: 3A5FFA  		ld	a,(nf_r2ks)
F7B5: 0C      		inc	c
F7B6: 0C      		inc	c
F7B7: ED79    		out	(c),a
F7B9: C5      		push	bc
F7BA: 0D      		dec	c
F7BB: 0D      		dec	c
              		
              		; Read into memory
F7BC: 2100D8  		ld	hl,cbase
F7BF: CDDFF7  		call	nf_rphy
F7C2: C1      		pop	bc
F7C3: B7      		or	a
F7C4: 2805    		jr	z,nf_r2k0
F7C6: CD10F6  		call	nf_init		; Error!
F7C9: 18D7    		jr	nf_r2k
              		
              		; Increment sector
F7CB: ED78    	nf_r2k0:in	a,(c)
F7CD: 3C      		inc	a
F7CE: ED79    		out	(c),a
F7D0: 0D      		dec	c
F7D1: 0D      		dec	c
              		
              		; Read into memory again
F7D2: CDDFF7  		call	nf_rphy
F7D5: B7      		or	a
F7D6: C8      		ret	z
F7D7: CD10F6  		call	nf_init		; Error!
F7DA: 18C6    		jr	nf_r2k
              		
              		; De-select drive
F7DC: C306F8  		jp	nf_udsl
              	
              	; Reads a physical sector
              	; Track and sector should be set up
              	; c = FDC command address
              	; hl = memory location of result
              	;
              	; Returns a=0 if successful
              	; uses: af, bc, de, hl
F7DF: CD23F8  	nf_rphy:call	nf_dint
F7E2: 51      		ld	d,c
F7E3: 59      		ld	e,c
F7E4: 14      		inc	d
F7E5: 14      		inc	d
F7E6: 14      		inc	d
              		
              		; Read command
F7E7: 3E88    		ld	a,0x88
F7E9: ED79    		out	(c),a
F7EB: ED78    	nf_rph1:in	a,(c)
F7ED: 1F      		rra	
F7EE: 3009    		jr	nc,nf_rph2
F7F0: 1F      		rra
F7F1: 30F8    		jr	nc,nf_rph1
F7F3: 4A      		ld	c,d
F7F4: EDA2    		ini
F7F6: 4B      		ld	c,e
F7F7: 18F2    		jr	nf_rph1
F7F9: CD2CF8  	nf_rph2:call	nf_eint
F7FC: ED78    		in	a,(c)
F7FE: E6FC    		and	0xFC
F800: C9      		ret
              	
              	; Selects or deselects a drive
              	; a = Drive density / selection
              	;
              	; uses: af
F801: 3A60FA  	nf_dvsc:ld	a,(nf_curd)	; Select current drive
F804: 1801    		jr	nf_dvsl
F806: AF      	nf_udsl:xor	a		; Unselects a drive
F807: C5      	nf_dvsl:push	bc
F808: 47      		ld	b,a
F809: 3A5EFA  		ld	a,(nf_io)
F80C: C60F    		add	a,0x0F
F80E: 4F      		ld	c,a
F80F: ED41    		out	(c),b
F811: 06FF    		ld	b,0xFF
F813: CD1EF8  		call	nf_stal
F816: C1      		pop	bc
F817: C9      		ret
              		
              	
              	; Waits until FDC is not busy
              	; c = FDC command address
              	;
              	; uses: af
F818: ED78    	nf_busy:in	a,(c)
F81A: 1F      		rra
F81B: 38FB    		jr	c,nf_busy
F81D: C9      		ret
              		
              	; Waits a little bit
              	;
              	; uses: b
F81E: C5      	nf_stal:push	bc
F81F: C1      		pop	bc
F820: 10FC    		djnz	nf_stal
F822: C9      		ret
              		
              	; Disables all interrupts while FDC operations occur
              	;
              	; uses: a
F823: 3E0E    	nf_dint:ld	a,0x0E
F825: D341    		out	(nf_atla),a	; AY register = 14
F827: 3E00    		ld	a,0x00
F829: D340    		out	(nf_ayda),a	
F82B: C9      		ret
              		
              	; Enables interrupts again
              	;
              	; uses: a
F82C: 3E0E    	nf_eint:ld	a,0x0E
F82E: D341    		out	(nf_atla),a	; AY register = 14
F830: 3EB0    		ld	a,0xB0
F832: D340    		out	(nf_ayda),a
F834: C9      		ret
              	#include "dev/nabu_prt.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   P A R A L L E L   O U T P U T
              	;*
              	;*      A simple output-only device driver for the NABU
              	;*      parellel printer port. 
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
0040:         	pr_ayda	equ	0x40		; AY-3-8910 data port
0041:         	pr_atla	equ	0x41		; AY-3-8910 latch port
00B0:         	pr_prnt	equ	0xB0		; Parallel output
0000:         	pr_ctrl	equ	0x00		; Device control register
              	
              	; Driver jump table 
F835: B7      	prtdev:	or	a
F836: 2808    		jr	z,pr_init
F838: 3D      		dec	a
F839: 2806    		jr	z,pr_stat
F83B: 3D      		dec	a
F83C: 2805    		jr	z,pr_read
F83E: 1805    		jr	pr_writ
              		
              	; Device init
              	; Does nothing
              	;
              	; uses: none
F840: C9      	pr_init:ret
              	
              	; Device status 
              	; There are never any characters to read
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
F841: AF      	pr_stat:xor	a
F842: C9      		ret
              		
              	; Waits for a character to come in and returns it
              	; No characters to read, returns 0
              	;
              	; Returns ASCII key in A
              	; uses: af
F843: AF      	pr_read:xor	a
F844: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	;
              	; uses: af, bc
F845: 3E0F    	pr_writ:ld	a,0x0F
F847: D341    		out	(pr_atla),a	; AY register = 15
              		
F849: DB40    	pr_wri0:in	a,(pr_ayda)	; Wait for not busy
F84B: E610    		and	0x10
F84D: 20FA    		jr	nz,pr_wri0
              		
F84F: 79      		ld	a,c
F850: D3B0    		out	(pr_prnt),a	; Write data
              		
F852: 3E05    		ld	a,0x05		; Strobe
F854: D300    		out	(pr_ctrl),a
              		
F856: 0620    		ld	b,32		
F858: 10FE    	pr_wri1:djnz	pr_wri1		; Wait a few cycles
              		
F85A: 3E01    		ld	a,0x01		; Strobe off
F85C: D300    		out	(pr_ctrl),a
              		
F85E: C9      		ret
              		
              	#include "dev/nabu_sio.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   S E R I A L   O P T I O N   C A R D
              	;*
              	;*      This driver allows the NABU serial option card to be
              	;*      used as a bidirectional Ishkur serial device. It will
              	;*      automatically search for a serial card on init. Serial
              	;*      cards are numbered by order. The first serial card gets
              	;*      a minor # of 0, the second card gets a minor number of
              	;*      1, etc... Up to 4 serial cards are supported.
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
              	
              	
              	; Driver jump table 
F85F: B7      	siodev:	or	a
F860: 2808    		jr	z,so_init
F862: 3D      		dec	a
F863: 2833    		jr	z,so_stat
F865: 3D      		dec	a
F866: 2841    		jr	z,so_read
F868: 1851    		jr	so_writ
              		
              	; Device init
              	; Tries to find the option card if it is installed
              	; hl = Device options
              	;
              	; uses: none
F86A: 11CFF8  	so_init:ld	de,so_atab
F86D: 45      		ld	b,l
F86E: 04      		inc	b		; Slot 1,2,3,...
F86F: 19      		add	hl,de 		; Get address table entry
F870: 0ECF    		ld	c,0xCF		; First slot
              		
F872: ED78    	so_ini0:in	a,(c)
F874: FE08    		cp	0x08
F876: 2807    		jr	z,so_ini2
              		
F878: 3E10    	so_ini1:ld	a,0x10
F87A: 81      		add	c
F87B: F0      		ret	p		; Can't find, failure
F87C: 4F      		ld	c,a
F87D: 18F3    		jr	so_ini0
              		
F87F: 10F7    	so_ini2:djnz	so_ini1		; Repeat if looking for next card
F881: 79      		ld	a,c
F882: D60F    		sub	0x0F
F884: 4F      		ld	c,a
F885: 71      		ld	(hl),c
F886: 11D3F8  		ld	de,so_conf
F889: 060D    		ld	b,13
              		
              		; Lets set up the serial card for 9600 8N1
              		; First we set up the 8253, then the 8251
F88B: 1A      	so_ini3:ld	a,(de)
F88C: 13      		inc	de
F88D: 86      		add	a,(hl)
F88E: 4F      		ld	c,a
F88F: 1A      		ld	a,(de)
F890: 13      		inc	de
F891: ED79    		out	(c),a
F893: E5      		push	hl
F894: E1      		pop	hl	; Small delay
F895: 10F4    		djnz	so_ini3
F897: C9      		ret
              	
              	; Device status 
              	; hl = Device options
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
F898: 11CFF8  	so_stat:ld	de,so_atab
F89B: 19      		add	hl,de
F89C: AF      		xor	a
F89D: BE      		cp	(hl)
F89E: C8      		ret	z	; No device, return 0
F89F: 4E      		ld	c,(hl)
F8A0: 0C      		inc	c
F8A1: ED78    	so_sta0:in	a,(c)	; Check status register
F8A3: E602    		and	0x02
F8A5: C8      		ret	z
F8A6: 3EFF    		ld	a,0xFF
F8A8: C9      		ret
              		
              		
              	; Waits for a character to come in and returns it
              	; hl = Device options
              	;
              	; Returns ASCII key in A
              	; uses: af
F8A9: 11CFF8  	so_read:ld	de,so_atab
F8AC: 19      		add	hl,de
F8AD: AF      		xor	a
F8AE: BE      		cp	(hl)
F8AF: C8      		ret	z	; No device, return 0
F8B0: 4E      		ld	c,(hl)
F8B1: 0C      		inc	c
F8B2: CDA1F8  	so_rea0:call	so_sta0	; Wait for a character
F8B5: 28FB    		jr	z,so_rea0
F8B7: 0D      		dec	c
F8B8: ED78    		in	a,(c)
F8BA: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	; hl = Device options
              	;
              	; uses: af, bc
F8BB: 41      	so_writ:ld	b,c
F8BC: 11CFF8  		ld	de,so_atab
F8BF: 19      		add	hl,de
F8C0: AF      		xor	a
F8C1: BE      		cp	(hl)
F8C2: C8      		ret	z	; No device, return 0
F8C3: 4E      		ld	c,(hl)
F8C4: 0C      		inc	c
F8C5: ED78    	so_wri0:in	a,(c)
F8C7: E601    		and	0x01
F8C9: 28FA    		jr	z,so_wri0
F8CB: 0D      		dec	c
F8CC: ED41    		out	(c),b
F8CE: C9      		ret
              		
              		
              	; Variables
              	; 4 possible slots
F8CF: 00000000	so_atab:defb	0x00,0x00,0x00,0x00
              	
              	; Configuration string
              	; Sets up counters 1 and 2 on the 8523 timer
F8D3: 0737    	so_conf:defb	0x07,0x37	; Counter 1 setup
F8D5: 0412    		defb	0x04,0x12
F8D7: 0400    		defb	0x04,0x00
F8D9: 0777    		defb	0x07,0x77	; Counter 2 setup
F8DB: 0512    		defb	0x05,0x12
F8DD: 0500    		defb	0x05,0x00
              		
F8DF: 0100    		defb	0x01,0x00	; 8251 setup
F8E1: 0100    		defb	0x01,0x00
F8E3: 0100    		defb	0x01,0x00
F8E5: 0100    		defb	0x01,0x00
F8E7: 0140    		defb	0x01,0x40
F8E9: 014E    		defb	0x01,0x4E
F8EB: 0137    		defb	0x01,0x37


; +++ segments +++

#CODE _TEXT        = $D800 = 55296,  size = $20ED =  8429
#DATA _BSS         = $F8ED = 63725,  size = $05CA =  1482
#DATA _JUMP_TABLE  = $FF00 = 65280,  size = $0090 =   144

; +++ global symbols +++

_BSS             = $F8ED = 63725  _BSS        config\config_ndsk_hybrid.asm:42 (unused)
_BSS_end         = $FEB7 = 65207  _BSS        config\config_ndsk_hybrid.asm:42 (unused)
_BSS_size        = $05CA =  1482  _BSS        config\config_ndsk_hybrid.asm:42
_JUMP_TABLE      = $FF00 = 65280  _JUMP_TABLE config\config_ndsk_hybrid.asm:43 (unused)
_JUMP_TABLE_end  = $FF90 = 65424  _JUMP_TABLE config\config_ndsk_hybrid.asm:43 (unused)
_JUMP_TABLE_size = $0090 =   144  _JUMP_TABLE config\config_ndsk_hybrid.asm:43 (unused)
_TEXT            = $D800 = 55296  _TEXT       config\config_ndsk_hybrid.asm:41 (unused)
_TEXT_end        = $F8ED = 63725  _TEXT       config\config_ndsk_hybrid.asm:41
_TEXT_size       = $20ED =  8429  _TEXT       config\config_ndsk_hybrid.asm:41 (unused)
active           = $E34D = 58189  _TEXT       CPM22.asm:1716
adda2hl          = $E56F = 58735  _TEXT       CPM22.asm:2145
addhl            = $DA61 = 55905  _TEXT       CPM22.asm:442
alloc0           = $EDD5 = 60885  _TEXT       CPM22.asm:3693
alloc1           = $EDD7 = 60887  _TEXT       CPM22.asm:3694
alocvect         = $EDCA = 60874  _TEXT       CPM22.asm:3683
auto             = $EDE9 = 60905  _TEXT       CPM22.asm:3708
autoflag         = $EDEB = 60907  _TEXT       CPM22.asm:3710
autosel          = $EC5C = 60508  _TEXT       CPM22.asm:3423
autosl1          = $EC80 = 60544  _TEXT       CPM22.asm:3439
backup           = $E1AF = 57775  _TEXT       CPM22.asm:1476
backup1          = $E1B7 = 57783  _TEXT       CPM22.asm:1479
badload          = $DF87 = 57223  _TEXT       CPM22.asm:1206
badsctr          = $E00C = 57356  _TEXT       CPM22.asm:1257
badsec           = $E0D5 = 57557  _TEXT       CPM22.asm:1331
badsel           = $E0E0 = 57568  _TEXT       CPM22.asm:1332
badslct          = $E00E = 57358  _TEXT       CPM22.asm:1258
batch            = $DFB8 = 57272  _TEXT       CPM22.asm:1229
batchfcb         = $DFB9 = 57273  _TEXT       CPM22.asm:1230
bdevsw           = $EF7A = 61306  _TEXT       config\config_ndsk_hybrid.asm:158
bdosdrv          = $E0D1 = 57553  _TEXT       CPM22.asm:1330
bdoserr          = $E0C5 = 57541  _TEXT       CPM22.asm:1329
bigdisk          = $EDE8 = 60904  _TEXT       CPM22.asm:3707
biodma           = $EF59 = 61273  _TEXT       bios.asm:326
bitmap           = $E6AE = 59054  _TEXT       CPM22.asm:2438
bitmap1          = $E6BC = 59068  _TEXT       CPM22.asm:2453
bitmap2          = $E6DD = 59101  _TEXT       CPM22.asm:2474
bitmap3          = $E701 = 59137  _TEXT       CPM22.asm:2491
blkmask          = $EDCF = 60879  _TEXT       CPM22.asm:3689
blknmbr          = $EDF0 = 60912  _TEXT       CPM22.asm:3714
blkshft          = $EDCE = 60878  _TEXT       CPM22.asm:3688
boot             = $EE4A = 61002  _TEXT       bios.asm:42
bs               = $0008 =     8  _TEXT       CPM22.asm:31
callbd           = $EF08 = 61192  _TEXT       bios.asm:225
callmj           = $EF56 = 61270  _TEXT       bios.asm:320
cbase            = $D800 = 55296  _TEXT       CPM22.asm:44
cbinit           = $EF6A = 61290  _TEXT       config\config_ndsk_hybrid.asm:89
ccpstack         = $DFB8 = 57272  _TEXT       CPM22.asm:1225
cdevsw           = $EFBA = 61370  _TEXT       config\config_ndsk_hybrid.asm:197
cdindi0          = $EF2E = 61230  _TEXT       bios.asm:285
cdindi1          = $EF34 = 61236  _TEXT       bios.asm:289
cdindir          = $EF2A = 61226  _TEXT       bios.asm:283
cdrive           = $DFFC = 57340  _TEXT       CPM22.asm:1236
cfirq            = $EF70 = 61296  _TEXT       config\config_ndsk_hybrid.asm:105 (unused)
charbuf          = $E319 = 58137  _TEXT       CPM22.asm:1705
check            = $DA38 = 55864  _TEXT       CPM22.asm:408
checkdir         = $E5A9 = 58793  _TEXT       CPM22.asm:2218
checksum         = $E502 = 58626  _TEXT       CPM22.asm:2057
chgdrv           = $DFFD = 57341  _TEXT       CPM22.asm:1237
chgnam1          = $E832 = 59442  _TEXT       CPM22.asm:2730
chgnames         = $E821 = 59425  _TEXT       CPM22.asm:2722
chkblk           = $E48F = 58511  _TEXT       CPM22.asm:1964
chkchar          = $E11F = 57631  _TEXT       CPM22.asm:1373
chkcon           = $D9CA = 55754  _TEXT       CPM22.asm:333
chkdir1          = $E5CF = 58831  _TEXT       CPM22.asm:2238
chknmbr          = $E597 = 58775  _TEXT       CPM22.asm:2191
chkrofl          = $E54F = 58703  _TEXT       CPM22.asm:2121
chksum1          = $E508 = 58632  _TEXT       CPM22.asm:2060
chkvect          = $EDC8 = 60872  _TEXT       CPM22.asm:3682
chkwprt          = $E55F = 58719  _TEXT       CPM22.asm:2132
chrout           = $EECB = 61131  _TEXT       bios.asm:166
ckbitmap         = $E640 = 58944  _TEXT       CPM22.asm:2332
ckbmap1          = $E661 = 58977  _TEXT       CPM22.asm:2367
ckcon1           = $E14D = 57677  _TEXT       CPM22.asm:1403
ckcon2           = $E150 = 57680  _TEXT       CPM22.asm:1404
ckconsol         = $E12E = 57646  _TEXT       CPM22.asm:1389
ckfilpos         = $E600 = 58880  _TEXT       CPM22.asm:2281
ckrof1           = $E552 = 58706  _TEXT       CPM22.asm:2122
cksumtbl         = $EDF7 = 60919  _TEXT       CPM22.asm:3722
clearbuf         = $DB60 = 56160  _TEXT       CPM22.asm:608
clears2          = $E57D = 58749  _TEXT       CPM22.asm:2162
close            = $D8D9 = 55513  _TEXT       CPM22.asm:138
closefil         = $ECB0 = 60592  _TEXT       CPM22.asm:3470
closeflg         = $EDDD = 60893  _TEXT       CPM22.asm:3699
closeit          = $E8AD = 59565  _TEXT       CPM22.asm:2816
closeit1         = $E8D8 = 59608  _TEXT       CPM22.asm:2836
closeit2         = $E8E6 = 59622  _TEXT       CPM22.asm:2844
closeit3         = $E8EC = 59628  _TEXT       CPM22.asm:2848
closeit4         = $E8F3 = 59635  _TEXT       CPM22.asm:2851
closeit5         = $E908 = 59656  _TEXT       CPM22.asm:2864
closeit6         = $E922 = 59682  _TEXT       CPM22.asm:2882
closeit7         = $E92A = 59690  _TEXT       CPM22.asm:2885
cmdadr           = $DBCE = 56270  _TEXT       CPM22.asm:685
cmdtbl           = $DB18 = 56088  _TEXT       CPM22.asm:562
cmmnd1           = $DB87 = 56199  _TEXT       CPM22.asm:643
cmmnd2           = $DBA5 = 56229  _TEXT       CPM22.asm:657
cntrlc           = $0003 =     3  _TEXT       CPM22.asm:29
cntrle           = $0005 =     5  _TEXT       CPM22.asm:30
cntrlp           = $0010 =    16  _TEXT       CPM22.asm:36
cntrlr           = $0012 =    18  _TEXT       CPM22.asm:37
cntrls           = $0013 =    19  _TEXT       CPM22.asm:38
cntrlu           = $0015 =    21  _TEXT       CPM22.asm:39
cntrlx           = $0018 =    24  _TEXT       CPM22.asm:40
cntrlz           = $001A =    26  _TEXT       CPM22.asm:41
comblk           = $E482 = 58498  _TEXT       CPM22.asm:1955
comfile          = $DF90 = 57232  _TEXT       CPM22.asm:1207
command          = $DB64 = 56164  _TEXT       CPM22.asm:618
comprand         = $EBB0 = 60336  _TEXT       CPM22.asm:3289
conin            = $EEBD = 61117  _TEXT       bios.asm:153
conout           = $EEC9 = 61129  _TEXT       bios.asm:165
const            = $EEB2 = 61106  _TEXT       bios.asm:141
convert          = $DA68 = 55912  _TEXT       CPM22.asm:456
convfst          = $DA66 = 55910  _TEXT       CPM22.asm:450
convrt1          = $DA91 = 55953  _TEXT       CPM22.asm:479
convrt2          = $DA98 = 55960  _TEXT       CPM22.asm:482
convrt3          = $DA9E = 55966  _TEXT       CPM22.asm:489
convrt4          = $DAA0 = 55968  _TEXT       CPM22.asm:490
convrt5          = $DAB1 = 55985  _TEXT       CPM22.asm:497
convrt6          = $DAB3 = 55987  _TEXT       CPM22.asm:499
convrt7          = $DAB7 = 55991  _TEXT       CPM22.asm:501
convrt8          = $DAC1 = 56001  _TEXT       CPM22.asm:505
counter          = $EDE3 = 60899  _TEXT       CPM22.asm:3705
cpmlow           = $EEAA = 61098  _TEXT       bios.asm:130
cr               = $000D =    13  _TEXT       CPM22.asm:35
create           = $D908 = 55560  _TEXT       CPM22.asm:188
crlf             = $D898 = 55448  _TEXT       CPM22.asm:80
curpos           = $E317 = 58135  _TEXT       CPM22.asm:1703
de2hl            = $E35A = 58202  _TEXT       CPM22.asm:1734
de2hl1           = $E35B = 58203  _TEXT       CPM22.asm:1735
decode           = $DC05 = 56325  _TEXT       CPM22.asm:712
decode1          = $DC15 = 56341  _TEXT       CPM22.asm:718
decode2          = $DC37 = 56375  _TEXT       CPM22.asm:738 (unused)
decode3          = $DC40 = 56384  _TEXT       CPM22.asm:743
decode4          = $DC47 = 56391  _TEXT       CPM22.asm:747 (unused)
default          = $0000 =     0              config\config_ndsk_hybrid.asm:19
defdma           = $E5E5 = 58853  _TEXT       CPM22.asm:2256
del              = $007F =   127  _TEXT       CPM22.asm:42
delbatch         = $D9E5 = 55781  _TEXT       CPM22.asm:358
delete           = $D8EE = 55534  _TEXT       CPM22.asm:159
delfile          = $ECE2 = 60642  _TEXT       CPM22.asm:3501
dirbuf           = $EDC4 = 60868  _TEXT       CPM22.asm:3680
dirc1            = $E2EB = 58091  _TEXT       CPM22.asm:1661
dircbuf          = $FF10 = 65296  _JUMP_TABLE config\config_ndsk_hybrid.asm:45
dircio           = $E2DF = 58079  _TEXT       CPM22.asm:1655
dirdma           = $E5EB = 58859  _TEXT       CPM22.asm:2261
dirdma1          = $E5EE = 58862  _TEXT       CPM22.asm:2266
direct           = $DC84 = 56452  _TEXT       CPM22.asm:809
direct1          = $DC95 = 56469  _TEXT       CPM22.asm:816
direct2          = $DC9C = 56476  _TEXT       CPM22.asm:820
direct3          = $DCA5 = 56485  _TEXT       CPM22.asm:824
direct4          = $DCD9 = 56537  _TEXT       CPM22.asm:851
direct5          = $DCE1 = 56545  _TEXT       CPM22.asm:854
direct6          = $DCE6 = 56550  _TEXT       CPM22.asm:856
direct7          = $DD1B = 56603  _TEXT       CPM22.asm:880
direct8          = $DD1C = 56604  _TEXT       CPM22.asm:881
direct9          = $DD28 = 56616  _TEXT       CPM22.asm:885
dirread          = $E5DF = 58847  _TEXT       CPM22.asm:2251
dirsize          = $EDD3 = 60883  _TEXT       CPM22.asm:3692
dirwrite         = $E5D1 = 58833  _TEXT       CPM22.asm:2243
diskpb           = $EDC6 = 60870  _TEXT       CPM22.asm:3681
diskro           = $E0EC = 57580  _TEXT       CPM22.asm:1334
dmaset           = $D9E0 = 55776  _TEXT       CPM22.asm:353
doread           = $E3BD = 58301  _TEXT       CPM22.asm:1805
dowrite          = $E3C3 = 58307  _TEXT       CPM22.asm:1810
drect63          = $DD04 = 56580  _TEXT       CPM22.asm:870
drect65          = $DD06 = 56582  _TEXT       CPM22.asm:871
dselect          = $DC61 = 56417  _TEXT       CPM22.asm:779
dsksel           = $D8BC = 55484  _TEXT       CPM22.asm:112
dsksize          = $EDD1 = 60881  _TEXT       CPM22.asm:3691
emptyfcb         = $EDB7 = 60855  _TEXT       CPM22.asm:3667
entry            = $0005 =     5  _TEXT       CPM22.asm:22
entry1           = $D8C2 = 55490  _TEXT       CPM22.asm:119
entry2           = $D8F3 = 55539  _TEXT       CPM22.asm:165
eparam           = $EDE1 = 60897  _TEXT       CPM22.asm:3703
erafil1          = $E7AF = 59311  _TEXT       CPM22.asm:2608
erafile          = $E7A7 = 59303  _TEXT       CPM22.asm:2605
erase            = $DD2C = 56620  _TEXT       CPM22.asm:894
erase1           = $DD4F = 56655  _TEXT       CPM22.asm:909
error1           = $E09F = 57503  _TEXT       CPM22.asm:1310
error2           = $E0AB = 57515  _TEXT       CPM22.asm:1316
error3           = $E0B1 = 57521  _TEXT       CPM22.asm:1319
error4           = $E0B7 = 57527  _TEXT       CPM22.asm:1322
error5           = $E0BA = 57530  _TEXT       CPM22.asm:1324
exists           = $DE8F = 56975  _TEXT       CPM22.asm:1071
extblk           = $E469 = 58473  _TEXT       CPM22.asm:1936
extblk1          = $E47C = 58492  _TEXT       CPM22.asm:1946
extmask          = $EDD0 = 60880  _TEXT       CPM22.asm:3690
extract          = $DC58 = 56408  _TEXT       CPM22.asm:769
fbase            = $E006 = 57350  _TEXT       CPM22.asm:1252
fbase1           = $E014 = 57364  _TEXT       CPM22.asm:1265
fcb              = $DFDA = 57306  _TEXT       CPM22.asm:1234
fcb2hl           = $E569 = 58729  _TEXT       CPM22.asm:2140
fcbpos           = $EDF4 = 60916  _TEXT       CPM22.asm:3716
fcbset           = $E808 = 59400  _TEXT       CPM22.asm:2700
fcreate          = $ECF7 = 60663  _TEXT       CPM22.asm:3518
ff               = $000C =    12  _TEXT       CPM22.asm:34 (unused)
filepos          = $EDF5 = 60917  _TEXT       CPM22.asm:3717
filero           = $E0E7 = 57575  _TEXT       CPM22.asm:1333
filesize         = $ED58 = 60760  _TEXT       CPM22.asm:3592
findfst          = $E723 = 59171  _TEXT       CPM22.asm:2525
findnxt          = $E738 = 59192  _TEXT       CPM22.asm:2538
fndnxt1          = $E755 = 59221  _TEXT       CPM22.asm:2551
fndnxt2          = $E75E = 59230  _TEXT       CPM22.asm:2555
fndnxt3          = $E77E = 59262  _TEXT       CPM22.asm:2571
fndnxt4          = $E787 = 59271  _TEXT       CPM22.asm:2580
fndnxt5          = $E78E = 59278  _TEXT       CPM22.asm:2585
fndnxt6          = $E79F = 59295  _TEXT       CPM22.asm:2598
fndspa1          = $E7CB = 59339  _TEXT       CPM22.asm:2638
fndspa2          = $E7DC = 59356  _TEXT       CPM22.asm:2661
fndspa3          = $E7F7 = 59383  _TEXT       CPM22.asm:2682
fndspa4          = $E7FF = 59391  _TEXT       CPM22.asm:2692
fndspace         = $E7C9 = 59337  _TEXT       CPM22.asm:2632
fndstat          = $EDDF = 60895  _TEXT       CPM22.asm:3701
functns          = $E04D = 57421  _TEXT       CPM22.asm:1301
getaloc          = $ED1C = 60700  _TEXT       CPM22.asm:3546
getback          = $DF93 = 57235  _TEXT       CPM22.asm:1213
getback1         = $DF96 = 57238  _TEXT       CPM22.asm:1214
getblk1          = $E450 = 58448  _TEXT       CPM22.asm:1914
getblk2          = $E45E = 58462  _TEXT       CPM22.asm:1923
getblk3          = $E467 = 58471  _TEXT       CPM22.asm:1928
getblock         = $E449 = 58441  _TEXT       CPM22.asm:1911
getchar          = $E106 = 57606  _TEXT       CPM22.asm:1351
getcon           = $E2D3 = 58067  _TEXT       CPM22.asm:1643
getcrnt          = $ED0F = 60687  _TEXT       CPM22.asm:3535
getcsts          = $E309 = 58121  _TEXT       CPM22.asm:1688
getdsk           = $D9D8 = 55768  _TEXT       CPM22.asm:344
getecho          = $E111 = 57617  _TEXT       CPM22.asm:1360
getempty         = $E92F = 59695  _TEXT       CPM22.asm:2892
getext           = $DAC8 = 56008  _TEXT       CPM22.asm:512
getext1          = $DAD0 = 56016  _TEXT       CPM22.asm:516
getext2          = $DAE1 = 56033  _TEXT       CPM22.asm:523
getext3          = $DAE3 = 56035  _TEXT       CPM22.asm:525
getext4          = $DAE7 = 56039  _TEXT       CPM22.asm:527
getext5          = $DAF1 = 56049  _TEXT       CPM22.asm:531
getext6          = $DAF8 = 56056  _TEXT       CPM22.asm:535
getext7          = $DAFA = 56058  _TEXT       CPM22.asm:536
getext8          = $DB09 = 56073  _TEXT       CPM22.asm:548
getext9          = $DB11 = 56081  _TEXT       CPM22.asm:553
getfst           = $ECB6 = 60598  _TEXT       CPM22.asm:3477
getfst1          = $ECCD = 60621  _TEXT       CPM22.asm:3488
getinp           = $D938 = 55608  _TEXT       CPM22.asm:239
getinp0          = $D954 = 55636  _TEXT       CPM22.asm:255
getinp1          = $D9A0 = 55712  _TEXT       CPM22.asm:305
getinp2          = $D9B1 = 55729  _TEXT       CPM22.asm:314
getinp3          = $D9B5 = 55733  _TEXT       CPM22.asm:316
getinp4          = $D9C2 = 55746  _TEXT       CPM22.asm:325
getiob           = $E2F8 = 58104  _TEXT       CPM22.asm:1669
getlog           = $ED09 = 60681  _TEXT       CPM22.asm:3530
getmt1           = $E951 = 59729  _TEXT       CPM22.asm:2908
getnext          = $E965 = 59749  _TEXT       CPM22.asm:2922
getnxt           = $ECD3 = 60627  _TEXT       CPM22.asm:3493
getparm          = $ED31 = 60721  _TEXT       CPM22.asm:3563
getprm1          = $ED34 = 60724  _TEXT       CPM22.asm:3564
getrdr           = $E2D9 = 58073  _TEXT       CPM22.asm:1648
getrov           = $ED22 = 60706  _TEXT       CPM22.asm:3551
gets2            = $E574 = 58740  _TEXT       CPM22.asm:2154
getsetuc         = $D914 = 55572  _TEXT       CPM22.asm:204
getuser          = $ED38 = 60728  _TEXT       CPM22.asm:3571
getusr           = $D912 = 55570  _TEXT       CPM22.asm:199
getver           = $EC89 = 60553  _TEXT       CPM22.asm:3447
getwprt          = $E529 = 58665  _TEXT       CPM22.asm:2094
goback           = $ED7F = 60799  _TEXT       CPM22.asm:3627
goback1          = $ED9C = 60828  _TEXT       CPM22.asm:3639
gtnext1          = $E98E = 59790  _TEXT       CPM22.asm:2942
gtnext2          = $E999 = 59801  _TEXT       CPM22.asm:2951
gtnext3          = $E9B7 = 59831  _TEXT       CPM22.asm:2962
gtnext4          = $E9BA = 59834  _TEXT       CPM22.asm:2963
gtnext5          = $E9C1 = 59841  _TEXT       CPM22.asm:2970
halt             = $DBDC = 56284  _TEXT       CPM22.asm:690
hl2de            = $DC4F = 56399  _TEXT       CPM22.asm:759
home             = $EEEB = 61163  _TEXT       bios.asm:199
homedrv          = $E3AC = 58284  _TEXT       CPM22.asm:1791
inbuff           = $D806 = 55302  _TEXT       CPM22.asm:51
inpoint          = $D888 = 55432  _TEXT       CPM22.asm:60
intvec           = $FF00 = 65280  _JUMP_TABLE config\config_ndsk_hybrid.asm:44
iobyte           = $0003 =     3  _TEXT       CPM22.asm:20
ioerr1           = $E310 = 58128  _TEXT       CPM22.asm:1698
ioret            = $E3C6 = 58310  _TEXT       CPM22.asm:1811
jumphl           = $E355 = 58197  _TEXT       CPM22.asm:1726
lf               = $000A =    10  _TEXT       CPM22.asm:33
list             = $EED5 = 61141  _TEXT       bios.asm:176
logical          = $E495 = 58517  _TEXT       CPM22.asm:1975
logicl1          = $E49B = 58523  _TEXT       CPM22.asm:1977
login            = $EDBA = 60858  _TEXT       CPM22.asm:3669
logindrv         = $EC2C = 60460  _TEXT       CPM22.asm:3391
logoff           = $ED5E = 60766  _TEXT       CPM22.asm:3601
logsect          = $EDF2 = 60914  _TEXT       CPM22.asm:3715
mem              = $0036 =    54              config\config_ndsk_hybrid.asm:38
mode             = $EDE0 = 60896  _TEXT       CPM22.asm:3702
morefls          = $E58A = 58762  _TEXT       CPM22.asm:2178
move3            = $DC4D = 56397  _TEXT       CPM22.asm:755
movecd           = $D928 = 55592  _TEXT       CPM22.asm:221
movedir          = $E5F4 = 58868  _TEXT       CPM22.asm:2273
moveword         = $E89F = 59551  _TEXT       CPM22.asm:2799
namepnt          = $D88A = 55434  _TEXT       CPM22.asm:61
nbytes           = $DFFE = 57342  _TEXT       CPM22.asm:1238
nd_asva          = $F95C = 63836  _BSS        nabu_ndsk.asm:32
nd_asvb          = $F9DD = 63965  _BSS        nabu_ndsk.asm:33
nd_atla          = $0041 =    65  _TEXT       nabu_ndsk.asm:37
nd_ayda          = $0040 =    64  _TEXT       nabu_ndsk.asm:36
nd_buff          = $F91C = 63772  _BSS        nabu_ndsk.asm:31
nd_ccp           = $F41C = 62492  _TEXT       nabu_ndsk.asm:243
nd_csec          = $F919 = 63769  _BSS        nabu_ndsk.asm:29
nd_ctrk          = $F91A = 63770  _BSS        nabu_ndsk.asm:30
nd_dpb           = $F359 = 62297  _TEXT       nabu_ndsk.asm:67
nd_dpha          = $F339 = 62265  _TEXT       nabu_ndsk.asm:53
nd_dphb          = $F349 = 62281  _TEXT       nabu_ndsk.asm:60
nd_dsn0          = $F40D = 62477  _TEXT       nabu_ndsk.asm:227
nd_dsnd          = $F405 = 62469  _TEXT       nabu_ndsk.asm:222
nd_esnd          = $F412 = 62482  _TEXT       nabu_ndsk.asm:235
nd_fild          = $0080 =   128  _TEXT       nabu_ndsk.asm:41
nd_gbno          = $F3DF = 62431  _TEXT       nabu_ndsk.asm:186
nd_get0          = $F483 = 62595  _TEXT       nabu_ndsk.asm:305
nd_getb          = $F462 = 62562  _TEXT       nabu_ndsk.asm:288
nd_grb           = $F421 = 62497  _TEXT       nabu_ndsk.asm:247
nd_grb0          = $F424 = 62500  _TEXT       nabu_ndsk.asm:248
nd_grb1          = $F43B = 62523  _TEXT       nabu_ndsk.asm:256
nd_hcca          = $0080 =   128  _TEXT       nabu_ndsk.asm:38
nd_hcer          = $F4F9 = 62713  _TEXT       nabu_ndsk.asm:407
nd_hcr0          = $F4E6 = 62694  _TEXT       nabu_ndsk.asm:392
nd_hcr1          = $F500 = 62720  _TEXT       nabu_ndsk.asm:412
nd_hcr2          = $F509 = 62729  _TEXT       nabu_ndsk.asm:418
nd_hcrd          = $F4DB = 62683  _TEXT       nabu_ndsk.asm:387
nd_hcre          = $F4DE = 62686  _TEXT       nabu_ndsk.asm:388
nd_hcw0          = $F536 = 62774  _TEXT       nabu_ndsk.asm:455
nd_hcw1          = $F54E = 62798  _TEXT       nabu_ndsk.asm:472
nd_hcw2          = $F553 = 62803  _TEXT       nabu_ndsk.asm:474
nd_hcwr          = $F524 = 62756  _TEXT       nabu_ndsk.asm:447
nd_hini          = $F3EF = 62447  _TEXT       nabu_ndsk.asm:206
nd_home          = $F381 = 62337  _TEXT       nabu_ndsk.asm:106
nd_inb           = $F570 = 62832  _TEXT       nabu_ndsk.asm:500
nd_inf           = $F571 = 62833  _TEXT       nabu_ndsk.asm:503
nd_init          = $F380 = 62336  _TEXT       nabu_ndsk.asm:101
nd_m0            = $F591 = 62865  _TEXT       nabu_ndsk.asm:521
nd_m0fl          = $F597 = 62871  _TEXT       nabu_ndsk.asm:525
nd_m0na          = $F59A = 62874  _TEXT       nabu_ndsk.asm:527
nd_m1            = $F5A9 = 62889  _TEXT       nabu_ndsk.asm:532
nd_m2            = $F5B1 = 62897  _TEXT       nabu_ndsk.asm:540
nd_m2bn          = $F5B7 = 62903  _TEXT       nabu_ndsk.asm:544
nd_m3            = $F5BD = 62909  _TEXT       nabu_ndsk.asm:549
nd_m3bn          = $F5C3 = 62915  _TEXT       nabu_ndsk.asm:553
nd_nctl          = $0000 =     0  _TEXT       nabu_ndsk.asm:39
nd_opef          = $F448 = 62536  _TEXT       nabu_ndsk.asm:269
nd_open          = $F445 = 62533  _TEXT       nabu_ndsk.asm:268
nd_outb          = $F56E = 62830  _TEXT       nabu_ndsk.asm:494
nd_outf          = $F56F = 62831  _TEXT       nabu_ndsk.asm:497
nd_p0            = $F572 = 62834  _TEXT       nabu_ndsk.asm:507
nd_p1            = $F57C = 62844  _TEXT       nabu_ndsk.asm:511
nd_p2            = $F586 = 62854  _TEXT       nabu_ndsk.asm:515
nd_p2im          = $F58B = 62859  _TEXT       nabu_ndsk.asm:516
nd_put0          = $F4A7 = 62631  _TEXT       nabu_ndsk.asm:334
nd_putb          = $F495 = 62613  _TEXT       nabu_ndsk.asm:324
nd_read          = $F3BD = 62397  _TEXT       nabu_ndsk.asm:160
nd_rec0          = $F4C8 = 62664  _TEXT       nabu_ndsk.asm:359
nd_rece          = $F4BD = 62653  _TEXT       nabu_ndsk.asm:352
nd_rirq          = $F516 = 62742  _TEXT       nabu_ndsk.asm:430
nd_sel           = $F388 = 62344  _TEXT       nabu_ndsk.asm:115
nd_send          = $F4D2 = 62674  _TEXT       nabu_ndsk.asm:373
nd_ssec          = $F3B8 = 62392  _TEXT       nabu_ndsk.asm:153
nd_strk          = $F3B2 = 62386  _TEXT       nabu_ndsk.asm:143
nd_wirq          = $F55D = 62813  _TEXT       nabu_ndsk.asm:483
nd_writ          = $F3CE = 62414  _TEXT       nabu_ndsk.asm:172
ndkdev           = $F368 = 62312  _TEXT       nabu_ndsk.asm:82
newline          = $E1BC = 57788  _TEXT       CPM22.asm:1485
newln1           = $E1C4 = 57796  _TEXT       CPM22.asm:1488
nf_asva          = $FA65 = 64101  _BSS        nabu_fdc.asm:34
nf_asvb          = $FA7F = 64127  _BSS        nabu_fdc.asm:35
nf_atla          = $0041 =    65  _TEXT       nabu_fdc.asm:46
nf_ayda          = $0040 =    64  _TEXT       nabu_fdc.asm:45
nf_busy          = $F818 = 63512  _TEXT       nabu_fdc.asm:532
nf_cach          = $FAB7 = 64183  _BSS        nabu_fdc.asm:39
nf_ccp           = $F79D = 63389  _TEXT       nabu_fdc.asm:428 (unused)
nf_csva          = $FA99 = 64153  _BSS        nabu_fdc.asm:36
nf_csvb          = $FAA8 = 64168  _BSS        nabu_fdc.asm:37
nf_curd          = $FA60 = 64096  _BSS        nabu_fdc.asm:28
nf_dint          = $F823 = 63523  _TEXT       nabu_fdc.asm:548
nf_dirt          = $FA64 = 64100  _BSS        nabu_fdc.asm:32
nf_dpb           = $F5E9 = 62953  _TEXT       nabu_fdc.asm:73
nf_dpha          = $F5C9 = 62921  _TEXT       nabu_fdc.asm:57
nf_dphb          = $F5D9 = 62937  _TEXT       nabu_fdc.asm:65
nf_dvsc          = $F801 = 63489  _TEXT       nabu_fdc.asm:513
nf_dvsl          = $F807 = 63495  _TEXT       nabu_fdc.asm:516
nf_eint          = $F82C = 63532  _TEXT       nabu_fdc.asm:557
nf_grb           = $F796 = 63382  _TEXT       nabu_fdc.asm:423 (unused)
nf_home          = $F63B = 63035  _TEXT       nabu_fdc.asm:147
nf_inco          = $FA63 = 64099  _BSS        nabu_fdc.asm:31
nf_ini1          = $F616 = 62998  _TEXT       nabu_fdc.asm:111
nf_ini2          = $F624 = 63012  _TEXT       nabu_fdc.asm:122
nf_init          = $F610 = 62992  _TEXT       nabu_fdc.asm:106
nf_io            = $FA5E = 64094  _BSS        nabu_fdc.asm:25
nf_r2k           = $F7A2 = 63394  _TEXT       nabu_fdc.asm:433
nf_r2k0          = $F7CB = 63435  _TEXT       nabu_fdc.asm:462
nf_r2ks          = $FA5F = 64095  _BSS        nabu_fdc.asm:26
nf_rdsk          = $0002 =     2  _TEXT       nabu_fdc.asm:42
nf_rdw0          = $F71B = 63259  _TEXT       nabu_fdc.asm:322
nf_rdw1          = $F729 = 63273  _TEXT       nabu_fdc.asm:329
nf_rdwr          = $F6FC = 63228  _TEXT       nabu_fdc.asm:301
nf_read          = $F72E = 63278  _TEXT       nabu_fdc.asm:335
nf_rph1          = $F7EB = 63467  _TEXT       nabu_fdc.asm:495
nf_rph2          = $F7F9 = 63481  _TEXT       nabu_fdc.asm:504
nf_rphy          = $F7DF = 63455  _TEXT       nabu_fdc.asm:485
nf_sel           = $F653 = 63059  _TEXT       nabu_fdc.asm:170
nf_sel0          = $F66D = 63085  _TEXT       nabu_fdc.asm:189
nf_sel1          = $F687 = 63111  _TEXT       nabu_fdc.asm:203
nf_sel2          = $F699 = 63129  _TEXT       nabu_fdc.asm:216
nf_selc          = $F67A = 63098  _TEXT       nabu_fdc.asm:197 (unused)
nf_seld          = $F65E = 63070  _TEXT       nabu_fdc.asm:178
nf_ssec          = $F6DD = 63197  _TEXT       nabu_fdc.asm:274
nf_stal          = $F81E = 63518  _TEXT       nabu_fdc.asm:540
nf_str0          = $F6C0 = 63168  _TEXT       nabu_fdc.asm:248
nf_strk          = $F6A7 = 63143  _TEXT       nabu_fdc.asm:229
nf_subs          = $FA61 = 64097  _BSS        nabu_fdc.asm:29
nf_sync          = $FA62 = 64098  _BSS        nabu_fdc.asm:30
nf_udsl          = $F806 = 63494  _TEXT       nabu_fdc.asm:515
nf_wde1          = $F76C = 63340  _TEXT       nabu_fdc.asm:385
nf_wde2          = $F77A = 63354  _TEXT       nabu_fdc.asm:394
nf_wde3          = $F78E = 63374  _TEXT       nabu_fdc.asm:414
nf_wde4          = $F791 = 63377  _TEXT       nabu_fdc.asm:417
nf_wdef          = $F74E = 63310  _TEXT       nabu_fdc.asm:365
nf_writ          = $F736 = 63286  _TEXT       nabu_fdc.asm:343
nfddev           = $F5F8 = 62968  _TEXT       nabu_fdc.asm:90
nfuncts          = $0029 =    41  _TEXT       CPM22.asm:1299
nh_get1          = $F48D = 62605  _TEXT       nabu_ndsk.asm:312
nofile           = $DBFD = 56317  _TEXT       CPM22.asm:705
nonblank         = $DA57 = 55895  _TEXT       CPM22.asm:432
none             = $DBF7 = 56311  _TEXT       CPM22.asm:703
nospace          = $DE14 = 56852  _TEXT       CPM22.asm:1013
nulldev          = $EF55 = 61269  _TEXT       bios.asm:317 (unused)
numcmds          = $0006 =     6  _TEXT       CPM22.asm:561
nxent1           = $E624 = 58916  _TEXT       CPM22.asm:2311
nxent2           = $E62B = 58923  _TEXT       CPM22.asm:2314
nxentry          = $E610 = 58896  _TEXT       CPM22.asm:2303
offset           = $EDD9 = 60889  _TEXT       CPM22.asm:3695
olddrv           = $EDEA = 60906  _TEXT       CPM22.asm:3709
open             = $D8CA = 55498  _TEXT       CPM22.asm:126
openfcb          = $D8CF = 55503  _TEXT       CPM22.asm:131
openfil          = $ECA7 = 60583  _TEXT       CPM22.asm:3464
openit           = $E85C = 59484  _TEXT       CPM22.asm:2756
openit1          = $E865 = 59493  _TEXT       CPM22.asm:2760
openit2          = $E896 = 59542  _TEXT       CPM22.asm:2788
outchar          = $E153 = 57683  _TEXT       CPM22.asm:1411
outchr1          = $E16D = 57709  _TEXT       CPM22.asm:1425
outchr2          = $E184 = 57732  _TEXT       CPM22.asm:1441
outcon           = $E19B = 57755  _TEXT       CPM22.asm:1462
outcon1          = $E1A1 = 57761  _TEXT       CPM22.asm:1465
outcrlf          = $E1D4 = 57812  _TEXT       CPM22.asm:1498
outflag          = $E315 = 58133  _TEXT       CPM22.asm:1701
params           = $E34E = 58190  _TEXT       CPM22.asm:1717
pattrn1          = $DB30 = 56112  _TEXT       CPM22.asm:572
pattrn2          = $E000 = 57344  _TEXT       CPM22.asm:1244
pline            = $D8A6 = 55462  _TEXT       CPM22.asm:93
pline2           = $D8AB = 55467  _TEXT       CPM22.asm:96
position         = $EB0E = 60174  _TEXT       CPM22.asm:3166
positn1          = $EB12 = 60178  _TEXT       CPM22.asm:3171
positn2          = $EB52 = 60242  _TEXT       CPM22.asm:3217
positn3          = $EB8A = 60298  _TEXT       CPM22.asm:3249
positn4          = $EB8F = 60303  _TEXT       CPM22.asm:3255
positn5          = $EB96 = 60310  _TEXT       CPM22.asm:3262
pr_atla          = $0041 =    65  _TEXT       nabu_prt.asm:14
pr_ayda          = $0040 =    64  _TEXT       nabu_prt.asm:13
pr_ctrl          = $0000 =     0  _TEXT       nabu_prt.asm:16
pr_init          = $F840 = 63552  _TEXT       nabu_prt.asm:31
pr_prnt          = $00B0 =   176  _TEXT       nabu_prt.asm:15
pr_read          = $F843 = 63555  _TEXT       nabu_prt.asm:46
pr_stat          = $F841 = 63553  _TEXT       nabu_prt.asm:38
pr_wri0          = $F849 = 63561  _TEXT       nabu_prt.asm:56
pr_wri1          = $F858 = 63576  _TEXT       nabu_prt.asm:67
pr_writ          = $F845 = 63557  _TEXT       nabu_prt.asm:53
print            = $D88C = 55436  _TEXT       CPM22.asm:66
printb           = $D892 = 55442  _TEXT       CPM22.asm:72
printdc          = $EE07 = 60935  _TEXT       CPM22.asm:3730
prstat           = $EF24 = 61220  _TEXT       bios.asm:271
prtdev           = $F835 = 63541  _TEXT       nabu_prt.asm:19
prterr           = $E0F0 = 57584  _TEXT       CPM22.asm:1338
prtflag          = $E318 = 58136  _TEXT       CPM22.asm:1704
prtmesg          = $E1DE = 57822  _TEXT       CPM22.asm:1505
prtstr           = $E303 = 58115  _TEXT       CPM22.asm:1681
punch            = $EED9 = 61145  _TEXT       bios.asm:182
putdma           = $ED15 = 60693  _TEXT       CPM22.asm:3540
ransiz1          = $EBEF = 60399  _TEXT       CPM22.asm:3345
ransiz2          = $EC11 = 60433  _TEXT       CPM22.asm:3367
ransiz3          = $EC17 = 60439  _TEXT       CPM22.asm:3369
ransize          = $EBDD = 60381  _TEXT       CPM22.asm:3334
rdbuf1           = $E1FA = 57850  _TEXT       CPM22.asm:1524
rdbuf10          = $E27B = 57979  _TEXT       CPM22.asm:1586
rdbuf11          = $E283 = 57987  _TEXT       CPM22.asm:1592
rdbuf12          = $E295 = 58005  _TEXT       CPM22.asm:1604
rdbuf13          = $E2A4 = 58020  _TEXT       CPM22.asm:1611
rdbuf14          = $E2B1 = 58033  _TEXT       CPM22.asm:1619
rdbuf15          = $E2B4 = 58036  _TEXT       CPM22.asm:1622
rdbuf16          = $E2C8 = 58056  _TEXT       CPM22.asm:1634
rdbuf17          = $E2CC = 58060  _TEXT       CPM22.asm:1636
rdbuf2           = $E1FC = 57852  _TEXT       CPM22.asm:1526
rdbuf3           = $E221 = 57889  _TEXT       CPM22.asm:1543
rdbuf4           = $E231 = 57905  _TEXT       CPM22.asm:1552
rdbuf5           = $E242 = 57922  _TEXT       CPM22.asm:1560
rdbuf6           = $E253 = 57939  _TEXT       CPM22.asm:1569
rdbuf7           = $E259 = 57945  _TEXT       CPM22.asm:1572
rdbuf8           = $E26A = 57962  _TEXT       CPM22.asm:1579
rdbuf9           = $E276 = 57974  _TEXT       CPM22.asm:1584
rdbuff           = $E1EC = 57836  _TEXT       CPM22.asm:1517
rderr            = $DBEC = 56300  _TEXT       CPM22.asm:699
rderror          = $DBE6 = 56294  _TEXT       CPM22.asm:697
rdrandom         = $ED4C = 60748  _TEXT       CPM22.asm:3582
rdrec            = $D8F8 = 55544  _TEXT       CPM22.asm:172
rdseq            = $E9C7 = 59847  _TEXT       CPM22.asm:2975
rdseq1           = $E9CC = 59852  _TEXT       CPM22.asm:2977
rdseq2           = $E9F1 = 59889  _TEXT       CPM22.asm:2992
rdseq3           = $EA06 = 59910  _TEXT       CPM22.asm:3002
rdwrtflg         = $EDDE = 60894  _TEXT       CPM22.asm:3700
read             = $EF1C = 61212  _TEXT       bios.asm:256
reader           = $EEDD = 61149  _TEXT       bios.asm:188
readfcb          = $D8FD = 55549  _TEXT       CPM22.asm:177
readran          = $EB9E = 60318  _TEXT       CPM22.asm:3269
readseq          = $ECEB = 60651  _TEXT       CPM22.asm:3508
relblock         = $EDE2 = 60898  _TEXT       CPM22.asm:3704
renam            = $D90D = 55565  _TEXT       CPM22.asm:194
rename           = $DE1D = 56861  _TEXT       CPM22.asm:1021
rename1          = $DE4C = 56908  _TEXT       CPM22.asm:1039
rename2          = $DE66 = 56934  _TEXT       CPM22.asm:1053
rename3          = $DE6B = 56939  _TEXT       CPM22.asm:1056 (unused)
rename4          = $DE7A = 56954  _TEXT       CPM22.asm:1064
rename5          = $DE80 = 56960  _TEXT       CPM22.asm:1066
rename6          = $DE86 = 56966  _TEXT       CPM22.asm:1068
renfile          = $ED00 = 60672  _TEXT       CPM22.asm:3524
resccp           = $EF74 = 61300  _TEXT       config\config_ndsk_hybrid.asm:147
resdsk           = $D8B7 = 55479  _TEXT       CPM22.asm:107
resetdr          = $DC73 = 56435  _TEXT       CPM22.asm:793
resgrb           = $EF77 = 61303  _TEXT       config\config_ndsk_hybrid.asm:153
rodisk           = $E010 = 57360  _TEXT       CPM22.asm:1259
rofile           = $E012 = 57362  _TEXT       CPM22.asm:1260
rstdsk           = $EC8E = 60558  _TEXT       CPM22.asm:3452
rtn              = $E30F = 58127  _TEXT       CPM22.asm:1694
rtncode          = $DFFB = 57339  _TEXT       CPM22.asm:1235
samext           = $E712 = 59154  _TEXT       CPM22.asm:2506
savatr1          = $E84B = 59467  _TEXT       CPM22.asm:2746
save             = $DDBA = 56762  _TEXT       CPM22.asm:966
save1            = $DDE1 = 56801  _TEXT       CPM22.asm:984
save2            = $DDFE = 56830  _TEXT       CPM22.asm:1002
save3            = $DE08 = 56840  _TEXT       CPM22.asm:1009
save4            = $DE0E = 56846  _TEXT       CPM22.asm:1011
saveattr         = $E846 = 59462  _TEXT       CPM22.asm:2744
savefcb          = $EDE4 = 60900  _TEXT       CPM22.asm:3706
savext           = $EDED = 60909  _TEXT       CPM22.asm:3712
savnrec          = $EDEE = 60910  _TEXT       CPM22.asm:3713
savnxt           = $EDEC = 60908  _TEXT       CPM22.asm:3711
scratch1         = $EDBE = 60862  _TEXT       CPM22.asm:3674
scratch2         = $EDC0 = 60864  _TEXT       CPM22.asm:3675
scratch3         = $EDC2 = 60866  _TEXT       CPM22.asm:3676
search           = $DB36 = 56118  _TEXT       CPM22.asm:580
search1          = $DB3B = 56123  _TEXT       CPM22.asm:582
search2          = $DB44 = 56132  _TEXT       CPM22.asm:587
search3          = $DB57 = 56151  _TEXT       CPM22.asm:599
search4          = $DB5C = 56156  _TEXT       CPM22.asm:602
sectors          = $EDCC = 60876  _TEXT       CPM22.asm:3687
sectrn           = $EF27 = 61223  _TEXT       bios.asm:276
seldsk           = $EEF0 = 61168  _TEXT       bios.asm:208
select           = $E364 = 58212  _TEXT       CPM22.asm:1745
select1          = $E3A8 = 58280  _TEXT       CPM22.asm:1785
setattr          = $ED28 = 60712  _TEXT       CPM22.asm:3556
setbit           = $E516 = 58646  _TEXT       CPM22.asm:2077
setcdrv          = $D919 = 55577  _TEXT       CPM22.asm:209
setdir           = $E5A7 = 58791  _TEXT       CPM22.asm:2211
setdma           = $EF16 = 61206  _TEXT       bios.asm:248
setdsk           = $EC50 = 60496  _TEXT       CPM22.asm:3412
setext           = $E4B1 = 58545  _TEXT       CPM22.asm:1992
setfile          = $E676 = 58998  _TEXT       CPM22.asm:2396
setfl1           = $E680 = 59008  _TEXT       CPM22.asm:2401
setfl2           = $E693 = 59027  _TEXT       CPM22.asm:2413
setfl3           = $E699 = 59033  _TEXT       CPM22.asm:2419
setfl4           = $E6A8 = 59048  _TEXT       CPM22.asm:2428
sethlde          = $E4B9 = 58553  _TEXT       CPM22.asm:2000
setiob           = $E2FE = 58110  _TEXT       CPM22.asm:1674
setnrec          = $E4DD = 58589  _TEXT       CPM22.asm:2026
setran           = $EC19 = 60441  _TEXT       CPM22.asm:3375
sets2b7          = $E583 = 58755  _TEXT       CPM22.asm:2168
setsec           = $EF12 = 61202  _TEXT       bios.asm:241
setstat          = $E30C = 58124  _TEXT       CPM22.asm:1693
settrk           = $EF0E = 61198  _TEXT       bios.asm:234
setuser          = $ED46 = 60742  _TEXT       CPM22.asm:3576
shiftl           = $E50F = 58639  _TEXT       CPM22.asm:2068
shiftl1          = $E510 = 58640  _TEXT       CPM22.asm:2069
shiftr           = $E4F5 = 58613  _TEXT       CPM22.asm:2042
shiftr1          = $E4F6 = 58614  _TEXT       CPM22.asm:2043
showit           = $E18A = 57738  _TEXT       CPM22.asm:1449
siodev           = $F85F = 63583  _TEXT       nabu_sio.asm:20
slcterr          = $E352 = 58194  _TEXT       CPM22.asm:1722
so_atab          = $F8CF = 63695  _TEXT       nabu_sio.asm:131
so_conf          = $F8D3 = 63699  _TEXT       nabu_sio.asm:135
so_ini0          = $F872 = 63602  _TEXT       nabu_sio.asm:39
so_ini1          = $F878 = 63608  _TEXT       nabu_sio.asm:43
so_ini2          = $F87F = 63615  _TEXT       nabu_sio.asm:49
so_ini3          = $F88B = 63627  _TEXT       nabu_sio.asm:59
so_init          = $F86A = 63594  _TEXT       nabu_sio.asm:33
so_rea0          = $F8B2 = 63666  _TEXT       nabu_sio.asm:102
so_read          = $F8A9 = 63657  _TEXT       nabu_sio.asm:95
so_sta0          = $F8A1 = 63649  _TEXT       nabu_sio.asm:83
so_stat          = $F898 = 63640  _TEXT       nabu_sio.asm:76
so_wri0          = $F8C5 = 63685  _TEXT       nabu_sio.asm:121
so_writ          = $F8BB = 63675  _TEXT       nabu_sio.asm:113
space            = $D8A1 = 55457  _TEXT       CPM22.asm:87
srchfcb          = $D8E8 = 55528  _TEXT       CPM22.asm:154
srchfst          = $D8DE = 55518  _TEXT       CPM22.asm:144
srchnxt          = $D8E3 = 55523  _TEXT       CPM22.asm:149
starting         = $E316 = 58134  _TEXT       CPM22.asm:1702
status           = $E350 = 58192  _TEXT       CPM22.asm:1718
stbitmap         = $E667 = 58983  _TEXT       CPM22.asm:2376
stbmap1          = $E66F = 58991  _TEXT       CPM22.asm:2387
stddma           = $D9DD = 55773  _TEXT       CPM22.asm:349
stfilpos         = $E609 = 58889  _TEXT       CPM22.asm:2291
stkarea          = $E34C = 58188  _TEXT       CPM22.asm:1713
stnrec1          = $E4E9 = 58601  _TEXT       CPM22.asm:2031
strdata          = $E4C6 = 58566  _TEXT       CPM22.asm:2010
ststatus         = $E70C = 59148  _TEXT       CPM22.asm:2498
subhl            = $E5A0 = 58784  _TEXT       CPM22.asm:2201
swindi0          = $EF3D = 61245  _TEXT       bios.asm:300
swindi1          = $EF43 = 61251  _TEXT       bios.asm:304
swindir          = $EF39 = 61241  _TEXT       bios.asm:298
synerr           = $DA11 = 55825  _TEXT       CPM22.asm:387
synerr1          = $DA17 = 55831  _TEXT       CPM22.asm:389
synerr2          = $DA2A = 55850  _TEXT       CPM22.asm:399
syshook          = $EF73 = 61299  _TEXT       config\config_ndsk_hybrid.asm:125
tab              = $0009 =     9  _TEXT       CPM22.asm:32
tbase            = $0100 =   256  _TEXT       CPM22.asm:25
tbuff            = $0080 =   128  _TEXT       CPM22.asm:24
tdrive           = $0004 =     4  _TEXT       CPM22.asm:21
tfcb             = $005C =    92  _TEXT       CPM22.asm:23
tm_40c           = $F1E8 = 61928  _TEXT       nabu_vdp.asm:450
tm_80c           = $F1F5 = 61941  _TEXT       nabu_vdp.asm:457
tm_addh          = $F30C = 62220  _TEXT       nabu_vdp.asm:695
tm_addr          = $F30E = 62222  _TEXT       nabu_vdp.asm:697
tm_atla          = $0041 =    65  _TEXT       nabu_vdp.asm:37
tm_ayda          = $0040 =    64  _TEXT       nabu_vdp.asm:36
tm_bs            = $F13E = 61758  _TEXT       nabu_vdp.asm:336
tm_cbuf          = $F8F1 = 63729  _BSS        nabu_vdp.asm:26
tm_cha0          = $F2B0 = 62128  _TEXT       nabu_vdp.asm:618
tm_chat          = $F2AA = 62122  _TEXT       nabu_vdp.asm:613
tm_cle0          = $F1D4 = 61908  _TEXT       nabu_vdp.asm:435
tm_clea          = $F1C5 = 61893  _TEXT       nabu_vdp.asm:426
tm_cles          = $F1C3 = 61891  _TEXT       nabu_vdp.asm:425
tm_cloc          = $F05B = 61531  _TEXT       nabu_vdp.asm:166
tm_cls           = $F2F1 = 62193  _TEXT       nabu_vdp.asm:672
tm_cls0          = $F2FA = 62202  _TEXT       nabu_vdp.asm:675
tm_cold          = $F338 = 62264  _TEXT       nabu_vdp.asm:738
tm_colr          = $F333 = 62259  _TEXT       nabu_vdp.asm:733
tm_cr            = $F13B = 61755  _TEXT       nabu_vdp.asm:333
tm_cshm          = $F14D = 61773  _TEXT       nabu_vdp.asm:350
tm_cupd          = $F1EC = 61932  _TEXT       nabu_vdp.asm:452
tm_curx          = $F336 = 62262  _TEXT       nabu_vdp.asm:736
tm_cury          = $F337 = 62263  _TEXT       nabu_vdp.asm:737
tm_data          = $00A0 =   160  _TEXT       nabu_vdp.asm:30
tm_dint          = $F31F = 62239  _TEXT       nabu_vdp.asm:716
tm_dsc0          = $F21B = 61979  _TEXT       nabu_vdp.asm:483
tm_dsco          = $F208 = 61960  _TEXT       nabu_vdp.asm:476
tm_eint          = $F328 = 62248  _TEXT       nabu_vdp.asm:725
tm_esc           = $F182 = 61826  _TEXT       nabu_vdp.asm:382
tm_esc0          = $F193 = 61843  _TEXT       nabu_vdp.asm:393
tm_esc1          = $F1AD = 61869  _TEXT       nabu_vdp.asm:408
tm_esc2          = $F1B8 = 61880  _TEXT       nabu_vdp.asm:415
tm_escd          = $F18E = 61838  _TEXT       nabu_vdp.asm:390
tm_esci          = $F1A7 = 61863  _TEXT       nabu_vdp.asm:405
tm_escr          = $F18F = 61839  _TEXT       nabu_vdp.asm:391
tm_escs          = $F8EF = 63727  _BSS        nabu_vdp.asm:24
tm_get0          = $F244 = 62020  _TEXT       nabu_vdp.asm:518
tm_getc          = $F22E = 61998  _TEXT       nabu_vdp.asm:504
tm_home          = $F150 = 61776  _TEXT       nabu_vdp.asm:351
tm_inb           = $F334 = 62260  _TEXT       nabu_vdp.asm:734
tm_inf           = $F335 = 62261  _TEXT       nabu_vdp.asm:735
tm_ini0          = $F02E = 61486  _TEXT       nabu_vdp.asm:134
tm_ini1          = $F04E = 61518  _TEXT       nabu_vdp.asm:155
tm_inir          = $EFE0 = 61408  _TEXT       nabu_vdp.asm:79
tm_init          = $F006 = 61446  _TEXT       nabu_vdp.asm:110
tm_inr0          = $EFE1 = 61409  _TEXT       nabu_vdp.asm:80
tm_keyd          = $0090 =   144  _TEXT       nabu_vdp.asm:33
tm_keys          = $0091 =   145  _TEXT       nabu_vdp.asm:34
tm_kirq          = $F24C = 62028  _TEXT       nabu_vdp.asm:527
tm_last          = $F8F0 = 63728  _BSS        nabu_vdp.asm:25
tm_latc          = $00A1 =   161  _TEXT       nabu_vdp.asm:31
tm_lf            = $F12F = 61743  _TEXT       nabu_vdp.asm:324
tm_map           = $F25A = 62042  _TEXT       nabu_vdp.asm:542
tm_map0          = $F25E = 62046  _TEXT       nabu_vdp.asm:546
tm_map2          = $F26A = 62058  _TEXT       nabu_vdp.asm:559
tm_mapt          = $F271 = 62065  _TEXT       nabu_vdp.asm:566
tm_mode          = $F331 = 62257  _TEXT       nabu_vdp.asm:732
tm_oti0          = $EFD8 = 61400  _TEXT       nabu_vdp.asm:66
tm_otir          = $EFD7 = 61399  _TEXT       nabu_vdp.asm:65
tm_outc          = $F8ED = 63725  _BSS        nabu_vdp.asm:22
tm_putc          = $F286 = 62086  _TEXT       nabu_vdp.asm:584
tm_putf          = $F294 = 62100  _TEXT       nabu_vdp.asm:592 (unused)
tm_rea0          = $F0BE = 61630  _TEXT       nabu_vdp.asm:237
tm_rea1          = $F0D3 = 61651  _TEXT       nabu_vdp.asm:250
tm_rea2          = $F0E3 = 61667  _TEXT       nabu_vdp.asm:260
tm_read          = $F0A8 = 61608  _TEXT       nabu_vdp.asm:225
tm_ri            = $F128 = 61736  _TEXT       nabu_vdp.asm:318
tm_sclf          = $F073 = 61555  _TEXT       nabu_vdp.asm:182
tm_scol          = $F1FB = 61947  _TEXT       nabu_vdp.asm:462
tm_scr0          = $F06B = 61547  _TEXT       nabu_vdp.asm:179
tm_scr1          = $F071 = 61553  _TEXT       nabu_vdp.asm:181
tm_scri          = $F061 = 61537  _TEXT       nabu_vdp.asm:174
tm_scro          = $F8EE = 63726  _BSS        nabu_vdp.asm:23
tm_setp          = $F07D = 61565  _TEXT       nabu_vdp.asm:192
tm_sta0          = $EFF4 = 61428  _TEXT       nabu_vdp.asm:97
tm_sta1          = $F0F4 = 61684  _TEXT       nabu_vdp.asm:274
tm_stal          = $F0F1 = 61681  _TEXT       nabu_vdp.asm:272
tm_stat          = $EFE9 = 61417  _TEXT       nabu_vdp.asm:92
tm_up            = $F148 = 61768  _TEXT       nabu_vdp.asm:345
tm_updc          = $F1FF = 61951  _TEXT       nabu_vdp.asm:466
tm_usc0          = $F2DD = 62173  _TEXT       nabu_vdp.asm:651
tm_usco          = $F2CE = 62158  _TEXT       nabu_vdp.asm:644
tm_vcpy          = $F2B6 = 62134  _TEXT       nabu_vdp.asm:630
tm_virq          = $F319 = 62233  _TEXT       nabu_vdp.asm:706
tm_wri0          = $F115 = 61717  _TEXT       nabu_vdp.asm:306
tm_wri1          = $F154 = 61780  _TEXT       nabu_vdp.asm:356
tm_writ          = $F0FA = 61690  _TEXT       nabu_vdp.asm:286
trksec           = $E3CE = 58318  _TEXT       CPM22.asm:1819
trksec1          = $E3DC = 58332  _TEXT       CPM22.asm:1828
trksec2          = $E3EF = 58351  _TEXT       CPM22.asm:1841
trksec3          = $E405 = 58373  _TEXT       CPM22.asm:1857
trksec4          = $E41A = 58394  _TEXT       CPM22.asm:1874
type             = $DD6A = 56682  _TEXT       CPM22.asm:923
type1            = $DD81 = 56705  _TEXT       CPM22.asm:931
type2            = $DD84 = 56708  _TEXT       CPM22.asm:932 (unused)
type3            = $DD94 = 56724  _TEXT       CPM22.asm:941
type4            = $DDAD = 56749  _TEXT       CPM22.asm:954
type5            = $DDB4 = 56756  _TEXT       CPM22.asm:957
unknown          = $DEB2 = 57010  _TEXT       CPM22.asm:1095
unkwn0           = $DF7E = 57214  _TEXT       CPM22.asm:1203
unkwn1           = $DED1 = 57041  _TEXT       CPM22.asm:1110
unkwn2           = $DEDA = 57050  _TEXT       CPM22.asm:1114 (unused)
unkwn3           = $DEEE = 57070  _TEXT       CPM22.asm:1125
unkwn4           = $DF0E = 57102  _TEXT       CPM22.asm:1144
unkwn5           = $DF3D = 57149  _TEXT       CPM22.asm:1165
unkwn6           = $DF4B = 57163  _TEXT       CPM22.asm:1175
unkwn7           = $DF50 = 57168  _TEXT       CPM22.asm:1177
unkwn8           = $DF5C = 57180  _TEXT       CPM22.asm:1185
unkwn9           = $DF78 = 57208  _TEXT       CPM22.asm:1201
update           = $E80C = 59404  _TEXT       CPM22.asm:2707
update1          = $E81B = 59419  _TEXT       CPM22.asm:2715
upper            = $D92F = 55599  _TEXT       CPM22.asm:228
user             = $DE9B = 56987  _TEXT       CPM22.asm:1079
userdma          = $EDBC = 60860  _TEXT       CPM22.asm:3670
userno           = $E34C = 58188  _TEXT       CPM22.asm:1715
usrstack         = $E31A = 58138  _TEXT       CPM22.asm:1709
vdpdev           = $EFCA = 61386  _TEXT       nabu_vdp.asm:51
verify           = $D9FD = 55805  _TEXT       CPM22.asm:373
verify1          = $DA05 = 55813  _TEXT       CPM22.asm:376
wbinit           = $EF5B = 61275  _TEXT       config\config_ndsk_hybrid.asm:63
wboot            = $EE58 = 61016  _TEXT       bios.asm:57
wboot0           = $EE7F = 61055  _TEXT       bios.asm:94
wbootin          = $EE1A = 60954  _TEXT       bios.asm:22
wbootr           = $EE6F = 61039  _TEXT       bios.asm:82
write            = $EF20 = 61216  _TEXT       bios.asm:263
writeran         = $EBA7 = 60327  _TEXT       CPM22.asm:3276
wrtprt           = $EDB8 = 60856  _TEXT       CPM22.asm:3668
wrtprtd          = $E537 = 58679  _TEXT       CPM22.asm:2104
wrtrec           = $D903 = 55555  _TEXT       CPM22.asm:183
wrtseq           = $ECF1 = 60657  _TEXT       CPM22.asm:3513
wtrandom         = $ED52 = 60754  _TEXT       CPM22.asm:3587
wtseq            = $EA09 = 59913  _TEXT       CPM22.asm:3006
wtseq1           = $EA0E = 59918  _TEXT       CPM22.asm:3008
wtseq10          = $EADD = 60125  _TEXT       CPM22.asm:3123
wtseq11          = $EB09 = 60169  _TEXT       CPM22.asm:3147
wtseq12          = $EB0B = 60171  _TEXT       CPM22.asm:3148
wtseq2           = $EA46 = 59974  _TEXT       CPM22.asm:3031
wtseq3           = $EA53 = 59987  _TEXT       CPM22.asm:3037
wtseq4           = $EA6F = 60015  _TEXT       CPM22.asm:3049
wtseq5           = $EA77 = 60023  _TEXT       CPM22.asm:3056
wtseq6           = $EA79 = 60025  _TEXT       CPM22.asm:3057
wtseq7           = $EA97 = 60055  _TEXT       CPM22.asm:3080
wtseq8           = $EAA5 = 60069  _TEXT       CPM22.asm:3087
wtseq9           = $EAC6 = 60102  _TEXT       CPM22.asm:3107
wtseq99          = $EAEA = 60138  _TEXT       CPM22.asm:3134 (unused)
wtspecl          = $EDA6 = 60838  _TEXT       CPM22.asm:3653
xlate            = $EDDB = 60891  _TEXT       CPM22.asm:3696
yesno            = $DD5F = 56671  _TEXT       CPM22.asm:915


total time: 0.0657 sec.
no errors
