              	; --------------------------------------
              	; zasm: assemble "config_ndsk_hybrid.asm"
              	; date: 2023-06-21 23:54:48
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*          I S H K U R   S Y S T E M   C O N F I G
              	;*
              	;*      This file contains points that should be modifed
              	;*      if new devices are to be added to IshkurCP/M. At
              	;*      a mimumum, they need to be included at the bottom
              	;*      of the file, and added to their appropriate dev
              	;*      switch. Some devices may need additional config
              	;*      directly in their source files
              	;*       
              	;*
              	;**************************************************************
              	;
              	;   Set default drive / user
              	;   (uuuudddd) where 'uuuu' is the user number and 'dddd' is the drive number.
              	;
0000:         	default	equ	0
              	
              	;
              	;**************************************************************
              	;*
              	;*                M E M O R Y   C O N F I G
              	;*
              	;*        CP/M memory will start at mem*1024. For example,
              	;*        if memory is configured to be 40, then the image
              	;*        will start at 40kb. The higher memory is configured
              	;*        to, the more memory user programs will have. If memory
              	;*        is configured to be too high, then the core image and
              	;*        BSS space will not fit.
              	;*
              	;**************************************************************
              	;
              	;
              	;   Set memory base here. 
              	;
0036:         	mem	equ	54		; CP/M image starts at mem*1024
              	
              	#target	BIN			; Set up memory segments
D800:         	#code	_TEXT,(mem)*1024
F92D:         	#data	_BSS,_TEXT_end
FF00:         	#data	_JUMP_TABLE,0xFF00
FF00: 00000000	intvec:	defs	16
FF04: 00...   	
FF10: 00000000	dircbuf:defs	128
FF14: 00...   	
              	.area	_TEXT
              	
              	; Include CP/M and BIOS
              	#include "../zcpr1_ccp.asm"
              	;**************************************************************
              	;*
              	;*         Z C P R 1   C O M M A N D   P R O C E S S O R
              	;*
              	;*          Adapted to work with Ishkur by snhirsch
              	;*
              	;**************************************************************
              	
0003:         	iobyte	equ	3		;i/o definition byte.
0004:         	tdrive	equ	4		;current drive name and user number.
0004:         	UDFLAG  equ     4
0005:         	entry	equ	5		;entry point for the cp/m bdos.
0005:         	BDOS    equ     5
005C:         	tfcb	equ	5ch		;default file control block.
005C:         	TFCB    equ     5ch
0080:         	TBUFF   equ     80h
0080:         	tbuff	equ	80h		;i/o buffer and command line storage.
0100:         	tbase	equ	100h		;transiant program storage area.
              	;
              	;   set control character equates.
              	;
0003:         	cntrlc	equ	3		;control-c
0005:         	cntrle	equ	05h		;control-e
0008:         	bs	equ	08h		;backspace
0009:         	tab	equ	09h		;tab
000A:         	lf	equ	0ah		;line feed
000C:         	ff	equ	0ch		;form feed
000D:         	cr	equ	0dh		;carriage return
0010:         	cntrlp	equ	10h		;control-p
0012:         	cntrlr	equ	12h		;control-r
0013:         	cntrls	equ	13h		;control-s
0015:         	cntrlu	equ	15h		;control-u
0018:         	cntrlx	equ	18h		;control-x
001A:         	cntrlz	equ	1ah		;control-z (end-of-file mark)
007F:         	del	equ	7fh		;rubout
              	
              	;================================================================
              	
              	;	.Z80
              	;	TITLE	'NZCPR V 1.6Z OF 01/07/84'
              	;  This is ZCPR Version 1.6 changed to Zilog mnemonics and put in a
              	;form suitable for the Microsoft M80 assembler. Note that the file uses
              	;the PHASE option to create the memory offset. The COM file should be 
              	;created using L80 with the /P:100 switch option. The COM file can be
              	;loaded into the sysgen program using the methods described in the ZCPR
              	;documentation.
              	;		MMA - Murray Arnow
              	;
              	;  CP/M Z80 Command Processor Replacement (CPR) Version 1.6 in
              	; the NZCPR line.
              	;
              	;	CCPZ CREATED AND CUSTOMIZED FOR ARIES-II BY RLC
              	;	ZCPR VERSION 1.0 CREATED FROM CCPZ VERSION 4.0 BY RLC IN
              	;		A COORDINATED EFFORT WITH CCP-GROUP
              	;
              	;	ZCPR is a group effort by CCP-GROUP, whose active membership involved
              	; in this project consists of the following:
              	;		RLC - Richard Conn
              	;		RGF - Ron Fowler
              	;		KBP - Keith Peterson
              	;		FJW - Frank Wancho
              	;	The following individuals also provided a contribution:
              	;		SBB - Steve Bogolub
              	;
              	;  Since RLC has decided that ZCPR V1.0 is the last official version
              	; sanctioned by the CCPZ group, changes beyond that point are being
              	; called by consensus of a group of new changers "NZCPR Vx.x". The
              	; following individuals have put in their code or opinions:
              	;
              	;		SBB - Steve Bogolub
              	;		PST - Paul Traina
              	;		HLB - Howard Booker
              	;		CAF - Chuck Forsberg
              	;		RAF - Bob Fischer
              	;		BB  - Ben Bronson
              	;		PRG - Paul Grupp
              	;		PJH - Paul Homchick
              	;		HEW - Hal Walchli
              	;
              	;   In an attempt to maintain a link to the past, changes between the
              	; current version of NZCPR are provided as both a difference file
              	; between NZCPR's (NZ14-16.DIF) and as a difference between the current
              	; version and the "official" ZCPR V1.0 (NZCPR-16.DIF).  These changes
              	; are made and supported by individuals in contact with each other through
              	; the Hyde Park RCPM in Chicago. Make comments or complaints there, to
              	; SBB or PST or anyone else interested.
              	;
              	;   The most obvious differences between NZCPR and ZCPR are the security
              	; features, controlled by additional conditional assembly flags. Such
              	; features restrict access to ZCPR intrinsic commands, add additional
              	; levels of .COM file searching, and prevent access to higher drives
              	; or user levels, with either internal or external password control of
              	; these features. Less obvious differences involve code optimization to
              	; gain space, and some minor bug fixes in the TYPE command.
              	;
              	;******** Structure Notes ********
              	;
              	;	This CPR is divided into a number of major sections.  The following
              	; is an outline of these sections and the names of the major routines
              	; located therein.
              	;
              	; Section	Function/Routines
              	; -------	-----------------
              	;
              	;   --		Opening Comments, Equates, and Macro Definitions
              	;
              	;    0		JMP Table into CPR
              	;
              	;    1		Buffers
              	;
              	;    2		CPR Starting Modules
              	;			CPR1	CPR	RESTRT	RSTCPR	RCPRNL
              	;			PRNNF	CMDTBL
              	;
              	;    3		Utilities
              	;			CRLF	CONOUT	CONIN	LCOUT	LSTOUT
              	;			READF	READ	BDOSB	PRINTC	PRINT
              	;			GETDRV	DEFDMA	DMASET	RESET	BDOSJP
              	;			LOGIN	OPENF	OPEN	GRBDOS	CLOSE
              	;			SEARF	SEAR1	SEARN	SUBKIL	DELETE
              	;			RESETUSR GETUSR	SETUSR	PAGER	UCASE
              	;			NOECHO
              	;
              	;     4		CPR Utilities
              	;			SETUD	SETU0D	REDBUF	CNVBUF	CMDSER
              	;			BREAK	USRNUM	ERROR	SDELM	ADVAN
              	;			SBLANK	ADDAH	NUMBER	NUMERR	HEXNUM
              	;			DIRPTR	SLOGIN	DLOGIN	COMLOG	SCANER
              	;
              	;     5		CPR-Resident Commands and Functions
              	;     5A		DIR	DIRPR	FILLQ
              	;     5B		ERA
              	;     5C		LIST
              	;     5D		TYPE
              	;     5E		SAVE
              	;     5F		REN
              	;     5G		USER
              	;     5H		DFU
              	;     5I		JUMP
              	;     5J		GO
              	;     5K		COM	CALLPROG	ERRLOG	ERRJMP
              	;     5L		GET	MEMLOAD	PRNLE
              	;     5M		PASS	NORM
              	;
              	;
0000:         	FALSE	EQU	0
00FF:         	TRUE	EQU	0FFh
              	;
              	;  CUSTOMIZATION EQUATES
              	;
              	;  The following equates may be used to customize this CPR for the user's
              	;    system and integration technique.  The following constants are provided:
              	;
              	;    REL - TRUE if integration is to be done via MOVCPM
              	;        - FALSE if integration is to be done via DDT and SYSGEN
              	;
              	;    SECURE -  TRUE to conditionally disable potentially-harmful
              	;	       commands (GO, ERA, SAVE, REN, DFU, GET, JUMP). Under
              	;	       SECURE, if WHEEL contains RESTRCT, do not accept those
              	;	       commands, and search for COM files under current user
              	;	       then user "DEFUSR" only. If WHEEL does not contain
              	;	       RESTRCT (presumably from passworded change), allow
              	;	       all commands, and search current user, then last user
              	;	       set by DFU (originally "RESUSR"), then user "DEFUSR"
              	;	       for COM files, giving access with password to an
              	;	       additional level of COM files.
              	;
              	;	       (Note: WHEEL must point to a safe place in memory that
              	;		won't be overlayed)
              	;
              	;	If you have chosen a SECURE system,  all resident commands may be
              	; activated by entering:  PASS <password> <cr>  Where <password> is a sequence
              	; of characters placed at PASSID (if INPASS is true, otherwise, see
              	; documentation in PST's PASS.ASM).  If the password is incorrect. the system
              	; will come back with PASS? as if it was looking for a COM file.
              	;	NORM is the reverse of PASS, it will disable the WHEEL mode.
              	;
              	;    INPASS -  If in the SECURE mode, you wish to use a program similar
              	;	       to PST's PASS.ASM, set this false, otherwise, ZCPR will
              	;	       handle the PASSword coding with a built in command.
              	;
              	;    DRUSER -  Set this EQU false if you wish to disable RAF's neat hack
              	;	       that allows you the type B: 7 to move to drive B: user area
              	;	       seven.  This also removes the USER command.  Basically, set
              	;	       this equate false if you want to use USERPW or some other pgm.
              	;
              	;    RAS    -  Remote-Access System; setting this equate to TRUE disables
              	;	       certain CPR commands that are considered harmful in a Remote-
              	;	       Access environment; use under Remote-Access Systems (RBBS) for
              	;	       security purposes.  Note: SECURE is the direct enemy of RAS,
              	;	       DON'T define both equates or you will be VERY sorry.
              	;	       The advantage SECURE has over RAS is that by saying a magic
              	;	       word, all of the normal commands pop into existance.
              	;
              	;    MAXDRIV - Maximum legal drive number stored in this location.
              	;	       (0 means only A:, etc.)  0000H disables this feature.
              	;	       The value MAXDR is stuffed into MAXDRIV at cold boot,
              	;	       and presumably will be changed later by a passworded
              	;	       program if desired.
              	;
              	;	       (This code is in addition to BIOS checks. It's needed here
              	;	       because X: can hang if X: is off line in some BIOS
              	;	       implementations. Personally, I think CAF and others should fix
              	;	       their BIOS instead. Mine works right...SBB).
              	;
              	;    USRMAX -  Maximum legal user # + 1 stored in this location. 0000H
              	;	       disables this feature, and uses the value of MAXUSR+1 instead.
              	;
              	;    BASE - Base Address of user's CP/M system (normally 0 for DR version)
              	;           This equate allows easy modification by non-standard CP/M (eg,H89)
              	;
              	;    CPRLOC - Base Page Address of CPR; this value can be obtained by running
              	;	      the BDOSLOC program on your system, or by setting the
              	;	      MSIZE and BIOSEX equates to the system memory size in
              	;	      K-bytes and the "extra" memory required by your BIOS
              	;	      in K-bytes. BIOSEX is zero if your BIOS is normal size,
              	;	      and can be negative if your BIOS is in PROM or in
              	;	      non-contiguous memory.
              	;
              	;    EPRMPT - Set TRUE to be prompted "OK?" after seeing what files will
              	;	      be erased. No, this is NOT for individual file prompting,
              	;	      it is just to confirm deletion of all selected files at once.
              	;
              	;  Various individuals keep trying to yank out the TYPE, LIST, and DIR
              	; commands, either to use the space for other options or just because
              	; they prefer replacement COM files. To these individuals, I (SBB) say
              	; keep your paws off these commands. For compatibility with the stock
              	; CCP, intrinsic DIR and TYPE commands are required. And many users in
              	; MY neighborhood find it more convenient to use the intrinsic LIST
              	; command than to have a LIST/PRINT program on every disk. If you want
              	; to call a transient program by an intrinsic, then CHANGE THE INTRINSIC
              	; NAME IN THE TABLE. Even setting the name to blanks is fine to get
              	; rid of it. The point is, don't remove features others may want, just
              	; because you disagree, then throw it back in our laps. For those who
              	; simply MUST be rid of these commands, the following symbols control
              	; generation of the code in a CLEAN ACCEPTABLE fashion that allows
              	; others to have these features:
              	;
              	;    CPRTYP -	Set to TRUE to generate code for intrinsic TYPE command.
              	;
              	;    WSTYPE -	Set to TRUE to generate an extra three lines of code
              	;		to correctly interpret the WordStar (tm) internal
              	;		end of line hyphen for display, which is the ASCII
              	;		NEWLINE code (1FH) and normally non-printing or
              	;		troublemaking -- thanks to PJH for this one. CPRTYP
              	;		must be TRUE, or this symbol will be ignored.
              	;
              	;    CPRLST -	Set to TRUE to generate code for intrinsic LIST command.
              	;		Since almost all of the LIST code is common to the
              	;		TYPE code, CPRTYP must be set TRUE as well, or this
              	;		symbol will be ignored.
              	;
              	;    CPRDIR -	Set to TRUE to generate code for intrinsic DIR command.
              	;		Note that unlike the various directory programs, a
              	;		restricted DIR command here allows displaying the names
              	;		of SYS file ONLY, so many RCPM operators WANT this code.
              	;
              	;  Remember, you only get a total of 2048 (0800H) bytes of space for
              	; ALL of the generated code, or many other areas of your system
              	; generation will be affected. For example, to be fully SECURE, you
              	; would set SECURE to TRUE, and define MAXDRIV and USRMAX, and maybe
              	; use the internal password by setting INPASS to TRUE (external is
              	; MUCH recommended for easier modification). Those options absolutely
              	; generate too much code unless either CPRTYP or CPRDIR or both are
              	; set FALSE. A system with SECURE set to FALSE is right on the edge,
              	; and requires a give and take on options to fit, i.e. you can have
              	; MAXDRIV and USRMAX with DIR and TYPE if you leave out LIST and
              	; querying on ERASE, and so on.
              	;
              	;***************************************************************************
              	;** Be careful when playing with different combinations of these equates. **
              	;** You might not have enough memory to some combinations.  Check this    **
              	;** if you have problems, if they still persist, gripe to me (PST).       **
              	;***************************************************************************
              	;
              	;REL	EQU	TRUE		;SET TO TRUE FOR MOVCPM INTEGRATION
              	;
              	;BASE	EQU	0		;BASE OF CP/M SYSTEM (SET FOR STANDARD CP/M)
              	;
              	;; 	IF	REL
              	;; CPRLOC	EQU	0		;MOVCPM IMAGE
              	;; 	ELSE
              	;; ;
              	;; ; If REL is FALSE, the value of CPRLOC may be set in one
              	;; ; of two ways.  The first way is to set MSIZE and BIOSEX
              	;; ; as described above using the following three lines:
              	;; ;
              	;; ;MSIZE	EQU	56		;SIZE OF MEM IN K-BYTES
              	;; ;BIOSEX	EQU	2		;EXTRA # K-BYTES IN BIOS
              	;; ;CPRLOC	EQU	3400H+(MSIZE-20-BIOSEX)*1024	;CPR ORIGIN
              	;; ;
              	;; ; The second way is to obtain the origin of your current
              	;; ; CPR using BDSLOC or its equivalent, then merely set CPRLOC
              	;; ; to that value as in the following line:
              	;; ;
              	;; CPRLOC	EQU	0C400H		;FILL IN WITH BDOSLOC SUPPLIED VALUE
              	;; ;
              	;; ; Note that you should only use one method or the other.
              	;; ; Do NOT define CPRLOC twice!
              	;; ;
              	;; ; The following gives the required offset to load the CPR into the
              	;; ; CP/M SYSGEN Image through DDT (the Roffset command); Note that this
              	;; ; value conforms with the standard value presented in the CP/M reference
              	;; ; manuals, but it may not necessarily conform with the location of the
              	;; ; CCP in YOUR CP/M system; several systems (Morrow Designs, P&T, Heath
              	;; ; Org-0 to name a few) have the CCP located at a non-standard address in
              	;; ; the SYSGEN Image
              	;; ;
              	;; CPRR	EQU	0E00H-CPRLOC	;DDT LOAD OFFSET FOR APPLE SOFTCARD 56K
              	;; ;CPRR	EQU	0980H-CPRLOC	;DDT LOAD OFFSET
              	;; ;CPRR	EQU	1600H-CPRLOC	;DDT LOAD OFFSET FOR COMPUPRO DISK-1
              	;; ;CPRR	EQU	1100H-CPRLOC	;DDT LOAD OFFSET FOR MORROW DESIGNS
              	;; 	ENDIF
              	;
0000:         	RAS	EQU	FALSE		;SET TO TRUE IF CPR IS FOR A REMOTE-ACCESS
              					; SYSTEM AND YOU DON'T WANT TO RUN SECURE
              					; (FOO...)
              	;
0000:         	USRMAX	EQU	0000H		;LOCATION OF BYTE IN MEMORY CONTAINING
              					; NUMBER OF HIGHEST ALLOWABLE USER CODE + 1
              					; THIS VALUE IS SET BY CPR ON COLD BOOT,
              					; AND PRESUMABLY CONTROLLED AFTER THAT
              					; BY A PASSWORD PROGRAM. IF USRMAX=0, THEN
              					; MAXUSR BELOW IS USED FOR CHECKING ONLY.
              					; 03FH IS RECOMMENDED IF USED  ***
000F:         	MAXUSR	EQU	15		;MAX ALLOWED USER NUMBER, THIS + 1 IS STUFFED
              					; INTO USRMAX ON COLD BOOT, OR USED DIRECTLY
              					; IF USRMAX=0
              	;
0000:         	MAXDRIV	EQU	0000H		;LOCATION THAT HAS MAX LEGAL DRIVE #
              					;SET IT TO ZERO TO DISABLE THIS CHECK
              					;03DH IS RECOMMENDED IF USED ***
0001:         	MAXDR	EQU	1		;MAX DRIVE # TO SET INTO MAXDRIV ON COLD BOOT
              	;
0000:         	SECURE	EQU	FALSE		;SET TRUE FOR SECURE ENVIRONMENT...
              	;
0000:         	DEFUSR	EQU	0		;DEFAULT USER FOR UNRESTRICTED COM FILES
              	;
              		IF	SECURE
              	WHEEL	EQU	3EH		;SET TO "RESTRCT" FOR LIMITED ACCESS
              	RESTRCT EQU	0		;WHEN (WHEEL)==RESTRCT, LIMIT COMMANDS
              	RESUSR	EQU	15		;CHECK HERE FOR RESTRICTED ACCESS COM FILES
              					; (LIKE PIP) UNTIL CHANGED BY DFU OR WARM BOOT
              		ENDIF			;SECURE
              	;
0000:         	INPASS	EQU	FALSE		;SET TRUE IF RUNNING SECURE AND NOT PASS.COM
              	;
00FF:         	DRUSER	EQU	TRUE		;TRUE TO ALLOW USER COMMAND AND DRIVE/USER HACK
              	;
0000:         	EPRMPT	EQU	FALSE		;TRUE TO PROMPT BEFORE ERASING ALL FILES
              	;
00FF:         	CPRTYP	EQU	TRUE		;TRUE TO GENERATE TYPE CODE
00FF:         	WSTYPE	EQU	TRUE		;TRUE TO GENERATE WORDSTAR HYPHEN CHECK (CPRTYP
              					; MUST BE TRUE TOO)
00FF:         	CPRLST	EQU	TRUE		;TRUE TO GENERATE LIST CODE (CPRTYP MUST BETRUE TOO)
00FF:         	CPRDIR	EQU	TRUE		;TRUE TO GENERATE DIR CODE
              	;
              	;  ***  Note to Apple Softcard Users  ***
              	;
              	;  In their infinite (?) wisdom (???), Microsoft decided that the way to
              	; get a two-column directory display instead of four-column (narrow 40-col
              	; screen, remember) was to have their BIOS poke CCP every time it was
              	; loaded, if there was no terminal interface card in I/O slot 3.
              	; Naturally, that will turn into a random poke on any non-standard
              	; CCP, like this one.  The best way to get this CPR up on the Apple is to
              	; load it into CPM56.COM, at location 0E00H in the image.  The BIOS code
              	; that pokes the CPR can also be modified at that time.  The poke is done
              	; by "STA 0C8B2H", found at 24FEH in the CPM56 image.  To keep this
              	; feature, change the 0C8B2H address in that instruction by hand to
              	; the value generated for the symbol TWOPOK in the DIR routine.  If
              	; you have assembled out the DIR code by setting CPRDIR to FALSE, then
              	; disable this feature by changing the "STA" to "LDA", i.e. set the
              	; contents of location 24FEH from 32H to 3AH. If you wish to force
              	; a two-column display in all cases, set the TWOCOL switch below to a
              	; value of TRUE, and disable the poke.
              	;
0000:         	TWOCOL	EQU	FALSE		;TRUE IF TWO COL DIR INSTEAD OF FOUR
              	;
              	; The following is presented as an option, but is not generally user-customiz-
              	; able.  A basic design choice had to be made in the design of ZCPR concerning
              	; the execution of SUBMIT files.  The original CCP had a problem in this sense
              	; in that it ALWAYS looked for the SUBMIT file from drive A: and the SUBMIT
              	; program itself (SUBMIT.COM) would place the $$$.SUB file on the currently
              	; logged-in drive, so when the user was logged into B: and he issued a SUBMIT
              	; command, the $$$.SUB was placed on B: and did not execute because the CCP
              	; looked for it on A: and never found it.
              	;
              	;	After much debate it was decided to have ZCPR perform the same type of
              	; function as CCP (look for the $$$.SUB file on A:), but the problem with
              	; SUBMIT.COM still exists.  Hence, RGF designed SuperSUB and RLC took his
              	; SuperSUB and designed SUB from it; both programs are set up to allow the
              	; selection at assembly time of creating the $$$.SUB on the logged-in drive
              	; or on drive A:.
              	;
              	;	A final definition of the Indirect Command File ($$$.SUB or SUBMIT
              	; File) is presented as follows:
              	;
              	;		"An Indirect Command File is one which contains
              	;		 a series of commands exactly as they would be
              	;		 entered from a CP/M Console.  The SUBMIT Command
              	;		 (or SUB Command) reads this files and transforms
              	;		 it for processing by the ZCPR (the $$$.SUB File).
              	;		 ZCPR will then execute the commands indicated
              	;		 EXACTLY as if they were typed at the Console."
              	;
              	;	Hence, to permit this to happen, the $$$.SUB file must always
              	; be present on a specific drive, and A: is the choice for said drive.
              	; With this facility engaged as such, Indirect Command Files like:
              	;
              	;		DIR
              	;		A:
              	;		DIR
              	;
              	; can be executed, even though the currently logged-in drive is changed
              	; during execution.  If the $$$.SUB file was present on the currently
              	; logged-in drive, the above series of commands would not work since the
              	; ZCPR would be looking for $$$.SUB on the logged-in drive, and switching
              	; logged-in drives without moving the $$$.SUB file as well would cause
              	; processing to abort.
              	;
00FF:         	SUBA	EQU	TRUE 		;Set to TRUE to have $$$.SUB always on A:
              					;Set to FALSE to have $$$.SUB on the
              					; logged-in drive
              	;
              	;   The following flag enables extended processing for user-program supplied
              	; command lines.  This is for Command Level 3 of ZCPR.  Under the current
              	; ZCPR philosophy, three command levels exist:
              	;
              	;	(1) that command issued by the user from his console at the '>' prompt
              	;	(2) that command issued by a $$$.SUB file at the '$' prompt
              	;	(3) that command issued by a user program by placing the command into
              	;	    CIBUFF and setting the character count in CBUFF
              	;
              	;   Setting CLEVEL3 to TRUE enables extended processing of the third level of
              	; ZCPR command.  All the user program need do is to store the command line and
              	; set the character count; ZCPR will initialize the pointers properly, store
              	; the ending zero properly, and capitalize the command line for processing.
              	; Once the command line is properly stored, the user executes the command line
              	; by reentering the ZCPR through CPRLOC [NOTE:  The C register MUST contain
              	; a valid User/Disk Flag (see location 4) at this time.]
              	;
00FF:         	CLEVEL3	EQU	TRUE		;ENABLE COMMAND LEVEL 3 PROCESSING
              	;
              	;
              	;*** TERMINAL AND 'TYPE' CUSTOMIZATION EQUATES
              	;
0018:         	NLINES	EQU	24		;NUMBER OF LINES ON CRT SCREEN
00FF:         	WIDE	EQU	TRUE		;TRUE IF WIDE DIR DISPLAY
007C:         	FENCE	EQU	'|'		;SEP CHAR BETWEEN DIR FILES
              	;
0000:         	PGDFLT	EQU	FALSE 		;SET TO FALSE TO DISABLE PAGING BY DEFAULT
0050:         	PGDFLG	EQU	'P'		;FOR TYPE COMMAND: PAGE OR NOT (DEP ON PGDFLT)
              					;  THIS FLAG REVERSES THE DEFAULT EFFECT
              	;
0041:         	SYSFLG	EQU	'A' 		;FOR DIR COMMAND: LIST $SYS AND $DIR
              	;
0053:         	SOFLG	EQU	'S'		;FOR DIR COMMAND: LIST $SYS FILES ONLY
              	;
0000:         	SUPRES	EQU	FALSE		;SUPRESSES USER # REPORT FOR USER 0
              	;
0024:         	SPRMPT	EQU	'$'		;CPR PROMPT INDICATING SUBMIT COMMAND
003E:         	CPRMPT	EQU	'>'		;CPR PROMPT INDICATING USER COMMAND
              	;
0048:         	NUMBASE	EQU	'H'		;CHARACTER USED TO SWITCH FROM DEFAULT
              					; NUMBER BASE
              	;
0053:         	SECTFLG	EQU	'S'		;OPTION CHAR FOR SAVE COMMAND TO SAVE SECTORS
              	;
              	; END OF CUSTOMIZATION SECTION
              	;
000D:         	CR	EQU	0DH
000A:         	LF	EQU	0AH
0009:         	TAB	EQU	09H
000C:         	FFEED	EQU	0CH
0007:         	BEL	EQU	07H
              	;
              	;; WBOOT	EQU	BASE+0000H		;CP/M WARM BOOT ADDRESS
              	;; UDFLAG	EQU	BASE+0004H		;USER NUM IN HIGH NYBBLE, DISK IN LOW
              	;; BDOS	EQU	BASE+0005H		;BDOS FUNCTION CALL ENTRY PT
              	;; TFCB	EQU	BASE+005CH		;DEFAULT FCB BUFFER
              	;; TBUFF	EQU	BASE+0080H		;DEFAULT DISK I/O BUFFER
              	;; TPA	EQU	BASE+0100H		;BASE OF TPA
              	
0100:         	TPA    EQU     100H
              	
              	;
              	;**** Section 0 ****
              	;
              	;	ORG	0100H
              	;	.PHASE	CPRLOC
              	;
              	;  ENTRY POINTS INTO ZCPR
              	;
              	;    If the ZCPR is entered at location CPRLOC (at the JMP to CPR), then
              	; the default command in CIBUFF will be processed.  If the ZCPR is entered
              	; at location CPRLOC+3 (at the JMP to CPR1), then the default command in
              	; CIBUFF will NOT be processed.
              	;
              	;    NOTE:  Entry into ZCPR in this way is permitted under this version,
              	; but in order for this to work, CIBUFF and CBUFF MUST be initialized properly
              	; AND the C register MUST contain a valid User/Disk Flag (see Location 4: the
              	; most significant nybble contains the User Number and the least significant
              	; nybble contains the Disk Number).
              	;
              	;    Some user programs (such as SYNONYM3) attempt to use the default
              	; command facility.  Under the original CCP, it was necessary to initialize
              	; the pointer after the reserved space for the command buffer to point to
              	; the first byte of the command buffer.  Under current versions, this is
              	; no longer the case.  The CIBPTR (Command Input Buffer PoinTeR) is located
              	; to be compatible with such programs (provided they determine the buffer
              	; length from the byte at MBUFF [CPRLOC + 6]), but under ZCPR this is
              	; no longer necessary, since this buffer pointer is automatically
              	; initialized in all cases.
              	;
D800:         	cbase:  
D800:         	ENTRY:
D800: C3C3D8  		JP	CPR		; Process potential default command, and set
              					; USRMAX to MAXUSR default
D803: C3BFD8  		JP	CPR1		; Do NOT process potential default command
              	;	
              	;**** Section 1 ****
              	; BUFFERS ET AL
              	;
              	; INPUT COMMAND LINE AND DEFAULT COMMAND
              	;
              	;   The command line to be executed is stored here.  This command line
              	; is generated in one of three ways:
              	;
              	;	(1) by the user entering it through the BDOS READLN function at
              	;	    the du> prompt [user input from keyboard]
              	;	(2) by the SUBMIT File Facility placing it there from a $$$.SUB
              	;	    file
              	;	(3) by an external program or user placing the required command
              	;	    into this buffer
              	;
              	;   In all cases, the command line is placed into the buffer starting at
              	; CIBUFF.  This command line is terminated by the last character (NOT Carriage
              	; Return), and a character count of all characters in the command line
              	; up to and including the last character is placed into location CBUFF
              	; (immediately before the command line at CIBUFF).  The placed command line
              	; is then parsed, interpreted, and the indicated command is executed.
              	; If CLEVEL3 is permitted, a terminating zero is placed after the command
              	; (otherwise the user program has to place this zero) and the CIBPTR is
              	; properly initialized (otherwise the user program has to init this ptr).
              	; If the command is placed by a user program, entering at CPRLOC is enough
              	; to have the command processed.  Again, under the current ZCPR, it is not
              	; necessary to store the pointer to CIBUFF in CIBPTR; ZCPR will do this for
              	; the calling program if CLEVEL3 is made TRUE.
              	;
              	;   WARNING:  The command line must NOT exceed BUFLEN characters in length.
              	; For user programs which load this command, the value of BUFLEN can be
              	; obtained by examining the byte at MBUFF (CPRLOC + 6).
              	;
D806:         	inbuff: 
0050:         	BUFLEN	EQU	80		;MAXIMUM BUFFER LENGTH
D806:         	MBUFF:
D806: 50      		DEFB	BUFLEN		;MAXIMUM BUFFER LENGTH
D807:         	CBUFF:
D807: 00      		DEFB	0		;NUMBER OF VALID CHARS IN COMMAND LINE
              	
D808:         	CIBUFF:
D808: 494E4954	 	DEFM	'INIT '
D80C: 20      	
D80D: FF      	        DEFB    255
D80E: 20202020	        DEFM    '        ';DEFAULT (COLD BOOT) COMMAND
D812: 20202020	
              	;
              	;  The copyright notice from Digital Research is genned into the
              	; stock CCP at this location. It should be maintained in ZCPR,
              	; since Digital Research grants permission for ZCPR to exist.
              	;
D816: 2020434F		DEFM	'  COPYRIGHT (C) 1979, DIGITAL RESEARCH  '
D81A: 50595249	
D81E: 47485420	
D822: 28432920	
D826: 31393739	
D82A: 2C204449	
D82E: 47495441	
D832: 4C205245	
D836: 53454152	
D83A: 43482020	
D83E:         	CIBUF:
D83E: 00      		DEFB	0		;COMMAND STRING TERMINATOR
D83F: 4E5A4350		DEFM	'NZCPR V 1.6 of'
D843: 52205620	
D847: 312E3620	
D84B: 6F66    	
D84D: 2030382F		DEFM	' 08/03/82 '	;ZCPR ID FOR DISK DUMP
D851: 30332F38	
D855: 3220    	
D857: 0000    	 	DEFS	BUFLEN-($-CIBUFF)+1	;TOTAL IS 'BUFLEN' BYTES
              	;
D859:         	CIBPTR:
D859: 08D8    		DEFW	CIBUFF		;POINTER TO COMMAND INPUT BUFFER
D85B:         	CIPTR:
D85B: 3ED8    		DEFW	CIBUF		;POINTER TO CURR COMMAND FOR
              					; ERROR REPORTING
              	;
D85D: 00000000		DEFS	26		;STACK AREA
D861: 00...   	
D877:         	STACK	EQU	$		;TOP OF STACK
              	;
              	; FILE TYPE FOR COMMAND
              	;
D877:         	COMMSG:
D877: 434F4D  		DEFM	'COM'
              	;
              	; SUBMIT FILE CONTROL BLOCK
              	;
D87A:         	SUBFCB:
              		IF	SUBA		;IF $$$.SUB ON A:
D87A: 01      		DEFB	1		;DISK NAME SET TO DEFAULT TO DRIVE A:
              	;	ENDIF
              	;
              	;	IF	NOT SUBA	;IF $$$.SUB ON CURRENT DRIVE
              	        ELSE
              		DEFB	0		;DISK NAME SET TO DEFAULT TO CURRENT DRIVE
              		ENDIF
              	;
D87B: 242424  		DEFM	'$$$'		;FILE NAME
D87E: 20202020		DEFM	'     '
D882: 20      	
D883: 535542  		DEFM	'SUB'		;FILE TYPE
D886: 00      		DEFB	0		;EXTENT NUMBER
D887: 00      		DEFB	0		;S1
D888:         	SUBFS2:
D888: 00      		DEFS	1		;S2
D889:         	SUBFRC:
D889: 00      		DEFS	1		;RECORD COUNT
D88A: 00000000		DEFS	16		;DISK GROUP MAP
D88E: 00...   	
D89A:         	SUBFCR:
D89A: 00      		DEFS	1		;CURRENT RECORD NUMBER
              	; COMMAND FILE CONTROL BLOCK
              	;
D89B:         	FCBDN:
D89B: 00      		DEFS	1		;DISK NAME
D89C:         	FCBFN:
D89C: 00000000		DEFS	8		;FILE NAME
D8A0: 00000000	
D8A4:         	FCBFT:
D8A4: 000000  		DEFS	3		;FILE TYPE
D8A7: 00      		DEFS	1		;EXTENT NUMBER
D8A8: 0000    		DEFS	2		;S1 AND S2
D8AA: 00      		DEFS	1		;RECORD COUNT
D8AB:         	FCBDM:
D8AB: 00000000		DEFS	16		;DISK GROUP MAP
D8AF: 00...   	
D8BB:         	FCBCR:
D8BB: 00      		DEFS	1		;CURRENT RECORD NUMBER
              	;
              	; OTHER BUFFERS
              	;
D8BC:         	PAGCNT:
D8BC: 16      		DEFB	NLINES-2	;LINES LEFT ON PAGE
D8BD:         	CHRCNT:
D8BD: 00      		DEFB	0		;CHAR COUNT FOR TYPE
D8BE:         	QMCNT:
D8BE: 00      		DEFB	0		;QUESTION MARK COUNT FOR FCB TOKEN SCANNER
              	;
              	;
              	;**** Section 2 ****
              	; CPR STARTING POINTS.  NOTE THAT SOME CP/M IMPLEMENTATIONS
              	; REQUIRE THE COLD START ADDRESS TO BE IN THE STARTING PAGE
              	; OF THE CPR, FOR DYNAMIC CCP LOADING.  CMDTBL WAS MOVED FOR
              	; THIS REASON.
              	;
              	; SET USRMAX AND/OR MAXDRIV TO DEFAULT VALUES ON COLD BOOT
              	; IF REQUIRED. NOTE THAT SOME BIOS IMPLEMENTATIONS WILL END
              	; UP HERE INSTEAD OF AT THE WARM BOOT, DEFEATING PASSWORDING
              	; OF THESE OPTIONS. RECOMMEND SUCH A BIOS BE FIXED.
              	;
              		IF	USRMAX OR MAXDRIV
              	CPR:
              		IF	USRMAX
              		LD	A,MAXUSR+1	;SET USRMAX ON COLD BOOT
              		LD	(USRMAX),A
              		ENDIF			;USRMAX
              	;
              		IF	MAXDRIV
              		LD	A,MAXDR		;SET MAXDRIV ON COLD BOOT
              		LD	(MAXDRIV),A
              		ENDIF			;MAXDRIV
              	;
              		JR	CPR2		; THEN PROCEED
              		ENDIF			;USRMAX OR MAXDRIV
              	;
              	; START CPR AND DON'T PROCESS DEFAULT COMMAND STORED
              	;
D8BF:         	CPR1:
D8BF: AF      		XOR	A		;SET NO DEFAULT COMMAND
D8C0: 3207D8  		LD	(CBUFF),A
              	;
              	; START CPR AND POSSIBLY PROCESS DEFAULT COMMAND
              	;
              	; NOTE ON MODIFICATION BY RGF: BDOS RETURNS 0FFH IN
              	; ACCUMULATOR WHENEVER IT LOGS IN A DIRECTORY, IF ANY
              	; FILE NAME CONTAINS A '$' IN IT.  THIS IS NOW USED AS
              	; A CLUE TO DETERMINE WHETHER OR NOT TO DO A SEARCH
              	; FOR SUBMIT FILE, IN ORDER TO ELIMINATE WASTEFUL SEARCHES.
              	;
              		IF	USRMAX OR MAXDRIV
              	CPR2:
              		ELSE
D8C3:         	CPR:
              		ENDIF			;USRMAX OR MAXDRIV
              	;
D8C3: 3177D8  		LD	SP,STACK	;RESET STACK
D8C6: C5      		PUSH	BC
D8C7: 79      		LD	A,C		;C=USER/DISK NUMBER (SEE LOC 4)
D8C8: 1F      		RRA			;EXTRACT USER NUMBER
D8C9: 1F      		RRA
D8CA: 1F      		RRA
D8CB: 1F      		RRA
D8CC: E60F    		AND	0FH
D8CE: 5F      		LD	E,A		;SET USER NUMBER
D8CF: CD70DA  		CALL	SETUSR
D8D2: CD33DA  		CALL	RESET		;RESET DISK SYSTEM
D8D5: 32E8D8  		LD	(RNGSUB),A	;SAVE SUBMIT CLUE FROM DRIVE A:
D8D8: C1      		POP	BC
D8D9: 79      		LD	A,C		;C=USER/DISK NUMBER (SEE LOC 4)
D8DA: E60F    		AND	0FH		;EXTRACT DEFAULT DISK DRIVE
D8DC: 3284DA  		LD	(TDRIVE),A	;SET IT
D8DF: 2803    		JR	Z,NOLOG		;SKIP IF 0...ALREADY LOGGED
D8E1: CD38DA  		CALL	LOGIN		;LOG IN DEFAULT DISK
              	;
              		IF	SUBA	;IF $$$.SUB IS ON CURRENT DRIVE
              	        ELSE
              		LD	(RNGSUB),A	;BDOS '$' CLUE
              		ENDIF
              	;
D8E4:         	NOLOG:
D8E4: 117AD8  		LD	DE,SUBFCB	;CHECK FOR $$$.SUB ON CURRENT DISK
D8E8:         	batch   equ     $+1
D8E8:         	RNGSUB	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D8E7: 3E00    	        LD	A,0	        ;2ND BYTE (IMMEDIATE ARG) IS THE RNGSUB FLAG
D8E9: B7      		OR	A		;SET FLAGS ON CLUE
D8EA: 2F      		CPL			;PREPARE FOR COMING 'CPL'
D8EB: C452DA  		CALL	NZ,SEAR1
D8EE: 2F      		CPL			;0FFH IS RETURNED IF NO $$$.SUB, SO COMPLEMENT
D8EF: 32E8D8  		LD	(RNGSUB),A	;SET FLAG (0=NO $$$.SUB)
D8F2: 3A07D8  		LD	A,(CBUFF)	;EXECUTE DEFAULT COMMAND?
D8F5: B7      		OR	A		;0=NO
D8F6: 2026    		JR	NZ,RS1
              	;
              	; PROMPT USER AND INPUT COMMAND LINE FROM HIM
              	;
D8F8:         	RESTRT:
D8F8: 3177D8  		LD	SP,STACK	;RESET STACK
              	;
              	; PRINT PROMPT (DU>)
              	;
D8FB: CDA7D9  		CALL	CRLF		;PRINT PROMPT
D8FE: CD28DA  		CALL	GETDRV		;CURRENT DRIVE IS PART OF PROMPT
D901: C641    		ADD	A,'A'		;CONVERT TO ASCII A-P
D903: CDAED9  		CALL	CONOUT
D906: CD6EDA  		CALL	GETUSR		;GET USER NUMBER
              	;
              		IF	SUPRES		;IF SUPPRESSING USR # REPORT FOR USR 0
              		OR	A
              		JR	Z,RS000
              		ENDIF
              	;
D909: FE0A    		CP	10		;USER < 10?
D90B: 3809    		JR	C,RS00
D90D: D60A    		SUB	10		;SUBTRACT 10 FROM IT
D90F: F5      		PUSH	AF		;SAVE IT
D910: 3E31    		LD	A,'1'		;OUTPUT 10'S DIGIT
D912: CDAED9  		CALL	CONOUT
D915: F1      		POP	AF
D916:         	RS00:
D916: C630    		ADD	A,'0'		;OUTPUT 1'S DIGIT (CONVERT TO ASCII)
D918: CDAED9  		CALL	CONOUT
              	;
              	; READ INPUT LINE FROM USER OR $$$.SUB
              	;
D91B:         	RS000:
D91B: CD89DA  		CALL	REDBUF		;INPUT COMMAND LINE FROM USER (OR $$$.SUB)
              	;
              	; PROCESS INPUT LINE
              	;
D91E:         	RS1:
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
D91E: CDEADA  		CALL	CNVBUF		;CAPITALIZE COMMAND LINE, PLACE ENDING 0,
              					; AND SET CIBPTR VALUE
              		ENDIF
              	;
D921: CD2CDA  		CALL	DEFDMA		;SET TBUFF TO DMA ADDRESS
D924: CD28DA  		CALL	GETDRV		;GET DEFAULT DRIVE NUMBER
D927: 3284DA  		LD	(TDRIVE),A	;SET IT
D92A: CD02DC  		CALL	SCANER		;PARSE COMMAND NAME FROM COMMAND LINE
D92D: C411DB  		CALL	NZ,ERROR	;ERROR IF COMMAND NAME CONTAINS A '?'
D930: 1146D9  		LD	DE,RSTCPR	;PUT RETURN ADDRESS OF COMMAND
D933: D5      		PUSH	DE		;ON THE STACK
D934: 3AF9DB  		LD	A,(TEMPDR)	;IS COMMAND OF FORM 'D:COMMAND'?
D937: B7      		OR	A		;NZ=YES
D938: C2F1DE  		JP	NZ,COM		; IMMEDIATELY
D93B: CD81DC  		CALL	CMDSER		;SCAN FOR CPR-RESIDENT COMMAND
D93E: C2F1DE  		JP	NZ,COM		;NOT CPR-RESIDENT
D941: 7E      		LD	A,(HL)		;FOUND IT:  GET LOW-ORDER PART
D942: 23      		INC	HL		;GET HIGH-ORDER PART
D943: 66      		LD	H,(HL)		;STORE HIGH
D944: 6F      		LD	L,A		;STORE LOW
D945: E9      		JP	(HL)		;EXECUTE CPR ROUTINE
              	;
              	; ENTRY POINT FOR RESTARTING CPR AND LOGGING IN DEFAULT DRIVE
              	;
D946:         	RSTCPR:
D946: CDEEDB  		CALL	DLOGIN		;LOG IN DEFAULT DRIVE
              	;
              	; ENTRY POINT FOR RESTARTING CPR WITHOUT LOGGING IN DEFAULT DRIVE
              	;
D949:         	RCPRNL:
D949: CD02DC  		CALL	SCANER		;EXTRACT NEXT TOKEN FROM COMMAND LINE
D94C: 3A9CD8  		LD	A,(FCBFN)	;GET FIRST CHAR OF TOKEN
D94F: D620    		SUB	' '		;ANY CHAR?
D951: 21F9DB  		LD	HL,TEMPDR
D954: B6      		OR	(HL)
D955: C211DB  		JP	NZ,ERROR
D958: 189E    		JR	RESTRT
              	;
              	; No File Error Message
              	;
D95A:         	PRNNF:
D95A: CD10DA  		CALL	PRINTC		;NO FILE MESSAGE
D95D: 4E6F2046		DEFM	'No Fil'
D961: 696C    	
D963: E5      		DEFB	'e'+80H
D964: C9      		RET
              	;
              	; CPR BUILT-IN COMMAND TABLE
              	;
0004:         	NCHARS	EQU	4		;NUMBER OF CHARS/COMMAND
              	;
              	; CPR COMMAND NAME TABLE
              	;   EACH TABLE ENTRY IS COMPOSED OF THE 4-BYTE COMMAND AND 2-BYTE ADDRESS
              	;
D965:         	CMDTBL:
              	;
              		IF	INPASS AND SECURE
              		DEFM	'PASS'		;ENABLE WHEEL (SYSOP) MODE
              		DEFW	PASS
              		ENDIF			;INPASS AND SECURE
              	;
              		IF	DRUSER
D965: 55534552		DEFM	'USER'		;CHANGE USER AREAS
D969: D5DE    		DEFW	USER
              		ENDIF			;DRUSER
              	;
              		IF	CPRTYP
D96B: 54595045		DEFM	'TYPE'		;TYPE A FILE TO CON:
D96F: 7FDD    		DEFW	TYPE
              		ENDIF			;CPRTYP
              	;
              		IF	CPRDIR
D971: 44495220		DEFM	'DIR '		;PULL A DIRECTORY OF DISK FILES
D975: A3DC    		DEFW	DIR
              		ENDIF			;CPRDIR
              	
0003:         	NRCMDS	EQU	($-CMDTBL)/(NCHARS+2)
              					;PUT ANY COMMANDS THAT ARE OK TO
              					;RUN WHEN NOT UNDER WHEEL MODE
              					;IN FRONT OF THIS LABEL
              		IF	CPRLST AND CPRTYP
D977: 4C495354		DEFM	'LIST'		;LIST FILE TO PRINTER
D97B: 7BDD    		DEFW	LIST
              		ENDIF			;CPRLST AND CPRTYP
              	;
              		IF	INPASS AND SECURE
              		DEFM	'NORM'		;DISABLE WHEEL MODE
              		DEFW	NORM
              		ENDIF			;INPASS AND SECURE
              	;
              		IF	RAS		;FOR NON-RAS
              	        ELSE
D97D: 474F2020		DEFM	'GO  '		;JUMP TO 100H
D981: ECDE    		DEFW	GO
D983: 45524120		DEFM	'ERA '		;ERASE FILE
D987: 54DD    		DEFW	ERA
D989: 53415645		DEFM	'SAVE'		;SAVE MEMORY IMAGE TO DISK
D98D: 0CDE    		DEFW	SAVE
D98F: 52454E20		DEFM	'REN '		;RENAME FILE
D993: 91DE    		DEFW	REN
D995: 44465520		DEFM	'DFU '		;SET DEFAULT USER
D999: DFDE    		DEFW	DFU
D99B: 47455420		DEFM	'GET '		;LOAD FILE INTO MEMORY
D99F: 93DF    		DEFW	GET
D9A1: 4A554D50		DEFM	'JUMP'		;JUMP TO LOCATION IN MEMORY
D9A5: E7DE    		DEFW	JUMP
              		ENDIF			;RAS
              	;
000B:         	NCMNDS	EQU	($-CMDTBL)/(NCHARS+2)
              	;
              	;**** Section 3 ****
              	; I/O UTILITIES
              	;
              	; OUTPUT CHAR IN REG A TO CONSOLE AND DON'T CHANGE BC
              	;
              	;
              	; OUTPUT <CRLF>
              	;
D9A7:         	CRLF:
D9A7: 3E0D    		LD	A,CR
D9A9: CDAED9  		CALL	CONOUT
D9AC: 3E0A    		LD	A,LF		;FALL THRU TO CONOUT
              	;
D9AE:         	CONOUT:
D9AE: C5      		PUSH	BC
D9AF: 0E02    		LD	C,02H
D9B1:         	OUTPUT:
D9B1: E67F    		AND	7FH		;PREVENT INADVERTANT GRAPHIC OUTPUT
              					; TO EPSON-TYPE PRINTERS
D9B3: 5F      		LD	E,A
D9B4: E5      		PUSH	HL
D9B5: CD0500  		CALL	BDOS
D9B8: E1      		POP	HL
D9B9: C1      		POP	BC
D9BA: C9      		RET
              	;
D9BB:         	CONIN:
D9BB: 0E01    		LD	C,01H		;GET CHAR FROM CON: WITH ECHO
D9BD: CD09DA  		CALL	BDOSB
              	;
              	; CONVERT CHAR IN A TO UPPER CASE
              	;
D9C0:         	UCASE:
D9C0: FE61    		CP	61H		;LOWER-CASE A
D9C2: D8      		RET	C
D9C3: FE7B    		CP	7BH		;GREATER THAN LOWER-CASE Z?
D9C5: D0      		RET	NC
D9C6: E65F    		AND	5FH		;CAPITALIZE
D9C8: C9      		RET
              	;
D9C9:         	NOECHO:
D9C9: D5      		PUSH	DE		;SAVE D
D9CA: 0E06    		LD	C,6		;DIRECT CONSOLE I/O
D9CC: 1EFF    		LD	E,0FFH		;INPUT
D9CE: CD09DA  		CALL	BDOSB
D9D1: D1      		POP	DE
D9D2: B7      		OR	A		;DID WE GET A CHAR?
D9D3: 28F4    		JR	Z,NOECHO	;WAIT FOR IT IF NOT, IT'S EXPECTED
D9D5: C9      		RET
              	;
              		IF	CPRTYP
D9D6:         	LCOUT:
              		ENDIF			;CPRTYP
              	;
              		IF	CPRTYP AND CPRLST
D9D6: F5      		PUSH	AF		;OUTPUT CHAR TO CON: OR LST: DEP ON PRFLG
D9D8:         	PRFLG	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D9D7: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS THE PRINT FLAG
D9D9: B7      		OR	A		;0=TYPE
D9DA: 2806    		JR	Z,LC1
D9DC: F1      		POP	AF		;GET CHAR
              	;
              	; OUTPUT CHAR IN REG A TO LIST DEVICE
              	;
D9DD:         	LSTOUT:
D9DD: C5      		PUSH	BC
D9DE: 0E05    		LD	C,05H
D9E0: 18CF    		JR	OUTPUT
D9E2:         	LC1:
D9E2: F1      		POP	AF		;GET CHAR
              		ENDIF			;CPRTYP AND CPRLST
              	;
              		IF	CPRTYP
D9E3: F5      		PUSH	AF
D9E4: CDAED9  		CALL	CONOUT		;OUTPUT TO CON:
D9E7: F1      		POP	AF
D9E8: FE0A    		CP	LF		;CHECK FOR PAGING
D9EA: C0      		RET	NZ		;DONE IF NOT EOL YET
              	;
              	;  COUNT DOWN LINES AND PAUSE FOR INPUT (DIRECT) IF COUNT EXPIRES
              	;
D9EB: E5      		PUSH	HL
D9EC: 21BCD8  		LD	HL,PAGCNT	;COUNT DOWN
D9EF: 35      		DEC	(HL)
D9F0: 2010    		JR	NZ,PGBAK	;JUMP IF NOT END OF PAGE
D9F2: 3616    		LD	(HL),NLINES-2	;REFILL COUNTER
              	;
D9F5:         	PGFLG	EQU	$+1		;POINTER TO IN-THE-CODE BUFFER PGFLG
D9F4: 3E00    		LD	A,0		;0 MAY BE CHANGED BY PGFLG EQUATE
D9F6: FE50    		CP	PGDFLG		;PAGE DEFAULT OVERRIDE OPTION WANTED?
              	;
              		IF	PGDFLT		;IF PAGING IS DEFAULT
              		JR	Z,PGBAK		;  PGDFLG MEANS NO PAGING, PLEASE
              		ELSE			;IF PAGING NOT DEFAULT
D9F8: 2008    		JR	NZ,PGBAK	;  PGDFLG MEANS PLEASE PAGINATE
              		ENDIF
              	;
D9FA: CDC9D9  		CALL	NOECHO		;GET CHAR BUT DON'T ECHO TO SCREEN
D9FD: FE03    		CP	'C'-'@' 	;^C
D9FF: CA46D9  		JP	Z,RSTCPR	;RESTART CPR
DA02:         	PGBAK:
DA02: E1      		POP	HL		;RESTORE HL
DA03: C9      		RET
              		ENDIF			;CPRTYP
              	;
DA04:         	READF:
DA04: 119BD8  		LD	DE,FCBDN 	;FALL THRU TO READ
DA07:         	READ:
DA07: 0E14    		LD	C,14H		;FALL THRU TO BDOSB
              	;
              	; CALL BDOS AND SAVE BC
              	;
DA09:         	BDOSB:
DA09: C5      		PUSH	BC
DA0A: CD0500  		CALL	BDOS
DA0D: C1      		POP	BC
DA0E: B7      		OR	A
DA0F: C9      		RET
              	;
              	; PRINT STRING ENDING WITH ZERO BYTE OR CHAR WITH HIGH BIT SET
              	; PT'ED TO BY RET ADDR, START WITH <CR><LF>
              	;
DA10:         	PRINTC:
DA10: F5      		PUSH	AF		;SAVE FLAGS
DA11: CDA7D9  		CALL	CRLF		;NEW LINE
DA14: F1      		POP	AF
              	;
DA15:         	PRINT:
DA15: E3      		EX	(SP),HL		;GET PTR TO STRING
DA16: F5      		PUSH	AF		;SAVE FLAGS
DA17: CD1DDA  		CALL	PRIN1		;PRINT STRING
DA1A: F1      		POP	AF		;GET FLAGS
DA1B: E3      		EX	(SP),HL		;RESTORE HL AND RET ADR
DA1C: C9      		RET
              	;
              	; PRINT STRING ENDING WITH ZERO BYTE OR CHAR WITH HIGH BIT SET
              	; PT'ED TO BY HL
              	;
DA1D:         	PRIN1:
DA1D: 7E      		LD	A,(HL)		;GET NEXT BYTE
DA1E: CDAED9  		CALL	CONOUT		;PRINT CHAR
DA21: 7E      		LD	A,(HL)		;GET NEXT BYTE AGAIN FOR TEST
DA22: 23      		INC	HL		;PT TO NEXT BYTE
DA23: B7      		OR	A		;SET FLAGS
DA24: C8      		RET	Z		;DONE IF ZERO
DA25: F8      		RET	M		;DONE IF MSB SET
DA26: 18F5    		JR	PRIN1
              	;
              	; BDOS FUNCTION ROUTINES
              	;
              	;
              	; RETURN NUMBER OF CURRENT DISK IN A
              	;
DA28:         	GETDRV:
DA28: 0E19    		LD	C,19H
DA2A: 1809    		JR	BDOSJP
              	;
              	; SET 80H AS DMA ADDRESS
              	;
DA2C:         	DEFDMA:
DA2C: 118000  		LD	DE,TBUFF 	;80H=TBUFF
DA2F:         	DMASET:
DA2F: 0E1A    		LD	C,1AH
DA31: 1802    		JR	BDOSJP
              	;
DA33:         	RESET:
DA33: 0E0D    		LD	C,0DH
DA35:         	BDOSJP:
DA35: C30500  		JP	BDOS
              	;
DA38:         	LOGIN:
DA38: 5F      		LD	E,A		;MOVE DESIRED # TO BDOS REG
              	;
              		IF	MAXDRIV
              		LD	A,(MAXDRIV)	;CHECK FOR LEGAL DRIVE #
              		CP	E
              		JP	C,ERROR		;DON'T DO IT IF TOO HIGH
              		ENDIF			;MAXDRIV
              	;
DA39: 0E0E    		LD	C,0EH
DA3B: 18F8    		JR	BDOSJP		;SAVE SOME CODE SPACE
              	;
DA3D:         	OPENF:
DA3D: AF      		XOR	A
DA3E: 32BBD8  		LD	(FCBCR),A
DA41: 119BD8  		LD	DE,FCBDN 	;FALL THRU TO OPEN
              	;
DA44:         	OPEN:
DA44: 0E0F    		LD	C,0FH		;FALL THRU TO GRBDOS
              	;
DA46:         	GRBDOS:
DA46: CD0500  		CALL	BDOS
DA49: 3C      		INC	A		;SET ZERO FLAG FOR ERROR RETURN
DA4A: C9      		RET
              	;
DA4B:         	CLOSE:
DA4B: 0E10    		LD	C,10H
DA4D: 18F7    		JR	GRBDOS
              	;
DA4F:         	SEARF:
DA4F: 119BD8  		LD	DE,FCBDN 	;SPECIFY FCB
DA52:         	SEAR1:
DA52: 0E11    		LD	C,11H
DA54: 18F0    		JR	GRBDOS
              	;
DA56:         	SEARN:
DA56: 0E12    		LD	C,12H
DA58: 18EC    		JR	GRBDOS
              	;
              	; CHECK FOR SUBMIT FILE IN EXECUTION AND ABORT IT IF SO
              	;
DA5A:         	SUBKIL:
DA5A: 21E8D8  		LD	HL,RNGSUB	;CHECK FOR SUBMIT FILE IN EXECUTION
DA5D: 7E      		LD	A,(HL)
DA5E: B7      		OR	A		;0=NO
DA5F: C8      		RET	Z
DA60: 3600    		LD	(HL),0		;ABORT SUBMIT FILE
DA62: 117AD8  		LD	DE,SUBFCB	;DELETE $$$.SUB
              	;
DA65:         	DELETE:
DA65: 0E13    		LD	C,13H
DA67: 18CC    		JR	BDOSJP		;SAVE MORE SPACE
              	;
              	; RESET USER NUMBER IF CHANGED
              	;
DA69:         	RESETUSR:
DA6A:         	TMPUSR	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
DA69: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TMPUSR
DA6B: 5F      		LD	E,A		;PLACE IN E
DA6C: 1802    		JR	SETUSR		;THEN GO SET USER
DA6E:         	GETUSR:
DA6E: 1EFF    		LD	E,0FFH		;GET CURRENT USER NUMBER
DA70:         	SETUSR:
DA70: 0E20    		LD	C,20H		;SET USER NUMBER TO VALUE IN E (GET IF E=FFH)
DA72: 18C1    		JR	BDOSJP		;MORE SPACE SAVING
              	;
              	; END OF BDOS FUNCTIONS
              	;
              	;
              	;**** Section 4 ****
              	; CPR UTILITIES
              	;
              	; SET USER/DISK FLAG TO CURRENT USER AND DEFAULT DISK
              	;
DA74:         	SETUD:
DA74: CD6EDA  		CALL	GETUSR		;GET NUMBER OF CURRENT USER
DA77: 87      		ADD	A,A		;PLACE IT IN HIGH NYBBLE
DA78: 87      		ADD	A,A
DA79: 87      		ADD	A,A
DA7A: 87      		ADD	A,A
DA7B: 2184DA  		LD	HL,TDRIVE	;MASK IN DEFAULT DRIVE NUMBER (LOW NYBBLE)
DA7E: B6      		OR	(HL)		;MASK IN
DA7F: 320400  		LD	(UDFLAG),A	;SET USER/DISK NUMBER
DA82: C9      		RET
              	;
              	; SET USER/DISK FLAG TO USER 0 AND DEFAULT DISK
              	;
DA83:         	SETU0D:
DA84:         	TDRIVE	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
DA83: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TDRIVE
DA85: 320400  		LD	(UDFLAG),A	;SET USER/DISK NUMBER
DA88: C9      		RET
              	;
              	; INPUT NEXT COMMAND TO CPR
              	;	This routine determines if a SUBMIT file is being processed
              	; and extracts the command line from it if so or from the user's console
              	;
DA89:         	REDBUF:
DA89: 3AE8D8  		LD	A,(RNGSUB)	;SUBMIT FILE CURRENTLY IN EXECUTION?
DA8C: B7      		OR	A		;0=NO
DA8D: 2845    		JR	Z,RB1		;GET LINE FROM CONSOLE IF NOT
DA8F: 117AD8  		LD	DE,SUBFCB	;OPEN $$$.SUB
DA92: D5      		PUSH	DE		;SAVE DE
DA93: CD44DA  		CALL	OPEN
DA96: D1      		POP	DE		;RESTORE DE
DA97: 283B    		JR	Z,RB1		;ERASE $$$.SUB IF END OF FILE AND GET CMND
DA99: 3A89D8  		LD	A,(SUBFRC)	;GET VALUE OF LAST RECORD IN FILE
DA9C: 3D      		DEC	A		;PT TO NEXT TO LAST RECORD
DA9D: 329AD8  		LD	(SUBFCR),A	;SAVE NEW VALUE OF LAST RECORD IN $$$.SUB
DAA0: CD07DA  		CALL	READ		;DE=SUBFCB
DAA3: 202F    		JR	NZ,RB1		;ABORT $$$.SUB IF ERROR IN READING LAST REC
DAA5: 1107D8  		LD	DE,CBUFF 	;COPY LAST RECORD (NEXT SUBMIT CMND) TO CBUFF
DAA8: 218000  		LD	HL,TBUFF 	;  FROM TBUFF
DAAB: 015000  		LD	BC,BUFLEN	;NUMBER OF BYTES
DAAE: EDB0    		LDIR
DAB0: 2188D8  		LD	HL,SUBFS2	;PT TO S2 OF $$$.SUB FCB
DAB3: 3600    		LD	(HL),0		;SET S2 TO ZERO
DAB5: 23      		INC	HL		;PT TO RECORD COUNT
DAB6: 35      		DEC	(HL)		;DECREMENT RECORD COUNT OF $$$.SUB
DAB7: 117AD8  		LD	DE,SUBFCB	;CLOSE $$$.SUB
DABA: CD4BDA  		CALL	CLOSE
DABD: 2815    		JR	Z,RB1		;ABORT $$$.SUB IF ERROR
DABF: 3E24    		LD	A,SPRMPT	;PRINT SUBMIT PROMPT
DAC1: CDAED9  		CALL	CONOUT
DAC4: 2108D8  		LD	HL,CIBUFF	;PRINT COMMAND LINE FROM $$$.SUB
DAC7: CD1DDA  		CALL	PRIN1
DACA: CD00DB  		CALL	BREAK		;CHECK FOR ABORT (ANY CHAR)
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
DACD: C8      		RET	Z		;IF <NULL> (NO ABORT), RETURN TO CALLER AND RUN
              		ENDIF
              	;
              		IF	CLEVEL3	;IF THIRD COMMAND LEVEL IS NOT PERMITTED
              	        ELSE
              		JR	Z,CNVBUF	;IF <NULL> (NO ABORT), CAPITALIZE COMMAND
              		ENDIF
              	;
DACE: CD5ADA  		CALL	SUBKIL		;KILL $$$.SUB IF ABORT
DAD1: C3F8D8  		JP	RESTRT		;RESTART CPR
              	;
              	; INPUT COMMAND LINE FROM USER CONSOLE
              	;
DAD4:         	RB1:
DAD4: CD5ADA  		CALL	SUBKIL		;ERASE $$$.SUB IF PRESENT
DAD7: CD74DA  		CALL	SETUD		;SET USER AND DISK
DADA: 3E3E    		LD	A,CPRMPT	;PRINT PROMPT
DADC: CDAED9  		CALL	CONOUT
DADF: 0E0A    		LD	C,0AH		;READ COMMAND LINE FROM USER
DAE1: 1106D8  		LD	DE,MBUFF
DAE4: CD0500  		CALL	BDOS
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
DAE7: C383DA  		JP	SETU0D		;SET CURRENT DISK NUMBER IN LOWER PARAMS
              		ENDIF
              	;
              		IF	CLEVEL3	;IF THIRD COMMAND LEVEL IS NOT PERMITTED
              	        ELSE
              		CALL	SETU0D		;SET CURRENT DISK NUMBER IF LOWER PARAMS
              					; AND FALL THRU TO CNVBUF
              		ENDIF
              	;
              	; CAPITALIZE STRING (ENDING IN 0) IN CBUFF AND SET PTR FOR PARSING
              	;
DAEA:         	CNVBUF:
DAEA: 2107D8  		LD	HL,CBUFF 	;PT TO USER'S COMMAND
DAED: 46      		LD	B,(HL)		;CHAR COUNT IN B
DAEE: 04      		INC	B		;ADD 1 IN CASE OF ZERO
DAEF:         	CB1:
DAEF: 23      		INC	HL		;PT TO 1ST VALID CHAR
DAF0: 7E      		LD	A,(HL)		;CAPITALIZE COMMAND CHAR
DAF1: CDC0D9  		CALL	UCASE
DAF4: 77      		LD	(HL),A
DAF5: 10F8    		DJNZ	CB1		;CONTINUE TO END OF COMMAND LINE
DAF7:         	CB2:
DAF7: 3600    		LD	(HL),0		;STORE ENDING <NULL>
DAF9: 2108D8  		LD	HL,CIBUFF	;SET COMMAND LINE PTR TO 1ST CHAR
DAFC: 2259D8  		LD	(CIBPTR),HL
DAFF: C9      		RET
              	;
              	; CHECK FOR ANY CHAR FROM USER CONSOLE;RET W/ZERO SET IF NONE
              	;
DB00:         	BREAK:
DB00: D5      		PUSH	DE		;SAVE DE
DB01: 0E0B    		LD	C,11		;CSTS CHECK
DB03: CD09DA  		CALL	BDOSB
DB06: C4BBD9  		CALL	NZ,CONIN	;GET INPUT CHAR
DB09:         	BRKBK:
DB09: D1      		POP	DE
DB0A: C9      		RET
              	;
              	; GET THE REQUESTED USER NUMBER FROM THE COMMAND LINE AND VALIDATE IT.
              	;
DB0B:         	USRNUM:		
DB0B: CD5DDB  		CALL	NUMBER
              	;
              		IF	USRMAX
              		LD	HL,USRMAX 	;PT TO MAXUSR + 1
              		CP	(HL)		;NEW VALUE ALLOWED?
              		ELSE
DB0E: FE10    		CP	MAXUSR+1 	;NEW VALUE ALLOWED?
              		ENDIF			;USRMAX
              	;
DB10: D8      		RET	C		;RETURN TO CALLER IF SO,
              					; ELSE FLAG AS ERROR
              	;
              	; INVALID COMMAND -- PRINT IT
              	;
DB11:         	ERROR:
DB11: CDA7D9  		CALL	CRLF		;NEW LINE
DB14: 2A5BD8  		LD	HL,(CIPTR)	;PT TO BEGINNING OF COMMAND LINE
DB17:         	ERR2:
DB17: 7E      		LD	A,(HL)		;GET CHAR
DB18: FE21    		CP	' '+1		;SIMPLE '?' IF <SP> OR LESS
DB1A: 3808    		JR	C,ERR1
DB1C: E5      		PUSH	HL		;SAVE PTR TO ERROR COMMAND CHAR
DB1D: CDAED9  		CALL	CONOUT		;PRINT COMMAND CHAR
DB20: E1      		POP	HL		;GET PTR
DB21: 23      		INC	HL		;PT TO NEXT
DB22: 18F3    		JR	ERR2		;CONTINUE
DB24:         	ERR1:
DB24: CD15DA  		CALL	PRINT		;PRINT '?'
DB27: BF      		DEFB	'?'+80H
DB28: CD5ADA  		CALL	SUBKIL		;TERMINATE ACTIVE $$$.SUB IF ANY
DB2B: C3F8D8  		JP	RESTRT		;RESTART CPR
              	;
              	; CHECK TO SEE IF DE PTS TO DELIMITER; IF SO, RET W/ZERO FLAG SET
              	;
DB2E:         	SDELM:
DB2E: 1A      		LD	A,(DE)
DB2F: B7      		OR	A		;0=DELIMITER
DB30: C8      		RET	Z
DB31: FE20    		CP	' '		;ERROR IF < <SP>
DB33: 38DC    		JR	C,ERROR
DB35: C8      		RET	Z			;<SP>=DELIMITER
DB36: FE3D    		CP	'='		;'='=DELIMITER
DB38: C8      		RET	Z
DB39: FE5F    		CP	5FH		;UNDERSCORE=DELIMITER
DB3B: C8      		RET	Z
DB3C: FE2E    		CP	'.'		;'.'=DELIMITER
DB3E: C8      		RET	Z
DB3F: FE3A    		CP	':'		;':'=DELIMITER
DB41: C8      		RET	Z
DB42: FE3B    		CP	';'		;';'=DELIMITER
DB44: C8      		RET	Z
DB45: FE3C    		CP	'<'		;'<'=DELIMITER
DB47: C8      		RET	Z
DB48: FE3E    		CP	'>'		;'>'=DELIMITER
DB4A: C9      		RET
              	;
              	; ADVANCE INPUT PTR TO FIRST NON-BLANK AND FALL THROUGH TO SBLANK
              	;
DB4B:         	ADVAN:
DB4B: ED5B59D8		LD	DE,(CIBPTR)
              	;
              	; SKIP STRING PTED TO BY DE (STRING ENDS IN 0) UNTIL END OF STRING
              	;   OR NON-BLANK ENCOUNTERED (BEGINNING OF TOKEN)
              	;
DB4F:         	SBLANK:
DB4F: 1A      		LD	A,(DE)
DB50: B7      		OR	A
DB51: C8      		RET	Z
DB52: FE20    		CP	' '
DB54: C0      		RET	NZ
DB55: 13      		INC	DE
DB56: 18F7    		JR	SBLANK
              	;
              	; ADD A TO HL (HL=HL+A)
              	;
DB58:         	ADDAH:
DB58: 85      		ADD	A,L
DB59: 6F      		LD	L,A
DB5A: D0      		RET	NC
DB5B: 24      		INC	H
DB5C: C9      		RET
              	;
              	; EXTRACT DECIMAL NUMBER FROM COMMAND LINE
              	;   RETURN WITH VALUE IN REG A;ALL REGISTERS MAY BE AFFECTED
              	;
DB5D:         	NUMBER:
DB5D: CD02DC  		CALL	SCANER		;PARSE NUMBER AND PLACE IN FCBFN
DB60: 21A6D8  		LD	HL,FCBFN+10 	;PT TO END OF TOKEN FOR CONVERSION
DB63: 060B    		LD	B,11		;11 CHARS MAX
              	;
              	; CHECK FOR SUFFIX FOR HEXADECIMAL NUMBER
              	;
DB65:         	NUMS:
DB65: 7E      		LD	A,(HL)		;GET CHARS FROM END, SEARCHING FOR SUFFIX
DB66: 2B      		DEC	HL		;BACK UP
DB67: FE20    		CP	' '		;SPACE?
DB69: 2004    		JR	NZ,NUMS1	;CHECK FOR SUFFIX
DB6B: 10F8    		DJNZ	NUMS		;COUNT DOWN
DB6D: 1804    		JR	NUM0		;BY DEFAULT, PROCESS
DB6F:         	NUMS1:
DB6F: FE48    		CP	NUMBASE		;CHECK AGAINST BASE SWITCH FLAG
DB71: 282B    		JR	Z,HNUM0
              	;
              	; PROCESS DECIMAL NUMBER
              	;
DB73:         	NUM0:
DB73: 219CD8  		LD	HL,FCBFN	;PT TO BEGINNING OF TOKEN
DB76: 010011  		LD	BC,1100H	;C=ACCUMULATED VALUE, B=CHAR COUNT
              					; (C=0, B=11)
DB79:         	NUM1:
DB79: 7E      		LD	A,(HL)		;GET CHAR
DB7A: FE20    		CP	' '		;DONE IF <SP>
DB7C: 2818    		JR	Z,NUM2
DB7E: 23      		INC	HL		;PT TO NEXT CHAR
DB7F: D630    		SUB	'0'		;CONVERT TO BINARY (ASCII 0-9 TO BINARY)
DB81: FE0A    		CP	10		;ERROR IF >= 10
DB83: 3013    		JR	NC,NUMERR
DB85: 57      		LD	D,A		;DIGIT IN D
DB86: 79      		LD	A,C		;NEW VALUE = OLD VALUE * 10
DB87: 07      		RLCA
DB88: 07      		RLCA
DB89: 07      		RLCA
DB8A: 81      		ADD	A,C		;CHECK FOR RANGE ERROR
DB8B: 380B    		JR	C,NUMERR
DB8D: 81      		ADD	A,C		;CHECK FOR RANGE ERROR
DB8E: 3808    		JR	C,NUMERR
DB90: 82      		ADD	A,D		;NEW VALUE = OLD VALUE * 10 + DIGIT
DB91: 3805    		JR	C,NUMERR	;CHECK FOR RANGE ERROR
DB93: 4F      		LD	C,A		;SET NEW VALUE
DB94: 10E3    		DJNZ	NUM1		;COUNT DOWN
              	;
              	; RETURN FROM NUMBER
              	;
DB96:         	NUM2:
DB96: 79      		LD	A,C		;GET ACCUMULATED VALUE
DB97: C9      		RET
              	;
              	; NUMBER ERROR ROUTINE FOR SPACE CONSERVATION
              	;
DB98:         	NUMERR:
DB98: C311DB  		JP	ERROR		;USE ERROR ROUTINE - THIS IS RELATIVE PT
              	;
              	; EXTRACT HEXADECIMAL NUMBER FROM COMMAND LINE
              	;   RETURN WITH VALUE IN REG A; ALL REGISTERS MAY BE AFFECTED
              	;
DB9B:         	HEXNUM:
DB9B: CD02DC  		CALL	SCANER		;PARSE NUMBER AND PLACE IN FCBFN
DB9E:         	HNUM0:
DB9E: 219CD8  		LD	HL,FCBFN	;PT TO TOKEN FOR CONVERSION
DBA1: 110000  		LD	DE,0		;DE=ACCUMULATED VALUE
DBA4: 060B    		LD	B,11		;B=CHAR COUNT
DBA6:         	HNUM1:
DBA6: 7E      		LD	A,(HL)		;GET CHAR
DBA7: FE20    		CP	' '		;DONE?
DBA9: 282D    		JR	Z,HNUM3		;RETURN IF SO
DBAB: FE48    		CP	NUMBASE		;DONE IF NUMBASE SUFFIX
DBAD: 2829    		JR	Z,HNUM3
DBAF: D630    		SUB	'0'		;CONVERT TO BINARY
DBB1: 38E5    		JR	C,NUMERR	;RETURN AND DONE IF ERROR
DBB3: FE0A    		CP	10		;0-9?
DBB5: 3806    		JR	C,HNUM2
DBB7: D607    		SUB	7		;A-F?
DBB9: FE10    		CP	10H		;ERROR?
DBBB: 30DB    		JR	NC,NUMERR
DBBD:         	HNUM2:
DBBD: 23      		INC	HL		;PT TO NEXT CHAR
DBBE: 4F      		LD	C,A		;DIGIT IN C
DBBF: 7A      		LD	A,D		;GET ACCUMULATED VALUE
DBC0: 07      		RLCA			;EXCHANGE NYBBLES
DBC1: 07      		RLCA
DBC2: 07      		RLCA
DBC3: 07      		RLCA
DBC4: E6F0    		AND	0F0H		;MASK OUT LOW NYBBLE
DBC6: 57      		LD	D,A
DBC7: 7B      		LD	A,E		;SWITCH LOW-ORDER NYBBLES
DBC8: 07      		RLCA
DBC9: 07      		RLCA
DBCA: 07      		RLCA
DBCB: 07      		RLCA
DBCC: 5F      		LD	E,A		;HIGH NYBBLE OF E=NEW HIGH OF E,
              					;  LOW NYBBLE OF E=NEW LOW OF D
DBCD: E60F    		AND	0FH		;GET NEW LOW OF D
DBCF: B2      		OR	D		;MASK IN HIGH OF D
DBD0: 57      		LD	D,A		;NEW HIGH BYTE IN D
DBD1: 7B      		LD	A,E
DBD2: E6F0    		AND	0F0H		;MASK OUT LOW OF E
DBD4: B1      		OR	C		;MASK IN NEW LOW
DBD5: 5F      		LD	E,A		;NEW LOW BYTE IN E
DBD6: 10CE    		DJNZ	HNUM1		;COUNT DOWN
              	;
              	; RETURN FROM HEXNUM
              	;
DBD8:         	HNUM3:
DBD8: EB      		EX	DE,HL		;RETURNED VALUE IN HL
DBD9: 7D      		LD	A,L		;LOW-ORDER BYTE IN A
DBDA: C9      		RET
              	;
              	; PT TO DIRECTORY ENTRY IN TBUFF WHOSE OFFSET IS SPECIFIED BY A AND C
              	;
DBDB:         	DIRPTR:
DBDB: 218000  		LD	HL,TBUFF 	;PT TO TEMP BUFFER
DBDE: 81      		ADD	A,C		;PT TO 1ST BYTE OF DIR ENTRY
DBDF: CD58DB  		CALL	ADDAH		;PT TO DESIRED BYTE IN DIR ENTRY
DBE2: 7E      		LD	A,(HL)		;GET DESIRED BYTE
DBE3: C9      		RET
              	;
              	; CHECK FOR SPECIFIED DRIVE AND LOG IT IN IF NOT DEFAULT
              	;
DBE4:         	SLOGIN:
DBE4: AF      		XOR	A		;SET FCBDN FOR DEFAULT DRIVE
DBE5: 329BD8  		LD	(FCBDN),A
DBE8: CDF8DB  		CALL	COMLOG		;CHECK DRIVE
DBEB: C8      		RET	Z
DBEC: 1807    		JR	DLOG5		;DO LOGIN OTHERWISE
              	;
              	; CHECK FOR SPECIFIED DRIVE AND LOG IN DEFAULT DRIVE IF SPECIFIED<>DEFAULT
              	;
DBEE:         	DLOGIN:
DBEE: CDF8DB  		CALL	COMLOG		;CHECK DRIVE
DBF1: C8      		RET	Z		;ABORT IF SAME
DBF2: 3A84DA  		LD	A,(TDRIVE)	;LOG IN DEFAULT DRIVE
              	;
DBF5: C338DA  	DLOG5:	JP	LOGIN
              	;
              	; ROUTINE COMMON TO BOTH LOGIN ROUTINES; ON EXIT, Z SET MEANS ABORT
              	;
DBF8:         	COMLOG:
DBF9:         	TEMPDR	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
DBF8: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TEMPDR
DBFA: B7      		OR	A		;0=NO
DBFB: C8      		RET	Z
DBFC: 3D      		DEC	A		;COMPARE IT AGAINST DEFAULT
DBFD: 2184DA  		LD	HL,TDRIVE
DC00: BE      		CP	(HL)
DC01: C9      		RET			;ABORT IF SAME
              	;
              	; EXTRACT TOKEN FROM COMMAND LINE AND PLACE IT INTO FCBDN;
              	;   FORMAT FCBDN FCB IF TOKEN RESEMBLES FILE NAME AND TYPE (FILENAME.TYP);
              	;   ON INPUT, CIBPTR PTS TO CHAR AT WHICH TO START SCAN;
              	;   ON OUTPUT, CIBPTR PTS TO CHAR AT WHICH TO CONTINUE AND ZERO FLAG IS RESET
              	;     IF '?' IS IN TOKEN
              	;
              	; ENTRY POINTS:
              	;	SCANER - LOAD TOKEN INTO FIRST FCB
              	;	SCANX - LOAD TOKEN INTO FCB PTED TO BY HL
              	;
DC02:         	SCANER:
DC02: 219BD8  		LD	HL,FCBDN 	;POINT TO FCBDN
DC05:         	SCANX:
DC05: AF      		XOR	A		;SET TEMPORRY DRIVE NUMBER TO DEFAULT
DC06: 32F9DB  		LD	(TEMPDR),A
DC09: CD4BDB  		CALL	ADVAN		;SKIP TO NON-BLANK OR END OF LINE
DC0C: ED535BD8		LD	(CIPTR),DE	;SET PTR TO NON-BLANK OR END OF LINE
DC10: 1A      		LD	A,(DE)		;END OF LINE?
DC11: B7      		OR	A		;0=YES
DC12: 280A    		JR	Z,SCAN2
DC14: DE40    		SBC	A,'A'-1		;CONVERT POSSIBLE DRIVE SPEC TO NUMBER
DC16: 47      		LD	B,A		;STORE NUMBER (A:=0, B:=1, ETC) IN B
DC17: 13      		INC	DE		;PT TO NEXT CHAR
DC18: 1A      		LD	A,(DE)		;SEE IF IT IS A COLON (:)
DC19: FE3A    		CP	':'
DC1B: 2807    		JR	Z,SCAN3		;YES, WE HAVE A DRIVE SPEC
DC1D: 1B      		DEC	DE		;NO, BACK UP PTR TO FIRST NON-BLANK CHAR
DC1E:         	SCAN2:
DC1E: 3A84DA  		LD	A,(TDRIVE)	;SET 1ST BYTE OF FCBDN AS DEFAULT DRIVE
DC21: 77      		LD	(HL),A
DC22: 1806    		JR	SCAN4
DC24:         	SCAN3:
DC24: 78      		LD	A,B		;WE HAVE A DRIVE SPEC
DC25: 32F9DB  		LD	(TEMPDR),A	;SET TEMPORRY DRIVE
DC28: 70      		LD	(HL),B		;SET 1ST BYTE OF FCBDN AS SPECIFIED DRIVE
DC29: 13      		INC	DE		;PT TO BYTE AFTER ':'
              	;
              	; EXTRACT FILENAME FROM POSSIBLE FILENAME.TYP
              	;
DC2A:         	SCAN4:
DC2A: AF      		XOR	A		;A=0
DC2B: 32BED8  		LD	(QMCNT),A	;INIT COUNT OF NUMBER OF QUESTION MARKS IN FCB
DC2E: 0608    		LD	B,8		;MAX OF 8 CHARS IN FILE NAME
DC30: CD52DC  		CALL	SCANF		;FILL FCB FILE NAME
              	;
              	; EXTRACT FILE TYPE FROM POSSIBLE FILENAME.TYP
              	;
DC33: 0603    		LD	B,3		;PREPARE TO EXTRACT TYPE
DC35: FE2E    		CP	'.'		;IF (DE) DELIMITER IS A '.', WE HAVE A TYPE
DC37: 2006    		JR	NZ,SCAN15	;FILL FILE TYPE BYTES WITH <SP>
DC39: 13      		INC	DE		;PT TO CHAR IN COMMAND LINE AFTER '.'
DC3A: CD52DC  		CALL	SCANF		;FILL FCB FILE TYPE
DC3D: 1803    		JR	SCAN16		;SKIP TO NEXT PROCESSING
DC3F:         	SCAN15:
DC3F: CD73DC  		CALL	SCANF4		;SPACE FILL
              	;
              	; FILL IN EX, S1, S2, AND RC WITH ZEROES
              	;
DC42:         	SCAN16:
DC42: 0604    		LD	B,4		;4 BYTES
DC44:         	SCAN17:
DC44: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
DC45: 3600    		LD	(HL),0
DC47: 10FB    		DJNZ	SCAN17
              	;
              	; SCAN COMPLETE -- DE PTS TO DELIMITER BYTE AFTER TOKEN
              	;
DC49: ED5359D8		LD	(CIBPTR),DE
              	;
              	; SET ZERO FLAG TO INDICATE PRESENCE OF '?' IN FILENAME.TYP
              	;
DC4D: 3ABED8  		LD	A,(QMCNT)	;GET NUMBER OF QUESTION MARKS
DC50: B7      		OR	A		;SET ZERO FLAG TO INDICATE ANY '?'
DC51: C9      		RET
              	;
              	;  SCANF -- SCAN TOKEN PTED TO BY DE FOR A MAX OF B BYTES; PLACE IT INTO
              	;    FILE NAME FIELD PTED TO BY HL; EXPAND AND INTERPRET WILD CARDS OF
              	;    '*' AND '?'; ON EXIT, DE PTS TO TERMINATING DELIMITER
              	;
DC52:         	SCANF:
DC52: CD2EDB  		CALL	SDELM		;DONE IF DELIMITER ENCOUNTERED - <SP> FILL
DC55: 281C    		JR	Z,SCANF4
DC57: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
DC58: FE2A    		CP	'*'		;IS (DE) A WILD CARD?
DC5A: 2007    		JR	NZ,SCANF1	;CONTINUE IF NOT
DC5C: 363F    		LD	(HL),'?'	;PLACE '?' IN FCBDN AND DON'T ADVANCE DE IF SO
DC5E: CD79DC  		CALL	SCQ		;SCANNER COUNT QUESTION MARKS
DC61: 1807    		JR	SCANF2
DC63:         	SCANF1:
DC63: 77      		LD	(HL),A		;STORE FILENAME CHAR IN FCBDN
DC64: 13      		INC	DE		;PT TO NEXT CHAR IN COMMAND LINE
DC65: FE3F    		CP	'?'		;CHECK FOR QUESTION MARK (WILD)
DC67: CC79DC  		CALL	Z,SCQ		;SCANNER COUNT QUESTION MARKS
DC6A:         	SCANF2:
DC6A: 10E6    		DJNZ	SCANF		;DECREMENT CHAR COUNT UNTIL 8 ELAPSED
DC6C:         	SCANF3:
DC6C: CD2EDB  		CALL	SDELM		;8 CHARS OR MORE - SKIP UNTIL DELIMITER
DC6F: C8      		RET	Z		;ZERO FLAG SET IF DELIMITER FOUND
DC70: 13      		INC	DE		;PT TO NEXT CHAR IN COMMAND LINE
DC71: 18F9    		JR	SCANF3
              	;
              	;  FILL MEMORY POINTED TO BY HL WITH SPACES FOR B BYTES
              	;
DC73:         	SCANF4:
DC73: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
DC74: 3620    		LD	(HL),' '	;FILL FILENAME PART WITH <SP>
DC76: 10FB    		DJNZ	SCANF4
DC78: C9      		RET
              	;
              	;  INCREMENT QUESTION MARK COUNT FOR SCANNER
              	;    THIS ROUTINE INCREMENTS THE COUNT OF THE NUMBER OF QUESTION MARKS IN
              	;    THE CURRENT FCB ENTRY
              	;
DC79:         	SCQ:
DC79: 3ABED8  		LD	A,(QMCNT)	;GET COUNT
DC7C: 3C      		INC	A		;INCREMENT
DC7D: 32BED8  		LD	(QMCNT),A	;PUT COUNT
DC80: C9      		RET
              	;
              	; CMDTBL (COMMAND TABLE) SCANNER
              	;   ON RETURN, HL PTS TO ADDRESS OF COMMAND IF CPR-RESIDENT
              	;   ON RETURN, ZERO FLAG SET MEANS CPR-RESIDENT COMMAND
              	;
DC81:         	CMDSER:
DC81: 2165D9  		LD	HL,CMDTBL	;PT TO COMMAND TABLE
              	;
              		IF	SECURE
              		LD	C,NRCMDS
              		LD	A,(WHEEL)	;SEE IF NON-RESTRCTED
              		CP	RESTRCT
              		JR	Z,CMS1		;PASS IF RESTRCTED
              		ENDIF			;SECURE
              	;
DC84: 0E0B    		LD	C,NCMNDS	;SET COMMAND COUNTER
DC86:         	CMS1:
DC86: 119CD8  		LD	DE,FCBFN 	;PT TO STORED COMMAND NAME
DC89: 0604    		LD	B,NCHARS	;NUMBER OF CHARS/COMMAND (8 MAX)
DC8B:         	CMS2:
DC8B: 1A      		LD	A,(DE)		;COMPARE AGAINST TABLE ENTRY
DC8C: BE      		CP	(HL)
DC8D: 200A    		JR	NZ,CMS3		;NO MATCH
DC8F: 13      		INC	DE		;PT TO NEXT CHAR
DC90: 23      		INC	HL
DC91: 10F8    		DJNZ	CMS2		;COUNT DOWN
DC93: 1A      		LD	A,(DE)		;NEXT CHAR IN INPUT COMMAND MUST BE <SP>
DC94: FE20    		CP	' '
DC96: 2004    		JR	NZ,CMS4
DC98: C9      		RET			;COMMAND IS CPR-RESIDENT (ZERO FLAG SET)
DC99:         	CMS3:
DC99: 23      		INC	HL		;SKIP TO NEXT COMMAND TABLE ENTRY
DC9A: 10FD    		DJNZ	CMS3
DC9C:         	CMS4:
DC9C: 23      		INC	HL		;SKIP ADDRESS
DC9D: 23      		INC	HL
DC9E: 0D      		DEC	C		;DECREMENT TABLE ENTRY NUMBER
DC9F: 20E5    		JR	NZ,CMS1
DCA1: 0C      		INC	C		;CLEAR ZERO FLAG
DCA2: C9      		RET			;COMMAND IS DISK-RESIDENT (ZERO FLAG CLEAR)
              	;
              	;**** Section 5 ****
              	; CPR-Resident Commands
              	;
              	;
              	;Section 5A
              	;Command: DIR
              	;Function:  To display a directory of the files on disk
              	;Forms:
              	;	DIR <afn>	Displays the DIR files
              	;	DIR <afn> S	Displays the SYS files
              	;	DIR <afn> A	Display both DIR and SYS files
              	;
              		IF	CPRDIR
              	;
DCA3:         	DIR:
DCA3: 3E80    		LD	A,80H		;SET SYSTEM BIT EXAMINATION
DCA5: F5      		PUSH	AF
DCA6: CD02DC  		CALL	SCANER		;EXTRACT POSSIBLE D:FILENAME.TYP TOKEN
DCA9: CDE4DB  		CALL	SLOGIN		;LOG IN DRIVE IF NECESSARY
DCAC: 219CD8  		LD	HL,FCBFN 	;MAKE FCB WILD (ALL '?') IF NO FILENAME.TYP
DCAF: 7E      		LD	A,(HL)		;GET FIRST CHAR OF FILENAME.TYP
DCB0: FE20    		CP	' '		;IF <SP>, ALL WILD
DCB2: CC4CDD  		CALL	Z,FILLQ
DCB5: CD4BDB  		CALL	ADVAN		;LOOK AT NEXT INPUT CHAR
DCB8: 0600    		LD	B,0		;SYS TOKEN DEFAULT
DCBA: 2816    		JR	Z,DIR2		;JUMP; THERE ISN'T ONE
DCBC: FE41    		CP	SYSFLG		;SYSTEM FLAG SPECIFIER?
DCBE: 2806    		JR	Z,GOTSYS	;GOT SYSTEM SPECIFIER
DCC0: FE53    		CP	SOFLG		;SYS ONLY?
DCC2: 200E    		JR	NZ,DIR2
DCC4: 0680    		LD	B,80H		;FLAG SYS ONLY
DCC6:         	GOTSYS:
DCC6: 13      		INC	DE
DCC7: ED5359D8		LD	(CIBPTR),DE
DCCB: FE53    		CP	SOFLG		;SYS ONLY SPEC?
DCCD: 2803    		JR	Z,DIR2		;THEN LEAVE BIT SPEC UNCHAGNED
DCCF: F1      		POP	AF		;GET FLAG
DCD0: AF      		XOR	A		;SET NO SYSTEM BIT EXAMINATION
DCD1: F5      		PUSH	AF 
DCD2:         	DIR2:
DCD2: F1      		POP	AF		;GET FLAG
DCD3:         	DIR2A:
              					;DROP INTO DIRPR TO PRINT DIRECTORY
              					; THEN RESTART CPR
              		ENDIF			;CPRDIR
              	;
              	; DIRECTORY PRINT ROUTINE; ON ENTRY, MSB OF A IS 1 (80H) IF SYSTEM FILES
              	; EXCLUDED. THIS ROUTINE IS ALSO USED BY ERA.
              	;
DCD3:         	DIRPR:
DCD3: 57      		LD	D,A		;STORE SYSTEM FLAG IN D
DCD4: 1E00    		LD	E,0		;SET COLUMN COUNTER TO ZERO
DCD6: D5      		PUSH	DE		;SAVE COLUMN COUNTER (E) AND SYSTEM FLAG (D)
DCD7: 78      		LD	A,B		;SYS ONLY SPECIFIER
DCD8: 32F3DC  		LD	(SYSTST),A
DCDB: CD4FDA  		CALL	SEARF		;SEARCH FOR SPECIFIED FILE (FIRST OCCURRANCE)
DCDE: CC5AD9  		CALL	Z,PRNNF		;PRINT NO FILE MSG;REG A NOT CHANGED
              	;
              	; ENTRY SELECTION LOOP; ON ENTRY, A=OFFSET FROM SEARF OR SEARN
              	;
DCE1:         	DIR3:
DCE1: 2867    		JR	Z,DIR11		;DONE IF ZERO FLAG SET
DCE3: 3D      		DEC	A		;ADJUST TO RETURNED VALUE
DCE4: 0F      		RRCA			;CONVERT NUMBER TO OFFSET INTO TBUFF
DCE5: 0F      		RRCA
DCE6: 0F      		RRCA
DCE7: E660    		AND	60H
DCE9: 4F      		LD	C,A		;OFFSET INTO TBUFF IN C (C=OFFSET TO ENTRY)
DCEA: 3E0A    		LD	A,10		;ADD 10 TO PT TO SYSTEM FILE ATTRIBUTE BIT
DCEC: CDDBDB  		CALL	DIRPTR
DCEF: D1      		POP	DE		;GET SYSTEM BIT MASK FROM D
DCF0: D5      		PUSH	DE
DCF1: A2      		AND	D		;MASK FOR SYSTEM BIT
DCF3:         	SYSTST	EQU	$+1		;POINTER TO IN-THE-CODE BUFFER SYSTST
DCF2: FE00    		CP	0
DCF4: 204A    		JR	NZ,DIR10
DCF6: D1      		POP	DE		;GET ENTRY COUNT (=<CR> COUNTER)
DCF7: 7B      		LD	A,E		;ADD 1 TO IT
DCF8: 1C      		INC	E
DCF9: D5      		PUSH	DE		;SAVE IT
              	;
              		IF	TWOCOL
              		AND	01H		;OUTPUT <CRLF> IF 2 ENTRIES PRINTED IN LINE
              		ENDIF			;TWOCOL
              	;
              		IF	TWOCOL
              	        ELSE
DCFB:         	TWOPOK	EQU	$+1		;FOR APPLE PATCHING
DCFA: E603    		AND	03H		;OUTPUT <CRLF> IF 4 ENTRIES PRINTED IN LINE
              		ENDIF			;NOT TWOCOL
              	;
DCFC: F5      		PUSH	AF
DCFD: 2005    		JR	NZ,DIR4
DCFF: CDA7D9  		CALL	CRLF		;NEW LINE
DD02: 1808    		JR	DIR5
DD04:         	DIR4:
DD04: CD15DA  		CALL	PRINT
              	;
              		IF	WIDE
DD07: 2020    		DEFM	'  '		;2 SPACES
DD09: 7C      		DEFB	FENCE		;THEN FENCE CHAR
DD0A: 20A0    		DEFB	' ',' '+80H	;THEN 2 MORE SPACES
              	;	ENDIF
              	;
              	        ELSE
              		DEFB	' '		;SPACE
              		DEFB	FENCE		;THEN FENCE CHAR
              		DEFB	' '+80H		;THEN SPACE
              		ENDIF
              	;
DD0C:         	DIR5:
DD0C: 0601    		LD	B,01H		;PT TO 1ST BYTE OF FILE NAME
DD0E:         	DIR6:
DD0E: 78      		LD	A,B		;A=OFFSET
DD0F: CDDBDB  		CALL	DIRPTR		;HL NOW PTS TO 1ST BYTE OF FILE NAME
DD12: E67F    		AND	7FH		;MASK OUT MSB
DD14: FE20    		CP	' '		;NO FILE NAME?
DD16: 2013    		JR	NZ,DIR8		;PRINT FILE NAME IF PRESENT
DD18: F1      		POP	AF
DD19: F5      		PUSH	AF
DD1A: FE03    		CP	03H
DD1C: 200B    		JR	NZ,DIR7
DD1E: 3E09    		LD	A,09H		;PT TO 1ST BYTE OF FILE TYPE
DD20: CDDBDB  		CALL	DIRPTR		;HL NOW PTS TO 1ST BYTE OF FILE TYPE
DD23: E67F    		AND	7FH		;MASK OUT MSB
DD25: FE20    		CP	' '		;NO FILE TYPE?
DD27: 2816    		JR	Z,DIR9		;CONTINUE IF SO
DD29:         	DIR7:
DD29: 3E20    		LD	A,' '		;OUTPUT <SP>
DD2B:         	DIR8:
DD2B: CDAED9  		CALL	CONOUT		;PRINT CHAR
DD2E: 04      		INC	B		;INCR CHAR COUNT
DD2F: 78      		LD	A,B
DD30: FE0C    		CP	12		;END OF FILENAME.TYP?
DD32: 300B    		JR	NC,DIR9		;CONTINUE IF SO
DD34: FE09    		CP	09H		;END IF FILENAME ONLY?
DD36: 20D6    		JR	NZ,DIR6		;PRINT TYP IF SO
DD38: 3E2E    		LD	A,'.'		;PRINT DOT BETWEEN FILE NAME AND TYPE
DD3A: CDAED9  		CALL	CONOUT
DD3D: 18CF    		JR	DIR6
DD3F:         	DIR9:
DD3F: F1      		POP	AF
DD40:         	DIR10:
DD40: CD00DB  		CALL	BREAK		;CHECK FOR ABORT
DD43: 2005    		JR	NZ,DIR11
DD45: CD56DA  		CALL	SEARN		;SEARCH FOR NEXT FILE
DD48: 1897    		JR	DIR3		;CONTINUE
DD4A:         	DIR11:
DD4A: D1      		POP	DE		;RESTORE STACK
DD4B: C9      		RET
              	;
              	; FILL FCB @HL WITH '?'
              	;
DD4C:         	FILLQ:
DD4C: 060B    		LD	B,11		;NUMBER OF CHARS IN FN & FT
DD4E:         	FQLP:
DD4E: 363F    		LD	(HL),'?'	;STORE '?'
DD50: 23      		INC	HL
DD51: 10FB    		DJNZ	FQLP
DD53: C9      		RET
              	;
              	;Section 5B
              	;Command: ERA
              	;Function:  Erase files
              	;Forms:
              	;	ERA <afn>	Erase Specified files and print their names
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DD54:         	ERA:
DD54: CD02DC  		CALL	SCANER		;PARSE FILE SPECIFICATION
DD57: FE0B    		CP	11		;ALL WILD (ALL FILES = 11 '?')?
DD59: 2012    		JR	NZ,ERA1		;IF NOT, THEN DO ERASES
DD5B: CD10DA  		CALL	PRINTC
DD5E: 416C6C  		DEFM	'All'
DD61: BF      		DEFB	'?'+80H
DD62: CDBBD9  		CALL	CONIN		;GET REPLY
DD65: FE59    		CP	'Y'		;YES?
DD67:         	ERARJ:
DD67: C2F8D8  		JP	NZ,RESTRT	;RESTART CPR IF NOT
DD6A: CDA7D9  		CALL	CRLF		;NEW LINE
DD6D:         	ERA1:
DD6D: CDE4DB  		CALL	SLOGIN		;LOG IN SELECTED DISK IF ANY
DD70: AF      		XOR	A		;PRINT ALL FILES (EXAMINE SYSTEM BIT)
DD71: 47      		LD	B,A		;NO SYS-ONLY OPT TO DIRPR
DD72: CDD3DC  		CALL	DIRPR		;PRINT DIRECTORY OF ERASED FILES
              	;
              		IF	EPRMPT
              	;
              	;  QUERY USER AFTER FILES ARE SEEN, AND GIVE ONE LAST CHANCE TO BACK OUT
              	;
              		LD	A,E		;HOW MANY FILES DISPLAYED?
              		OR	A
              		JP	Z,RESTRT	;IF NONE, DON'T ASK OR DELETE
              		CALL	PRINTC		;PROMPT
              		DEFM	'Ok'
              		DEFB	'?'+80H
              		CALL	CONIN		;GET REPLY FOLDED
              		CP	'Y'		;YES?
              		JR	NZ,ERARJ	;GET OUT IF NOT
              		ENDIF			;EPRMPT
              	;
DD75: 119BD8  		LD	DE,FCBDN 	;DELETE FILE(S) SPECIFIED
DD78: C365DA  		JP	DELETE		;RESTART CPR AFTER DELETE
              	;
              		ENDIF			;RAS
              	;
              	;Section 5C
              	;Command: LIST
              	;Function:  Print out specified file on the LST: Device
              	;Forms:
              	;	LIST <ufn>	Print file (NO Paging)
              	;
              		IF	CPRLST
DD7B:         	LIST:
DD7B: 3EFF    		LD	A,0FFH		;TURN ON PRINTER FLAG
DD7D: 1801    		JR	TYPE0
              		ENDIF			;CPRLST
              	;
              	;Section 5D
              	;Command: TYPE
              	;Function:  Print out specified file on the CON: Device
              	;Forms:
              	;	TYPE <ufn>	Print file
              	;	TYPE <ufn> P	Print file with paging flag	
              	;
              		IF	CPRTYP
DD7F:         	TYPE:
              		ENDIF			;CPRTYP
              	;
              		IF	CPRTYP AND CPRLST
DD7F: AF      		XOR	A		;TURN OFF PRINTER FLAG
              	;
              	; ENTRY POINT FOR CPR LIST FUNCTION (LIST)
              	;
DD80:         	TYPE0:
DD80: 32D8D9  		LD	(PRFLG),A	;SET FLAG
              		ENDIF			;CPRTYP AND CPRLST
              	;
              		IF	CPRTYP
DD83: CD02DC  		CALL	SCANER		;EXTRACT FILENAME.TYP TOKEN
DD86: C211DB  		JP	NZ,ERROR	;ERROR IF ANY QUESTION MARKS
DD89: CD4BDB  		CALL	ADVAN		;GET PGDFLG IF IT'S THERE
DD8C: 32F5D9  		LD	(PGFLG),A	;SAVE IT AS A FLAG
DD8F: 2805    		JR	Z,NOSLAS	;JUMP IF INPUT ENDED
DD91: 13      		INC	DE		;PUT NEW BUF POINTER
DD92: EB      		EX	DE,HL
DD93: 2259D8  		LD	(CIBPTR),HL
DD96:         	NOSLAS:
DD96: CDE4DB  		CALL	SLOGIN		;LOG IN SELECTED DISK IF ANY
DD99: CD3DDA  		CALL	OPENF		;OPEN SELECTED FILE
DD9C: CA09DE  		JP	Z,TYPE4		;ABORT IF ERROR
DD9F: CDA7D9  		CALL	CRLF		;NEW LINE
DDA2: 3E17    		LD	A,NLINES-1	;SET LINE COUNT
DDA4: 32BCD8  		LD	(PAGCNT),A
DDA7: 21BDD8  		LD	HL,CHRCNT	;SET CHAR POSITION/COUNT
DDAA: 36FF    		LD	(HL),0FFH	;EMPTY LINE
DDAC: 0600    		LD	B,0		;SET TAB CHAR COUNTER
DDAE:         	TYPE1:
DDAE: 21BDD8  		LD	HL,CHRCNT	;PT TO CHAR POSITION/COUNT
DDB1: 7E      		LD	A,(HL)		;END OF BUFFER?
DDB2: FE80    		CP	80H
DDB4: 3809    		JR	C,TYPE2
DDB6: E5      		PUSH	HL		;READ NEXT BLOCK
DDB7: CD04DA  		CALL	READF
DDBA: E1      		POP	HL
DDBB: 204A    		JR	NZ,TYPE3	;ERROR?
DDBD: AF      		XOR	A		;RESET COUNT
DDBE: 77      		LD	(HL),A
DDBF:         	TYPE2:
DDBF: 34      		INC	(HL)		;INCREMENT CHAR COUNT
DDC0: 218000  		LD	HL,TBUFF 	;PT TO BUFFER
DDC3: CD58DB  		CALL	ADDAH		;COMPUTE ADDRESS OF NEXT CHAR FROM OFFSET
DDC6: 7E      		LD	A,(HL)		;GET NEXT CHAR
DDC7: E67F    		AND	7FH		;MASK OUT MSB
DDC9: FE1A    		CP	1AH		;END OF FILE (^Z)?
DDCB: C8      		RET	Z		;RESTART CPR IF SO
              	;
              	; OUTPUT CHAR TO CON: OR LST: DEVICE WITH TABULATION
              	;
              		IF	WSTYPE		;WORDSTAR HYPHEN CHECK
DDCC: FE1F    		CP	1FH		;IS CHAR WORDSTAR EOL HYPHEN?
DDCE: 2002    		JR	NZ,NOHYPH	;PASS IF NOT
DDD0: 3E2D    		LD	A,'-'		;YES, MAKE IT A REAL HYPHEN
DDD2:         	NOHYPH:
              		ENDIF			;WSTYPE
              	;
DDD2: FE20    		CP	' '		;IS CHAR CONTROL CODE?
DDD4: 3023    		JR	NC,PRT		;GO BOP CHAR COUNT AND PRINT IF NOT
DDD6: FE0D    		CP	CR		;IS CHAR A CR?
DDD8: 281D    		JR	Z,YESCR		;IF SO, GO ZERO B THEN PRINT
DDDA: FE0C    		CP	FFEED		;FORM FEED?
DDDC: 2819    		JR	Z,YESCR		;MANY PRINTERS RETURN CARRIAGE ON THIS
DDDE: FE0A    		CP	LF		;LINE FEED?
DDE0: 2818    		JR	Z,NOBOP		;PRINT, BUT DON'T BOP B
DDE2: FE07    		CP	BEL		;BELL?
DDE4: 2814    		JR	Z,NOBOP		;GO RING BUT DON'T BOP B
DDE6: FE09    		CP	TAB		;TAB?
DDE8: 2013    		JR	NZ,TYPE2L	;IF NOT, NO OTHER CHOICES, TOSS CONTROL
DDEA:         	LTAB:
DDEA: 3E20    		LD	A,' '		;<SP>
DDEC: CDD6D9  		CALL	LCOUT
DDEF: 04      		INC	B		;INCR POS COUNT
DDF0: 78      		LD	A,B
DDF1: E607    		AND	7
DDF3: 20F5    		JR	NZ,LTAB
DDF5: 1806    		JR	TYPE2L
              	;
DDF7: 06FF    	YESCR:	LD	B,0FFH		;COMBINE WITH INC BELOW TO GET ZERO
              	;
DDF9: 04      	PRT:	INC	B		;INCREMENT CHAR COUNT
DDFA: CDD6D9  	NOBOP:	CALL	LCOUT		;PRINT IT
              	;
              	; CONTINUE PROCESSING
              	;
              	;
DDFD:         	TYPE2L:
DDFD: CD00DB  		CALL	BREAK		;CHECK FOR ABORT
DE00: 28AC    		JR	Z,TYPE1		;CONTINUE IF NO CHAR
DE02: FE03    		CP	'C'-'@' 	;^C?
DE04: C8      		RET	Z		;RESTART IF SO
DE05: 18A7    		JR	TYPE1
DE07:         	TYPE3:
DE07: 3D      		DEC	A		;NO ERROR?
DE08: C8      		RET	Z		;RESTART CPR
DE09:         	TYPE4:
DE09: C3F6DF  		JP	ERRLOG
              		ENDIF			;CPRTYP
              	;
              	;Section 5E
              	;Command: SAVE
              	;Function:  To save the contents of the TPA onto disk as a file
              	;Forms:
              	;	SAVE <Number of Pages> <ufn>
              	;				Save specified number of pages (start at 100H)
              	;				from TPA into specified file; <Number of
              	;				Pages> is in DEC
              	;	SAVE <Number of Sectors> <ufn> S
              	;				Like SAVE above, but numeric argument specifies
              	;				number of sectors rather than pages
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DE0C:         	SAVE:
DE0C: CD5DDB  		CALL	NUMBER		;EXTRACT NUMBER FROM COMMAND LINE
DE0F: 6F      		LD	L,A		;HL=PAGE COUNT
DE10: 2600    		LD	H,0
DE12: E5      		PUSH	HL		;SAVE PAGE COUNT
DE13: CD62DE  		CALL	EXTEST		;TEST FOR EXISTENCE OF FILE AND ABORT IF SO
DE16: 0E16    		LD	C,16H		;BDOS MAKE FILE
DE18: CD46DA  		CALL	GRBDOS
DE1B: E1      		POP	HL		;GET PAGE COUNT
DE1C: 2841    		JR	Z,SAVE3		;ERROR?
DE1E: AF      		XOR	A		;SET RECORD COUNT FIELD OF NEW FILE'S FCB
DE1F: 32BBD8  		LD	(FCBCR),A
DE22: CD4BDB  		CALL	ADVAN		;LOOK FOR 'S' FOR SECTOR OPTION
DE25: 13      		INC	DE		;PT TO AFTER 'S' TOKEN
DE26: FE53    		CP	SECTFLG
DE28: 2802    		JR	Z,SAVE0
DE2A: 1B      		DEC	DE		;NO 'S' TOKEN, SO BACK UP
DE2B: 29      		ADD	HL,HL		;DOUBLE IT FOR HL=SECTOR (128 BYTES) COUNT
DE2C:         	SAVE0:
DE2C: ED5359D8		LD	(CIBPTR),DE	;SET PTR TO BAD TOKEN OR AFTER GOOD TOKEN
DE30: 110001  		LD	DE,TPA		;PT TO START OF SAVE AREA (TPA)
DE33:         	SAVE1:
DE33: 7C      		LD	A,H		;DONE WITH SAVE?
DE34: B5      		OR	L		;HL=0 IF SO
DE35: 2818    		JR	Z,SAVE2
DE37: 2B      		DEC	HL		;COUNT DOWN ON SECTORS
DE38: E5      		PUSH	HL		;SAVE PTR TO BLOCK TO SAVE
DE39: 218000  		LD	HL,128		;128 BYTES PER SECTOR
DE3C: 19      		ADD	HL,DE		;PT TO NEXT SECTOR
DE3D: E5      		PUSH	HL		;SAVE ON STACK
DE3E: CD2FDA  		CALL	DMASET		;SET DMA ADDRESS FOR WRITE (ADDRESS IN DE)
DE41: 119BD8  		LD	DE,FCBDN 	;WRITE SECTOR
DE44: 0E15    		LD	C,15H		;BDOS WRITE SECTOR
DE46: CD09DA  		CALL	BDOSB		;SAVE BC
DE49: D1      		POP	DE		;GET PTR TO NEXT SECTOR IN DE
DE4A: E1      		POP	HL		;GET SECTOR COUNT
DE4B: 28E6    		JR	Z,SAVE1		;CONTINUE IF NO WRITE ERROR
DE4D: 1809    		JR	PRNLE		;GO PRINT ERROR AND RESET DMA
DE4F:         	SAVE2:
DE4F: 119BD8  		LD	DE,FCBDN 	;CLOSE SAVED FILE
DE52: CD4BDA  		CALL	CLOSE
DE55: 3C      		INC	A		;ERROR?
DE56: 2007    		JR	NZ,SAVE3	;PASS IF OK
              	;
              	;  PRNLE IS ALSO USED BY MEMLOAD FOR TPA FULL ERROR
              	;
DE58: CD10DA  	PRNLE:	CALL	PRINTC		;DISK OR MEM FULL
DE5B: 46756C  		DEFM	'Ful'
DE5E: EC      		DEFB	'l'+80H
              	;
DE5F: C32CDA  	SAVE3:	JP	DEFDMA		;SET DMA TO 0080 AND RESTART CPR
              					; OR RETURN TO MLERR
              	;
              	; Test File in FCB for existence, ask user to delete if so, and abort if he
              	;  choses not to
              	;
DE62:         	EXTEST:
DE62: CD02DC  		CALL	SCANER		;EXTRACT FILE NAME
DE65: C211DB  		JP	NZ,ERROR	;'?' IS NOT PERMITTED
DE68: CDE4DB  		CALL	SLOGIN		;LOG IN SELECTED DISK
DE6B: CD4FDA  		CALL	SEARF		;LOOK FOR SPECIFIED FILE
DE6E: 119BD8  		LD	DE,FCBDN	;PT TO FILE FCB
DE71: C8      		RET	Z		;OK IF NOT FOUND
DE72: D5      		PUSH	DE		;SAVE PTR TO FCB
DE73: CD10DA  		CALL	PRINTC
DE76: 44656C65		DEFM	'Delete File'
DE7A: 74652046	
DE7E: 696C65  	
DE81: BF      		DEFB	'?'+80H
DE82: CDBBD9  		CALL	CONIN		;GET RESPONSE
DE85: D1      		POP	DE		;GET PTR TO FCB
DE86: FE59    		CP	'Y'		;KEY ON YES
DE88: C246D9  		JP	NZ,RSTCPR	;RESTART IF NO, SP RESET EVENTUALLY
DE8B: D5      		PUSH	DE		;SAVE PTR TO FCB
DE8C: CD65DA  		CALL	DELETE		;DELETE FILE
DE8F: D1      		POP	DE		;GET PTR TO FCB
DE90: C9      		RET
              	;
              		ENDIF			;RAS
              	;
              	;Section 5F
              	;Command: REN
              	;Function:  To change the name of an existing file
              	;Forms:
              	;	REN <New ufn>=<Old ufn>	Perform function
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DE91:         	REN:
DE91: CD62DE  		CALL	EXTEST		;TEST FOR FILE EXISTENCE AND RETURN
              					; IF FILE DOESN'T EXIST; ABORT IF IT DOES
DE94: 3AF9DB  		LD	A,(TEMPDR)	;SAVE CURRENT DEFAULT DISK
DE97: F5      		PUSH	AF		;SAVE ON STACK
DE98:         	REN0:
DE98: 219BD8  		LD	HL,FCBDN 	;SAVE NEW FILE NAME
DE9B: 11ABD8  		LD	DE,FCBDM
DE9E: 011000  		LD	BC,16		;16 BYTES
DEA1: EDB0    		LDIR
DEA3: CD4BDB  		CALL	ADVAN		;ADVANCE CIBPTR
DEA6: FE3D    		CP	'='		;'=' OK
DEA8: 2028    		JR	NZ,REN4
DEAA:         	REN1:
DEAA: EB      		EX	DE,HL		;PT TO CHAR AFTER '=' IN HL
DEAB: 23      		INC	HL
DEAC: 2259D8  		LD	(CIBPTR),HL	;SAVE PTR TO OLD FILE NAME
DEAF: CD02DC  		CALL	SCANER		;EXTRACT FILENAME.TYP TOKEN
DEB2: 201E    		JR	NZ,REN4		;ERROR IF ANY '?'
DEB4: F1      		POP	AF		;GET OLD DEFAULT DRIVE
DEB5: 47      		LD	B,A		;SAVE IT
DEB6: 21F9DB  		LD	HL,TEMPDR	;COMPARE IT AGAINST CURRENT DEFAULT DRIVE
DEB9: 7E      		LD	A,(HL)		;MATCH?
DEBA: B7      		OR	A
DEBB: 2804    		JR	Z,REN2
DEBD: B8      		CP	B		;CHECK FOR DRIVE ERROR
DEBE: 70      		LD	(HL),B
DEBF: 2011    		JR	NZ,REN4
DEC1:         	REN2:
DEC1: 70      		LD	(HL),B
DEC2: AF      		XOR	A
DEC3: 329BD8  		LD	(FCBDN),A	;SET DEFAULT DRIVE
DEC6: 119BD8  		LD	DE,FCBDN 	;RENAME FILE
DEC9: 0E17    		LD	C,17H		;BDOS RENAME FCT
DECB: CD46DA  		CALL	GRBDOS
DECE: C0      		RET	NZ
DECF:         	REN3:
DECF: CD5AD9  		CALL	PRNNF		;PRINT NO FILE MSG
DED2:         	REN4:
DED2: C3F6DF  		JP	ERRLOG
              	;
              		ENDIF			;RAS
              	;
              	;Section 5G
              	;Command: USER
              	;Function:  Change current USER number
              	;Forms:
              	;	USER <unum>	Select specified user number;<unum> is in DEC
              	;
              		IF	DRUSER		;IF DRIVE/USER CODE OK...
DED5:         	USER:
DED5: CD0BDB  		CALL	USRNUM		;EXTRACT USER NUMBER FROM COMMAND LINE
DED8: 5F      		LD	E,A		;PLACE USER NUMBER IN E
DED9: CD70DA  	SUSER:	CALL	SETUSR		;SET SPECIFIED USER
              		ENDIF			;DRUSER
DEDC:         	RSTJP:
DEDC: C349D9  		JP	RCPRNL		;RESTART CPR
              	;
              	;Section 5H
              	;Command: DFU
              	;Function:  Set the Default User Number for the command/file scanner
              	;	     (MEMLOAD)
              	;	    Note: When under SECURE mode, this will select the second
              	;	          user area to check for programs (normally user 15).
              	;
              	;Forms:
              	;	DFU <unum>	Select Default User Number;<unum> is in DEC
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
DEDF:         	DFU:
DEDF: CD0BDB  		CALL	USRNUM		;GET USER NUMBER
DEE2: 32B3DF  		LD	(DFUSR),A	;PUT IT AWAY
DEE5: 18F5    		JR	RSTJP		;RESTART CPR (NO DEFAULT LOGIN)
              		ENDIF			;NOT RAS
              	;
              	;Section 5I
              	;Command: JUMP
              	;Function:  To Call the program (subroutine) at the specified address
              	;	     without loading from disk
              	;Forms:
              	;	JUMP <adr>		Call at <adr>;<adr> is in HEX
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DEE7:         	JUMP:
DEE7: CD9BDB  		CALL	HEXNUM		;GET LOAD ADDRESS IN HL
DEEA: 1846    		JR	CALLPROG	;PERFORM CALL
              	;
              		ENDIF			;RAS
              	;
              	;Section 5J
              	;Command: GO
              	;Function:  To Call the program in the TPA without loading
              	;	     loading from disk. Same as JUMP 100H, but much
              	;	     more convenient, especially when used with
              	;	     parameters for programs like STAT. Also can be
              	;	     allowed on remote-access systems with no problems.
              	;
              	;Form:
              	;	GO <parameters like for COMMAND>
              	;
              		IF	RAS		;ONLY IF RAS
              	        ELSE
              	;
DEEC: 210001  	GO:	LD	HL,TPA		;Always to TPA
DEEF: 1841    		JR	CALLPROG	;Perform call
              	;
              		ENDIF			;END OF GO FOR RAS
              	;
              	;Section 5K
              	;Command: COM file processing
              	;Function:  To load the specified COM file from disk and execute it
              	;Forms:
              	;	<command>
              	;
DEF1:         	COM:
DEF1: 3A9CD8  		LD	A,(FCBFN)	;ANY COMMAND?
DEF4: FE20    		CP	' '		;' ' MEANS COMMAND WAS 'D:' TO SWITCH
DEF6: 201F    		JR	NZ,COM1		;NOT <SP>, SO MUST BE TRANSIENT OR ERROR
DEF8: 3AF9DB  		LD	A,(TEMPDR)	;LOOK FOR DRIVE SPEC
DEFB: B7      		OR	A		;IF ZERO, JUST BLANK
DEFC: CA49D9  		JP	Z,RCPRNL
DEFF: 3D      		DEC	A		;ADJUST FOR LOG IN
DF00: 3284DA  		LD	(TDRIVE),A	;SET DEFAULT DRIVE
DF03: CD83DA  		CALL	SETU0D		;SET DRIVE WITH USER 0
DF06: CD38DA  		CALL	LOGIN		;LOG IN DRIVE
              	;
              		IF	DRUSER		;DRIVE/USER HACKERY OK?
DF09: CD0BDB  		CALL	USRNUM		;GET USER #, IF ANY
DF0C: 5F      		LD	E,A		;GET IT READY FOR BDOS
DF0D: 3A9CD8  		LD	A,(FCBFN)	;SEE IF # SPECIFIED
DF10: FE20    		CP	' '
DF12: 20C5    		JR	NZ,SUSER	;SELECT IF WANTED
              		ENDIF			;DRUSER
              	;
DF14: C349D9  		JP	RCPRNL		;RESTART CPR
DF17:         	COM1:
DF17: 3AA4D8  		LD	A,(FCBFT)	;FILE TYPE MUST BE BLANK
DF1A: FE20    		CP	' '
DF1C: C211DB  		JP	NZ,ERROR
DF1F: 2177D8  		LD	HL,COMMSG	;PLACE DEFAULT FILE TYPE (COM) INTO FCB
DF22: 11A4D8  		LD	DE,FCBFT	;COPY INTO FILE TYPE
DF25: 010300  		LD	BC,3		;3 BYTES
DF28: EDB0    		LDIR
DF2A: 210001  		LD	HL,TPA		;SET EXECUTION/LOAD ADDRESS
DF2D: E5      		PUSH	HL		;SAVE FOR EXECUTION
DF2E: CD9EDF  		CALL	MEMLOAD		;LOAD MEMORY WITH FILE SPECIFIED IN CMD LINE
              					; (NO RETURN IF ERROR OR TOO BIG)
DF31: E1      		POP	HL		;GET EXECUTION ADDRESS
              	;
              	; CALLPROG IS THE ENTRY POINT FOR THE EXECUTION OF THE LOADED
              	;   PROGRAM. ON ENTRY TO THIS ROUTINE, HL MUST CONTAIN THE EXECUTION
              	;   ADDRESS OF THE PROGRAM (SUBROUTINE) TO EXECUTE
              	;
DF32:         	CALLPROG:
DF32: 2285DF  		LD	(EXECADR),HL	;PERFORM IN-LINE CODE MODIFICATION
DF35: CDEEDB  		CALL	DLOGIN		;LOG IN DEFAULT DRIVE
DF38: CD02DC  		CALL	SCANER		;SEARCH COMMAND LINE FOR NEXT TOKEN
DF3B: 21F9DB  		LD	HL,TEMPDR	;SAVE PTR TO DRIVE SPEC
DF3E: E5      		PUSH	HL
DF3F: 7E      		LD	A,(HL)		;SET DRIVE SPEC
DF40: 329BD8  		LD	(FCBDN),A
DF43: 21ABD8  		LD	HL,FCBDN+10H	;PT TO 2ND FILE NAME
DF46: CD05DC  		CALL	SCANX		;SCAN FOR IT AND LOAD IT INTO FCBDN+16
DF49: E1      		POP	HL		;SET UP DRIVE SPECS
DF4A: 7E      		LD	A,(HL)
DF4B: 32ABD8  		LD	(FCBDM),A
DF4E: AF      		XOR	A
DF4F: 32BBD8  		LD	(FCBCR),A
DF52: 115C00  		LD	DE,TFCB		;COPY TO DEFAULT FCB
DF55: 219BD8  		LD	HL,FCBDN 	;FROM FCBDN
DF58: 012100  		LD	BC,33		;SET UP DEFAULT FCB
DF5B: EDB0    		LDIR
DF5D: 2107D8  		LD	HL,CIBUFF-1
DF60:         	COM4:
DF60: 23      		INC	HL
DF61: 7E      		LD	A,(HL)		;SKIP TO END OF 2ND FILE NAME
DF62: B7      		OR	A		;END OF LINE?
DF63: 2804    		JR	Z,COM5
DF65: FE20    		CP	' '		;END OF TOKEN?
DF67: 20F7    		JR	NZ,COM4
              	;
              	; LOAD COMMAND LINE INTO TBUFF
              	;
DF69:         	COM5:
DF69: 06FF    		LD	B,-1		;SET CHAR COUNT
DF6B: 118000  		LD	DE,TBUFF	;PT TO CHAR POS
DF6E: 2B      		DEC	HL
DF6F:         	COM6:
DF6F: 04      		INC	B		;INCR CHAR COUNT
DF70: 23      		INC	HL		;PT TO NEXT
DF71: 13      		INC	DE
DF72: 7E      		LD	A,(HL)		;COPY COMMAND LINE TO TBUFF
DF73: 12      		LD	(DE),A
DF74: B7      		OR	A		;DONE IF ZERO
DF75: 20F8    		JR	NZ,COM6
              	;
              	; RUN LOADED TRANSIENT PROGRAM
              	;
DF77:         	COM7:
DF77: 78      		LD	A,B		;SAVE CHAR COUNT
DF78: 328000  		LD	(TBUFF),A
DF7B: CDA7D9  		CALL	CRLF		;NEW LINE
DF7E: CD2CDA  		CALL	DEFDMA		;SET DMA TO 0080
DF81: CD74DA  		CALL	SETUD		;SET USER/DISK
              	;
              	; EXECUTION (CALL) OF PROGRAM (SUBROUTINE) OCCURS HERE
              	;
DF85:         	EXECADR	EQU	$+1		;CHANGE ADDRESS FOR IN-LINE CODE MODIFICATION
DF84: CD0001  		CALL	TPA		;CALL TRANSIENT
DF87: CD2CDA  		CALL	DEFDMA		;SET DMA TO 0080, IN CASE
              					;PROG CHANGED IT ON US
DF8A: CD83DA  		CALL	SETU0D		;SET USER 0/DISK
DF8D: CD38DA  		CALL	LOGIN		;LOGIN DISK
DF90: C3F8D8  		JP	RESTRT		;RESTART CPR
              	;
              	;Section 5L
              	;Command: GET
              	;Function:  To load the specified file from disk to the specified address
              	;Forms:
              	;	GET <adr> <ufn>	Load the specified file at the specified page;
              	;			<adr> is in HEX
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DF93:         	GET:
DF93: CD9BDB  		CALL	HEXNUM		;GET LOAD ADDRESS IN HL
DF96: E5      		PUSH	HL		;SAVE ADDRESS
DF97: CD02DC  		CALL	SCANER		;GET FILE NAME
DF9A: E1      		POP	HL		;RESTORE ADDRESS
DF9B: C211DB  		JP	NZ,ERROR	;MUST BE UNAMBIGUOUS
              	;
              	; FALL THRU TO MEMLOAD
              	;
              		ENDIF			;RAS
              	;
              	; LOAD MEMORY WITH THE FILE WHOSE NAME IS SPECIFIED IN THE COMMAND LINE
              	;   ON INPUT, HL CONTAINS STARTING ADDRESS TO LOAD
              	;
              	;  EXIT BACK TO CALLER IF NO ERROR.  IF COM FILE TOO BIG OR
              	; OTHER ERROR, EXIT DIRECTLY TO MLERR.
              	;
DF9E:         	MEMLOAD:
DF9E: 22D1DF  		LD	(LOADADR),HL	;SET LOAD ADDRESS
DFA1: CD6EDA  		CALL	GETUSR		;GET CURRENT USER NUMBER
DFA4: 326ADA  		LD	(TMPUSR),A	;SAVE IT FOR LATER
DFA7: 32B5DF  		LD	(TSELUSR),A	;TEMP USER TO SELECT
              	;
              	;   MLA is a reentry point for a non-standard CP/M Modification
              	; This is the return point for when the .COM (or GET) file is not found the
              	; first time, Drive A: is selected for a second attempt
              	;
DFAA:         	MLA:
DFAA: CDE4DB  		CALL	SLOGIN		;LOG IN SPECIFIED DRIVE IF ANY
DFAD: CD3DDA  		CALL	OPENF		;OPEN COMMAND.COM FILE
DFB0: 201E    		JR	NZ,MLA1		;FILE FOUND - LOAD IT
              	;
              		IF	SECURE
              	;
              	;  IF SECURE ENABLED, SEARCH CURRENT DRIVE, CURRENT USER, THEN
              	; IF IN WHEEL MODE, SEARCH UNDER LAST USER SET BY DFU (ORIG
              	; "RESUSR" AFTER WARM BOOT) ON CURRENT DRIVE. IF NOT FOUND, OR
              	; NOT IN WHEEL MODE, THEN SEARCH ON CURRENT DRIVE, UNDER USER
              	; "DEFUSR". IF STILL NOT FOUND, LOOK AT SAME SERIES OF USERS
              	; ON DRIVE A.
              	;
              	DFLAG	EQU	$+1		;MARK IN-THE-CODE VARIABLE
              		LD	A,0		;HAVE WE CHECKED THIS DRIVE ALREADY?
              		OR	A
              		JR	NZ,MLA0		;PASS IF SO TO GO TO DRIVE A:
              		LD	A,(WHEEL)	;RESTRICTED PROGS ALLOWED?
              		CP	RESTRCT
              		JR	Z,MLA00		;PASS IF NOT
              		PUSH	BC		;PUSH BC
              		LD	A,(DFUSR)	;LOAD DEFAULT USER
              		LD	B,A		;PUT IT IN B
              		LD	A,(TSELUSR)	;CHECK CURR USER
              	DFUSR	EQU	$+1		;DEFAULT USER LOCATION
              		CP	RESUSR		;RESTRICTED USER?
              		LD	A,B		;ASSUME NOT
              		POP	BC		;RESTORE BC
              		JR	NZ,SETTSE	;GO TRY IF NOT
              	MLA00:				;SS IF NOT
              	TSELUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
              		LD	A,0		;GET CURR USER
              		SUB	DEFUSR		;IS IT UNRESTRICTED COM AREA?
              		JR	Z,MLA0		;NO MORE CHOICES IF SO
              		LD	(DFLAG),A	;MAKE DFLAG NON-ZERO IF NOT
              		LD	A,DEFUSR	; AND TRY UNRESTRICTED COM AREA
              		ENDIF			;SECURE
              	;
              		IF	SECURE
              	        ELSE
DFB3:         	DFUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
DFB2: 3E00    		LD	A,DEFUSR	;GET DEFAULT USER
DFB5:         	TSELUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
DFB4: FE00    		CP	DEFUSR		;CHECK FOR THE USER AREA..
DFB6: 2809    		JR	Z,MLA0		;..EQUAL DEFAULT, AND JUMP IF SO
              		ENDIF			;NOT SECURE
              	;
DFB8:         	SETTSE:
DFB8: 32B5DF  		LD	(TSELUSR),A	;PUT DOWN NEW ONE
DFBB: 5F      		LD	E,A
DFBC: CD70DA  		CALL	SETUSR		;GO SET NEW USER NUMBER
DFBF: 18E9    		JR	MLA		;AND TRY AGAIN
              	;
              	; ERROR ROUTINE TO SELECT DRIVE A: IF DEFAULT WAS ORIGINALLY SELECTED
              	;
DFC1:         	MLA0:
DFC1: 21F9DB  		LD	HL,TEMPDR	;GET DRIVE FROM CURRENT COMMAND
DFC4: AF      		XOR	A		;A=0
              	;
              		IF	SECURE
              		LD	(DFLAG),A	;ALLOW A: SEARCH
              		ENDIF			;SECURE
              	;
DFC5: B6      		OR	(HL)
DFC6: C2F3DF  		JP	NZ,MLERR	;ERROR IF ALREADY DISK A:
DFC9: 3601    		LD	(HL),1		;SELECT DRIVE A:
DFCB: 3A6ADA  		LD	A,(TMPUSR)	;GO TO 'CURRENT' USER CODE
DFCE: 18E8    		JR	SETTSE
              	;
              	; FILE FOUND -- PROCEED WITH LOAD
              	;
DFD0:         	MLA1:
DFD1:         	LOADADR	EQU	$+1
DFD0: 210001  		LD	HL,TPA
DFD3:         	ML2:
DFD3: 3ED7    		LD	A,ENTRY/256-1	;GET HIGH-ORDER ADR OF JUST BELOW CPR
DFD5: BC      		CP	H		;ARE WE GOING TO OVERWRITE THE CPR?
DFD6: 3818    		JR	C,ML4		;ERROR IF SO
DFD8: E5      		PUSH	HL		;SAVE ADDRESS OF NEXT SECTOR
DFD9: EB      		EX	DE,HL		;... IN DE
DFDA: CD2FDA  		CALL	DMASET		;SET DMA ADDRESS FOR LOAD
DFDD: 119BD8  		LD	DE,FCBDN 	;READ NEXT SECTOR
DFE0: CD07DA  		CALL	READ
DFE3: E1      		POP	HL		;GET ADDRESS OF NEXT SECTOR
DFE4: 2006    		JR	NZ,ML3		;READ ERROR OR EOF?
DFE6: 118000  		LD	DE,128		;MOVE 128 BYTES PER SECTOR
DFE9: 19      		ADD	HL,DE		;PT TO NEXT SECTOR IN HL
DFEA: 18E7    		JR	ML2
              	;
DFEC:         	ML3:
DFEC: 3D      		DEC	A		;LOAD COMPLETE
DFED: CA69DA  		JP	Z,RESETUSR	;IF ZERO, OK, GO RESET CORRECT USER #
              					; ON WAY OUT, ELSE FALL THRU TO PRNLE
              	;
              	;  TPA FULL
              	;
DFF0: CD58DE  	ML4:	CALL	PRNLE		;PRINT MSG AND RESET DEF DMA
              	;
              	; TRANSIENT LOAD ERROR
              	;
DFF3:         	MLERR:
              					;NOTE THAT THERE IS AN EXTRA RETURN ADDRESS ON
              					; THE STACK. IT WILL BE TOSSED WHEN ERROR EXITS
              					; TO RESTRT, WHICH RELOADS SP.
DFF3: CD69DA  		CALL	RESETUSR	;RESET CURRENT USER NUMBER
              					;  RESET MUST BE DONE BEFORE LOGIN
DFF6:         	ERRLOG:
DFF6: CDEEDB  		CALL	DLOGIN		;LOG IN DEFAULT DISK
DFF9: C311DB  		JP	ERROR		;FLAG ERROR
              	;
              	;
              	;Section: 5M
              	;PASS:  Enable wheel mode.
              	;NORM:	Disable wheel mode.
              	;
              	;  Type PASS <password> <cr> to CP/M prompt to enter wheel mode.
              	; This code can be replaced with PST's PASS.ASM which gives many
              	; nice little options like no keyboard echo, etc.
              	;
              		IF	INPASS		;WE WANT TO USE THIS CODE, NOT PASS.COM
              	PASS:
              		LD	HL,PASSWD	;SET UP POINTERS
              		LD	DE,CIBUFF+NCHARS+1
              		LD	B,PRGEND-PASSWD	;B= LENGTH
              	CKPASS:	LD	A,(DE)		;TRIAL PW TO A
              		CP	(HL)		;CHECK FOR MATCH
              		JP	NZ,COM		;NOPE.. LOOK FOR PASS.COM
              		INC	HL		;INCREMENT COUNTER
              		INC	DE
              		DJNZ	CKPASS		;CONTINUE IF MORE
              		LD	A,NOT RESTRCT	;WHEEL = NOT RESTRCT
              	
              	PWOUT:	LD	(WHEEL),A
              		JP	RESTRT
              	;
              	NORM:
              		LD	A,RESTRCT
              		JR	PWOUT
              	;
              	PASSWD:
              		DEFM	'YOURPW'	;YOUR PASSWORD
              	PRGEND	EQU	$		;END OF PASSWORD
              	;
              		ENDIF			;INPASS
              	
DFFC: 00000000	        DEFS    4
              	
              	#include "../bdos.asm"
              	;**************************************************************
              	;*
              	;*             C P / M   version   2 . 2
              	;*
              	;*   Reconstructed from memory image on February 27, 1981
              	;*
              	;*                by Clark A. Calkins
              	;*
              	;*      Modified to build as single image from source
              	;*
              	;*
              	;*
              	;**************************************************************
              	
              	
              	
              	;
              	;   note that the following six bytes must match those at
              	; (pattrn1) or cp/m will halt. why?
              	;
E000: 00160000	pattrn2:defb	0,22,0,0,0,0	;(* serial number bytes *).
E004: 0000    	
              	;
              	;**************************************************************
              	;*
              	;*                    B D O S   E N T R Y
              	;*
              	;**************************************************************
              	;
E006: C314E0  	fbase:	jp	fbase1
E009: C33AEE  		jp	boot
              	;
              	;   bdos error table.
              	;
E00C: 9FE0    	badsctr:defw	error1		;bad sector on read or write.
E00E: ABE0    	badslct:defw	error2		;bad disk select.
E010: B1E0    	rodisk:	defw	error3		;disk is read only.
E012: B7E0    	rofile:	defw	error4		;file is read only.
              	;
              	;   entry into bdos. (de) or (e) are the parameters passed. the
              	; function number desired is in register (c).
              	;
E014: EB      	fbase1:	ex	de,hl		;save the (de) parameters.
E015: 224EE3  		ld	(params),hl
E018: EB      		ex	de,hl
E019: 7B      		ld	a,e		;and save register (e) in particular.
E01A: 32E1ED  		ld	(eparam),a
E01D: 210000  		ld	hl,0
E020: 2250E3  		ld	(status),hl	;clear return status.
E023: 39      		add	hl,sp
E024: 221AE3  		ld	(usrstack),hl	;save users stack pointer.
E027: 314CE3  		ld	sp,stkarea	;and set our own.
E02A: AF      		xor	a		;clear auto select storage space.
E02B: 32EBED  		ld	(autoflag),a
E02E: 32E9ED  		ld	(auto),a
E031: 217FED  		ld	hl,goback	;set return address.
E034: E5      		push	hl
E035: CD63EF  		call	syshook		; see if anyone wants to intercept the call
E038: 79      		ld	a,c		;get function number.
E039: FE29    		cp	nfuncts		;valid function number?
E03B: D0      		ret	nc
E03C: 4B      		ld	c,e		;keep single register function here.
E03D: 214DE0  		ld	hl,functns	;now look thru the function table.
E040: 5F      		ld	e,a
E041: 1600    		ld	d,0		;(de)=function number.
E043: 19      		add	hl,de
E044: 19      		add	hl,de		;(hl)=(start of table)+2*(function number).
E045: 5E      		ld	e,(hl)
E046: 23      		inc	hl
E047: 56      		ld	d,(hl)		;now (de)=address for this function.
E048: 2A4EE3  		ld	hl,(params)	;retrieve parameters.
E04B: EB      		ex	de,hl		;now (de) has the original parameters.
E04C: E9      		jp	(hl)		;execute desired function.
              	;
              	;   bdos function jump table.
              	;
0029:         	nfuncts equ	41		;number of functions in followin table.
              	;
E04D: 48EED3E2	functns:defw	wboot,getcon,outcon,getrdr,punch,list,dircio,getiob
E051: 9BE1D9E2	
E055: C9EEC5EE	
E059: DFE2F8E2	
E05D: FEE203E3		defw	setiob,prtstr,rdbuff,getcsts,getver,rstdsk,setdsk,openfil
E061: ECE109E3	
E065: 89EC8EEC	
E069: 50ECA7EC	
E06D: B0ECB6EC		defw	closefil,getfst,getnxt,delfile,readseq,wrtseq,fcreate
E071: D3ECE2EC	
E075: EBECF1EC	
E079: F7EC    	
E07B: 00ED09ED		defw	renfile,getlog,getcrnt,putdma,getaloc,wrtprtd,getrov,setattr
E07F: 0FED15ED	
E083: 1CED37E5	
E087: 22ED28ED	
E08B: 31ED38ED		defw	getparm,getuser,rdrandom,wtrandom,filesize,setran,logoff,rtn
E08F: 4CED52ED	
E093: 58ED19EC	
E097: 5EED0FE3	
E09B: 0FE3A6ED		defw	rtn,wtspecl
              	;
              	;   bdos error message section.
              	;
E09F: 21D5E0  	error1:	ld	hl,badsec	;bad sector message.
E0A2: CDF0E0  		call	prterr		;print it and get a 1 char responce.
E0A5: FE03    		cp	cntrlc		;re-boot request (control-c)?
E0A7: CA0000  		jp	z,0		;yes.
E0AA: C9      		ret			;no, return to retry i/o function.
              	;
E0AB: 21E0E0  	error2:	ld	hl,badsel	;bad drive selected.
E0AE: C3BAE0  		jp	error5
              	;
E0B1: 21ECE0  	error3:	ld	hl,diskro	;disk is read only.
E0B4: C3BAE0  		jp	error5
              	;
E0B7: 21E7E0  	error4:	ld	hl,filero	;file is read only.
              	;
E0BA: 3E00    	error5:	ld	a,default
E0BC: 320400  		ld	(tdrive),a
E0BF: CDF0E0  		call	prterr
E0C2: C30000  		jp	0		;always reboot on these errors.
              	;
E0C5: 42646F73	bdoserr:defb	'Bdos Err on '
E0C9: 20457272	
E0CD: 206F6E20	
E0D1: 203A2024	bdosdrv:defb	' : $'
E0D5: 42616420	badsec:	defb	'Bad Sector$'
E0D9: 53656374	
E0DD: 6F7224  	
E0E0: 53656C65	badsel:	defb	'Select$'
E0E4: 637424  	
E0E7: 46696C65	filero:	defb	'File '
E0EB: 20      	
E0EC: 522F4F24	diskro:	defb	'R/O$'
              	;
              	;   print bdos error message.
              	;
E0F0: E5      	prterr:	push	hl		;save second message pointer.
E0F1: CDD4E1  		call	outcrlf		;send (cr)(lf).
E0F4: 3A4DE3  		ld	a,(active)	;get active drive.
E0F7: C641    		add	a,'A'		;make ascii.
E0F9: 32D1E0  		ld	(bdosdrv),a	;and put in message.
E0FC: 01C5E0  		ld	bc,bdoserr	;and print it.
E0FF: CDDEE1  		call	prtmesg
E102: C1      		pop	bc		;print second message line now.
E103: CDDEE1  		call	prtmesg
              	;
              	;   get an input character. we will check our 1 character
              	; buffer first. this may be set by the console status routine.
              	;
E106: 2119E3  	getchar:ld	hl,charbuf	;check character buffer.
E109: 7E      		ld	a,(hl)		;anything present already?
E10A: 3600    		ld	(hl),0		;...either case clear it.
E10C: B7      		or	a
E10D: C0      		ret	nz		;yes, use it.
E10E: C3ADEE  		jp	conin		;nope, go get a character responce.
              	;
              	;   input and echo a character.
              	;
E111: CD06E1  	getecho:call	getchar		;input a character.
E114: CD1FE1  		call	chkchar		;carriage control?
E117: D8      		ret	c		;no, a regular control char so don't echo.
E118: F5      		push	af		;ok, save character now.
E119: 4F      		ld	c,a
E11A: CD9BE1  		call	outcon		;and echo it.
E11D: F1      		pop	af		;get character and return.
E11E: C9      		ret	
              	;
              	;   check character in (a). set the zero flag on a carriage
              	; control character and the carry flag on any other control
              	; character.
              	;
E11F: FE0D    	chkchar:cp	cr		;check for carriage return, line feed, backspace,
E121: C8      		ret	z		;or a tab.
E122: FE0A    		cp	lf
E124: C8      		ret	z
E125: FE09    		cp	tab
E127: C8      		ret	z
E128: FE08    		cp	bs
E12A: C8      		ret	z
E12B: FE20    		cp	' '		;other control char? set carry flag.
E12D: C9      		ret	
              	;
              	;   check the console during output. halt on a control-s, then
              	; reboot on a control-c. if anything else is ready, clear the
              	; zero flag and return (the calling routine may want to do
              	; something).
              	;
E12E: 3A19E3  	ckconsol: ld	a,(charbuf)	;check buffer.
E131: B7      		or	a		;if anything, just return without checking.
E132: C250E1  		jp	nz,ckcon2
E135: CDA2EE  		call	const		;nothing in buffer. check console.
E138: E601    		and	01h		;look at bit 0.
E13A: C8      		ret	z		;return if nothing.
E13B: CDADEE  		call	conin		;ok, get it.
E13E: FE13    		cp	cntrls		;if not control-s, return with zero cleared.
E140: C24DE1  		jp	nz,ckcon1
E143: CDADEE  		call	conin		;halt processing until another char
E146: FE03    		cp	cntrlc		;is typed. control-c?
E148: CA0000  		jp	z,0		;yes, reboot now.
E14B: AF      		xor	a		;no, just pretend nothing was ever ready.
E14C: C9      		ret	
E14D: 3219E3  	ckcon1:	ld	(charbuf),a	;save character in buffer for later processing.
E150: 3E01    	ckcon2:	ld	a,1		;set (a) to non zero to mean something is ready.
E152: C9      		ret	
              	;
              	;   output (c) to the screen. if the printer flip-flop flag
              	; is set, we will send character to printer also. the console
              	; will be checked in the process.
              	;
E153: 3A15E3  	outchar:ld	a,(outflag)	;check output flag.
E156: B7      		or	a		;anything and we won't generate output.
E157: C26DE1  		jp	nz,outchr1
E15A: C5      		push	bc
E15B: CD2EE1  		call	ckconsol	;check console (we don't care whats there).
E15E: C1      		pop	bc
E15F: C5      		push	bc
E160: CDB9EE  		call	conout		;output (c) to the screen.
E163: C1      		pop	bc
E164: C5      		push	bc
E165: 3A18E3  		ld	a,(prtflag)	;check printer flip-flop flag.
E168: B7      		or	a
E169: C4C5EE  		call	nz,list		;print it also if non-zero.
E16C: C1      		pop	bc
E16D: 79      	outchr1:ld	a,c		;update cursors position.
E16E: 2117E3  		ld	hl,curpos
E171: FE7F    		cp	del		;rubouts don't do anything here.
E173: C8      		ret	z
E174: 34      		inc	(hl)		;bump line pointer.
E175: FE20    		cp	' '		;and return if a normal character.
E177: D0      		ret	nc
E178: 35      		dec	(hl)		;restore and check for the start of the line.
E179: 7E      		ld	a,(hl)
E17A: B7      		or	a
E17B: C8      		ret	z		;ingnore control characters at the start of the line.
E17C: 79      		ld	a,c
E17D: FE08    		cp	bs		;is it a backspace?
E17F: C284E1  		jp	nz,outchr2
E182: 35      		dec	(hl)		;yes, backup pointer.
E183: C9      		ret	
E184: FE0A    	outchr2:cp	lf		;is it a line feed?
E186: C0      		ret	nz		;ignore anything else.
E187: 3600    		ld	(hl),0		;reset pointer to start of line.
E189: C9      		ret	
              	;
              	;   output (a) to the screen. if it is a control character
              	; (other than carriage control), use ^x format.
              	;
E18A: 79      	showit:	ld	a,c
E18B: CD1FE1  		call	chkchar		;check character.
E18E: D29BE1  		jp	nc,outcon	;not a control, use normal output.
E191: F5      		push	af
E192: 0E5E    		ld	c,'^'		;for a control character, preceed it with '^'.
E194: CD53E1  		call	outchar
E197: F1      		pop	af
E198: F640    		or	'@'		;and then use the letter equivelant.
E19A: 4F      		ld	c,a
              	;
              	;   function to output (c) to the console device and expand tabs
              	; if necessary.
              	;
E19B: 79      	outcon:	ld	a,c
E19C: FE09    		cp	tab		;is it a tab?
E19E: C253E1  		jp	nz,outchar	;use regular output.
E1A1: 0E20    	outcon1:ld	c,' '		;yes it is, use spaces instead.
E1A3: CD53E1  		call	outchar
E1A6: 3A17E3  		ld	a,(curpos)	;go until the cursor is at a multiple of 8
              	
E1A9: E607    		and	07h		;position.
E1AB: C2A1E1  		jp	nz,outcon1
E1AE: C9      		ret	
              	;
              	;   echo a backspace character. erase the prevoius character
              	; on the screen.
              	;
E1AF: CDB7E1  	backup:	call	backup1		;backup the screen 1 place.
E1B2: 0E20    		ld	c,' '		;then blank that character.
E1B4: CDB9EE  		call	conout
E1B7: 0E08    	backup1:ld	c,bs		;then back space once more.
E1B9: C3B9EE  		jp	conout
              	;
              	;   signal a deleted line. print a '#' at the end and start
              	; over.
              	;
E1BC: 0E23    	newline:ld	c,'#'
E1BE: CD53E1  		call	outchar		;print this.
E1C1: CDD4E1  		call	outcrlf		;start new line.
E1C4: 3A17E3  	newln1:	ld	a,(curpos)	;move the cursor to the starting position.
E1C7: 2116E3  		ld	hl,starting
E1CA: BE      		cp	(hl)
E1CB: D0      		ret	nc		;there yet?
E1CC: 0E20    		ld	c,' '
E1CE: CD53E1  		call	outchar		;nope, keep going.
E1D1: C3C4E1  		jp	newln1
              	;
              	;   output a (cr) (lf) to the console device (screen).
              	;
E1D4: 0E0D    	outcrlf:ld	c,cr
E1D6: CD53E1  		call	outchar
E1D9: 0E0A    		ld	c,lf
E1DB: C353E1  		jp	outchar
              	;
              	;   print message pointed to by (bc). it will end with a '$'.
              	;
E1DE: 0A      	prtmesg:ld	a,(bc)		;check for terminating character.
E1DF: FE24    		cp	'$'
E1E1: C8      		ret	z
E1E2: 03      		inc	bc
E1E3: C5      		push	bc		;otherwise, bump pointer and print it.
E1E4: 4F      		ld	c,a
E1E5: CD9BE1  		call	outcon
E1E8: C1      		pop	bc
E1E9: C3DEE1  		jp	prtmesg
              	;
              	;   function to execute a buffered read.
              	;
E1EC: 3A17E3  	rdbuff:	ld	a,(curpos)	;use present location as starting one.
E1EF: 3216E3  		ld	(starting),a
E1F2: 2A4EE3  		ld	hl,(params)	;get the maximum buffer space.
E1F5: 4E      		ld	c,(hl)
E1F6: 23      		inc	hl		;point to first available space.
E1F7: E5      		push	hl		;and save.
E1F8: 0600    		ld	b,0		;keep a character count.
E1FA: C5      	rdbuf1:	push	bc
E1FB: E5      		push	hl
E1FC: CD06E1  	rdbuf2:	call	getchar		;get the next input character.
E1FF: E67F    		and	7fh		;strip bit 7.
E201: E1      		pop	hl		;reset registers.
E202: C1      		pop	bc
E203: FE0D    		cp	cr		;en of the line?
E205: CACCE2  		jp	z,rdbuf17
E208: FE0A    		cp	lf
E20A: CACCE2  		jp	z,rdbuf17
E20D: FE08    		cp	bs		;how about a backspace?
E20F: C221E2  		jp	nz,rdbuf3
E212: 78      		ld	a,b		;yes, but ignore at the beginning of the line.
E213: B7      		or	a
E214: CAFAE1  		jp	z,rdbuf1
E217: 05      		dec	b		;ok, update counter.
E218: 3A17E3  		ld	a,(curpos)	;if we backspace to the start of the line,
E21B: 3215E3  		ld	(outflag),a	;treat as a cancel (control-x).
E21E: C37BE2  		jp	rdbuf10
E221: FE7F    	rdbuf3:	cp	del		;user typed a rubout?
E223: C231E2  		jp	nz,rdbuf4
E226: 78      		ld	a,b		;ignore at the start of the line.
E227: B7      		or	a
E228: CAFAE1  		jp	z,rdbuf1
E22B: 7E      		ld	a,(hl)		;ok, echo the prevoius character.
E22C: 05      		dec	b		;and reset pointers (counters).
E22D: 2B      		dec	hl
E22E: C3B4E2  		jp	rdbuf15
E231: FE05    	rdbuf4:	cp	cntrle		;physical end of line?
E233: C242E2  		jp	nz,rdbuf5
E236: C5      		push	bc		;yes, do it.
E237: E5      		push	hl
E238: CDD4E1  		call	outcrlf
E23B: AF      		xor	a		;and update starting position.
E23C: 3216E3  		ld	(starting),a
E23F: C3FCE1  		jp	rdbuf2
E242: FE10    	rdbuf5:	cp	cntrlp		;control-p?
E244: C253E2  		jp	nz,rdbuf6
E247: E5      		push	hl		;yes, flip the print flag filp-flop byte.
E248: 2118E3  		ld	hl,prtflag
E24B: 3E01    		ld	a,1		;prtflag=1-prtflag
E24D: 96      		sub	(hl)
E24E: 77      		ld	(hl),a
E24F: E1      		pop	hl
E250: C3FAE1  		jp	rdbuf1
E253: FE18    	rdbuf6:	cp	cntrlx		;control-x (cancel)?
E255: C26AE2  		jp	nz,rdbuf8
E258: E1      		pop	hl
E259: 3A16E3  	rdbuf7:	ld	a,(starting)	;yes, backup the cursor to here.
E25C: 2117E3  		ld	hl,curpos
E25F: BE      		cp	(hl)
E260: D2ECE1  		jp	nc,rdbuff	;done yet?
E263: 35      		dec	(hl)		;no, decrement pointer and output back up one space.
E264: CDAFE1  		call	backup
E267: C359E2  		jp	rdbuf7
E26A: FE15    	rdbuf8:	cp	cntrlu		;cntrol-u (cancel line)?
E26C: C276E2  		jp	nz,rdbuf9
E26F: CDBCE1  		call	newline		;start a new line.
E272: E1      		pop	hl
E273: C3ECE1  		jp	rdbuff
E276: FE12    	rdbuf9:	cp	cntrlr		;control-r?
E278: C2B1E2  		jp	nz,rdbuf14
E27B: C5      	rdbuf10:push	bc		;yes, start a new line and retype the old one.
E27C: CDBCE1  		call	newline
E27F: C1      		pop	bc
E280: E1      		pop	hl
E281: E5      		push	hl
E282: C5      		push	bc
E283: 78      	rdbuf11:ld	a,b		;done whole line yet?
E284: B7      		or	a
E285: CA95E2  		jp	z,rdbuf12
E288: 23      		inc	hl		;nope, get next character.
E289: 4E      		ld	c,(hl)
E28A: 05      		dec	b		;count it.
E28B: C5      		push	bc
E28C: E5      		push	hl
E28D: CD8AE1  		call	showit		;and display it.
E290: E1      		pop	hl
E291: C1      		pop	bc
E292: C383E2  		jp	rdbuf11
E295: E5      	rdbuf12:push	hl		;done with line. if we were displaying
E296: 3A15E3  		ld	a,(outflag)	;then update cursor position.
E299: B7      		or	a
E29A: CAFCE1  		jp	z,rdbuf2
E29D: 2117E3  		ld	hl,curpos	;because this line is shorter, we must
E2A0: 96      		sub	(hl)		;back up the cursor (not the screen however)
E2A1: 3215E3  		ld	(outflag),a	;some number of positions.
E2A4: CDAFE1  	rdbuf13:call	backup		;note that as long as (outflag) is non
E2A7: 2115E3  		ld	hl,outflag	;zero, the screen will not be changed.
E2AA: 35      		dec	(hl)
E2AB: C2A4E2  		jp	nz,rdbuf13
E2AE: C3FCE1  		jp	rdbuf2		;now just get the next character.
              	;
              	;   just a normal character, put this in our buffer and echo.
              	;
E2B1: 23      	rdbuf14:inc	hl
E2B2: 77      		ld	(hl),a		;store character.
E2B3: 04      		inc	b		;and count it.
E2B4: C5      	rdbuf15:push	bc
E2B5: E5      		push	hl
E2B6: 4F      		ld	c,a		;echo it now.
E2B7: CD8AE1  		call	showit
E2BA: E1      		pop	hl
E2BB: C1      		pop	bc
E2BC: 7E      		ld	a,(hl)		;was it an abort request?
E2BD: FE03    		cp	cntrlc		;control-c abort?
E2BF: 78      		ld	a,b
E2C0: C2C8E2  		jp	nz,rdbuf16
E2C3: FE01    		cp	1		;only if at start of line.
E2C5: CA0000  		jp	z,0
E2C8: B9      	rdbuf16:cp	c		;nope, have we filled the buffer?
E2C9: DAFAE1  		jp	c,rdbuf1
E2CC: E1      	rdbuf17:pop	hl		;yes end the line and return.
E2CD: 70      		ld	(hl),b
E2CE: 0E0D    		ld	c,cr
E2D0: C353E1  		jp	outchar		;output (cr) and return.
              	;
              	;   function to get a character from the console device.
              	;
E2D3: CD11E1  	getcon:	call	getecho		;get and echo.
E2D6: C30CE3  		jp	setstat		;save status and return.
              	;
              	;   function to get a character from the tape reader device.
              	;
E2D9: CDCDEE  	getrdr:	call	reader		;get a character from reader, set status and return.
E2DC: C30CE3  		jp	setstat
              	;
              	;  function to perform direct console i/o. if (c) contains (ff)
              	; then this is an input request. if (c) contains (fe) then
              	; this is a status request. otherwise we are to output (c).
              	;
E2DF: 79      	dircio:	ld	a,c		;test for (ff).
E2E0: 3C      		inc	a
E2E1: CAEBE2  		jp	z,dirc1
E2E4: 3C      		inc	a		;test for (fe).
E2E5: CAA2EE  		jp	z,const
E2E8: C3B9EE  		jp	conout		;just output (c).
E2EB: CDA2EE  	dirc1:	call	const		;this is an input request.
E2EE: B7      		or	a
E2EF: CA9CED  		jp	z,goback1	;not ready? just return (directly).
E2F2: CDADEE  		call	conin		;yes, get character.
E2F5: C30CE3  		jp	setstat		;set status and return.
              	;
              	;   function to return the i/o byte.
              	;
E2F8: 3A0300  	getiob:	ld	a,(iobyte)
E2FB: C30CE3  		jp	setstat
              	;
              	;   function to set the i/o byte.
              	;
E2FE: 210300  	setiob:	ld	hl,iobyte
E301: 71      		ld	(hl),c
E302: C9      		ret	
              	;
              	;   function to print the character string pointed to by (de)
              	; on the console device. the string ends with a '$'.
              	;
E303: EB      	prtstr:	ex	de,hl
E304: 4D      		ld	c,l
E305: 44      		ld	b,h		;now (bc) points to it.
E306: C3DEE1  		jp	prtmesg
              	;
              	;   function to interigate the console device.
              	;
E309: CD2EE1  	getcsts:call	ckconsol
              	;
              	;   get here to set the status and return to the cleanup
              	; section. then back to the user.
              	;
E30C: 3250E3  	setstat:ld	(status),a
E30F: C9      	rtn:	ret	
              	;
              	;   set the status to 1 (read or write error code).
              	;
E310: 3E01    	ioerr1:	ld	a,1
E312: C30CE3  		jp	setstat
              	;
E315: 00      	outflag:defb	0		;output flag (non zero means no output).
E316: 02      	starting: defb	2		;starting position for cursor.
E317: 00      	curpos:	defb	0		;cursor position (0=start of line).
E318: 00      	prtflag:defb	0		;printer flag (control-p toggle). list if non zero.
E319: 00      	charbuf:defb	0		;single input character buffer.
              	;
              	;   stack area for bdos calls.
              	;
E31A: 0000    	usrstack: defw	0		;save users stack pointer here.
              	;
E31C: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
E320: 00...   	
E334: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
E338: 00...   	
E34C:         	stkarea equ	$		;end of stack area.
              	;
E34C: 00      	userno:	defb	0		;current user number.
E34D: 00      	active:	defb	0		;currently active drive.
E34E: 0000    	params:	defw	0		;save (de) parameters here on entry.
E350: 0000    	status:	defw	0		;status returned from bdos function.
              	;
              	;   select error occured, jump to error routine.
              	;
E352: 210EE0  	slcterr:ld	hl,badslct
              	;
              	;   jump to (hl) indirectly.
              	;
E355: 5E      	jumphl:	ld	e,(hl)
E356: 23      		inc	hl
E357: 56      		ld	d,(hl)		;now (de) contain the desired address.
E358: EB      		ex	de,hl
E359: E9      		jp	(hl)
              	;
              	;   block move. (de) to (hl), (c) bytes total.
              	;
E35A: 0C      	de2hl:	inc	c		;is count down to zero?
E35B: 0D      	de2hl1:	dec	c
E35C: C8      		ret	z		;yes, we are done.
E35D: 1A      		ld	a,(de)		;no, move one more byte.
E35E: 77      		ld	(hl),a
E35F: 13      		inc	de
E360: 23      		inc	hl
E361: C35BE3  		jp	de2hl1		;and repeat.
              	;
              	;   select the desired drive.
              	;
E364: 3A4DE3  	select:	ld	a,(active)	;get active disk.
E367: 4F      		ld	c,a
E368: CDE0EE  		call	seldsk		;select it.
E36B: 7C      		ld	a,h		;valid drive?
E36C: B5      		or	l		;valid drive?
E36D: C8      		ret	z		;return if not.
              	;
              	;   here, the bios returned the address of the parameter block
              	; in (hl). we will extract the necessary pointers and save them.
              	;
E36E: 5E      		ld	e,(hl)		;yes, get address of translation table into (de).
E36F: 23      		inc	hl
E370: 56      		ld	d,(hl)
E371: 23      		inc	hl
E372: 22BEED  		ld	(scratch1),hl	;save pointers to scratch areas.
E375: 23      		inc	hl
E376: 23      		inc	hl
E377: 22C0ED  		ld	(scratch2),hl	;ditto.
E37A: 23      		inc	hl
E37B: 23      		inc	hl
E37C: 22C2ED  		ld	(scratch3),hl	;ditto.
E37F: 23      		inc	hl
E380: 23      		inc	hl
E381: EB      		ex	de,hl		;now save the translation table address.
E382: 22DBED  		ld	(xlate),hl
E385: 21C4ED  		ld	hl,dirbuf	;put the next 8 bytes here.
E388: 0E08    		ld	c,8		;they consist of the directory buffer
E38A: CD5AE3  		call	de2hl		;pointer, parameter block pointer,
E38D: 2AC6ED  		ld	hl,(diskpb)	;check and allocation vectors.
E390: EB      		ex	de,hl
E391: 21CCED  		ld	hl,sectors	;move parameter block into our ram.
E394: 0E0F    		ld	c,15		;it is 15 bytes long.
E396: CD5AE3  		call	de2hl
E399: 2AD1ED  		ld	hl,(dsksize)	;check disk size.
E39C: 7C      		ld	a,h		;more than 256 blocks on this?
E39D: 21E8ED  		ld	hl,bigdisk
E3A0: 36FF    		ld	(hl),0ffh	;set to samll.
E3A2: B7      		or	a
E3A3: CAA8E3  		jp	z,select1
E3A6: 3600    		ld	(hl),0		;wrong, set to large.
E3A8: 3EFF    	select1:ld	a,0ffh		;clear the zero flag.
E3AA: B7      		or	a
E3AB: C9      		ret	
              	;
              	;   routine to home the disk track head and clear pointers.
              	;
E3AC: CDDBEE  	homedrv:call	home		;home the head.
E3AF: AF      		xor	a
E3B0: 2AC0ED  		ld	hl,(scratch2)	;set our track pointer also.
E3B3: 77      		ld	(hl),a
E3B4: 23      		inc	hl
E3B5: 77      		ld	(hl),a
E3B6: 2AC2ED  		ld	hl,(scratch3)	;and our sector pointer.
E3B9: 77      		ld	(hl),a
E3BA: 23      		inc	hl
E3BB: 77      		ld	(hl),a
E3BC: C9      		ret	
              	;
              	;   do the actual disk read and check the error return status.
              	;
E3BD: CD0CEF  	doread:	call	read
E3C0: C3C6E3  		jp	ioret
              	;
              	;   do the actual disk write and handle any bios error.
              	;
E3C3: CD10EF  	dowrite:call	write
E3C6: B7      	ioret:	or	a
E3C7: C8      		ret	z		;return unless an error occured.
E3C8: 210CE0  		ld	hl,badsctr	;bad read/write on this sector.
E3CB: C355E3  		jp	jumphl
              	;
              	;   routine to select the track and sector that the desired
              	; block number falls in.
              	;
E3CE: 2AF5ED  	trksec:	ld	hl,(filepos)	;get position of last accessed file
E3D1: 0E02    		ld	c,2		;in directory and compute sector #.
E3D3: CDF5E4  		call	shiftr		;sector #=file-position/4.
E3D6: 22F0ED  		ld	(blknmbr),hl	;save this as the block number of interest.
E3D9: 22F7ED  		ld	(cksumtbl),hl	;what's it doing here too?
              	;
              	;   if the sector number has already been set (blknmbr), enter
              	; at this point.
              	;
E3DC: 21F0ED  	trksec1:ld	hl,blknmbr
E3DF: 4E      		ld	c,(hl)		;move sector number into (bc).
E3E0: 23      		inc	hl
E3E1: 46      		ld	b,(hl)
E3E2: 2AC2ED  		ld	hl,(scratch3)	;get current sector number and
E3E5: 5E      		ld	e,(hl)		;move this into (de).
E3E6: 23      		inc	hl
E3E7: 56      		ld	d,(hl)
E3E8: 2AC0ED  		ld	hl,(scratch2)	;get current track number.
E3EB: 7E      		ld	a,(hl)		;and this into (hl).
E3EC: 23      		inc	hl
E3ED: 66      		ld	h,(hl)
E3EE: 6F      		ld	l,a
E3EF: 79      	trksec2:ld	a,c		;is desired sector before current one?
E3F0: 93      		sub	e
E3F1: 78      		ld	a,b
E3F2: 9A      		sbc	a,d
E3F3: D205E4  		jp	nc,trksec3
E3F6: E5      		push	hl		;yes, decrement sectors by one track.
E3F7: 2ACCED  		ld	hl,(sectors)	;get sectors per track.
E3FA: 7B      		ld	a,e
E3FB: 95      		sub	l
E3FC: 5F      		ld	e,a
E3FD: 7A      		ld	a,d
E3FE: 9C      		sbc	a,h
E3FF: 57      		ld	d,a		;now we have backed up one full track.
E400: E1      		pop	hl
E401: 2B      		dec	hl		;adjust track counter.
E402: C3EFE3  		jp	trksec2
E405: E5      	trksec3:push	hl		;desired sector is after current one.
E406: 2ACCED  		ld	hl,(sectors)	;get sectors per track.
E409: 19      		add	hl,de		;bump sector pointer to next track.
E40A: DA1AE4  		jp	c,trksec4
E40D: 79      		ld	a,c		;is desired sector now before current one?
E40E: 95      		sub	l
E40F: 78      		ld	a,b
E410: 9C      		sbc	a,h
E411: DA1AE4  		jp	c,trksec4
E414: EB      		ex	de,hl		;not yes, increment track counter
E415: E1      		pop	hl		;and continue until it is.
E416: 23      		inc	hl
E417: C305E4  		jp	trksec3
              	;
              	;   here we have determined the track number that contains the
              	; desired sector.
              	;
E41A: E1      	trksec4:pop	hl		;get track number (hl).
E41B: C5      		push	bc
E41C: D5      		push	de
E41D: E5      		push	hl
E41E: EB      		ex	de,hl
E41F: 2AD9ED  		ld	hl,(offset)	;adjust for first track offset.
E422: 19      		add	hl,de
E423: 44      		ld	b,h
E424: 4D      		ld	c,l
E425: CDFEEE  		call	settrk		;select this track.
E428: D1      		pop	de		;reset current track pointer.
E429: 2AC0ED  		ld	hl,(scratch2)
E42C: 73      		ld	(hl),e
E42D: 23      		inc	hl
E42E: 72      		ld	(hl),d
E42F: D1      		pop	de
E430: 2AC2ED  		ld	hl,(scratch3)	;reset the first sector on this track.
E433: 73      		ld	(hl),e
E434: 23      		inc	hl
E435: 72      		ld	(hl),d
E436: C1      		pop	bc
E437: 79      		ld	a,c		;now subtract the desired one.
E438: 93      		sub	e		;to make it relative (1-# sectors/track).
E439: 4F      		ld	c,a
E43A: 78      		ld	a,b
E43B: 9A      		sbc	a,d
E43C: 47      		ld	b,a
E43D: 2ADBED  		ld	hl,(xlate)	;translate this sector according to this table.
E440: EB      		ex	de,hl
E441: CD17EF  		call	sectrn		;let the bios translate it.
E444: 4D      		ld	c,l
E445: 44      		ld	b,h
E446: C302EF  		jp	setsec		;and select it.
              	;
              	;   compute block number from record number (savnrec) and
              	; extent number (savext).
              	;
E449: 21CEED  	getblock: ld	hl,blkshft	;get logical to physical conversion.
E44C: 4E      		ld	c,(hl)		;note that this is base 2 log of ratio.
E44D: 3AEEED  		ld	a,(savnrec)	;get record number.
E450: B7      	getblk1:or	a		;compute (a)=(a)/2^blkshft.
E451: 1F      		rra	
E452: 0D      		dec	c
E453: C250E4  		jp	nz,getblk1
E456: 47      		ld	b,a		;save result in (b).
E457: 3E08    		ld	a,8
E459: 96      		sub	(hl)
E45A: 4F      		ld	c,a		;compute (c)=8-blkshft.
E45B: 3AEDED  		ld	a,(savext)
E45E: 0D      	getblk2:dec	c		;compute (a)=savext*2^(8-blkshft).
E45F: CA67E4  		jp	z,getblk3
E462: B7      		or	a
E463: 17      		rla	
E464: C35EE4  		jp	getblk2
E467: 80      	getblk3:add	a,b
E468: C9      		ret	
              	;
              	;   routine to extract the (bc) block byte from the fcb pointed
              	; to by (params). if this is a big-disk, then these are 16 bit
              	; block numbers, else they are 8 bit numbers.
              	; number is returned in (hl).
              	;
E469: 2A4EE3  	extblk:	ld	hl,(params)	;get fcb address.
E46C: 111000  		ld	de,16		;block numbers start 16 bytes into fcb.
E46F: 19      		add	hl,de
E470: 09      		add	hl,bc
E471: 3AE8ED  		ld	a,(bigdisk)	;are we using a big-disk?
E474: B7      		or	a
E475: CA7CE4  		jp	z,extblk1
E478: 6E      		ld	l,(hl)		;no, extract an 8 bit number from the fcb.
E479: 2600    		ld	h,0
E47B: C9      		ret	
E47C: 09      	extblk1:add	hl,bc		;yes, extract a 16 bit number.
E47D: 5E      		ld	e,(hl)
E47E: 23      		inc	hl
E47F: 56      		ld	d,(hl)
E480: EB      		ex	de,hl		;return in (hl).
E481: C9      		ret	
              	;
              	;   compute block number.
              	;
E482: CD49E4  	comblk:	call	getblock
E485: 4F      		ld	c,a
E486: 0600    		ld	b,0
E488: CD69E4  		call	extblk
E48B: 22F0ED  		ld	(blknmbr),hl
E48E: C9      		ret	
              	;
              	;   check for a zero block number (unused).
              	;
E48F: 2AF0ED  	chkblk:	ld	hl,(blknmbr)
E492: 7D      		ld	a,l		;is it zero?
E493: B4      		or	h
E494: C9      		ret	
              	;
              	;   adjust physical block (blknmbr) and convert to logical
              	; sector (logsect). this is the starting sector of this block.
              	; the actual sector of interest is then added to this and the
              	; resulting sector number is stored back in (blknmbr). this
              	; will still have to be adjusted for the track number.
              	;
E495: 3ACEED  	logical:ld	a,(blkshft)	;get log2(physical/logical sectors).
E498: 2AF0ED  		ld	hl,(blknmbr)	;get physical sector desired.
E49B: 29      	logicl1:add	hl,hl		;compute logical sector number.
E49C: 3D      		dec	a		;note logical sectors are 128 bytes long.
E49D: C29BE4  		jp	nz,logicl1
E4A0: 22F2ED  		ld	(logsect),hl	;save logical sector.
E4A3: 3ACFED  		ld	a,(blkmask)	;get block mask.
E4A6: 4F      		ld	c,a
E4A7: 3AEEED  		ld	a,(savnrec)	;get next sector to access.
E4AA: A1      		and	c		;extract the relative position within physical block.
E4AB: B5      		or	l		;and add it too logical sector.
E4AC: 6F      		ld	l,a
E4AD: 22F0ED  		ld	(blknmbr),hl	;and store.
E4B0: C9      		ret	
              	;
              	;   set (hl) to point to extent byte in fcb.
              	;
E4B1: 2A4EE3  	setext:	ld	hl,(params)
E4B4: 110C00  		ld	de,12		;it is the twelth byte.
E4B7: 19      		add	hl,de
E4B8: C9      		ret	
              	;
              	;   set (hl) to point to record count byte in fcb and (de) to
              	; next record number byte.
              	;
E4B9: 2A4EE3  	sethlde:ld	hl,(params)
E4BC: 110F00  		ld	de,15		;record count byte (#15).
E4BF: 19      		add	hl,de
E4C0: EB      		ex	de,hl
E4C1: 211100  		ld	hl,17		;next record number (#32).
E4C4: 19      		add	hl,de
E4C5: C9      		ret	
              	;
              	;   save current file data from fcb.
              	;
E4C6: CDB9E4  	strdata:call	sethlde
E4C9: 7E      		ld	a,(hl)		;get and store record count byte.
E4CA: 32EEED  		ld	(savnrec),a
E4CD: EB      		ex	de,hl
E4CE: 7E      		ld	a,(hl)		;get and store next record number byte.
E4CF: 32ECED  		ld	(savnxt),a
E4D2: CDB1E4  		call	setext		;point to extent byte.
E4D5: 3AD0ED  		ld	a,(extmask)	;get extent mask.
E4D8: A6      		and	(hl)
E4D9: 32EDED  		ld	(savext),a	;and save extent here.
E4DC: C9      		ret	
              	;
              	;   set the next record to access. if (mode) is set to 2, then
              	; the last record byte (savnrec) has the correct number to access.
              	; for sequential access, (mode) will be equal to 1.
              	;
E4DD: CDB9E4  	setnrec:call	sethlde
E4E0: 3AE0ED  		ld	a,(mode)	;get sequential flag (=1).
E4E3: FE02    		cp	2		;a 2 indicates that no adder is needed.
E4E5: C2E9E4  		jp	nz,stnrec1
E4E8: AF      		xor	a		;clear adder (random access?).
E4E9: 4F      	stnrec1:ld	c,a
E4EA: 3AEEED  		ld	a,(savnrec)	;get last record number.
E4ED: 81      		add	a,c		;increment record count.
E4EE: 77      		ld	(hl),a		;and set fcb's next record byte.
E4EF: EB      		ex	de,hl
E4F0: 3AECED  		ld	a,(savnxt)	;get next record byte from storage.
E4F3: 77      		ld	(hl),a		;and put this into fcb as number of records used.
E4F4: C9      		ret	
              	;
              	;   shift (hl) right (c) bits.
              	;
E4F5: 0C      	shiftr:	inc	c
E4F6: 0D      	shiftr1:dec	c
E4F7: C8      		ret	z
E4F8: 7C      		ld	a,h
E4F9: B7      		or	a
E4FA: 1F      		rra	
E4FB: 67      		ld	h,a
E4FC: 7D      		ld	a,l
E4FD: 1F      		rra	
E4FE: 6F      		ld	l,a
E4FF: C3F6E4  		jp	shiftr1
              	;
              	;   compute the check-sum for the directory buffer. return
              	; integer sum in (a).
              	;
E502: 0E80    	checksum: ld	c,128		;length of buffer.
E504: 2AC4ED  		ld	hl,(dirbuf)	;get its location.
E507: AF      		xor	a		;clear summation byte.
E508: 86      	chksum1:add	a,(hl)		;and compute sum ignoring carries.
E509: 23      		inc	hl
E50A: 0D      		dec	c
E50B: C208E5  		jp	nz,chksum1
E50E: C9      		ret	
              	;
              	;   shift (hl) left (c) bits.
              	;
E50F: 0C      	shiftl:	inc	c
E510: 0D      	shiftl1:dec	c
E511: C8      		ret	z
E512: 29      		add	hl,hl		;shift left 1 bit.
E513: C310E5  		jp	shiftl1
              	;
              	;   routine to set a bit in a 16 bit value contained in (bc).
              	; the bit set depends on the current drive selection.
              	;
E516: C5      	setbit:	push	bc		;save 16 bit word.
E517: 3A4DE3  		ld	a,(active)	;get active drive.
E51A: 4F      		ld	c,a
E51B: 210100  		ld	hl,1
E51E: CD0FE5  		call	shiftl		;shift bit 0 into place.
E521: C1      		pop	bc		;now 'or' this with the original word.
E522: 79      		ld	a,c
E523: B5      		or	l
E524: 6F      		ld	l,a		;low byte done, do high byte.
E525: 78      		ld	a,b
E526: B4      		or	h
E527: 67      		ld	h,a
E528: C9      		ret	
              	;
              	;   extract the write protect status bit for the current drive.
              	; the result is returned in (a), bit 0.
              	;
E529: 2AB8ED  	getwprt:ld	hl,(wrtprt)	;get status bytes.
E52C: 3A4DE3  		ld	a,(active)	;which drive is current?
E52F: 4F      		ld	c,a
E530: CDF5E4  		call	shiftr		;shift status such that bit 0 is the
E533: 7D      		ld	a,l		;one of interest for this drive.
E534: E601    		and	01h		;and isolate it.
E536: C9      		ret	
              	;
              	;   function to write protect the current disk.
              	;
E537: 21B8ED  	wrtprtd:ld	hl,wrtprt	;point to status word.
E53A: 4E      		ld	c,(hl)		;set (bc) equal to the status.
E53B: 23      		inc	hl
E53C: 46      		ld	b,(hl)
E53D: CD16E5  		call	setbit		;and set this bit according to current drive.
E540: 22B8ED  		ld	(wrtprt),hl	;then save.
E543: 2AD3ED  		ld	hl,(dirsize)	;now save directory size limit.
E546: 23      		inc	hl		;remember the last one.
E547: EB      		ex	de,hl
E548: 2ABEED  		ld	hl,(scratch1)	;and store it here.
E54B: 73      		ld	(hl),e		;put low byte.
E54C: 23      		inc	hl
E54D: 72      		ld	(hl),d		;then high byte.
E54E: C9      		ret	
              	;
              	;   check for a read only file.
              	;
E54F: CD69E5  	chkrofl:call	fcb2hl		;set (hl) to file entry in directory buffer.
E552: 110900  	ckrof1:	ld	de,9		;look at bit 7 of the ninth byte.
E555: 19      		add	hl,de
E556: 7E      		ld	a,(hl)
E557: 17      		rla	
E558: D0      		ret	nc		;return if ok.
E559: 2112E0  		ld	hl,rofile	;else, print error message and terminate.
E55C: C355E3  		jp	jumphl
              	;
              	;   check the write protect status of the active disk.
              	;
E55F: CD29E5  	chkwprt:call	getwprt
E562: C8      		ret	z		;return if ok.
E563: 2110E0  		ld	hl,rodisk	;else print message and terminate.
E566: C355E3  		jp	jumphl
              	;
              	;   routine to set (hl) pointing to the proper entry in the
              	; directory buffer.
              	;
E569: 2AC4ED  	fcb2hl:	ld	hl,(dirbuf)	;get address of buffer.
E56C: 3AF4ED  		ld	a,(fcbpos)	;relative position of file.
              	;
              	;   routine to add (a) to (hl).
              	;
E56F: 85      	adda2hl:add	a,l
E570: 6F      		ld	l,a
E571: D0      		ret	nc
E572: 24      		inc	h		;take care of any carry.
E573: C9      		ret	
              	;
              	;   routine to get the 's2' byte from the fcb supplied in
              	; the initial parameter specification.
              	;
E574: 2A4EE3  	gets2:	ld	hl,(params)	;get address of fcb.
E577: 110E00  		ld	de,14		;relative position of 's2'.
E57A: 19      		add	hl,de
E57B: 7E      		ld	a,(hl)		;extract this byte.
E57C: C9      		ret	
              	;
              	;   clear the 's2' byte in the fcb.
              	;
E57D: CD74E5  	clears2:call	gets2		;this sets (hl) pointing to it.
E580: 3600    		ld	(hl),0		;now clear it.
E582: C9      		ret	
              	;
              	;   set bit 7 in the 's2' byte of the fcb.
              	;
E583: CD74E5  	sets2b7:call	gets2		;get the byte.
E586: F680    		or	80h		;and set bit 7.
E588: 77      		ld	(hl),a		;then store.
E589: C9      		ret	
              	;
              	;   compare (filepos) with (scratch1) and set flags based on
              	; the difference. this checks to see if there are more file
              	; names in the directory. we are at (filepos) and there are
              	; (scratch1) of them to check.
              	;
E58A: 2AF5ED  	morefls:ld	hl,(filepos)	;we are here.
E58D: EB      		ex	de,hl
E58E: 2ABEED  		ld	hl,(scratch1)	;and don't go past here.
E591: 7B      		ld	a,e		;compute difference but don't keep.
E592: 96      		sub	(hl)
E593: 23      		inc	hl
E594: 7A      		ld	a,d
E595: 9E      		sbc	a,(hl)		;set carry if no more names.
E596: C9      		ret	
              	;
              	;   call this routine to prevent (scratch1) from being greater
              	; than (filepos).
              	;
E597: CD8AE5  	chknmbr:call	morefls		;scratch1 too big?
E59A: D8      		ret	c
E59B: 13      		inc	de		;yes, reset it to (filepos).
E59C: 72      		ld	(hl),d
E59D: 2B      		dec	hl
E59E: 73      		ld	(hl),e
E59F: C9      		ret	
              	;
              	;   compute (hl)=(de)-(hl)
              	;
E5A0: 7B      	subhl:	ld	a,e		;compute difference.
E5A1: 95      		sub	l
E5A2: 6F      		ld	l,a		;store low byte.
E5A3: 7A      		ld	a,d
E5A4: 9C      		sbc	a,h
E5A5: 67      		ld	h,a		;and then high byte.
E5A6: C9      		ret	
              	;
              	;   set the directory checksum byte.
              	;
E5A7: 0EFF    	setdir:	ld	c,0ffh
              	;
              	;   routine to set or compare the directory checksum byte. if
              	; (c)=0ffh, then this will set the checksum byte. else the byte
              	; will be checked. if the check fails (the disk has been changed),
              	; then this disk will be write protected.
              	;
E5A9: 2AF7ED  	checkdir: ld	hl,(cksumtbl)
E5AC: EB      		ex	de,hl
E5AD: 2AD7ED  		ld	hl,(alloc1)
E5B0: CDA0E5  		call	subhl
E5B3: D0      		ret	nc		;ok if (cksumtbl) > (alloc1), so return.
E5B4: C5      		push	bc
E5B5: CD02E5  		call	checksum	;else compute checksum.
E5B8: 2AC8ED  		ld	hl,(chkvect)	;get address of checksum table.
E5BB: EB      		ex	de,hl
E5BC: 2AF7ED  		ld	hl,(cksumtbl)
E5BF: 19      		add	hl,de		;set (hl) to point to byte for this drive.
E5C0: C1      		pop	bc
E5C1: 0C      		inc	c		;set or check ?
E5C2: CACFE5  		jp	z,chkdir1
E5C5: BE      		cp	(hl)		;check them.
E5C6: C8      		ret	z		;return if they are the same.
E5C7: CD8AE5  		call	morefls		;not the same, do we care?
E5CA: D0      		ret	nc
E5CB: CD37E5  		call	wrtprtd		;yes, mark this as write protected.
E5CE: C9      		ret	
E5CF: 77      	chkdir1:ld	(hl),a		;just set the byte.
E5D0: C9      		ret	
              	;
              	;   do a write to the directory of the current disk.
              	;
E5D1: CDA7E5  	dirwrite: call	setdir		;set checksum byte.
E5D4: CDEBE5  		call	dirdma		;set directory dma address.
E5D7: 0E01    		ld	c,1		;tell the bios to actually write.
E5D9: CDC3E3  		call	dowrite		;then do the write.
E5DC: C3E5E5  		jp	defdma
              	;
              	;   read from the directory.
              	;
E5DF: CDEBE5  	dirread:call	dirdma		;set the directory dma address.
E5E2: CDBDE3  		call	doread		;and read it.
              	;
              	;   routine to set the dma address to the users choice.
              	;
E5E5: 21BCED  	defdma:	ld	hl,userdma	;reset the default dma address and return.
E5E8: C3EEE5  		jp	dirdma1
              	;
              	;   routine to set the dma address for directory work.
              	;
E5EB: 21C4ED  	dirdma:	ld	hl,dirbuf
              	;
              	;   set the dma address. on entry, (hl) points to
              	; word containing the desired dma address.
              	;
E5EE: 4E      	dirdma1:ld	c,(hl)
E5EF: 23      		inc	hl
E5F0: 46      		ld	b,(hl)		;setup (bc) and go to the bios to set it.
E5F1: C306EF  		jp	setdma
              	;
              	;   move the directory buffer into user's dma space.
              	;
E5F4: 2AC4ED  	movedir:ld	hl,(dirbuf)	;buffer is located here, and
E5F7: EB      		ex	de,hl
E5F8: 2ABCED  		ld	hl,(userdma)	; put it here.
E5FB: 0E80    		ld	c,128		;this is its length.
E5FD: C35AE3  		jp	de2hl		;move it now and return.
              	;
              	;   check (filepos) and set the zero flag if it equals 0ffffh.
              	;
E600: 21F5ED  	ckfilpos: ld	hl,filepos
E603: 7E      		ld	a,(hl)
E604: 23      		inc	hl
E605: BE      		cp	(hl)		;are both bytes the same?
E606: C0      		ret	nz
E607: 3C      		inc	a		;yes, but are they each 0ffh?
E608: C9      		ret	
              	;
              	;   set location (filepos) to 0ffffh.
              	;
E609: 21FFFF  	stfilpos: ld	hl,0ffffh
E60C: 22F5ED  		ld	(filepos),hl
E60F: C9      		ret	
              	;
              	;   move on to the next file position within the current
              	; directory buffer. if no more exist, set pointer to 0ffffh
              	; and the calling routine will check for this. enter with (c)
              	; equal to 0ffh to cause the checksum byte to be set, else we
              	; will check this disk and set write protect if checksums are
              	; not the same (applies only if another directory sector must
              	; be read).
              	;
E610: 2AD3ED  	nxentry:ld	hl,(dirsize)	;get directory entry size limit.
E613: EB      		ex	de,hl
E614: 2AF5ED  		ld	hl,(filepos)	;get current count.
E617: 23      		inc	hl		;go on to the next one.
E618: 22F5ED  		ld	(filepos),hl
E61B: CDA0E5  		call	subhl		;(hl)=(dirsize)-(filepos)
E61E: D224E6  		jp	nc,nxent1	;is there more room left?
E621: C309E6  		jp	stfilpos	;no. set this flag and return.
E624: 3AF5ED  	nxent1:	ld	a,(filepos)	;get file position within directory.
E627: E603    		and	03h		;only look within this sector (only 4 entries fit).
E629: 0605    		ld	b,5		;convert to relative position (32 bytes each).
E62B: 87      	nxent2:	add	a,a		;note that this is not efficient code.
E62C: 05      		dec	b		;5 'add a's would be better.
E62D: C22BE6  		jp	nz,nxent2
E630: 32F4ED  		ld	(fcbpos),a	;save it as position of fcb.
E633: B7      		or	a
E634: C0      		ret	nz		;return if we are within buffer.
E635: C5      		push	bc
E636: CDCEE3  		call	trksec		;we need the next directory sector.
E639: CDDFE5  		call	dirread
E63C: C1      		pop	bc
E63D: C3A9E5  		jp	checkdir
              	;
              	;   routine to to get a bit from the disk space allocation
              	; map. it is returned in (a), bit position 0. on entry to here,
              	; set (bc) to the block number on the disk to check.
              	; on return, (d) will contain the original bit position for
              	; this block number and (hl) will point to the address for it.
              	;
E640: 79      	ckbitmap: ld	a,c		;determine bit number of interest.
E641: E607    		and	07h		;compute (d)=(e)=(c and 7)+1.
E643: 3C      		inc	a
E644: 5F      		ld	e,a		;save particular bit number.
E645: 57      		ld	d,a
              	;
              	;   compute (bc)=(bc)/8.
              	;
E646: 79      		ld	a,c
E647: 0F      		rrca			;now shift right 3 bits.
E648: 0F      		rrca	
E649: 0F      		rrca	
E64A: E61F    		and	1fh		;and clear bits 7,6,5.
E64C: 4F      		ld	c,a
E64D: 78      		ld	a,b
E64E: 87      		add	a,a		;now shift (b) into bits 7,6,5.
E64F: 87      		add	a,a
E650: 87      		add	a,a
E651: 87      		add	a,a
E652: 87      		add	a,a
E653: B1      		or	c		;and add in (c).
E654: 4F      		ld	c,a		;ok, (c) ha been completed.
E655: 78      		ld	a,b		;is there a better way of doing this?
E656: 0F      		rrca	
E657: 0F      		rrca	
E658: 0F      		rrca	
E659: E61F    		and	1fh
E65B: 47      		ld	b,a		;and now (b) is completed.
              	;
              	;   use this as an offset into the disk space allocation
              	; table.
              	;
E65C: 2ACAED  		ld	hl,(alocvect)
E65F: 09      		add	hl,bc
E660: 7E      		ld	a,(hl)		;now get correct byte.
E661: 07      	ckbmap1:rlca			;get correct bit into position 0.
E662: 1D      		dec	e
E663: C261E6  		jp	nz,ckbmap1
E666: C9      		ret	
              	;
              	;   set or clear the bit map such that block number (bc) will be marked
              	; as used. on entry, if (e)=0 then this bit will be cleared, if it equals
              	; 1 then it will be set (don't use anyother values).
              	;
E667: D5      	stbitmap: push	de
E668: CD40E6  		call	ckbitmap	;get the byte of interest.
E66B: E6FE    		and	0feh		;clear the affected bit.
E66D: C1      		pop	bc
E66E: B1      		or	c		;and now set it acording to (c).
              	;
              	;  entry to restore the original bit position and then store
              	; in table. (a) contains the value, (d) contains the bit
              	; position (1-8), and (hl) points to the address within the
              	; space allocation table for this byte.
              	;
E66F: 0F      	stbmap1:rrca			;restore original bit position.
E670: 15      		dec	d
E671: C26FE6  		jp	nz,stbmap1
E674: 77      		ld	(hl),a		;and stor byte in table.
E675: C9      		ret	
              	;
              	;   set/clear space used bits in allocation map for this file.
              	; on entry, (c)=1 to set the map and (c)=0 to clear it.
              	;
E676: CD69E5  	setfile:call	fcb2hl		;get address of fcb
E679: 111000  		ld	de,16
E67C: 19      		add	hl,de		;get to block number bytes.
E67D: C5      		push	bc
E67E: 0E11    		ld	c,17		;check all 17 bytes (max) of table.
E680: D1      	setfl1:	pop	de
E681: 0D      		dec	c		;done all bytes yet?
E682: C8      		ret	z
E683: D5      		push	de
E684: 3AE8ED  		ld	a,(bigdisk)	;check disk size for 16 bit block numbers.
E687: B7      		or	a
E688: CA93E6  		jp	z,setfl2
E68B: C5      		push	bc		;only 8 bit numbers. set (bc) to this one.
E68C: E5      		push	hl
E68D: 4E      		ld	c,(hl)		;get low byte from table, always
E68E: 0600    		ld	b,0		;set high byte to zero.
E690: C399E6  		jp	setfl3
E693: 0D      	setfl2:	dec	c		;for 16 bit block numbers, adjust counter.
E694: C5      		push	bc
E695: 4E      		ld	c,(hl)		;now get both the low and high bytes.
E696: 23      		inc	hl
E697: 46      		ld	b,(hl)
E698: E5      		push	hl
E699: 79      	setfl3:	ld	a,c		;block used?
E69A: B0      		or	b
E69B: CAA8E6  		jp	z,setfl4
E69E: 2AD1ED  		ld	hl,(dsksize)	;is this block number within the
E6A1: 7D      		ld	a,l		;space on the disk?
E6A2: 91      		sub	c
E6A3: 7C      		ld	a,h
E6A4: 98      		sbc	a,b
E6A5: D467E6  		call	nc,stbitmap	;yes, set the proper bit.
E6A8: E1      	setfl4:	pop	hl		;point to next block number in fcb.
E6A9: 23      		inc	hl
E6AA: C1      		pop	bc
E6AB: C380E6  		jp	setfl1
              	;
              	;   construct the space used allocation bit map for the active
              	; drive. if a file name starts with '$' and it is under the
              	; current user number, then (status) is set to minus 1. otherwise
              	; it is not set at all.
              	;
E6AE: 2AD1ED  	bitmap:	ld	hl,(dsksize)	;compute size of allocation table.
E6B1: 0E03    		ld	c,3
E6B3: CDF5E4  		call	shiftr		;(hl)=(hl)/8.
E6B6: 23      		inc	hl		;at lease 1 byte.
E6B7: 44      		ld	b,h
E6B8: 4D      		ld	c,l		;set (bc) to the allocation table length.
              	;
              	;   initialize the bitmap for this drive. right now, the first
              	; two bytes are specified by the disk parameter block. however
              	; a patch could be entered here if it were necessary to setup
              	; this table in a special mannor. for example, the bios could
              	; determine locations of 'bad blocks' and set them as already
              	; 'used' in the map.
              	;
E6B9: 2ACAED  		ld	hl,(alocvect)	;now zero out the table now.
E6BC: 3600    	bitmap1:ld	(hl),0
E6BE: 23      		inc	hl
E6BF: 0B      		dec	bc
E6C0: 78      		ld	a,b
E6C1: B1      		or	c
E6C2: C2BCE6  		jp	nz,bitmap1
E6C5: 2AD5ED  		ld	hl,(alloc0)	;get initial space used by directory.
E6C8: EB      		ex	de,hl
E6C9: 2ACAED  		ld	hl,(alocvect)	;and put this into map.
E6CC: 73      		ld	(hl),e
E6CD: 23      		inc	hl
E6CE: 72      		ld	(hl),d
              	;
              	;   end of initialization portion.
              	;
E6CF: CDACE3  		call	homedrv		;now home the drive.
E6D2: 2ABEED  		ld	hl,(scratch1)
E6D5: 3603    		ld	(hl),3		;force next directory request to read
E6D7: 23      		inc	hl		;in a sector.
E6D8: 3600    		ld	(hl),0
E6DA: CD09E6  		call	stfilpos	;clear initial file position also.
E6DD: 0EFF    	bitmap2:ld	c,0ffh		;read next file name in directory
E6DF: CD10E6  		call	nxentry		;and set checksum byte.
E6E2: CD00E6  		call	ckfilpos	;is there another file?
E6E5: C8      		ret	z
E6E6: CD69E5  		call	fcb2hl		;yes, get its address.
E6E9: 3EE5    		ld	a,0e5h
E6EB: BE      		cp	(hl)		;empty file entry?
E6EC: CADDE6  		jp	z,bitmap2
E6EF: 3A4CE3  		ld	a,(userno)	;no, correct user number?
E6F2: BE      		cp	(hl)
E6F3: C201E7  		jp	nz,bitmap3
E6F6: 23      		inc	hl
E6F7: 7E      		ld	a,(hl)		;yes, does name start with a '$'?
E6F8: D624    		sub	'$'
E6FA: C201E7  		jp	nz,bitmap3
E6FD: 3D      		dec	a		;yes, set atatus to minus one.
E6FE: 3250E3  		ld	(status),a
E701: 0E01    	bitmap3:ld	c,1		;now set this file's space as used in bit map.
E703: CD76E6  		call	setfile
E706: CD97E5  		call	chknmbr		;keep (scratch1) in bounds.
E709: C3DDE6  		jp	bitmap2
              	;
              	;   set the status (status) and return.
              	;
E70C: 3ADFED  	ststatus: ld	a,(fndstat)
E70F: C30CE3  		jp	setstat
              	;
              	;   check extents in (a) and (c). set the zero flag if they
              	; are the same. the number of 16k chunks of disk space that
              	; the directory extent covers is expressad is (extmask+1).
              	; no registers are modified.
              	;
E712: C5      	samext:	push	bc
E713: F5      		push	af
E714: 3AD0ED  		ld	a,(extmask)	;get extent mask and use it to
E717: 2F      		cpl			;to compare both extent numbers.
E718: 47      		ld	b,a		;save resulting mask here.
E719: 79      		ld	a,c		;mask first extent and save in (c).
E71A: A0      		and	b
E71B: 4F      		ld	c,a
E71C: F1      		pop	af		;now mask second extent and compare
E71D: A0      		and	b		;with the first one.
E71E: 91      		sub	c
E71F: E61F    		and	1fh		;(* only check buts 0-4 *)
E721: C1      		pop	bc		;the zero flag is set if they are the same.
E722: C9      		ret			;restore (bc) and return.
              	;
              	;   search for the first occurence of a file name. on entry,
              	; register (c) should contain the number of bytes of the fcb
              	; that must match.
              	;
E723: 3EFF    	findfst:ld	a,0ffh
E725: 32DFED  		ld	(fndstat),a
E728: 21E3ED  		ld	hl,counter	;save character count.
E72B: 71      		ld	(hl),c
E72C: 2A4EE3  		ld	hl,(params)	;get filename to match.
E72F: 22E4ED  		ld	(savefcb),hl	;and save.
E732: CD09E6  		call	stfilpos	;clear initial file position (set to 0ffffh).
E735: CDACE3  		call	homedrv		;home the drive.
              	;
              	;   entry to locate the next occurence of a filename within the
              	; directory. the disk is not expected to have been changed. if
              	; it was, then it will be write protected.
              	;
E738: 0E00    	findnxt:ld	c,0		;write protect the disk if changed.
E73A: CD10E6  		call	nxentry		;get next filename entry in directory.
E73D: CD00E6  		call	ckfilpos	;is file position = 0ffffh?
E740: CA9FE7  		jp	z,fndnxt6	;yes, exit now then.
E743: 2AE4ED  		ld	hl,(savefcb)	;set (de) pointing to filename to match.
E746: EB      		ex	de,hl
E747: 1A      		ld	a,(de)
E748: FEE5    		cp	0e5h		;empty directory entry?
E74A: CA55E7  		jp	z,fndnxt1	;(* are we trying to reserect erased entries? *)
E74D: D5      		push	de
E74E: CD8AE5  		call	morefls		;more files in directory?
E751: D1      		pop	de
E752: D29FE7  		jp	nc,fndnxt6	;no more. exit now.
E755: CD69E5  	fndnxt1:call	fcb2hl		;get address of this fcb in directory.
E758: 3AE3ED  		ld	a,(counter)	;get number of bytes (characters) to check.
E75B: 4F      		ld	c,a
E75C: 0600    		ld	b,0		;initialize byte position counter.
E75E: 79      	fndnxt2:ld	a,c		;are we done with the compare?
E75F: B7      		or	a
E760: CA8EE7  		jp	z,fndnxt5
E763: 1A      		ld	a,(de)		;no, check next byte.
E764: FE3F    		cp	'?'		;don't care about this character?
E766: CA87E7  		jp	z,fndnxt4
E769: 78      		ld	a,b		;get bytes position in fcb.
E76A: FE0D    		cp	13		;don't care about the thirteenth byte either.
E76C: CA87E7  		jp	z,fndnxt4
E76F: FE0C    		cp	12		;extent byte?
E771: 1A      		ld	a,(de)
E772: CA7EE7  		jp	z,fndnxt3
E775: 96      		sub	(hl)		;otherwise compare characters.
E776: E67F    		and	7fh
E778: C238E7  		jp	nz,findnxt	;not the same, check next entry.
E77B: C387E7  		jp	fndnxt4		;so far so good, keep checking.
E77E: C5      	fndnxt3:push	bc		;check the extent byte here.
E77F: 4E      		ld	c,(hl)
E780: CD12E7  		call	samext
E783: C1      		pop	bc
E784: C238E7  		jp	nz,findnxt	;not the same, look some more.
              	;
              	;   so far the names compare. bump pointers to the next byte
              	; and continue until all (c) characters have been checked.
              	;
E787: 13      	fndnxt4:inc	de		;bump pointers.
E788: 23      		inc	hl
E789: 04      		inc	b
E78A: 0D      		dec	c		;adjust character counter.
E78B: C35EE7  		jp	fndnxt2
E78E: 3AF5ED  	fndnxt5:ld	a,(filepos)	;return the position of this entry.
E791: E603    		and	03h
E793: 3250E3  		ld	(status),a
E796: 21DFED  		ld	hl,fndstat
E799: 7E      		ld	a,(hl)
E79A: 17      		rla	
E79B: D0      		ret	nc
E79C: AF      		xor	a
E79D: 77      		ld	(hl),a
E79E: C9      		ret	
              	;
              	;   filename was not found. set appropriate status.
              	;
E79F: CD09E6  	fndnxt6:call	stfilpos	;set (filepos) to 0ffffh.
E7A2: 3EFF    		ld	a,0ffh		;say not located.
E7A4: C30CE3  		jp	setstat
              	;
              	;   erase files from the directory. only the first byte of the
              	; fcb will be affected. it is set to (e5).
              	;
E7A7: CD5FE5  	erafile:call	chkwprt		;is disk write protected?
E7AA: 0E0C    		ld	c,12		;only compare file names.
E7AC: CD23E7  		call	findfst		;get first file name.
E7AF: CD00E6  	erafil1:call	ckfilpos	;any found?
E7B2: C8      		ret	z		;nope, we must be done.
E7B3: CD4FE5  		call	chkrofl		;is file read only?
E7B6: CD69E5  		call	fcb2hl		;nope, get address of fcb and
E7B9: 36E5    		ld	(hl),0e5h	;set first byte to 'empty'.
E7BB: 0E00    		ld	c,0		;clear the space from the bit map.
E7BD: CD76E6  		call	setfile
E7C0: CDD1E5  		call	dirwrite	;now write the directory sector back out.
E7C3: CD38E7  		call	findnxt		;find the next file name.
E7C6: C3AFE7  		jp	erafil1		;and repeat process.
              	;
              	;   look through the space allocation map (bit map) for the
              	; next available block. start searching at block number (bc-1).
              	; the search procedure is to look for an empty block that is
              	; before the starting block. if not empty, look at a later
              	; block number. in this way, we return the closest empty block
              	; on either side of the 'target' block number. this will speed
              	; access on random devices. for serial devices, this should be
              	; changed to look in the forward direction first and then start
              	; at the front and search some more.
              	;
              	;   on return, (de)= block number that is empty and (hl) =0
              	; if no empry block was found.
              	;
E7C9: 50      	fndspace: ld	d,b		;set (de) as the block that is checked.
E7CA: 59      		ld	e,c
              	;
              	;   look before target block. registers (bc) are used as the lower
              	; pointer and (de) as the upper pointer.
              	;
E7CB: 79      	fndspa1:ld	a,c		;is block 0 specified?
E7CC: B0      		or	b
E7CD: CADCE7  		jp	z,fndspa2
E7D0: 0B      		dec	bc		;nope, check previous block.
E7D1: D5      		push	de
E7D2: C5      		push	bc
E7D3: CD40E6  		call	ckbitmap
E7D6: 1F      		rra			;is this block empty?
E7D7: D2F7E7  		jp	nc,fndspa3	;yes. use this.
              	;
              	;   note that the above logic gets the first block that it finds
              	; that is empty. thus a file could be written 'backward' making
              	; it very slow to access. this could be changed to look for the
              	; first empty block and then continue until the start of this
              	; empty space is located and then used that starting block.
              	; this should help speed up access to some files especially on
              	; a well used disk with lots of fairly small 'holes'.
              	;
E7DA: C1      		pop	bc		;nope, check some more.
E7DB: D1      		pop	de
              	;
              	;   now look after target block.
              	;
E7DC: 2AD1ED  	fndspa2:ld	hl,(dsksize)	;is block (de) within disk limits?
E7DF: 7B      		ld	a,e
E7E0: 95      		sub	l
E7E1: 7A      		ld	a,d
E7E2: 9C      		sbc	a,h
E7E3: D2FFE7  		jp	nc,fndspa4
E7E6: 13      		inc	de		;yes, move on to next one.
E7E7: C5      		push	bc
E7E8: D5      		push	de
E7E9: 42      		ld	b,d
E7EA: 4B      		ld	c,e
E7EB: CD40E6  		call	ckbitmap	;check it.
E7EE: 1F      		rra			;empty?
E7EF: D2F7E7  		jp	nc,fndspa3
E7F2: D1      		pop	de		;nope, continue searching.
E7F3: C1      		pop	bc
E7F4: C3CBE7  		jp	fndspa1
              	;
              	;   empty block found. set it as used and return with (hl)
              	; pointing to it (true?).
              	;
E7F7: 17      	fndspa3:rla			;reset byte.
E7F8: 3C      		inc	a		;and set bit 0.
E7F9: CD6FE6  		call	stbmap1		;update bit map.
E7FC: E1      		pop	hl		;set return registers.
E7FD: D1      		pop	de
E7FE: C9      		ret	
              	;
              	;   free block was not found. if (bc) is not zero, then we have
              	; not checked all of the disk space.
              	;
E7FF: 79      	fndspa4:ld	a,c
E800: B0      		or	b
E801: C2CBE7  		jp	nz,fndspa1
E804: 210000  		ld	hl,0		;set 'not found' status.
E807: C9      		ret	
              	;
              	;   move a complete fcb entry into the directory and write it.
              	;
E808: 0E00    	fcbset:	ld	c,0
E80A: 1E20    		ld	e,32		;length of each entry.
              	;
              	;   move (e) bytes from the fcb pointed to by (params) into
              	; fcb in directory starting at relative byte (c). this updated
              	; directory buffer is then written to the disk.
              	;
E80C: D5      	update:	push	de
E80D: 0600    		ld	b,0		;set (bc) to relative byte position.
E80F: 2A4EE3  		ld	hl,(params)	;get address of fcb.
E812: 09      		add	hl,bc		;compute starting byte.
E813: EB      		ex	de,hl
E814: CD69E5  		call	fcb2hl		;get address of fcb to update in directory.
E817: C1      		pop	bc		;set (c) to number of bytes to change.
E818: CD5AE3  		call	de2hl
E81B: CDCEE3  	update1:call	trksec		;determine the track and sector affected.
E81E: C3D1E5  		jp	dirwrite	;then write this sector out.
              	;
              	;   routine to change the name of all files on the disk with a
              	; specified name. the fcb contains the current name as the
              	; first 12 characters and the new name 16 bytes into the fcb.
              	;
E821: CD5FE5  	chgnames: call	chkwprt		;check for a write protected disk.
E824: 0E0C    		ld	c,12		;match first 12 bytes of fcb only.
E826: CD23E7  		call	findfst		;get first name.
E829: 2A4EE3  		ld	hl,(params)	;get address of fcb.
E82C: 7E      		ld	a,(hl)		;get user number.
E82D: 111000  		ld	de,16		;move over to desired name.
E830: 19      		add	hl,de
E831: 77      		ld	(hl),a		;keep same user number.
E832: CD00E6  	chgnam1:call	ckfilpos	;any matching file found?
E835: C8      		ret	z		;no, we must be done.
E836: CD4FE5  		call	chkrofl		;check for read only file.
E839: 0E10    		ld	c,16		;start 16 bytes into fcb.
E83B: 1E0C    		ld	e,12		;and update the first 12 bytes of directory.
E83D: CD0CE8  		call	update
E840: CD38E7  		call	findnxt		;get te next file name.
E843: C332E8  		jp	chgnam1		;and continue.
              	;
              	;   update a files attributes. the procedure is to search for
              	; every file with the same name as shown in fcb (ignoring bit 7)
              	; and then to update it (which includes bit 7). no other changes
              	; are made.
              	;
E846: 0E0C    	saveattr: ld	c,12		;match first 12 bytes.
E848: CD23E7  		call	findfst		;look for first filename.
E84B: CD00E6  	savatr1:call	ckfilpos	;was one found?
E84E: C8      		ret	z		;nope, we must be done.
E84F: 0E00    		ld	c,0		;yes, update the first 12 bytes now.
E851: 1E0C    		ld	e,12
E853: CD0CE8  		call	update		;update filename and write directory.
E856: CD38E7  		call	findnxt		;and get the next file.
E859: C34BE8  		jp	savatr1		;then continue until done.
              	;
              	;  open a file (name specified in fcb).
              	;
E85C: 0E0F    	openit:	ld	c,15		;compare the first 15 bytes.
E85E: CD23E7  		call	findfst		;get the first one in directory.
E861: CD00E6  		call	ckfilpos	;any at all?
E864: C8      		ret	z
E865: CDB1E4  	openit1:call	setext		;point to extent byte within users fcb.
E868: 7E      		ld	a,(hl)		;and get it.
E869: F5      		push	af		;save it and address.
E86A: E5      		push	hl
E86B: CD69E5  		call	fcb2hl		;point to fcb in directory.
E86E: EB      		ex	de,hl
E86F: 2A4EE3  		ld	hl,(params)	;this is the users copy.
E872: 0E20    		ld	c,32		;move it into users space.
E874: D5      		push	de
E875: CD5AE3  		call	de2hl
E878: CD83E5  		call	sets2b7		;set bit 7 in 's2' byte (unmodified).
E87B: D1      		pop	de		;now get the extent byte from this fcb.
E87C: 210C00  		ld	hl,12
E87F: 19      		add	hl,de
E880: 4E      		ld	c,(hl)		;into (c).
E881: 210F00  		ld	hl,15		;now get the record count byte into (b).
E884: 19      		add	hl,de
E885: 46      		ld	b,(hl)
E886: E1      		pop	hl		;keep the same extent as the user had originally.
E887: F1      		pop	af
E888: 77      		ld	(hl),a
E889: 79      		ld	a,c		;is it the same as in the directory fcb?
E88A: BE      		cp	(hl)
E88B: 78      		ld	a,b		;if yes, then use the same record count.
E88C: CA96E8  		jp	z,openit2
E88F: 3E00    		ld	a,0		;if the user specified an extent greater than
E891: DA96E8  		jp	c,openit2	;the one in the directory, then set record count to 0.
E894: 3E80    		ld	a,128		;otherwise set to maximum.
E896: 2A4EE3  	openit2:ld	hl,(params)	;set record count in users fcb to (a).
E899: 110F00  		ld	de,15
E89C: 19      		add	hl,de		;compute relative position.
E89D: 77      		ld	(hl),a		;and set the record count.
E89E: C9      		ret	
              	;
              	;   move two bytes from (de) to (hl) if (and only if) (hl)
              	; point to a zero value (16 bit).
              	;   return with zero flag set it (de) was moved. registers (de)
              	; and (hl) are not changed. however (a) is.
              	;
E89F: 7E      	moveword: ld	a,(hl)		;check for a zero word.
E8A0: 23      		inc	hl
E8A1: B6      		or	(hl)		;both bytes zero?
E8A2: 2B      		dec	hl
E8A3: C0      		ret	nz		;nope, just return.
E8A4: 1A      		ld	a,(de)		;yes, move two bytes from (de) into
E8A5: 77      		ld	(hl),a		;this zero space.
E8A6: 13      		inc	de
E8A7: 23      		inc	hl
E8A8: 1A      		ld	a,(de)
E8A9: 77      		ld	(hl),a
E8AA: 1B      		dec	de		;don't disturb these registers.
E8AB: 2B      		dec	hl
E8AC: C9      		ret	
              	;
              	;   get here to close a file specified by (fcb).
              	;
E8AD: AF      	closeit:xor	a		;clear status and file position bytes.
E8AE: 3250E3  		ld	(status),a
E8B1: 32F5ED  		ld	(filepos),a
E8B4: 32F6ED  		ld	(filepos+1),a
E8B7: CD29E5  		call	getwprt		;get write protect bit for this drive.
E8BA: C0      		ret	nz		;just return if it is set.
E8BB: CD74E5  		call	gets2		;else get the 's2' byte.
E8BE: E680    		and	80h		;and look at bit 7 (file unmodified?).
E8C0: C0      		ret	nz		;just return if set.
E8C1: 0E0F    		ld	c,15		;else look up this file in directory.
E8C3: CD23E7  		call	findfst
E8C6: CD00E6  		call	ckfilpos	;was it found?
E8C9: C8      		ret	z		;just return if not.
E8CA: 011000  		ld	bc,16		;set (hl) pointing to records used section.
E8CD: CD69E5  		call	fcb2hl
E8D0: 09      		add	hl,bc
E8D1: EB      		ex	de,hl
E8D2: 2A4EE3  		ld	hl,(params)	;do the same for users specified fcb.
E8D5: 09      		add	hl,bc
E8D6: 0E10    		ld	c,16		;this many bytes are present in this extent.
E8D8: 3AE8ED  	closeit1: ld	a,(bigdisk)	;8 or 16 bit record numbers?
E8DB: B7      		or	a
E8DC: CAF3E8  		jp	z,closeit4
E8DF: 7E      		ld	a,(hl)		;just 8 bit. get one from users fcb.
E8E0: B7      		or	a
E8E1: 1A      		ld	a,(de)		;now get one from directory fcb.
E8E2: C2E6E8  		jp	nz,closeit2
E8E5: 77      		ld	(hl),a		;users byte was zero. update from directory.
E8E6: B7      	closeit2: or	a
E8E7: C2ECE8  		jp	nz,closeit3
E8EA: 7E      		ld	a,(hl)		;directories byte was zero, update from users fcb.
E8EB: 12      		ld	(de),a
E8EC: BE      	closeit3: cp	(hl)		;if neither one of these bytes were zero,
E8ED: C22AE9  		jp	nz,closeit7	;then close error if they are not the same.
E8F0: C308E9  		jp	closeit5	;ok so far, get to next byte in fcbs.
E8F3: CD9FE8  	closeit4: call	moveword	;update users fcb if it is zero.
E8F6: EB      		ex	de,hl
E8F7: CD9FE8  		call	moveword	;update directories fcb if it is zero.
E8FA: EB      		ex	de,hl
E8FB: 1A      		ld	a,(de)		;if these two values are no different,
E8FC: BE      		cp	(hl)		;then a close error occured.
E8FD: C22AE9  		jp	nz,closeit7
E900: 13      		inc	de		;check second byte.
E901: 23      		inc	hl
E902: 1A      		ld	a,(de)
E903: BE      		cp	(hl)
E904: C22AE9  		jp	nz,closeit7
E907: 0D      		dec	c		;remember 16 bit values.
E908: 13      	closeit5: inc	de		;bump to next item in table.
E909: 23      		inc	hl
E90A: 0D      		dec	c		;there are 16 entries only.
E90B: C2D8E8  		jp	nz,closeit1	;continue if more to do.
E90E: 01ECFF  		ld	bc,0ffech	;backup 20 places (extent byte).
E911: 09      		add	hl,bc
E912: EB      		ex	de,hl
E913: 09      		add	hl,bc
E914: 1A      		ld	a,(de)
E915: BE      		cp	(hl)		;directory's extent already greater than the
E916: DA22E9  		jp	c,closeit6	;users extent?
E919: 77      		ld	(hl),a		;no, update directory extent.
E91A: 010300  		ld	bc,3		;and update the record count byte in
E91D: 09      		add	hl,bc		;directories fcb.
E91E: EB      		ex	de,hl
E91F: 09      		add	hl,bc
E920: 7E      		ld	a,(hl)		;get from user.
E921: 12      		ld	(de),a		;and put in directory.
E922: 3EFF    	closeit6: ld	a,0ffh		;set 'was open and is now closed' byte.
E924: 32DDED  		ld	(closeflg),a
E927: C31BE8  		jp	update1		;update the directory now.
E92A: 2150E3  	closeit7: ld	hl,status	;set return status and then return.
E92D: 35      		dec	(hl)
E92E: C9      		ret	
              	;
              	;   routine to get the next empty space in the directory. it
              	; will then be cleared for use.
              	;
E92F: CD5FE5  	getempty: call	chkwprt		;make sure disk is not write protected.
E932: 2A4EE3  		ld	hl,(params)	;save current parameters (fcb).
E935: E5      		push	hl
E936: 21B7ED  		ld	hl,emptyfcb	;use special one for empty space.
E939: 224EE3  		ld	(params),hl
E93C: 0E01    		ld	c,1		;search for first empty spot in directory.
E93E: CD23E7  		call	findfst		;(* only check first byte *)
E941: CD00E6  		call	ckfilpos	;none?
E944: E1      		pop	hl
E945: 224EE3  		ld	(params),hl	;restore original fcb address.
E948: C8      		ret	z		;return if no more space.
E949: EB      		ex	de,hl
E94A: 210F00  		ld	hl,15		;point to number of records for this file.
E94D: 19      		add	hl,de
E94E: 0E11    		ld	c,17		;and clear all of this space.
E950: AF      		xor	a
E951: 77      	getmt1:	ld	(hl),a
E952: 23      		inc	hl
E953: 0D      		dec	c
E954: C251E9  		jp	nz,getmt1
E957: 210D00  		ld	hl,13		;clear the 's1' byte also.
E95A: 19      		add	hl,de
E95B: 77      		ld	(hl),a
E95C: CD97E5  		call	chknmbr		;keep (scratch1) within bounds.
E95F: CD08E8  		call	fcbset		;write out this fcb entry to directory.
E962: C383E5  		jp	sets2b7		;set 's2' byte bit 7 (unmodified at present).
              	;
              	;   routine to close the current extent and open the next one
              	; for reading.
              	;
E965: AF      	getnext:xor	a
E966: 32DDED  		ld	(closeflg),a	;clear close flag.
E969: CDADE8  		call	closeit		;close this extent.
E96C: CD00E6  		call	ckfilpos
E96F: C8      		ret	z		;not there???
E970: 2A4EE3  		ld	hl,(params)	;get extent byte.
E973: 010C00  		ld	bc,12
E976: 09      		add	hl,bc
E977: 7E      		ld	a,(hl)		;and increment it.
E978: 3C      		inc	a
E979: E61F    		and	1fh		;keep within range 0-31.
E97B: 77      		ld	(hl),a
E97C: CA8EE9  		jp	z,gtnext1	;overflow?
E97F: 47      		ld	b,a		;mask extent byte.
E980: 3AD0ED  		ld	a,(extmask)
E983: A0      		and	b
E984: 21DDED  		ld	hl,closeflg	;check close flag (0ffh is ok).
E987: A6      		and	(hl)
E988: CA99E9  		jp	z,gtnext2	;if zero, we must read in next extent.
E98B: C3B7E9  		jp	gtnext3		;else, it is already in memory.
E98E: 010200  	gtnext1:ld	bc,2		;point to the 's2' byte.
E991: 09      		add	hl,bc
E992: 34      		inc	(hl)		;and bump it.
E993: 7E      		ld	a,(hl)		;too many extents?
E994: E60F    		and	0fh
E996: CAC1E9  		jp	z,gtnext5	;yes, set error code.
              	;
              	;   get here to open the next extent.
              	;
E999: 0E0F    	gtnext2:ld	c,15		;set to check first 15 bytes of fcb.
E99B: CD23E7  		call	findfst		;find the first one.
E99E: CD00E6  		call	ckfilpos	;none available?
E9A1: C2B7E9  		jp	nz,gtnext3
E9A4: 3ADEED  		ld	a,(rdwrtflg)	;no extent present. can we open an empty one?
E9A7: 3C      		inc	a		;0ffh means reading (so not possible).
E9A8: CAC1E9  		jp	z,gtnext5	;or an error.
E9AB: CD2FE9  		call	getempty	;we are writing, get an empty entry.
E9AE: CD00E6  		call	ckfilpos	;none?
E9B1: CAC1E9  		jp	z,gtnext5	;error if true.
E9B4: C3BAE9  		jp	gtnext4		;else we are almost done.
E9B7: CD65E8  	gtnext3:call	openit1		;open this extent.
E9BA: CDC6E4  	gtnext4:call	strdata		;move in updated data (rec #, extent #, etc.)
E9BD: AF      		xor	a		;clear status and return.
E9BE: C30CE3  		jp	setstat
              	;
              	;   error in extending the file. too many extents were needed
              	; or not enough space on the disk.
              	;
E9C1: CD10E3  	gtnext5:call	ioerr1		;set error code, clear bit 7 of 's2'
E9C4: C383E5  		jp	sets2b7		;so this is not written on a close.
              	;
              	;   read a sequential file.
              	;
E9C7: 3E01    	rdseq:	ld	a,1		;set sequential access mode.
E9C9: 32E0ED  		ld	(mode),a
E9CC: 3EFF    	rdseq1:	ld	a,0ffh		;don't allow reading unwritten space.
E9CE: 32DEED  		ld	(rdwrtflg),a
E9D1: CDC6E4  		call	strdata		;put rec# and ext# into fcb.
E9D4: 3AEEED  		ld	a,(savnrec)	;get next record to read.
E9D7: 21ECED  		ld	hl,savnxt	;get number of records in extent.
E9DA: BE      		cp	(hl)		;within this extent?
E9DB: DAF1E9  		jp	c,rdseq2
E9DE: FE80    		cp	128		;no. is this extent fully used?
E9E0: C206EA  		jp	nz,rdseq3	;no. end-of-file.
E9E3: CD65E9  		call	getnext		;yes, open the next one.
E9E6: AF      		xor	a		;reset next record to read.
E9E7: 32EEED  		ld	(savnrec),a
E9EA: 3A50E3  		ld	a,(status)	;check on open, successful?
E9ED: B7      		or	a
E9EE: C206EA  		jp	nz,rdseq3	;no, error.
E9F1: CD82E4  	rdseq2:	call	comblk		;ok. compute block number to read.
E9F4: CD8FE4  		call	chkblk		;check it. within bounds?
E9F7: CA06EA  		jp	z,rdseq3	;no, error.
E9FA: CD95E4  		call	logical		;convert (blknmbr) to logical sector (128 byte).
E9FD: CDDCE3  		call	trksec1		;set the track and sector for this block #.
EA00: CDBDE3  		call	doread		;and read it.
EA03: C3DDE4  		jp	setnrec		;and set the next record to be accessed.
              	;
              	;   read error occured. set status and return.
              	;
EA06: C310E3  	rdseq3:	jp	ioerr1
              	;
              	;   write the next sequential record.
              	;
EA09: 3E01    	wtseq:	ld	a,1		;set sequential access mode.
EA0B: 32E0ED  		ld	(mode),a
EA0E: 3E00    	wtseq1:	ld	a,0		;allow an addition empty extent to be opened.
EA10: 32DEED  		ld	(rdwrtflg),a
EA13: CD5FE5  		call	chkwprt		;check write protect status.
EA16: 2A4EE3  		ld	hl,(params)
EA19: CD52E5  		call	ckrof1		;check for read only file, (hl) already set to fcb.
EA1C: CDC6E4  		call	strdata		;put updated data into fcb.
EA1F: 3AEEED  		ld	a,(savnrec)	;get record number to write.
EA22: FE80    		cp	128		;within range?
EA24: D210E3  		jp	nc,ioerr1	;no, error(?).
EA27: CD82E4  		call	comblk		;compute block number.
EA2A: CD8FE4  		call	chkblk		;check number.
EA2D: 0E00    		ld	c,0		;is there one to write to?
EA2F: C279EA  		jp	nz,wtseq6	;yes, go do it.
EA32: CD49E4  		call	getblock	;get next block number within fcb to use.
EA35: 32E2ED  		ld	(relblock),a	;and save.
EA38: 010000  		ld	bc,0		;start looking for space from the start
EA3B: B7      		or	a		;if none allocated as yet.
EA3C: CA46EA  		jp	z,wtseq2
EA3F: 4F      		ld	c,a		;extract previous block number from fcb
EA40: 0B      		dec	bc		;so we can be closest to it.
EA41: CD69E4  		call	extblk
EA44: 44      		ld	b,h
EA45: 4D      		ld	c,l
EA46: CDC9E7  	wtseq2:	call	fndspace	;find the next empty block nearest number (bc).
EA49: 7D      		ld	a,l		;check for a zero number.
EA4A: B4      		or	h
EA4B: C253EA  		jp	nz,wtseq3
EA4E: 3E02    		ld	a,2		;no more space?
EA50: C30CE3  		jp	setstat
EA53: 22F0ED  	wtseq3:	ld	(blknmbr),hl	;save block number to access.
EA56: EB      		ex	de,hl		;put block number into (de).
EA57: 2A4EE3  		ld	hl,(params)	;now we must update the fcb for this
EA5A: 011000  		ld	bc,16		;newly allocated block.
EA5D: 09      		add	hl,bc
EA5E: 3AE8ED  		ld	a,(bigdisk)	;8 or 16 bit block numbers?
EA61: B7      		or	a
EA62: 3AE2ED  		ld	a,(relblock)	;(* update this entry *)
EA65: CA6FEA  		jp	z,wtseq4	;zero means 16 bit ones.
EA68: CD6FE5  		call	adda2hl		;(hl)=(hl)+(a)
EA6B: 73      		ld	(hl),e		;store new block number.
EA6C: C377EA  		jp	wtseq5
EA6F: 4F      	wtseq4:	ld	c,a		;compute spot in this 16 bit table.
EA70: 0600    		ld	b,0
EA72: 09      		add	hl,bc
EA73: 09      		add	hl,bc
EA74: 73      		ld	(hl),e		;stuff block number (de) there.
EA75: 23      		inc	hl
EA76: 72      		ld	(hl),d
EA77: 0E02    	wtseq5:	ld	c,2		;set (c) to indicate writing to un-used disk space.
EA79: 3A50E3  	wtseq6:	ld	a,(status)	;are we ok so far?
EA7C: B7      		or	a
EA7D: C0      		ret	nz
EA7E: C5      		push	bc		;yes, save write flag for bios (register c).
EA7F: CD95E4  		call	logical		;convert (blknmbr) over to loical sectors.
EA82: 3AE0ED  		ld	a,(mode)	;get access mode flag (1=sequential,
EA85: 3D      		dec	a		;0=random, 2=special?).
EA86: 3D      		dec	a
EA87: C2C6EA  		jp	nz,wtseq9
              	;
              	;   special random i/o from function #40. maybe for m/pm, but the
              	; current block, if it has not been written to, will be zeroed
              	; out and then written (reason?).
              	;
EA8A: C1      		pop	bc
EA8B: C5      		push	bc
EA8C: 79      		ld	a,c		;get write status flag (2=writing unused space).
EA8D: 3D      		dec	a
EA8E: 3D      		dec	a
EA8F: C2C6EA  		jp	nz,wtseq9
EA92: E5      		push	hl
EA93: 2AC4ED  		ld	hl,(dirbuf)	;zero out the directory buffer.
EA96: 57      		ld	d,a		;note that (a) is zero here.
EA97: 77      	wtseq7:	ld	(hl),a
EA98: 23      		inc	hl
EA99: 14      		inc	d		;do 128 bytes.
EA9A: F297EA  		jp	p,wtseq7
EA9D: CDEBE5  		call	dirdma		;tell the bios the dma address for directory access.
EAA0: 2AF2ED  		ld	hl,(logsect)	;get sector that starts current block.
EAA3: 0E02    		ld	c,2		;set 'writing to unused space' flag.
EAA5: 22F0ED  	wtseq8:	ld	(blknmbr),hl	;save sector to write.
EAA8: C5      		push	bc
EAA9: CDDCE3  		call	trksec1		;determine its track and sector numbers.
EAAC: C1      		pop	bc
EAAD: CDC3E3  		call	dowrite		;now write out 128 bytes of zeros.
EAB0: 2AF0ED  		ld	hl,(blknmbr)	;get sector number.
EAB3: 0E00    		ld	c,0		;set normal write flag.
EAB5: 3ACFED  		ld	a,(blkmask)	;determine if we have written the entire
EAB8: 47      		ld	b,a		;physical block.
EAB9: A5      		and	l
EABA: B8      		cp	b
EABB: 23      		inc	hl		;prepare for the next one.
EABC: C2A5EA  		jp	nz,wtseq8	;continue until (blkmask+1) sectors written.
EABF: E1      		pop	hl		;reset next sector number.
EAC0: 22F0ED  		ld	(blknmbr),hl
EAC3: CDE5E5  		call	defdma		;and reset dma address.
              	;
              	;   normal disk write. set the desired track and sector then
              	; do the actual write.
              	;
EAC6: CDDCE3  	wtseq9:	call	trksec1		;determine track and sector for this write.
EAC9: C1      		pop	bc		;get write status flag.
EACA: C5      		push	bc
EACB: CDC3E3  		call	dowrite		;and write this out.
EACE: C1      		pop	bc
EACF: 3AEEED  		ld	a,(savnrec)	;get number of records in file.
EAD2: 21ECED  		ld	hl,savnxt	;get last record written.
EAD5: BE      		cp	(hl)
EAD6: DADDEA  		jp	c,wtseq10
EAD9: 77      		ld	(hl),a		;we have to update record count.
EADA: 34      		inc	(hl)
EADB: 0E02    		ld	c,2
              	;
              	;*   this area has been patched to correct disk update problem
              	;* when using blocking and de-blocking in the bios.
              	;
EADD: 00      	wtseq10:nop			;was 'dcr c'
EADE: 00      		nop			;was 'dcr c'
EADF: 210000  		ld	hl,0		;was 'jnz wtseq99'
              	;
              	; *   end of patch.
              	;
EAE2: F5      		push	af
EAE3: CD74E5  		call	gets2		;set 'extent written to' flag.
EAE6: E67F    		and	7fh		;(* clear bit 7 *)
EAE8: 77      		ld	(hl),a
EAE9: F1      		pop	af		;get record count for this extent.
EAEA: FE7F    	wtseq99:cp	127		;is it full?
EAEC: C20BEB  		jp	nz,wtseq12
EAEF: 3AE0ED  		ld	a,(mode)	;yes, are we in sequential mode?
EAF2: FE01    		cp	1
EAF4: C20BEB  		jp	nz,wtseq12
EAF7: CDDDE4  		call	setnrec		;yes, set next record number.
EAFA: CD65E9  		call	getnext		;and get next empty space in directory.
EAFD: 2150E3  		ld	hl,status	;ok?
EB00: 7E      		ld	a,(hl)
EB01: B7      		or	a
EB02: C209EB  		jp	nz,wtseq11
EB05: 3D      		dec	a		;yes, set record count to -1.
EB06: 32EEED  		ld	(savnrec),a
EB09: 3600    	wtseq11:ld	(hl),0		;clear status.
EB0B: C3DDE4  	wtseq12:jp	setnrec		;set next record to access.
              	;
              	;   for random i/o, set the fcb for the desired record number
              	; based on the 'r0,r1,r2' bytes. these bytes in the fcb are
              	; used as follows:
              	;
              	;       fcb+35            fcb+34            fcb+33
              	;  |     'r-2'      |      'r-1'      |      'r-0'     |
              	;  |7             0 | 7             0 | 7             0|
              	;  |0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0|
              	;  |    overflow   | | extra |  extent   |   record #  |
              	;  | ______________| |_extent|__number___|_____________|
              	;                     also 's2'
              	;
              	;   on entry, register (c) contains 0ffh if this is a read
              	; and thus we can not access unwritten disk space. otherwise,
              	; another extent will be opened (for writing) if required.
              	;
EB0E: AF      	position: xor	a		;set random i/o flag.
EB0F: 32E0ED  		ld	(mode),a
              	;
              	;   special entry (function #40). m/pm ?
              	;
EB12: C5      	positn1:push	bc		;save read/write flag.
EB13: 2A4EE3  		ld	hl,(params)	;get address of fcb.
EB16: EB      		ex	de,hl
EB17: 212100  		ld	hl,33		;now get byte 'r0'.
EB1A: 19      		add	hl,de
EB1B: 7E      		ld	a,(hl)
EB1C: E67F    		and	7fh		;keep bits 0-6 for the record number to access.
EB1E: F5      		push	af
EB1F: 7E      		ld	a,(hl)		;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
EB20: 17      		rla	
EB21: 23      		inc	hl
EB22: 7E      		ld	a,(hl)
EB23: 17      		rla	
EB24: E61F    		and	1fh		;and save this in bits 0-4 of (c).
EB26: 4F      		ld	c,a		;this is the extent byte.
EB27: 7E      		ld	a,(hl)		;now get the extra extent byte.
EB28: 1F      		rra	
EB29: 1F      		rra	
EB2A: 1F      		rra	
EB2B: 1F      		rra	
EB2C: E60F    		and	0fh
EB2E: 47      		ld	b,a		;and save it in (b).
EB2F: F1      		pop	af		;get record number back to (a).
EB30: 23      		inc	hl		;check overflow byte 'r2'.
EB31: 6E      		ld	l,(hl)
EB32: 2C      		inc	l
EB33: 2D      		dec	l
EB34: 2E06    		ld	l,6		;prepare for error.
EB36: C296EB  		jp	nz,positn5	;out of disk space error.
EB39: 212000  		ld	hl,32		;store record number into fcb.
EB3C: 19      		add	hl,de
EB3D: 77      		ld	(hl),a
EB3E: 210C00  		ld	hl,12		;and now check the extent byte.
EB41: 19      		add	hl,de
EB42: 79      		ld	a,c
EB43: 96      		sub	(hl)		;same extent as before?
EB44: C252EB  		jp	nz,positn2
EB47: 210E00  		ld	hl,14		;yes, check extra extent byte 's2' also.
EB4A: 19      		add	hl,de
EB4B: 78      		ld	a,b
EB4C: 96      		sub	(hl)
EB4D: E67F    		and	7fh
EB4F: CA8AEB  		jp	z,positn3	;same, we are almost done then.
              	;
              	;  get here when another extent is required.
              	;
EB52: C5      	positn2:push	bc
EB53: D5      		push	de
EB54: CDADE8  		call	closeit		;close current extent.
EB57: D1      		pop	de
EB58: C1      		pop	bc
EB59: 2E03    		ld	l,3		;prepare for error.
EB5B: 3A50E3  		ld	a,(status)
EB5E: 3C      		inc	a
EB5F: CA8FEB  		jp	z,positn4	;close error.
EB62: 210C00  		ld	hl,12		;put desired extent into fcb now.
EB65: 19      		add	hl,de
EB66: 71      		ld	(hl),c
EB67: 210E00  		ld	hl,14		;and store extra extent byte 's2'.
EB6A: 19      		add	hl,de
EB6B: 70      		ld	(hl),b
EB6C: CD5CE8  		call	openit		;try and get this extent.
EB6F: 3A50E3  		ld	a,(status)	;was it there?
EB72: 3C      		inc	a
EB73: C28AEB  		jp	nz,positn3
EB76: C1      		pop	bc		;no. can we create a new one (writing?).
EB77: C5      		push	bc
EB78: 2E04    		ld	l,4		;prepare for error.
EB7A: 0C      		inc	c
EB7B: CA8FEB  		jp	z,positn4	;nope, reading unwritten space error.
EB7E: CD2FE9  		call	getempty	;yes we can, try to find space.
EB81: 2E05    		ld	l,5		;prepare for error.
EB83: 3A50E3  		ld	a,(status)
EB86: 3C      		inc	a
EB87: CA8FEB  		jp	z,positn4	;out of space?
              	;
              	;   normal return location. clear error code and return.
              	;
EB8A: C1      	positn3:pop	bc		;restore stack.
EB8B: AF      		xor	a		;and clear error code byte.
EB8C: C30CE3  		jp	setstat
              	;
              	;   error. set the 's2' byte to indicate this (why?).
              	;
EB8F: E5      	positn4:push	hl
EB90: CD74E5  		call	gets2
EB93: 36C0    		ld	(hl),0c0h
EB95: E1      		pop	hl
              	;
              	;   return with error code (presently in l).
              	;
EB96: C1      	positn5:pop	bc
EB97: 7D      		ld	a,l		;get error code.
EB98: 3250E3  		ld	(status),a
EB9B: C383E5  		jp	sets2b7
              	;
              	;   read a random record.
              	;
EB9E: 0EFF    	readran:ld	c,0ffh		;set 'read' status.
EBA0: CD0EEB  		call	position	;position the file to proper record.
EBA3: CCCCE9  		call	z,rdseq1	;and read it as usual (if no errors).
EBA6: C9      		ret	
              	;
              	;   write to a random record.
              	;
EBA7: 0E00    	writeran: ld	c,0		;set 'writing' flag.
EBA9: CD0EEB  		call	position	;position the file to proper record.
EBAC: CC0EEA  		call	z,wtseq1	;and write as usual (if no errors).
EBAF: C9      		ret	
              	;
              	;   compute the random record number. enter with (hl) pointing
              	; to a fcb an (de) contains a relative location of a record
              	; number. on exit, (c) contains the 'r0' byte, (b) the 'r1'
              	; byte, and (a) the 'r2' byte.
              	;
              	;   on return, the zero flag is set if the record is within
              	; bounds. otherwise, an overflow occured.
              	;
EBB0: EB      	comprand: ex	de,hl		;save fcb pointer in (de).
EBB1: 19      		add	hl,de		;compute relative position of record #.
EBB2: 4E      		ld	c,(hl)		;get record number into (bc).
EBB3: 0600    		ld	b,0
EBB5: 210C00  		ld	hl,12		;now get extent.
EBB8: 19      		add	hl,de
EBB9: 7E      		ld	a,(hl)		;compute (bc)=(record #)+(extent)*128.
EBBA: 0F      		rrca			;move lower bit into bit 7.
EBBB: E680    		and	80h		;and ignore all other bits.
EBBD: 81      		add	a,c		;add to our record number.
EBBE: 4F      		ld	c,a
EBBF: 3E00    		ld	a,0		;take care of any carry.
EBC1: 88      		adc	a,b
EBC2: 47      		ld	b,a
EBC3: 7E      		ld	a,(hl)		;now get the upper bits of extent into
EBC4: 0F      		rrca			;bit positions 0-3.
EBC5: E60F    		and	0fh		;and ignore all others.
EBC7: 80      		add	a,b		;add this in to 'r1' byte.
EBC8: 47      		ld	b,a
EBC9: 210E00  		ld	hl,14		;get the 's2' byte (extra extent).
EBCC: 19      		add	hl,de
EBCD: 7E      		ld	a,(hl)
EBCE: 87      		add	a,a		;and shift it left 4 bits (bits 4-7).
EBCF: 87      		add	a,a
EBD0: 87      		add	a,a
EBD1: 87      		add	a,a
EBD2: F5      		push	af		;save carry flag (bit 0 of flag byte).
EBD3: 80      		add	a,b		;now add extra extent into 'r1'.
EBD4: 47      		ld	b,a
EBD5: F5      		push	af		;and save carry (overflow byte 'r2').
EBD6: E1      		pop	hl		;bit 0 of (l) is the overflow indicator.
EBD7: 7D      		ld	a,l
EBD8: E1      		pop	hl		;and same for first carry flag.
EBD9: B5      		or	l		;either one of these set?
EBDA: E601    		and	01h		;only check the carry flags.
EBDC: C9      		ret	
              	;
              	;   routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
              	; reflect the last record used for a random (or other) file.
              	; this reads the directory and looks at all extents computing
              	; the largerst record number for each and keeping the maximum
              	; value only. then 'r0', 'r1', and 'r2' will reflect this
              	; maximum record number. this is used to compute the space used
              	; by a random file.
              	;
EBDD: 0E0C    	ransize:ld	c,12		;look thru directory for first entry with
EBDF: CD23E7  		call	findfst		;this name.
EBE2: 2A4EE3  		ld	hl,(params)	;zero out the 'r0, r1, r2' bytes.
EBE5: 112100  		ld	de,33
EBE8: 19      		add	hl,de
EBE9: E5      		push	hl
EBEA: 72      		ld	(hl),d		;note that (d)=0.
EBEB: 23      		inc	hl
EBEC: 72      		ld	(hl),d
EBED: 23      		inc	hl
EBEE: 72      		ld	(hl),d
EBEF: CD00E6  	ransiz1:call	ckfilpos	;is there an extent to process?
EBF2: CA17EC  		jp	z,ransiz3	;no, we are done.
EBF5: CD69E5  		call	fcb2hl		;set (hl) pointing to proper fcb in dir.
EBF8: 110F00  		ld	de,15		;point to last record in extent.
EBFB: CDB0EB  		call	comprand	;and compute random parameters.
EBFE: E1      		pop	hl
EBFF: E5      		push	hl		;now check these values against those
EC00: 5F      		ld	e,a		;already in fcb.
EC01: 79      		ld	a,c		;the carry flag will be set if those
EC02: 96      		sub	(hl)		;in the fcb represent a larger size than
EC03: 23      		inc	hl		;this extent does.
EC04: 78      		ld	a,b
EC05: 9E      		sbc	a,(hl)
EC06: 23      		inc	hl
EC07: 7B      		ld	a,e
EC08: 9E      		sbc	a,(hl)
EC09: DA11EC  		jp	c,ransiz2
EC0C: 73      		ld	(hl),e		;we found a larger (in size) extent.
EC0D: 2B      		dec	hl		;stuff these values into fcb.
EC0E: 70      		ld	(hl),b
EC0F: 2B      		dec	hl
EC10: 71      		ld	(hl),c
EC11: CD38E7  	ransiz2:call	findnxt		;now get the next extent.
EC14: C3EFEB  		jp	ransiz1		;continue til all done.
EC17: E1      	ransiz3:pop	hl		;we are done, restore the stack and
EC18: C9      		ret			;return.
              	;
              	;   function to return the random record position of a given
              	; file which has been read in sequential mode up to now.
              	;
EC19: 2A4EE3  	setran:	ld	hl,(params)	;point to fcb.
EC1C: 112000  		ld	de,32		;and to last used record.
EC1F: CDB0EB  		call	comprand	;compute random position.
EC22: 212100  		ld	hl,33		;now stuff these values into fcb.
EC25: 19      		add	hl,de
EC26: 71      		ld	(hl),c		;move 'r0'.
EC27: 23      		inc	hl
EC28: 70      		ld	(hl),b		;and 'r1'.
EC29: 23      		inc	hl
EC2A: 77      		ld	(hl),a		;and lastly 'r2'.
EC2B: C9      		ret	
              	;
              	;   this routine select the drive specified in (active) and
              	; update the login vector and bitmap table if this drive was
              	; not already active.
              	;
EC2C: 2ABAED  	logindrv: ld	hl,(login)	;get the login vector.
EC2F: 3A4DE3  		ld	a,(active)	;get the default drive.
EC32: 4F      		ld	c,a
EC33: CDF5E4  		call	shiftr		;position active bit for this drive
EC36: E5      		push	hl		;into bit 0.
EC37: EB      		ex	de,hl
EC38: CD64E3  		call	select		;select this drive.
EC3B: E1      		pop	hl
EC3C: CC52E3  		call	z,slcterr	;valid drive?
EC3F: 7D      		ld	a,l		;is this a newly activated drive?
EC40: 1F      		rra	
EC41: D8      		ret	c
EC42: 2ABAED  		ld	hl,(login)	;yes, update the login vector.
EC45: 4D      		ld	c,l
EC46: 44      		ld	b,h
EC47: CD16E5  		call	setbit
EC4A: 22BAED  		ld	(login),hl	;and save.
EC4D: C3AEE6  		jp	bitmap		;now update the bitmap.
              	;
              	;   function to set the active disk number.
              	;
EC50: 3AE1ED  	setdsk:	ld	a,(eparam)	;get parameter passed and see if this
EC53: 214DE3  		ld	hl,active	;represents a change in drives.
EC56: BE      		cp	(hl)
EC57: C8      		ret	z
EC58: 77      		ld	(hl),a		;yes it does, log it in.
EC59: C32CEC  		jp	logindrv
              	;
              	;   this is the 'auto disk select' routine. the firsst byte
              	; of the fcb is examined for a drive specification. if non
              	; zero then the drive will be selected and loged in.
              	;
EC5C: 3EFF    	autosel:ld	a,0ffh		;say 'auto-select activated'.
EC5E: 32E9ED  		ld	(auto),a
EC61: 2A4EE3  		ld	hl,(params)	;get drive specified.
EC64: 7E      		ld	a,(hl)
EC65: E61F    		and	1fh		;look at lower 5 bits.
EC67: 3D      		dec	a		;adjust for (1=a, 2=b) etc.
EC68: 32E1ED  		ld	(eparam),a	;and save for the select routine.
EC6B: FE1E    		cp	1eh		;check for 'no change' condition.
EC6D: D280EC  		jp	nc,autosl1	;yes, don't change.
EC70: 3A4DE3  		ld	a,(active)	;we must change, save currently active
EC73: 32EAED  		ld	(olddrv),a	;drive.
EC76: 7E      		ld	a,(hl)		;and save first byte of fcb also.
EC77: 32EBED  		ld	(autoflag),a	;this must be non-zero.
EC7A: E6E0    		and	0e0h		;whats this for (bits 6,7 are used for
EC7C: 77      		ld	(hl),a		;something)?
EC7D: CD50EC  		call	setdsk		;select and log in this drive.
EC80: 3A4CE3  	autosl1:ld	a,(userno)	;move user number into fcb.
EC83: 2A4EE3  		ld	hl,(params)	;(* upper half of first byte *)
EC86: B6      		or	(hl)
EC87: 77      		ld	(hl),a
EC88: C9      		ret			;and return (all done).
              	;
              	;   function to return the current cp/m version number.
              	;
EC89: 3E22    	getver:	ld	a,022h		;version 2.2
EC8B: C30CE3  		jp	setstat
              	;
              	;   function to reset the disk system.
              	;
EC8E: 210000  	rstdsk:	ld	hl,0		;clear write protect status and log
EC91: 22B8ED  		ld	(wrtprt),hl	;in vector.
EC94: 22BAED  		ld	(login),hl
EC97: AF      		xor	a		;select drive 'a'.
EC98: 324DE3  		ld	(active),a
EC9B: 218000  		ld	hl,tbuff	;setup default dma address.
EC9E: 22BCED  		ld	(userdma),hl
ECA1: CDE5E5  		call	defdma
ECA4: C32CEC  		jp	logindrv	;now log in drive 'a'.
              	;
              	;   function to open a specified file.
              	;
ECA7: CD7DE5  	openfil:call	clears2		;clear 's2' byte.
ECAA: CD5CEC  		call	autosel		;select proper disk.
ECAD: C35CE8  		jp	openit		;and open the file.
              	;
              	;   function to close a specified file.
              	;
ECB0: CD5CEC  	closefil: call	autosel		;select proper disk.
ECB3: C3ADE8  		jp	closeit		;and close the file.
              	;
              	;   function to return the first occurence of a specified file
              	; name. if the first byte of the fcb is '?' then the name will
              	; not be checked (get the first entry no matter what).
              	;
ECB6: 0E00    	getfst:	ld	c,0		;prepare for special search.
ECB8: EB      		ex	de,hl
ECB9: 7E      		ld	a,(hl)		;is first byte a '?'?
ECBA: FE3F    		cp	'?'
ECBC: CACDEC  		jp	z,getfst1	;yes, just get very first entry (zero length match).
ECBF: CDB1E4  		call	setext		;get the extension byte from fcb.
ECC2: 7E      		ld	a,(hl)		;is it '?'? if yes, then we want
ECC3: FE3F    		cp	'?'		;an entry with a specific 's2' byte.
ECC5: C47DE5  		call	nz,clears2	;otherwise, look for a zero 's2' byte.
ECC8: CD5CEC  		call	autosel		;select proper drive.
ECCB: 0E0F    		ld	c,15		;compare bytes 0-14 in fcb (12&13 excluded).
ECCD: CD23E7  	getfst1:call	findfst		;find an entry and then move it into
ECD0: C3F4E5  		jp	movedir		;the users dma space.
              	;
              	;   function to return the next occurence of a file name.
              	;
ECD3: 2AE4ED  	getnxt:	ld	hl,(savefcb)	;restore pointers. note that no
ECD6: 224EE3  		ld	(params),hl	;other dbos calls are allowed.
ECD9: CD5CEC  		call	autosel		;no error will be returned, but the
ECDC: CD38E7  		call	findnxt		;results will be wrong.
ECDF: C3F4E5  		jp	movedir
              	;
              	;   function to delete a file by name.
              	;
ECE2: CD5CEC  	delfile:call	autosel		;select proper drive.
ECE5: CDA7E7  		call	erafile		;erase the file.
ECE8: C30CE7  		jp	ststatus	;set status and return.
              	;
              	;   function to execute a sequential read of the specified
              	; record number.
              	;
ECEB: CD5CEC  	readseq:call	autosel		;select proper drive then read.
ECEE: C3C7E9  		jp	rdseq
              	;
              	;   function to write the net sequential record.
              	;
ECF1: CD5CEC  	wrtseq:	call	autosel		;select proper drive then write.
ECF4: C309EA  		jp	wtseq
              	;
              	;   create a file function.
              	;
ECF7: CD7DE5  	fcreate:call	clears2		;clear the 's2' byte on all creates.
ECFA: CD5CEC  		call	autosel		;select proper drive and get the next
ECFD: C32FE9  		jp	getempty	;empty directory space.
              	;
              	;   function to rename a file.
              	;
ED00: CD5CEC  	renfile:call	autosel		;select proper drive and then switch
ED03: CD21E8  		call	chgnames	;file names.
ED06: C30CE7  		jp	ststatus
              	;
              	;   function to return the login vector.
              	;
ED09: 2ABAED  	getlog:	ld	hl,(login)
ED0C: C334ED  		jp	getprm1
              	;
              	;   function to return the current disk assignment.
              	;
ED0F: 3A4DE3  	getcrnt:ld	a,(active)
ED12: C30CE3  		jp	setstat
              	;
              	;   function to set the dma address.
              	;
ED15: EB      	putdma:	ex	de,hl
ED16: 22BCED  		ld	(userdma),hl	;save in our space and then get to
ED19: C3E5E5  		jp	defdma		;the bios with this also.
              	;
              	;   function to return the allocation vector.
              	;
ED1C: 2ACAED  	getaloc:ld	hl,(alocvect)
ED1F: C334ED  		jp	getprm1
              	;
              	;   function to return the read-only status vector.
              	;
ED22: 2AB8ED  	getrov:	ld	hl,(wrtprt)
ED25: C334ED  		jp	getprm1
              	;
              	;   function to set the file attributes (read-only, system).
              	;
ED28: CD5CEC  	setattr:call	autosel		;select proper drive then save attributes.
ED2B: CD46E8  		call	saveattr
ED2E: C30CE7  		jp	ststatus
              	;
              	;   function to return the address of the disk parameter block
              	; for the current drive.
              	;
ED31: 2AC6ED  	getparm:ld	hl,(diskpb)
ED34: 2250E3  	getprm1:ld	(status),hl
ED37: C9      		ret	
              	;
              	;   function to get or set the user number. if (e) was (ff)
              	; then this is a request to return the current user number.
              	; else set the user number from (e).
              	;
ED38: 3AE1ED  	getuser:ld	a,(eparam)	;get parameter.
ED3B: FEFF    		cp	0ffh		;get user number?
ED3D: C246ED  		jp	nz,setuser
ED40: 3A4CE3  		ld	a,(userno)	;yes, just do it.
ED43: C30CE3  		jp	setstat
ED46: E61F    	setuser:and	1fh		;no, we should set it instead. keep low
ED48: 324CE3  		ld	(userno),a	;bits (0-4) only.
ED4B: C9      		ret	
              	;
              	;   function to read a random record from a file.
              	;
ED4C: CD5CEC  	rdrandom: call	autosel		;select proper drive and read.
ED4F: C39EEB  		jp	readran
              	;
              	;   function to compute the file size for random files.
              	;
ED52: CD5CEC  	wtrandom: call	autosel		;select proper drive and write.
ED55: C3A7EB  		jp	writeran
              	;
              	;   function to compute the size of a random file.
              	;
ED58: CD5CEC  	filesize: call	autosel		;select proper drive and check file length
ED5B: C3DDEB  		jp	ransize
              	;
              	;   function #37. this allows a program to log off any drives.
              	; on entry, set (de) to contain a word with bits set for those
              	; drives that are to be logged off. the log-in vector and the
              	; write protect vector will be updated. this must be a m/pm
              	; special function.
              	;
ED5E: 2A4EE3  	logoff:	ld	hl,(params)	;get drives to log off.
ED61: 7D      		ld	a,l		;for each bit that is set, we want
ED62: 2F      		cpl			;to clear that bit in (login)
ED63: 5F      		ld	e,a		;and (wrtprt).
ED64: 7C      		ld	a,h
ED65: 2F      		cpl	
ED66: 2ABAED  		ld	hl,(login)	;reset the login vector.
ED69: A4      		and	h
ED6A: 57      		ld	d,a
ED6B: 7D      		ld	a,l
ED6C: A3      		and	e
ED6D: 5F      		ld	e,a
ED6E: 2AB8ED  		ld	hl,(wrtprt)
ED71: EB      		ex	de,hl
ED72: 22BAED  		ld	(login),hl	;and save.
ED75: 7D      		ld	a,l		;now do the write protect vector.
ED76: A3      		and	e
ED77: 6F      		ld	l,a
ED78: 7C      		ld	a,h
ED79: A2      		and	d
ED7A: 67      		ld	h,a
ED7B: 22B8ED  		ld	(wrtprt),hl	;and save. all done.
ED7E: C9      		ret	
              	;
              	;   get here to return to the user.
              	;
ED7F: 3AE9ED  	goback:	ld	a,(auto)	;was auto select activated?
ED82: B7      		or	a
ED83: CA9CED  		jp	z,goback1
ED86: 2A4EE3  		ld	hl,(params)	;yes, but was a change made?
ED89: 3600    		ld	(hl),0		;(* reset first byte of fcb *)
ED8B: 3AEBED  		ld	a,(autoflag)
ED8E: B7      		or	a
ED8F: CA9CED  		jp	z,goback1
ED92: 77      		ld	(hl),a		;yes, reset first byte properly.
ED93: 3AEAED  		ld	a,(olddrv)	;and get the old drive and select it.
ED96: 32E1ED  		ld	(eparam),a
ED99: CD50EC  		call	setdsk
ED9C: 2A1AE3  	goback1:ld	hl,(usrstack)	;reset the users stack pointer.
ED9F: F9      		ld	sp,hl
EDA0: 2A50E3  		ld	hl,(status)	;get return status.
EDA3: 7D      		ld	a,l		;force version 1.4 compatability.
EDA4: 44      		ld	b,h
EDA5: C9      		ret			;and go back to user.
              	;
              	;   function #40. this is a special entry to do random i/o.
              	; for the case where we are writing to unused disk space, this
              	; space will be zeroed out first. this must be a m/pm special
              	; purpose function, because why would any normal program even
              	; care about the previous contents of a sector about to be
              	; written over.
              	;
EDA6: CD5CEC  	wtspecl:call	autosel		;select proper drive.
EDA9: 3E02    		ld	a,2		;use special write mode.
EDAB: 32E0ED  		ld	(mode),a
EDAE: 0E00    		ld	c,0		;set write indicator.
EDB0: CD12EB  		call	positn1		;position the file.
EDB3: CC0EEA  		call	z,wtseq1	;and write (if no errors).
EDB6: C9      		ret	
              	;
              	;**************************************************************
              	;*
              	;*     bdos data storage pool.
              	;*
              	;**************************************************************
              	;
EDB7: E5      	emptyfcb: defb	0e5h		;empty directory segment indicator.
EDB8: 0000    	wrtprt:	defw	0		;write protect status for all 16 drives.
EDBA: 0000    	login:	defw	0		;drive active word (1 bit per drive).
EDBC: 8000    	userdma:defw	080h		;user's dma address (defaults to 80h).
              	;
              	;   scratch areas from parameter block.
              	;
EDBE: 0000    	scratch1: defw	0		;relative position within dir segment for file (0-3).
EDC0: 0000    	scratch2: defw	0		;last selected track number.
EDC2: 0000    	scratch3: defw	0		;last selected sector number.
              	;
              	;   disk storage areas from parameter block.
              	;
EDC4: 0000    	dirbuf:	defw	0		;address of directory buffer to use.
EDC6: 0000    	diskpb:	defw	0		;contains address of disk parameter block.
EDC8: 0000    	chkvect:defw	0		;address of check vector.
EDCA: 0000    	alocvect: defw	0		;address of allocation vector (bit map).
              	;
              	;   parameter block returned from the bios.
              	;
EDCC: 0000    	sectors:defw	0		;sectors per track from bios.
EDCE: 00      	blkshft:defb	0		;block shift.
EDCF: 00      	blkmask:defb	0		;block mask.
EDD0: 00      	extmask:defb	0		;extent mask.
EDD1: 0000    	dsksize:defw	0		;disk size from bios (number of blocks-1).
EDD3: 0000    	dirsize:defw	0		;directory size.
EDD5: 0000    	alloc0:	defw	0		;storage for first bytes of bit map (dir space used).
EDD7: 0000    	alloc1:	defw	0
EDD9: 0000    	offset:	defw	0		;first usable track number.
EDDB: 0000    	xlate:	defw	0		;sector translation table address.
              	;
              	;
EDDD: 00      	closeflg: defb	0		;close flag (=0ffh is extent written ok).
EDDE: 00      	rdwrtflg: defb	0		;read/write flag (0ffh=read, 0=write).
EDDF: 00      	fndstat:defb	0		;filename found status (0=found first entry).
EDE0: 00      	mode:	defb	0		;i/o mode select (0=random, 1=sequential, 2=special random).
EDE1: 00      	eparam:	defb	0		;storage for register (e) on entry to bdos.
EDE2: 00      	relblock: defb	0		;relative position within fcb of block number written.
EDE3: 00      	counter:defb	0		;byte counter for directory name searches.
EDE4: 00000000	savefcb:defw	0,0		;save space for address of fcb (for directory searches).
EDE8: 00      	bigdisk:defb	0		;if =0 then disk is > 256 blocks long.
EDE9: 00      	auto:	defb	0		;if non-zero, then auto select activated.
EDEA: 00      	olddrv:	defb	0		;on auto select, storage for previous drive.
EDEB: 00      	autoflag: defb	0		;if non-zero, then auto select changed drives.
EDEC: 00      	savnxt:	defb	0		;storage for next record number to access.
EDED: 00      	savext:	defb	0		;storage for extent number of file.
EDEE: 0000    	savnrec:defw	0		;storage for number of records in file.
EDF0: 0000    	blknmbr:defw	0		;block number (physical sector) used within a file or logical sect
EDF2: 0000    	logsect:defw	0		;starting logical (128 byte) sector of block (physical sector).
EDF4: 00      	fcbpos:	defb	0		;relative position within buffer for fcb of file of interest.
EDF5: 0000    	filepos:defw	0		;files position within directory (0 to max entries -1).
              	;
              	;   disk directory buffer checksum bytes. one for each of the
              	; 16 possible drives.
              	;
EDF7: 00000000	cksumtbl: defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
EDFB: 00...   	
              	
              	;
              	;*
              	;******************   E N D   O F   C P / M   *****************
              	;*
              	
              	#include "../bios.asm"
              	;
              	;**************************************************************
              	;*
              	;*        B I O S   B O O T   R O U T I N E S
              	;*
              	;**************************************************************
              	;
              	
              	;
              	;**************************************************************
              	;*
              	;*          B I O S   J U M P   T A B L E
              	;*
              	;*    This isn't actually used by the BDOS, but
              	;*    some applications (*cough* MBASIC) use it
              	;*    to directly address BIOS calls to get around
              	;*    the BDOS.
              	;*
              	;**************************************************************
              	;
EE07: C33AEE  		jp	boot
EE0A: C348EE  	wbootin:jp	wboot	; Indirection to wboot, used by MBASIC
EE0D: C3A2EE  		jp	const
EE10: C3ADEE  		jp	conin
EE13: C3B9EE  		jp	conout
EE16: C3C5EE  		jp	list
EE19: C3C9EE  		jp	punch
EE1C: C3CDEE  		jp	reader
EE1F: C3DBEE  		jp	home
EE22: C3E0EE  		jp	seldsk
EE25: C3FEEE  		jp	settrk
EE28: C302EF  		jp	setsec
EE2B: C306EF  		jp	setdma
EE2E: C30CEF  		jp	read
EE31: C310EF  		jp	write
EE34: C314EF  		jp	prstat
EE37: C317EF  		jp	sectrn
              	
              	; Cold boot entry
              	; Sets up some lower CP/M memory areas, and tells the INIT
              	; program to run on CP/M startup.
EE3A: 3100D8  	boot:	ld	sp,cbase
              	
              		; Run the warm boot common code
EE3D: CD5FEE  		call	wbootr
              		
              		; Special conditions for a cold boot
EE40: CD5AEF  		call	cbinit
              	
              		; Jump to CP/M
EE43: 0E00    		ld	c,default
EE45: C300D8  		jp	cbase
              	
              	
              	; Warm boot entry
              	; Mainly just calls wbootr and manages IOBYTE
EE48: 3100D8  	wboot:	ld	sp,cbase
              	
              		; Save current drive + user
EE4B: 3A0400  		ld	a,(tdrive)
EE4E: F5      		push	af
              	
              		; Save IOBYTE
EE4F: 3A0300  		ld	a,(iobyte)
EE52: F5      		push	af
              	
              		; Warm boot
EE53: CD5FEE  		call	wbootr
              		
              		; Restore IOBYTE
EE56: F1      		pop	af
EE57: 320300  		ld	(iobyte),a
              		
              		; Restore tdrive and warm boot
EE5A: F1      		pop	af
EE5B: 4F      		ld	c,a
EE5C: C300D8  		jp	cbase
              	
              	; Warm boot routine
              	; Sends init signal to device bus, loads CCP, and inits CP/M
              	; Does not actually jump to CP/M just yet
EE5F: F3      	wbootr:	di
              		
              		; Zero out BSS
EE60: AF      		xor	a
EE61: 212DF9  		ld	hl,_TEXT_end
EE64: 77      		ld	(hl),a
EE65: 112EF9  		ld	de,_TEXT_end+1
EE68: 01CB05  		ld	bc,_BSS_size
EE6B: EDB0    		ldir
              	
              		; Send init signals to all devices
EE6D: 0600    		ld	b,0
EE6F: C5      	wboot0:	push	bc
EE70: 216AEF  		ld	hl,bdevsw
EE73: 78      		ld	a,b
EE74: CD29EF  		call	swindir
EE77: AF      		xor	a
EE78: 14      		inc	d
EE79: CC46EF  		call	z,callmj
EE7C: C1      		pop	bc
EE7D: 04      		inc	b
EE7E: 3E14    		ld	a,20
EE80: B8      		cp	b
EE81: 20EC    		jr	nz,wboot0
              	
              		; Turn off batch mode
EE83: 3E00    		ld	a,0
EE85: 32E8D8  		ld	(batch),a
              	
              		; Load the CCP
EE88: CD64EF  		call	resccp
              	
              		; Call config init
EE8B: CD4BEF  		call	wbinit
              		
              		; Set up lower memory
EE8E: 219AEE  		ld	hl,cpmlow
EE91: 110000  		ld	de,0
EE94: 010800  		ld	bc,8
EE97: EDB0    		ldir
              	
              	
              		; Return
EE99: C9      		ret
              	
              	
              	; This is not a true function, but a block of code to be copied
              	; to CP/M lower memory
EE9A: C30AEE  	cpmlow:	jp	wbootin	; Call jump table version instead
EE9D: 81      		defb	0x81	; Default IOBYTE
EE9E: 00      		defb	0	; Default drive
EE9F: C306E0  		jp	fbase	; BDOS entry 
              	
              	
              	; Console status
              	;
              	; Returns a=0xFF if there is a character
              	; uses: all
              	; Defaults to device 0 right now
EEA2: 0600    	const:	ld	b,0
EEA4: CD1AEF  		call	cdindir
EEA7: 14      		inc	d
EEA8: C0      		ret	nz
EEA9: 3C      		inc	a
EEAA: C346EF  		jp	callmj
              		
              	; Console read
              	;
              	; Returns character in a
              	; uses: all
              	; Defaults to device 0 right now
EEAD: 0600    	conin:	ld	b,0
EEAF: CD1AEF  		call	cdindir
EEB2: 14      		inc	d
EEB3: C0      		ret	nz
EEB4: 3E02    		ld	a,2
EEB6: C346EF  		jp	callmj
              		
              	; Console write
              	; c = Character to display
              	;
              	; uses: all
              	; Defaults to device 0 right now
EEB9: 0600    	conout:	ld	b,0
EEBB: CD1AEF  	chrout:	call	cdindir
EEBE: 14      		inc	d
EEBF: C0      		ret	nz
EEC0: 3E03    		ld	a,3
EEC2: C346EF  		jp	callmj
              		
              	; Printer write
              	; c = Character to print
              	;
              	; uses: all
EEC5: 0606    	list:	ld	b,6
EEC7: 18F2    		jr	chrout
              	
              	; Punch (or auxiliary) write
              	; c = Character to punch
              	;
EEC9: 0604    	punch:	ld	b,4
EECB: 18EE    		jr	chrout
              	
              	; Reader (or auxiliary) read
              	;
              	; Returns character in a, or a=0x1A
EECD: 0602    	reader:	ld	b,2
EECF: CD1AEF  		call	cdindir
EED2: 14      		inc	d
EED3: 3E1A    		ld	a,0x1A
EED5: C0      		ret	nz
EED6: 3E02    		ld	a,2
EED8: C346EF  		jp	callmj
              		
              	; Move the current drive to track 0
              	;
              	; uses: all
EEDB: 3E01    	home:	ld	a,1
EEDD: C3F8EE  		jp	callbd
              		
              	; Selects a block device
              	; c = Device to select
              	; e = Disk logging status
              	;
              	; return hl=0 if device not valid
              	; uses: all
EEE0: 79      	seldsk:	ld	a,c
EEE1: 43      		ld	b,e
EEE2: 216AEF  		ld	hl,bdevsw
EEE5: CD29EF  		call	swindir
EEE8: 22F9EE  		ld	(callbd+1),hl
EEEB: 210000  		ld	hl,0
EEEE: 14      		inc	d
EEEF: C0      		ret	nz
EEF0: 2A47EF  		ld	hl,(callmj+1)
EEF3: 22FCEE  		ld	(callbd+4),hl
EEF6: 3E02    		ld	a,2
              		; Pass b = logging status, c = device #
              		
              	; Small stub to jump to the currently selected block device
              	; Also records hl as argument
              	;
              	; We love self-modfiying code!
EEF8: 21      	callbd:	defb	0x21
EEF9: 0000    		defw	0
EEFB: C3      		defb	0xC3
EEFC: 0000    		defw	0
              	
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	;
              	; uses: all
EEFE: 3E03    	settrk:	ld	a,3
EF00: 18F6    		jr	callbd
              		
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	;
              	; uses: all
EF02: 3E04    	setsec:	ld	a,4
EF04: 18F2    		jr	callbd
              	
              	; Sets the DMA address of the selected block device
              	; bc = DMA address
              	;
              	; uses: all
EF06: 60      	setdma:	ld	h,b
EF07: 69      		ld	l,c
EF08: 2249EF  		ld	(biodma),hl
EF0B: C9      		ret
              		
              	; Reads the configured block from the selected block device
              	;
              	; uses: all
EF0C: 3E05    	read:	ld	a,5
EF0E: 18E8    		jr	callbd
              	
              	; Writes the configured block to the selected block device
              	; c = Deferred mode
              	;
              	; uses: all
EF10: 3E06    	write:	ld	a,6
EF12: 18E4    		jr	callbd
              		
              	; "Printer" is always read for bytes
              	; Maybe in the future we will implement this, but for now
              	; this will do.
              	;
              	; Returns a=0xFF
EF14: 3EFF    	prstat:	ld	a,0xFF
EF16: C9      		ret
              		
              	; Provides sector translation
              	; Returns no translation for all devices
EF17: 60      	sectrn:	ld	h,b
EF18: 69      		ld	l,c
EF19: C9      		ret
              		
              	; Character device switch indirection
              	; Obtains device by doing IOBYTE indirection
              	; Sets hl to cdevsw and jumps to swindir
EF1A: 04      	cdindir:inc	b
EF1B: 3A0300  		ld	a,(iobyte)
EF1E: 05      	cdindi0:dec	b
EF1F: 2803    		jr	z,cdindi1
EF21: 1F      		rra
EF22: 18FA    		jr	cdindi0
EF24: E603    	cdindi1:and	0x03
EF26: 21AAEF  		ld	hl,cdevsw
              	
              	; Switch indirect helper function
              	; a = Device
              	; hl = Start of switch
              	;
              	; returns d=255 if device found, hl as argument
              	; uses: af, de, hl
EF29: 110400  	swindir:ld	de,4
EF2C: B7      		or	a
EF2D: 2804    	swindi0:jr	z,swindi1
EF2F: 19      		add	hl,de
EF30: 3D      		dec	a
EF31: 18FA    		jr	swindi0
EF33: 7E      	swindi1:ld	a,(hl)
EF34: 3247EF  		ld	(callmj+1),a
EF37: 23      		inc	hl
EF38: B6      		or	(hl)
EF39: C8      		ret	z
EF3A: 7E      		ld	a,(hl)
EF3B: 3248EF  		ld	(callmj+2),a
EF3E: 23      		inc	hl
EF3F: 7E      		ld	a,(hl)
EF40: 23      		inc	hl
EF41: 66      		ld	h,(hl)
EF42: 6F      		ld	l,a
EF43: 16FF    		ld	d,255
EF45: C9      	nulldev:ret		; Just points to a return
              	
              	; Small stub to jump to the memory jump register
EF46: C3      	callmj: defb	0xC3
EF47: 0000    		defw	0
              	
              	
              	
              	; Variables
EF49: 0000    	biodma:	defw	0	; Block device DMA address
              	
              	;
              	;**************************************************************
              	;*
              	;*        W A R M   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function is called at the end of a warm boot
              	;*    to set up hardware-specific stuff. 
              	;*
              	;**************************************************************
              	;
              	
EF4B: 3E01    	wbinit:	ld	a,0x01		; Bank out ROM
EF4D: D300    		out	(0x00),a
              	
              		; Turn on batch mode
EF4F: 3EFF    		ld	a,0xFF
EF51: 32E8D8  		ld	(batch),a
              		
              		; Also set interrupt mode 2 stuff
EF54: ED47    		ld	i,a
EF56: ED5E    		im	2		; Start interrupts
EF58: FB      		ei
              		
EF59: C9      		ret
              	
              	;
              	;**************************************************************
              	;*
              	;*        C O L D   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function will run once during the intial cold
              	;*    boot. It is the last task to run before control is
              	;*    given to the CCP. This function is run after wbinit
              	;*
              	;**************************************************************
              	;
              	
EF5A: 3E06    	cbinit:	ld	a,6	; Enable INIT to run
EF5C: 3207D8  		ld	(inbuff+1),a
EF5F: C9      		ret
              	
              	;
              	;**************************************************************
              	;*
              	;*            I N T E R R U P T   H A N D L I N G
              	;*
              	;*     This function will be called in order to handle an
              	;*     interrupt if the need arises. Hooking drivers up to
              	;*     this code may be a little bit more involved.
              	;*
              	;**************************************************************
              	;
              	
EF60: FB      	cfirq:	ei
EF61: ED4D    		reti
              	
              	;
              	;**************************************************************
              	;*
              	;*              B D O S   C A L L   H O O K
              	;*
              	;*     This function is called everytime a BDOS call occurs.
              	;*     It can be used by specialized drivers to either inject
              	;*     new BDOS calls, or intercept existing ones.
              	;*
              	;*     Registers 'bc' and 'e' must be preserved if a call is
              	;*     going to be forwarded to the system. Register 'c' will
              	;*     contain BDOS call number.
              	;*       
              	;*
              	;**************************************************************
              	;
              	
EF63: C9      	syshook:ret
              	
              	
              	;**************************************************************
              	;*
              	;*           B L O C K   D E V I C E   S W I T C H
              	;*
              	;*       IshkurCP/M can support up to 16 logical disks
              	;*       A single driver can be mapped to a number of
              	;*       these disks. Each logical disk is defined by a
              	;*       4-byte record. The first 2 bytes are a pointer
              	;*       to the device entry, and the last 2 are passed
              	;*       as an argument to the device. Usually this 
              	;*       takes the form of a minor number for indexing
              	;*       sub-disks on the same driver
              	;*
              	;*
              	;**************************************************************
              	;
              		
              	; One of the block devices needs to have the responsibiliy
              	; of loading the CCP into memory. Define the jump vector here
EF64: C33BF4  	resccp:	jp	nd_ccp
              	
              	; Additionally, if Ishkur is using a graphical device, that
              	; device may temporarily need to access the Graphical Resource
              	; Block (GRB) to load in fonts and such. This is up to 2k in
              	; size, and goes in the location that the CCP resides
EF67: C340F4  	resgrb:	jp	nd_grb
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
EF6A: 79F30000	bdevsw:	defw	ndkdev,	0	; 'A'
EF6E: 79F30100		defw	ndkdev,	1	; 'B'
EF72: 38F60000		defw	nfddev,	0	; 'C'
EF76: 38F60100		defw	nfddev,	1	; 'D'
EF7A: 00000000		defw	0,	0	; 'E'
EF7E: 00000000		defw	0,	0	; 'F'
EF82: 00000000		defw	0,	0	; 'G'
EF86: 00000000		defw	0,	0	; 'H'
EF8A: 00000000		defw	0,	0	; 'I'
EF8E: 00000000		defw	0,	0	; 'J'
EF92: 00000000		defw	0,	0	; 'K'
EF96: 00000000		defw	0,	0	; 'L'
EF9A: 00000000		defw	0,	0	; 'M'
EF9E: 00000000		defw	0,	0	; 'N'
EFA2: 00000000		defw	0,	0	; 'O'
EFA6: 00000000		defw	0,	0	; 'P'
              	
              	;
              	; Character device switch MUST come directly after in memory!
              	;
              	;**************************************************************
              	;*
              	;*        C H A R A C T E R   D E V I C E   S W I T C H
              	;*
              	;*      Currently, 4 character devices are supported. These
              	;*      devices are the console, the printer, and two "punches"
              	;*      (can be thought of as an auxillary serial device).
              	;*      All character devices use the same interface, which
              	;*      allows for easy indireciton. 
              	;*
              	;*	Device switch logic works about the same of the block
              	;*	devices.
              	;*
              	;**************************************************************
              	;
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
EFAA: 9FF80000	cdevsw:	defw	siodev,	0	; TTY device
EFAE: BAEF0000		defw	vdpdev,	0	; Console device
EFB2: 75F80000		defw	prtdev,	0	; Aux I/O device #1 (LPT)
EFB6: 00000000		defw	0,	0	; Aux I/O device #2 (GEN)
              	
              	;
              	;**************************************************************
              	;*
              	;*        D E V I C E   D R I V E R   I N C L U D E S
              	;*
              	;**************************************************************
              	;
              	
              	#include "../dev/nabu_vdp.asm"
              	;
              	;**************************************************************
              	;*
              	;*      T M S 9 9 1 8   C H A R A C T E R   D E V I C E
              	;*
              	;*      This device emulated a VT52 terminal using the
              	;*      TMS9918A graphics chip. The 2kb font record is
              	;*      not resident is memory, and must be provided by
              	;*      a compatable block I/O device.
              	;*
              	;*      F18A style 80 column mode is supported
              	;*
              	;*      This specific version uses the NABU keyboard as
              	;*      an input to the emulated termina 
              	;*
              	;*      Device requires 48 bytes of bss space (tm_bss)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
F92D: 00      	tm_outc:defs	1	; Output character
F92E: 00      	tm_scro:defs	1	; Scroll width
F92F: 00      	tm_escs:defs	1	; Escape state
F930: 00      	tm_last:defs	1	; Last character read
F931: 00000000	tm_cbuf:defs	40	; 40 byte character buffer
F935: 00...   	
              	.area	_TEXT
              	
              	; TMS9918 Configuration
00A0:         	tm_data	equ	0xA0	; TMS9918 data register (mode=0)
00A1:         	tm_latc	equ	0xA1	; TMS9918 latch register (mode=1)
              	
0090:         	tm_keyd	equ	0x90	; Keyboard data register
0091:         	tm_keys	equ	0x91	; Keyboard status register
              	
0040:         	tm_ayda	equ	0x40	; AY-3-8910 data port
0041:         	tm_atla	equ	0x41	; AY-3-8910 latch port
              	
              	; --- VRAM MAP ---
              	; 0x0000 - 0x07FF: Font
              	; 0x0800 - 0x0BFF: 40 column screen buffer
              	; 0x0C00 - 0x0FFF: Unused
              	; 0x1000 - 0x17FF: 80 column screen buffer
              	;
              	; Serial #
              	; 0x17FE: 0xE5
              	; 0x17FF: 0x81
              	
              	
              	; Driver jump table
EFBA: B7      	vdpdev:	or	a
EFBB: 2845    		jr	z,tm_init
EFBD: 3D      		dec	a
EFBE: 2819    		jr	z,tm_stat
EFC0: 3D      		dec	a
EFC1: CAA4F0  		jp	z,tm_read
EFC4: C302F1  		jp	tm_writ
              	
              	; A slower version of the OTIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
EFC7: F5      	tm_otir:push	af
EFC8: 7E      	tm_oti0:ld	a,(hl)
EFC9: ED79    		out	(c),a
EFCB: 23      		inc	hl
EFCC: 10FA    		djnz	tm_oti0
EFCE: F1      		pop	af
EFCF: C9      		ret
              		
              	; A slower version of the INIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
EFD0: F5      	tm_inir:push	af
EFD1: ED78    	tm_inr0:in	a,(c)
EFD3: 77      		ld	(hl),a
EFD4: 23      		inc	hl
EFD5: 10FA    		djnz	tm_inr0
EFD7: F1      		pop	af
EFD8: C9      		ret
              	
              	
              	; Gets the status of the keyboard
              	;
              	; Returns a=0xFF if there is a key to read 
              	; uses: af, bc, de, hl
EFD9: CD27F3  	tm_stat:call	tm_dint
EFDC: CDE5EF  		call	tm_sta0
EFDF: F5      		push	af
EFE0: CD37F3  		call	tm_eint
EFE3: F1      		pop	af
EFE4: C9      		ret 
EFE5: 3A30F9  	tm_sta0:ld	a,(tm_last)
EFE8: FEE4    		cp	0xE4
EFEA: 2871    		jr	z,tm_scri
EFEC: FEE5    		cp	0xE5
EFEE: 287F    		jr	z,tm_sclf
EFF0: 3A2DF9  	tm_sta1:ld	a,(tm_outc)
EFF3: 3C      		inc	a
EFF4: 3EFF    		ld	a,0xFF
EFF6: C0      		ret	nz
EFF7: CD36F2  		call	tm_getc
EFFA: 322DF9  		ld	(tm_outc),a
EFFD: 3C      		inc	a
EFFE: C8      		ret	z
EFFF: 3EFF    		ld	a,0xFF
F001: C9      		ret
              	
              	; TMS9918 init
              	; Load font record, set up terminal
F002: CD67EF  	tm_init:call	resgrb
              	
              		; Set up registers
F005: CD79F0  		call	tm_setp
              		
              		; Set up interrupt vectors (if needed)
F008: 2121F3  		ld	hl,tm_virq
F00B: 2206FF  		ld	(intvec+6),hl
F00E: 2154F2  		ld	hl,tm_kirq
F011: 2204FF  		ld	(intvec+4),hl
              		
              		; Set TMS pattern generator block to 0
F014: DBA1    		in	a,(tm_latc)
F016: AF      		xor	a
F017: D3A1    		out	(tm_latc),a
F019: 3E84    		ld	a,0x84
F01B: D3A1    		out	(tm_latc),a
              		
              		; Write the GRB
F01D: 010040  		ld	bc,0x4000
F020: CD16F3  		call	tm_addr
F023: 2100D8  		ld	hl,cbase
F026: 0EA0    		ld	c,tm_data
F028: 3E08    		ld	a,8	; Transfer 8*256 = 2048
F02A: 0600    	tm_ini0:ld	b,0
F02C: CDC7EF  		call	tm_otir
F02F: 3D      		dec	a
F030: 20F8    		jr	nz,tm_ini0
              		
              		; Cold boot?
F032: 3A49F3  		ld	a,(tm_cold)
F035: B7      		or	a
F036: 2012    		jr	nz,tm_ini1
              		
              		; Check serial #
F038: 01FE17  		ld	bc,0x17FE
F03B: CD16F3  		call	tm_addr
F03E: ED78    		in	a,(c)
F040: FEE5    		cp	0xE5
F042: 2006    		jr	nz,tm_ini1
F044: ED78    		in	a,(c)
F046: FE81    		cp	0x81
F048: 280D    		jr	z,tm_cloc
              		
              		; Reset the terminal
F04A: CDF9F2  	tm_ini1:call	tm_cls
F04D: AF      		xor	a
F04E: 3247F3  		ld	(tm_curx),a
F051: 3248F3  		ld	(tm_cury),a
F054: 3249F3  		ld	(tm_cold),a
              		
              		; Fall to tm_cloc
              		
              	; Clear the output character
              	;
              	; uses: af
F057: 3EFF    	tm_cloc:ld	a,0xFF
F059: 322DF9  		ld	(tm_outc),a
              	
F05C: C9      		ret
              		
              	; Scroll left / scroll right
              	;
              	; uses: af, bc, de, hl
F05D: 3A2EF9  	tm_scri:ld	a,(tm_scro)
F060: B7      		or	a
F061: FE28    		cp	40
F063: 2808    		jr	z,tm_scr1
F065: C604    		add	a,4
F067: 322EF9  	tm_scr0:ld	(tm_scro),a
F06A: CDD6F2  		call	tm_usco
F06D: 1881    	tm_scr1:jr	tm_sta1
F06F: 3A2EF9  	tm_sclf:ld	a,(tm_scro)
F072: B7      		or	a
F073: 28F8    		jr	z,tm_scr1
F075: D604    		sub	4
F077: 18EE    		jr	tm_scr0
              	
              	; Sets up registers depending on mode
              	; used to change between 40-col and 80-col
              	;
              	; uses: af, hl
F079: 2A42F3  	tm_setp:ld	hl,(tm_mode)
              	
              		; Set TMS to text mode
F07C: DBA1    		in	a,(tm_latc)
F07E: 7C      		ld	a,h
F07F: D3A1    		out	(tm_latc),a
F081: 3E80    		ld	a,0x80
F083: D3A1    		out	(tm_latc),a
F085: DBA1    		in	a,(tm_latc)
F087: 3EF0    		ld	a,0xF0
F089: D3A1    		out	(tm_latc),a
F08B: 3E81    		ld	a,0x81
F08D: D3A1    		out	(tm_latc),a
              		
              		; Set TMS color
F08F: DBA1    		in	a,(tm_latc)
F091: 3A44F3  		ld	a,(tm_colr)
F094: D3A1    		out	(tm_latc),a
F096: 3E87    		ld	a,0x87
F098: D3A1    		out	(tm_latc),a
              		
              		; Set TMS name table to 0x0800
F09A: DBA1    		in	a,(tm_latc)
F09C: 7D      		ld	a,l
F09D: D3A1    		out	(tm_latc),a
F09F: 3E82    		ld	a,0x82
F0A1: D3A1    		out	(tm_latc),a
F0A3: C9      		ret
              	
              	; Waits for the user to press a key, and returns it
              	;
              	; Returns ASCII key in A
              	; uses: af, bc, de, hl
F0A4: CD27F3  	tm_read:call	tm_dint
F0A7: CDB0F0  		call	tm_rea0
F0AA: F5      		push	af
F0AB: CD37F3  		call	tm_eint
F0AE: F1      		pop	af
F0AF: C9      		ret 
F0B0: 3A47F3  	tm_rea0:ld	a,(tm_curx)
F0B3: 4F      		ld	c,a
F0B4: 3A48F3  		ld	a,(tm_cury)
F0B7: 57      		ld	d,a
F0B8: 210010  		ld	hl,0x1000
F0BB: 3E50    		ld	a,80
F0BD: CDB2F2  		call	tm_chat
F0C0: DBA0    		in	a,(tm_data)	; char is in A
F0C2: 57      		ld	d,a		; char key
F0C3: 5F      		ld	e,a		; blinking char
F0C4: 0601    		ld	b,1
              		
F0C6: D5      	tm_rea1:push	de
F0C7: CDE5EF  		call	tm_sta0		; No interrupts!
F0CA: D1      		pop	de
F0CB: 3C      		inc	a
F0CC: 200D    		jr	nz,tm_rea2
F0CE: 5A      		ld	e,d
F0CF: CDEBF0  		call	tm_rea3
F0D2: 3A2DF9  		ld	a,(tm_outc)
F0D5: 47      		ld	b,a
F0D6: CD57F0  		call	tm_cloc
F0D9: 78      		ld	a,b
F0DA: C9      		ret
              		
F0DB: CDF9F0  	tm_rea2:call	tm_stal
F0DE: 10E6    		djnz	tm_rea1
F0E0: 3E80    		ld	a,0x80
F0E2: AB      		xor	e
F0E3: 5F      		ld	e,a
F0E4: CDEBF0  		call	tm_rea3
F0E7: 06BE    		ld	b,190
F0E9: 18DB    		jr	tm_rea1
              	
              	
F0EB: D5      	tm_rea3:push	de
F0EC: 3A47F3  		ld	a,(tm_curx)
F0EF: 4F      		ld	c,a
F0F0: 3A48F3  		ld	a,(tm_cury)
F0F3: 57      		ld	d,a
F0F4: CD8EF2  		call	tm_putc
F0F7: D1      		pop	de
F0F8: C9      		ret
              	
              	; Stalls out for a little bit
              	;
              	; uses: none
F0F9: C5      	tm_stal:push	bc
F0FA: 06FF    		ld	b,255
F0FC: C5      	tm_sta2:push	bc
F0FD: C1      		pop	bc
F0FE: 10FC    		djnz	tm_sta2
F100: C1      		pop	bc
F101: C9      		ret
              	
              	
              	; Writes a character to the screen
              	; c = Character to write
              	;
              	; Returns c,b as next position 
              	; uses: af, bc, de, hl
F102: CD27F3  	tm_writ:call	tm_dint
F105: 59      		ld	e,c
F106: 3A47F3  		ld	a,(tm_curx)
F109: 4F      		ld	c,a
F10A: 3A48F3  		ld	a,(tm_cury)
F10D: 57      		ld	d,a
F10E: CD1DF1  		call	tm_wri0
F111: 78      		ld	a,b
F112: 3248F3  		ld	(tm_cury),a
F115: 79      		ld	a,c
F116: 3247F3  		ld	(tm_curx),a
F119: CD37F3  		call	tm_eint
F11C: C9      		ret
              		
              	; Write helper routine
              	; c = X position
              	; d = Y position
              	; e = Character
              	;
              	; Returns c,b as next position
F11D: 42      	tm_wri0:ld	b,d		; c = X, b = Y
F11E: 3A2FF9  		ld	a,(tm_escs)
F121: B7      		or	a		; Process escape code
F122: C28AF1  		jp	nz,tm_esc
F125: 3E1F    		ld	a,0x1F
F127: BB      		cp	e
F128: D25CF1  		jp	nc,tm_wri1	; Process control code
F12B: C5      		push	bc
F12C: CD8EF2  		call	tm_putc		; Write character
F12F: C1      		pop	bc
              		
              		; Increment character
F130: 0C      	tm_ri	inc	c
F131: 3E50    		ld	a,80
F133: B9      		cp	c
F134: C0      		ret	nz
F135: AF      		xor	a
F136: 4F      		ld	c,a
F137: 04      	tm_lf:  inc	b	; Line feed
F138: 3E18    		ld	a,24
F13A: B8      		cp	b
F13B: C0      		ret	nz
F13C: C5      		push	bc
F13D: CD10F2  		call	tm_dsco
F140: C1      		pop	bc
F141: 05      		dec	b
F142: C9      		ret
F143: AF      	tm_cr:	xor	a	; Carriage return
F144: 4F      		ld	c,a
F145: C9      		ret
F146: 0D      	tm_bs:	dec	c	; Backspace 
F147: F0      		ret	p
F148: 0E4F    		ld	c,79
F14A: 05      		dec	b
F14B: F0      		ret	p
F14C: AF      		xor	a
F14D: 47      		ld	b,a
F14E: 4F      		ld	c,a
F14F: C9      		ret
F150: AF      	tm_up:	xor	a	; Move up
F151: B8      		cp	b
F152: C8      		ret	z
F153: 05      		dec	b
F154: C9      		ret
F155: CDF9F2  	tm_cshm:call	tm_cls
F158: AF      	tm_home:xor	a
F159: 47      		ld	b,a
F15A: 4F      		ld	c,a
F15B: C9      		ret
              	
F15C: 7B      	tm_wri1:ld	a,e
F15D: FE08    		cp	0x08	; '\b' (Cursor left)
F15F: 28E5    		jr	z,tm_bs
F161: FE12    		cp	0x12	; Cursor right
F163: 28CB    		jr	z,tm_ri
F165: FE0A    		cp	0x0A	; '\n' (Cursor down)
F167: 28CE    		jr	z,tm_lf
F169: FE0B    		cp	0x0B	; Cursor up
F16B: 28E3    		jr	z,tm_up
F16D: FE0D    		cp	0x0D	; '\r' 
F16F: 28D2    		jr	z,tm_cr
F171: FE17    		cp	0x17	; Clear end of screen
F173: 2856    		jr	z,tm_cles
F175: FE18    		cp	0x18	; Clear end of line
F177: 2854    		jr	z,tm_clea
F179: FE1A    		cp	0x1A	; Clear screen, home cursor
F17B: 28D8    		jr	z,tm_cshm
F17D: FE1E    		cp	0x1E	; Home cursor
F17F: 28D7    		jr	z,tm_home
F181: FE1B    		cp	0x1B	; Escape
F183: C0      		ret	nz
F184: 3E01    		ld	a,1
F186: 322FF9  		ld	(tm_escs),a
F189: C9      		ret
              		
              		; Handle escape sequence
F18A: 3D      	tm_esc:	dec	a
F18B: 280E    		jr	z,tm_esc0
F18D: 3D      		dec	a
F18E: 2825    		jr	z,tm_esc1
F190: 3D      		dec	a
F191: 282D    		jr	z,tm_esc2
F193: 3D      		dec	a
F194: 2871    		jr	z,tm_updc
F196: AF      	tm_escd:xor	a	; Escape done
F197: 322FF9  	tm_escr:ld	(tm_escs),a
F19A: C9      		ret
F19B: 3EFF    	tm_esc0:ld	a,0xFF	; Do 40-col
F19D: BB      		cp	e
F19E: 2850    		jr	z,tm_40c
F1A0: 3EFE    		ld	a,0xFE	; Do 80-col
F1A2: BB      		cp	e
F1A3: 2858    		jr	z,tm_80c
F1A5: 3EFD    		ld	a,0xFD	; Set color
F1A7: BB      		cp	e
F1A8: 2859    		jr	z,tm_scol
F1AA: 3E3D    		ld	a,0x3D	; '='
F1AC: BB      		cp	e
F1AD: 20E7    		jr	nz,tm_escd
F1AF: 3A2FF9  	tm_esci:ld	a,(tm_escs)
F1B2: 3C      		inc	a
F1B3: 18E2    		jr	tm_escr
F1B5: 7B      	tm_esc1:ld	a,e
F1B6: 1E20    		ld	e,0x20
F1B8: 93      		sub	e
F1B9: FE18    		cp	24
F1BB: 30D9    		jr	nc,tm_escd
F1BD: 47      		ld	b,a
F1BE: 18EF    		jr	tm_esci
F1C0: 7B      	tm_esc2:ld	a,e
F1C1: 1E20    		ld	e,0x20
F1C3: 93      		sub	e
F1C4: FE50    		cp	80
F1C6: 30CE    		jr	nc,tm_escd
F1C8: 4F      		ld	c,a
F1C9: 18CB    		jr	tm_escd
              		
              		; Clear segment
              		; B = ending line
F1CB: 0617    	tm_cles:ld	b,23
F1CD: 04      	tm_clea:inc	b
F1CE: 1E00    		ld	e,0
F1D0: C5      		push	bc
F1D1: D5      		push	de
F1D2: 3E50    		ld	a,80
F1D4: 210050  		ld	hl,0x5000
F1D7: CDB2F2  		call	tm_chat
F1DA: D1      		pop	de
F1DB: C1      		pop	bc
F1DC: AF      	tm_cle0:xor	a
F1DD: D3A0    		out	(tm_data),a
F1DF: 0C      		inc	c
F1E0: 3E50    		ld	a,80
F1E2: B9      		cp	c
F1E3: 20F7    		jr	nz,tm_cle0
F1E5: 14      		inc	d
F1E6: AF      		xor	a
F1E7: 4F      		ld	c,a
F1E8: 7A      		ld	a,d
F1E9: B8      		cp	b
F1EA: 20F0    		jr	nz,tm_cle0
F1EC: D1      		pop	de	; Do not update character
F1ED: C3D6F2  		jp	tm_usco
              		
F1F0: E5      	tm_40c:	push	hl
F1F1: 210200  		ld	hl,0x0002
F1F4: 2242F3  	tm_cupd:ld	(tm_mode),hl
F1F7: CD79F0  		call	tm_setp
F1FA: E1      		pop	hl
F1FB: 1899    		jr	tm_escd
              		
F1FD: E5      	tm_80c:	push	hl
F1FE: 210704  		ld	hl,0x0407
F201: 18F1    		jr	tm_cupd
              		
              		; Set color command
F203: 3E04    	tm_scol:ld	a,4
F205: 1890    		jr	tm_escr
              		
              		; Update color here
F207: 7B      	tm_updc:ld	a,e
F208: 3244F3  		ld	(tm_colr),a
F20B: CD79F0  		call	tm_setp
F20E: 1886    		jr	tm_escd
              		
              		
              		
              	; Scroll both frame buffers down one
              	;
              	; uses: af, bc, de, hl
F210: 212808  	tm_dsco:ld	hl,0x0800+40
F213: 110048  		ld	de,0x4800
F216: 0618    		ld	b,24
F218: CD23F2  		call	tm_dsc0
F21B: 215010  		ld	hl,0x1000+80
F21E: 110050  		ld	de,0x5000
F221: 0630    		ld	b,48
F223: C5      	tm_dsc0:push	bc
F224: D5      		push	de
F225: E5      		push	hl
F226: CDBEF2  		call	tm_vcpy
F229: E1      		pop	hl
F22A: D1      		pop	de
F22B: 012800  		ld	bc,40
F22E: 09      		add	hl,bc
F22F: EB      		ex	de,hl
F230: 09      		add	hl,bc
F231: EB      		ex	de,hl
F232: C1      		pop	bc
F233: 10EE    		djnz	tm_dsc0
F235: C9      		ret
              		
              	
              	; Grabs the latest key pressed by the keyboard
              	; Discard keyboard errors
              	; Returns key in A, or 0xFF if none
              	;
              	; uses: af, bc, de, hl
F236: 3A46F3  	tm_getc:ld	a,(tm_inf)
F239: B7      		or	a
F23A: 3E00    		ld	a,0
F23C: 3246F3  		ld	(tm_inf),a
F23F: 3A45F3  		ld	a,(tm_inb)
F242: 2008    		jr	nz,tm_get0
              	
F244: DB91    		in	a,(tm_keys)
F246: E602    		and	2
F248: 3D      		dec	a
F249: F8      		ret	m
              		
              		; Grab the key
F24A: DB90    		in	a,(tm_keyd)
F24C: 3230F9  	tm_get0:ld	(tm_last),a
F24F: CD62F2  		call	tm_map
F252: 79      		ld	a,c
F253: C9      		ret
              		
              	; Handles a keyboard interrupt for the VDP terminal driver
              	; Keypress stored in tm_inb and tm_inf flag is set
              	; 
              	; uses: none
F254: F5      	tm_kirq:push	af
F255: DB90    		in	a,(tm_keyd)
F257: 3245F3  		ld	(tm_inb),a
F25A: 3E01    		ld	a,1
F25C: 3246F3  		ld	(tm_inf),a
F25F: F1      		pop	af
F260: FB      		ei
F261: C9      		ret
              		
              		
              	; Maps keyboard input to ASCII
              	; a = Key to map
              	;
              	; Returns mapped key in c
              	; uses: af, c
F262: 4F      	tm_map:	ld	c,a
              		
              		; Mapping function
F263: 2179F2  		ld	hl,tm_mapt
F266: 7E      	tm_map0:ld	a,(hl)
F267: B7      		or	a
F268: 2808    		jr	z,tm_map2
F26A: B9      		cp	c
F26B: 23      		inc	hl
F26C: 7E      		ld	a,(hl)
F26D: 23      		inc	hl
F26E: 20F6    		jr	nz,tm_map0
F270: 4F      		ld	c,a
F271: C9      		ret
              		
              		
              		; Filter non-ASCII
F272: 79      	tm_map2:ld	a,c
F273: E680    		and	0x80	
F275: C8      		ret	z
F276: 0EFF    		ld	c,0xFF
F278: C9      		ret
              		
              	; Map table
F279: 7F08    	tm_mapt:defb	0x7F,0x08	; DEL -> BS
F27B: E108    		defb	0xE1,0x08	; '<-' -> BS
F27D: EA7F    		defb	0xEA,0x7F	; TV -> DEL
F27F: E00C    		defb	0xE0,0x0C	; '->' -> Right
F281: E20B    		defb	0xE2,0x0B	; '/\' -> Up
F283: E30A    		defb	0xE3,0x0A	; '\/' -> Linefeed 
F285: E95C    		defb	0xE9,0x5C	; PAUSE -> '\'
F287: E860    		defb	0xE8,0x60	; SYM -> '@'
F289: E67C    		defb	0xE6,0x7C	; NO -> '|'
F28B: E77E    		defb	0xE7,0x7E	; YES -> '~'
F28D: 00      		defb	0
              	
              	; Puts a character on the screen
              	; c = X position
              	; d = Y position
              	; e = Character to put
              	;
              	; uses: af, bc, de, hl
F28E: 210050  	tm_putc:ld	hl,0x5000
F291: 3E50    		ld	a,80
F293: C5      		push	bc
F294: D5      		push	de
F295: CDB2F2  		call	tm_chat	; Place it in the 80 col buffer
F298: ED59    		out	(c),e
F29A: D1      		pop	de
F29B: C1      		pop	bc
F29C: 3A2EF9  	tm_putf:ld	a,(tm_scro)	; Place into frame buffer
F29F: 47      		ld	b,a
F2A0: 79      		ld	a,c
F2A1: 90      		sub	b	; If character is less than scroll...
F2A2: 4F      		ld	c,a
F2A3: F8      		ret	m
F2A4: FE28    		cp	40	; If desired position is 40 or more
F2A6: D0      		ret	nc
F2A7: 210048  		ld	hl,0x4800
F2AA: 3E28    		ld	a,40
F2AC: CDB2F2  		call	tm_chat	; Place it in the 40 col screen buffer
F2AF: ED59    		out	(c),e
F2B1: C9      		ret
              	
              	; Sets the TMS address to a character at x,y
              	; a = Line width
              	; c = X position
              	; d = Y position
              	; hl = Buffer address
              	;
              	; uses: af, bc, d, hl
F2B2: 0600    	tm_chat:ld	b,0
F2B4: 09      		add	hl,bc
F2B5: 4F      		ld	c,a
F2B6: AF      		xor	a
F2B7: BA      		cp	d
F2B8: 285A    	tm_cha0:jr	z,tm_addh
F2BA: 09      		add	hl,bc
F2BB: 15      		dec	d
F2BC: 18FA    		jr	tm_cha0
              	
              	; Copies VRAM from one location to another
              	; Transfers occur in blocks of 40 bytes
              	; de = destination address
              	; hl = source location
              	;
              	; b = 0 on return
              	; uses: af, bc, de, hl
F2BE: CD14F3  	tm_vcpy:call	tm_addh
F2C1: 0628    		ld	b,40
F2C3: 2131F9  		ld	hl,tm_cbuf
F2C6: CDD0EF  		call	tm_inir
F2C9: EB      		ex	de,hl
F2CA: CD14F3  		call	tm_addh
F2CD: 0628    		ld	b,40
F2CF: 2131F9  		ld	hl,tm_cbuf
F2D2: CDC7EF  		call	tm_otir
F2D5: C9      		ret
              		
              	; Updates the frame buffer based on the scroll position
              	;
              	; uses: af, bc, de, hl
F2D6: 210010  	tm_usco:ld	hl,0x1000
F2D9: 110048  		ld	de,0x4800
F2DC: 3A2EF9  		ld	a,(tm_scro)
F2DF: 0600    		ld	b,0
F2E1: 4F      		ld	c,a
F2E2: 09      		add	hl,bc
F2E3: 0618    		ld	b,24
F2E5: C5      	tm_usc0:push	bc
F2E6: D5      		push	de
F2E7: E5      		push	hl
F2E8: CDBEF2  		call	tm_vcpy
F2EB: E1      		pop	hl
F2EC: D1      		pop	de
F2ED: 0E50    		ld	c,80
F2EF: 09      		add	hl,bc
F2F0: EB      		ex	de,hl
F2F1: 0E28    		ld	c,40
F2F3: 09      		add	hl,bc
F2F4: EB      		ex	de,hl
F2F5: C1      		pop	bc
F2F6: 10ED    		djnz	tm_usc0
F2F8: C9      		ret
              		
              	
              	; Clears out screen buffer and offscreen buffer
              	; Also includes clear limited function
              	;
              	; uses: af, bc, de
F2F9: 010048  	tm_cls:	ld	bc,0x4800
F2FC: 11FE0F  		ld	de,0x1000-2
F2FF: CD16F3  		call	tm_addr
F302: ED71    	tm_cls0:out	(c),0
F304: 1B      		dec	de
F305: 7A      		ld	a,d
F306: B3      		or	e
F307: 20F9    		jr	nz,tm_cls0
              		
              		; Write super special serial #
F309: 3EE5    		ld	a,0xE5
F30B: ED79    		out	(c),a
F30D: F5      		push	af
F30E: F1      		pop	af
F30F: 3E81    		ld	a,0x81
F311: ED79    		out	(c),a
F313: C9      		ret
              	
              	; Sets the TMS address for either reading or writing
              	; bc = Address 
              	;
              	; Returns tm_data in c
              	; uses: af, bc
F314: 44      	tm_addh:ld	b,h		; Does HL instead of BC
F315: 4D      		ld	c,l
F316: DBA1    	tm_addr:in	a,(tm_latc)
F318: 79      		ld	a,c
F319: D3A1    		out	(tm_latc),a
F31B: 78      		ld	a,b
F31C: D3A1    		out	(tm_latc),a
F31E: 0EA0    		ld	c,tm_data
F320: C9      		ret
              		
              	; Handles a TMS9918 irq
F321: F5      	tm_virq:push	af
F322: DBA1    		in	a,(tm_latc)
F324: F1      		pop	af
F325: FB      		ei
F326: C9      		ret
              		
              		
              	; Disables all interrupts while VDP operations occur
              	;
              	; uses: a
F327: 3EC9    	tm_dint:ld	a,0xC9
F329: 323800  		ld	(0x38),a
F32C: ED56    		im	1
F32E: 3E0E    		ld	a,0x0E
F330: D341    		out	(tm_atla),a	; AY register = 14
F332: 3E00    		ld	a,0x00
F334: D340    		out	(tm_ayda),a	
F336: C9      		ret
              		
              	; Enables interrupts again
              	;
              	; uses: a
F337: 3E0E    	tm_eint:ld	a,0x0E
F339: D341    		out	(tm_atla),a	; AY register = 14
F33B: 3EB0    		ld	a,0xB0
F33D: D340    		out	(tm_ayda),a
F33F: ED5E    		im	2
F341: C9      		ret
              		
              	; Variables
F342: 0200    	tm_mode:defw	0x0002
F344: E1      	tm_colr:defb	0xE1
F345: 00      	tm_inb:	defb	0
F346: 00      	tm_inf:	defb	0
F347: 00      	tm_curx:defb	0
F348: 00      	tm_cury:defb	0
F349: 01      	tm_cold:defb	1
              	#include "../dev/nabu_ndsk.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   N H A C P   V I R T U A L   D I S K
              	;*
              	;*     This driver allows for IshkurCP/M to access a virtual
              	;*     disk using the NHACP protocol. Indiviual files are 
              	;*     mounted as file systems and accessed like a disk
              	;*     normally would.
              	;*
              	;*     This particular driver uses the Nabu HCCA port to 
              	;*     facilitate communication between it and an adapter
              	;*
              	;*     In order to service CCP and GRB requests, the 
              	;*     following special files must exist:
              	;*
              	;*     '${STORAGE}/CPM22.SYS' <- For CP/M system components
              	;*     '${STORAGE}/FONT.GRB' <- For graphical driver components
              	;*
              	;*
              	;*
              	;*
              	;*     Device requires 384 bytes of bss space (nd_bss)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
F959: 00      	nd_tran:defs	1	; Transfer count
F95A: 00      	nd_csec:defs	1	; Current sector (1b)
F95B: 0000    	nd_ctrk:defs	2	; Current track (2b)
F95D: 00000000	nd_buff:defs	64	; Buffer (64b)
F961: 00...   	
F99D: 00000000	nd_asva:defs	129	; ASV #1 (129b)
F9A1: 00...   	
FA1E: 00000000	nd_asvb:defs	129	; ASV #1 (129b)
FA22: 00...   	
              	.area	_TEXT
              	
0040:         	nd_ayda	equ	0x40		; AY-3-8910 data port
0041:         	nd_atla	equ	0x41		; AY-3-8910 latch port
0080:         	nd_hcca	equ	0x80		; Modem data port
0000:         	nd_nctl	equ	0x00		; NABU control port
              	
0080:         	nd_fild	equ	0x80		; Default file access desc
              	
              	
              	;
              	;**************************************************************
              	;*
              	;*         D I S K   D R I V E   G E O M E T R Y
              	;* 
              	;**************************************************************
              	;
              	
              	; Disk A DPH
F34A: 00000000	nd_dpha:defw	0,0,0,0
F34E: 00000000	
F352: 10FF    		defw	dircbuf	; DIRBUF
F354: 6AF3    		defw	nd_dpb	; DPB
F356: 0000    		defw	0	; CSV
F358: 9DF9    		defw	nd_asva	; ALV (129 bytes)
              		
              	; Disk B DPH
F35A: 00000000	nd_dphb:defw	0,0,0,0
F35E: 00000000	
F362: 10FF    		defw	dircbuf	; DIRBUF
F364: 6AF3    		defw	nd_dpb	; DPB
F366: 0000    		defw	0	; CSV
F368: 1EFA    		defw	nd_asvb	; ALV (129 bytes)
              		
              	; NSHD8 format
F36A: 4000    	nd_dpb:	defw	64	; # sectors per track
F36C: 06      		defb	6	; BSH
F36D: 3F      		defb	63	; BLM
F36E: 03      		defb	3	; EXM
F36F: FF03    		defw	1023	; DSM
F371: FF00    		defw	255	; DRM
F373: 80      		defb	0x80	; AL0
F374: 00      		defb	0	; AL1
F375: 0000    		defw	0	; Size of directory check vector
F377: 0000    		defw	0	; Number of reserved tracks at the beginning of disk
              	
              	; Driver entry point
              	; a = Command #
              	;
              	; uses: all
F379: B7      	ndkdev:	or	a
F37A: 2815    		jr	z,nd_init
F37C: 3D      		dec	a
F37D: 2813    		jr	z,nd_home
F37F: 3D      		dec	a
F380: 2817    		jr	z,nd_sel
F382: 3D      		dec	a
F383: CAC3F3  		jp	z,nd_strk
F386: 3D      		dec	a
F387: CAC9F3  		jp	z,nd_ssec
F38A: 3D      		dec	a
F38B: CACEF3  		jp	z,nd_read
F38E: C3DFF3  		jp	nd_writ
              		
              	; Inits the device
              	; Not really needed atm
              	; hl = Call argument
              	;
              	; uses: none
F391: C9      	nd_init:ret
              	
              	; Sets "track" back to zero
              	;
              	; uses: none
F392: 210000  	nd_home:ld	hl,0
F395: 225BF9  		ld	(nd_ctrk),hl
F398: C9      		ret
              	
              	; Selects the drive
              	; c = Logging status
              	; hl = Call argument
              	;
              	; uses: hl
F399: E5      	nd_sel:	push	hl
F39A: CD00F4  		call	nd_hini
F39D: E1      		pop	hl
F39E: E5      		push	hl
F39F: 7D      		ld	a,l
F3A0: C641    		add	a,0x41		; Convert to ASCII
F3A2: 32CBF5  		ld	(nd_p2im),a
F3A5: 21C6F5  		ld	hl,nd_p2
F3A8: 11DAF5  		ld	de,nd_m0na
F3AB: 010B00  		ld	bc,11
F3AE: EDB0    		ldir
F3B0: CD64F4  		call	nd_open		; Open the file
F3B3: E1      		pop	hl		; Select DPH
F3B4: 7D      		ld	a,l
F3B5: B7      		or	a
F3B6: 214AF3  		ld	hl,nd_dpha
F3B9: C8      		ret	z
F3BA: 3D      		dec	a
F3BB: 215AF3  		ld	hl,nd_dphb
F3BE: C8      		ret	z
F3BF: 210000  		ld	hl,0
F3C2: C9      		ret
              		
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	; hl = Call argument
              	;
              	; uses: nonoe
F3C3: 60      	nd_strk:ld	h,b
F3C4: 69      		ld	l,c
F3C5: 225BF9  		ld	(nd_ctrk),hl
F3C8: C9      		ret
              	
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	; hl = Call argument
              	;
              	; uses: none
F3C9: 79      	nd_ssec:ld	a,c
F3CA: 325AF9  		ld	(nd_csec),a
F3CD: C9      		ret
              	
              	; Reads a sector and DMA transfers it to memory
              	;
              	; uses: af
F3CE: CD00F4  	nd_read:call	nd_hini
F3D1: CDF0F3  		call	nd_gbno
F3D4: 2A49EF  		ld	hl,(biodma)
F3D7: CD81F4  		call	nd_getb
F3DA: 3E01    		ld	a,1
F3DC: D8      		ret	c
F3DD: AF      		xor	a
F3DE: C9      		ret
              		
              	; Write a sector from DMA
              	;
              	; uses: af
F3DF: CD00F4  	nd_writ:call	nd_hini
F3E2: CDF0F3  		call	nd_gbno
F3E5: 2A49EF  		ld	hl,(biodma)
F3E8: CDC2F4  		call	nd_putb
F3EB: 3E01    		ld	a,1
F3ED: D8      		ret	c
F3EE: AF      		xor	a
F3EF: C9      		ret
              		
              		
              	; Gets the block # for read / write operations
              	;
              	; Returns block # in de
              	; uses: af, de, hl 
F3F0: 2A5BF9  	nd_gbno:ld	hl,(nd_ctrk)
F3F3: 29      		add	hl,hl
F3F4: 29      		add	hl,hl
F3F5: 29      		add	hl,hl
F3F6: 29      		add	hl,hl
F3F7: 29      		add	hl,hl
F3F8: 29      		add	hl,hl
F3F9: 3A5AF9  		ld	a,(nd_csec)
F3FC: B5      		or	l
F3FD: 6F      		ld	l,a
F3FE: EB      		ex	de,hl
F3FF: C9      		ret
              		
              	
              	; Set up the HCCA modem connection
              	; Configures the AY-3-8910 to monitor correct interrupts
              	; and leaves it in a state where the interrupt port is
              	; exposed
              	;
              	; uses: a, b
F400: 3E07    	nd_hini:ld	a,0x07
F402: D341    		out	(nd_atla),a	; AY register = 7
F404: DB40    		in	a,(nd_ayda)
F406: E63F    		and	0x3F
F408: F640    		or	0x40
F40A: D340    		out	(nd_ayda),a	; Configure AY port I/O
              		
              		; Claim interrupt vectors
F40C: E5      		push	hl
F40D: 2156F5  		ld	hl,nd_rirq
F410: 2200FF  		ld	(intvec),hl
F413: 219DF5  		ld	hl,nd_wirq
F416: 2202FF  		ld	(intvec+2),hl
F419: E1      		pop	hl
              		
              	; Set interrupts to their default state
              	;
              	; uses: a
F41A: 3E0E    	nd_dflt:ld	a,0x0E
F41C: D341    		out	(nd_atla),a	; AY register = 14
F41E: 3EB0    		ld	a,0xB0
F420: D340    		out	(nd_ayda),a	; Enable HCCA receive and but not send, plus key and VDP
              		
F422: 3E0F    	nd_dfl0:ld	a,0x0F		
F424: D341    		out	(nd_atla),a	; AY register = 15
              		
F426: C9      		ret
              	
              	; Set receive and send interrupts
              	;
              	; uses: a
F427: 3E0E    	nd_esnd:ld	a,0x0E
F429: D341    		out	(nd_atla),a	; AY register = 14
F42B: 3EC0    		ld	a,0xC0
F42D: D340    		out	(nd_ayda),a	; Enable HCCA receive and send
F42F: 18F1    		jr	nd_dfl0
              		
              	; Set receive but not send interrupt
              	;
              	; uses: a
F431: 3E0E    	nd_dsnd:ld	a,0x0E
F433: D341    		out	(nd_atla),a	; AY register = 14
F435: 3E80    		ld	a,0x80
F437: D340    		out	(nd_ayda),a	; Enable HCCA receive and but not send
F439: 18E7    		jr	nd_dfl0
              	
              	
              	; Loads the CCP into the CCP space
F43B: 21B2F5  	nd_ccp:	ld	hl,nd_p0
F43E: 1803    		jr	nd_grb0
              		
              	; Loads the GRB into the CCP space
F440: 21BCF5  	nd_grb:	ld	hl,nd_p1
F443: 11DAF5  	nd_grb0:ld	de,nd_m0na
F446: 010A00  		ld	bc,10
F449: EDB0    		ldir			; Copy name to file open
F44B: CD00F4  		call	nd_hini		; Go to HCCA mode
F44E: 210000  		ld	hl,0x0000	; O_RDONLY
F451: CD67F4  		call	nd_opef		; Open the file
F454: 110000  		ld	de,0
F457: 2100D8  		ld	hl,cbase
F45A: CD81F4  	nd_grb1:call	nd_getb
F45D: 1C      		inc	e
F45E: 3E10    		ld	a,16
F460: BB      		cp	e
F461: 20F7    		jr	nz,nd_grb1
F463: C9      		ret
              		
              	
              	; Open the prepared file
              	; Closes the existing file too
              	;
              	; uses: af, b, hl
F464: 210100  	nd_open:ld	hl,0x0001	; O_RDWR
F467: 22D7F5  	nd_opef:ld	(nd_m0fl),hl
F46A: 21E9F5  		ld	hl,nd_m1
F46D: 0606    		ld	b,6
F46F: CD0EF5  		call	nd_send
F472: 21D1F5  		ld	hl,nd_m0
F475: 0617    		ld	b,23
F477: CD0EF5  		call	nd_send
F47A: 215DF9  		ld	hl,nd_buff
F47D: CDF0F4  		call	nd_rece
F480: C9      		ret
              		
              	; Gets a block from the currently open file
              	; and places it in (hl)
              	; de = Block to read
              	; hl = Destination for information
              	;
              	; Returns location directly after in hl
              	; Carry flag set on error
              	; uses: af, b, hl
F481: CD87F4  	nd_getb:call	nd_get0
F484: C31AF4  		jp	nd_dflt
F487: EB      	nd_get0:ex	de,hl
F488: 22F7F5  		ld	(nd_m2bn),hl
F48B: EB      		ex	de,hl
F48C: E5      		push	hl
F48D: 21F1F5  		ld	hl,nd_m2
F490: 060C    		ld	b,12
F492: CD0EF5  		call	nd_send
F495: E1      		pop	hl
F496: D8      		ret	c
F497: CD17F5  		call	nd_hcrd
F49A: CD1AF5  		call	nd_hcre
F49D: D8      		ret	c
F49E: FE84    		cp	0x84
F4A0: 37      		scf
F4A1: 2017    		jr	nz,nd_get2
F4A3: CD1AF5  		call	nd_hcre
F4A6: 3259F9  		ld	(nd_tran),a
F4A9: 47      		ld	b,a
F4AA: CD1AF5  		call	nd_hcre
F4AD: 78      		ld	a,b
F4AE: B7      		or	a
F4AF: C8      		ret	z
F4B0: CD1AF5  	nd_get1:call	nd_hcre
F4B3: D8      		ret	c
F4B4: 77      		ld	(hl),a
F4B5: 23      		inc	hl
F4B6: 10F8    		djnz	nd_get1
F4B8: B7      		or	a
F4B9: C9      		ret
F4BA: CD17F5  	nd_get2:call	nd_hcrd	; Read the error message and exit
F4BD: CD1AF5  		call	nd_hcre
F4C0: 37      		scf
F4C1: C9      		ret
              		
              	; Puts a block into the currently open file
              	; from that location (hl)
              	; de = Block to write
              	; hl = Source of information
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F4C2: CDC8F4  	nd_putb:call	nd_put0
F4C5: C31AF4  		jp	nd_dflt
F4C8: EB      	nd_put0:ex	de,hl
F4C9: 2203F6  		ld	(nd_m3bn),hl
F4CC: EB      		ex	de,hl
F4CD: E5      		push	hl
F4CE: 21FDF5  		ld	hl,nd_m3
F4D1: 060C    		ld	b,12
F4D3: CD0EF5  		call	nd_send		; Send message precursor
F4D6: E1      		pop	hl
F4D7: D8      		ret	c
F4D8: 0680    		ld	b,128
F4DA: 7E      	nd_put1:ld	a,(hl)		; Send the block
F4DB: CD64F5  		call	nd_hcwr
F4DE: D8      		ret	c
F4DF: 23      		inc	hl
F4E0: 10F8    		djnz	nd_put1
F4E2: 215DF9  		ld	hl,nd_buff
F4E5: CDF0F4  		call	nd_rece
F4E8: 3A5DF9  		ld	a,(nd_buff)
F4EB: FE81    		cp	0x81
F4ED: C8      		ret	z
F4EE: 37      		scf
F4EF: C9      		ret
              		
              	; Receives a general response from the NHACP server
              	; hl = Destination of message
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F4F0: CD31F4  	nd_rece:call	nd_dsnd
F4F3: CDF9F4  		call	nd_rec0
F4F6: C31AF4  		jp	nd_dflt
F4F9: CD1AF5  	nd_rec0:call	nd_hcre
F4FC: D8      		ret	c		; Existing error
F4FD: 47      		ld	b,a
F4FE: CD1AF5  		call	nd_hcre
F501: D8      		ret	c		; Existing error
F502: 37      		scf
F503: C0      		ret	nz		; Message too big!
F504: CD1AF5  	nd_rec1:call	nd_hcre
F507: D8      		ret	c		; Error!
F508: 77      		ld	(hl),a
F509: 23      		inc	hl
F50A: 10F8    		djnz	nd_rec1
F50C: B7      		or	a
F50D: C9      		ret
              		
              	; Write a number of bytes to the HCCA port
              	; b = Bytes to write
              	; hl = Start of message
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F50E: 7E      	nd_send:ld	a,(hl)
F50F: 23      		inc	hl
F510: CD64F5  		call	nd_hcwr
F513: D8      		ret	c		; Error!
F514: 10F8    		djnz	nd_send
F516: C9      		ret
              		
              	; Read from the HCCA port
              	; Assumes AY is set to reg 15
              	; Will panic on timeout
              	;
              	; Returns result in a
              	; Carry flag set on error
              	; Uses: af
F517: CD1AF5  	nd_hcrd:call	nd_hcre
F51A: AF      	nd_hcre:xor	a
F51B: 32B1F5  		ld	(nd_inf),a
F51E: D5      		push	de
F51F: 3E09    		ld	a,0x09
F521: D300    		out	(nd_nctl),a	; Turn on recv light
F523: 11FFFF  		ld	de,0xFFFF
F526: 3AB1F5  	nd_hcr0:ld	a,(nd_inf)
F529: B7      		or	a
F52A: 201D    		jr	nz,nd_hcr2
F52C: DB40    		in	a,(nd_ayda)
              		;bit	0,a
              		;jr	z,nd_hcr0	; Await an interrupt
              		;bit	1,a
              		;jr	z,nd_hcr1
F52E: E60F    		and	0x0F
F530: EE01    		xor	0b00000001
F532: 280C    		jr	z,nd_hcr1
F534: 1B      		dec	de
F535: 7B      		ld	a,e
F536: B2      		or	d
F537: 20ED    		jr	nz,nd_hcr0
F539: 3E01    	nd_hcer:ld	a,0x01
F53B: D300    		out	(nd_nctl),a	; Turn off recv light
F53D: 37      		scf
F53E: D1      		pop	de
F53F: C9      		ret			; Timed out waiting
F540: 3E01    	nd_hcr1:ld	a,0x01
F542: D300    		out	(nd_nctl),a	; Turn off recv light
F544: DB80    		in	a,(nd_hcca)
F546: D1      		pop	de
F547: B7      		or	a
F548: C9      		ret
F549: 3E01    	nd_hcr2:ld	a,0x01
F54B: D300    		out	(nd_nctl),a	; Turn off recv light
F54D: AF      		xor	a
F54E: 32B1F5  		ld	(nd_inf),a
F551: 3AB0F5  		ld	a,(nd_inb)
F554: D1      		pop	de
F555: C9      		ret
              		
              	; HCCA read interrupt
              	; Reads from the HCCA, buffers it, and then sets the flag
              	;
              	; uses: none
F556: F5      	nd_rirq:push	af
F557: DB80    		in	a,(nd_hcca)
F559: 32B0F5  		ld	(nd_inb),a
F55C: 3E01    		ld	a,1
F55E: 32B1F5  		ld	(nd_inf),a
F561: F1      		pop	af
F562: FB      		ei
F563: C9      		ret
              		
              		
              	; Write to the HCCA port
              	; Assumes AY is set to reg 15
              	; Will panic on timeout
              	; a = Character to write
              	;
              	; Carry flag set on error
              	; Uses: f
F564: D5      	nd_hcwr:push	de
F565: 32AEF5  		ld	(nd_outb),a
F568: AF      		xor	a
F569: 32AFF5  		ld	(nd_outf),a
F56C: CD27F4  		call	nd_esnd
F56F: 11FFFF  		ld	de,0xFFFF
F572: 3E21    		ld	a,0x21
F574: D300    		out	(nd_nctl),a	; Turn on send light
F576: 3AAFF5  	nd_hcw0:ld	a,(nd_outf)
F579: B7      		or	a
F57A: 2017    		jr	nz,nd_hcw2
F57C: DB40    		in	a,(nd_ayda)
              		;bit	0,a
              		;jr	z,nd_hcw0	; Await an interrupt
              		;bit	1,a
              		;jr	nz,nd_hcw1
F57E: E60F    		and	0x0F
F580: EE03    		xor	0b00000011
F582: 280A    		jr	z,nd_hcw1
F584: 1B      		dec	de
F585: 7B      		ld	a,e
F586: B2      		or	d
F587: 20ED    		jr	nz,nd_hcw0
F589: CD31F4  		call	nd_dsnd
F58C: 18AB    		jr	nd_hcer		; Timed out waiting
F58E: 3AAEF5  	nd_hcw1:ld	a,(nd_outb)
F591: D380    		out	(nd_hcca),a
F593: D1      	nd_hcw2:pop	de
F594: 3E01    		ld	a,0x01
F596: D300    		out	(nd_nctl),a	; Turn off send light
F598: CD31F4  		call	nd_dsnd
F59B: B7      		or	a
F59C: C9      		ret
              		
              	; HCCA write interrupt
              	; Writes to the HCCA from the buffer, and 
F59D: F5      	nd_wirq:push	af
F59E: 3AAEF5  		ld	a,(nd_outb)
F5A1: D380    		out	(nd_hcca),a
F5A3: 3E01    		ld	a,1
F5A5: 32AFF5  		ld	(nd_outf),a
F5A8: CD31F4  		call	nd_dsnd		; Y'all can't behave, turning off
F5AB: F1      		pop	af
F5AC: FB      		ei
F5AD: C9      		ret
              		
              	; Byte to send out of HCCA
F5AE: 00      	nd_outb:defb	0
              	
              	; HCCA output flag
F5AF: 00      	nd_outf:defb	0
              	
              	; Byte received from HCCA
F5B0: 00      	nd_inb:	defb	0
              	
              	; HCCA input flag
F5B1: 00      	nd_inf: defb	0
              		
              	; Path to CP/M image
              	; Total length: 10 bytes
F5B2: 43504D32	nd_p0:	defb	'CPM22.SYS',0
F5B6: 322E5359	
F5BA: 5300    	
              	
              	; Path to GRB image
              	; Total length: 10 bytes
F5BC: 464F4E54	nd_p1:	defb	'FONT.GRB',0,0
F5C0: 2E475242	
F5C4: 0000    	
              	
              	; Path to a generic disk image
              	; Total length: 11
F5C6: 4E44534B	nd_p2:	defb	'NDSK_'
F5CA: 5F      	
F5CB: 3F      	nd_p2im:defb	'?'		; Disk image name
F5CC: 2E494D47		defb	'.IMG',0
F5D0: 00      	
              	
              	; Message prototype to open a file
              	; Total length: 23 bytes
F5D1: 8F00    	nd_m0:	defb	0x8F,0x00
F5D3: 1300    		defw	19		; Message length
F5D5: 01      		defb	0x01		; Cmd: STORAGE-OPEN
F5D6: 80      		defb	nd_fild		; Default file descriptor
F5D7: 0100    	nd_m0fl:defw	0x01		; Read/Write flags
F5D9: 0E      		defb	0x0E		; Message length
F5DA: 58585858	nd_m0na:defb	'XXXXXXXXXXXXXX'; File name field
F5DE: 58...   	
F5E8: 00      		defb	0x00		; Padding
              		
              	; Message prototype to close a file
              	; Total length: 6 bytes
F5E9: 8F00    	nd_m1:	defb	0x8F,0x00
F5EB: 0200    		defw	2		; Message length
F5ED: 05      		defb	0x05		; Cmd: FILE-CLOSE
F5EE: 80      		defb	nd_fild		; Default file descriptor
F5EF: 0000    		defw	0x00		; Magic bytes
              		
              	; Message prototype to read a block
              	; Total length: 12 bytes
F5F1: 8F00    	nd_m2:	defb	0x8F,0x00
F5F3: 0800    		defw	8		; Message length
F5F5: 07      		defb	0x07		; Cmd: STORAGE-GET-BLOCK
F5F6: 80      		defb	nd_fild		; Default file descritor
F5F7: 00000000	nd_m2bn:defw	0x00,0x00	; Block number
F5FB: 8000    		defw	128		; Block length
              		
              	; Message prototype to write a block
              	; Total length: 12 bytes
F5FD: 8F00    	nd_m3:	defb	0x8F,0x00
F5FF: 8800    		defw	136		; Message length
F601: 08      		defb	0x08		; Cmd: STORAGE-PUT-BLOCK
F602: 80      		defb	nd_fild		; Default file descritor
F603: 00000000	nd_m3bn:defw	0x00,0x00	; Block number
F607: 8000    		defw	128		; Block length
              	#include "../dev/nabu_fdc.asm"
              	;
              	;**************************************************************
              	;*
              	;*      N A B U   F D 1 7 9 7   F L O P P Y   D R I V E R
              	;*
              	;*      This driver interfaces the NABU FDC for use as a
              	;*      CP/M file system, graphical source, and boot device.
              	;*      The driver only supports double-density disks of 
              	;*      Osborne 1 format at the time, but this could be
              	;*      updated if it is needed. The directory table starts
              	;*      on track 2, the system sectors are as follows:
              	;*
              	;*      Track 0 Sector 1:	Boot Sector
              	;*      Track 0 Sector 2-3:	Graphical Resource Block
              	;*	Track 0 Sector 4-5:	CCP
              	;*	Track 1 Sector 1-5:	BDOS + BIOS Image
              	;*
              	;*	Device requires 90 bytes of bss space (nf_bss)
              	;*	Device requires 1024 byte buffer space (nf_cach)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
FA9F: 00      	nf_io:	defs	1	; FDC address
FAA0: 00      	nf_r2ks:defs	1	; Temp storaged used in nf_r2k
              	
FAA1: 00      	nf_curd:defs	1	; Currently selected disk
FAA2: 00      	nf_subs:defs	1	; Current subsector
FAA3: 00      	nf_sync:defs	1	; Set if disk needs to be rehomed
FAA4: 00      	nf_inco:defs	1	; Set if sector is in core already
FAA5: 00      	nf_dirt:defs	1	; Set if cache is dirty
              	
FAA6: 00000000	nf_asva:defs	26	; Misc CP/M buffer
FAAA: 00...   	
FAC0: 00000000	nf_asvb:defs	26
FAC4: 00...   	
FADA: 00000000	nf_csva:defs	15
FADE: 00...   	
FAE9: 00000000	nf_csvb:defs	15
FAED: 00...   	
              	
FAF8: 00000000	nf_cach:defs	1024	; Sector cache
FAFC: 00...   	
              	.area	_TEXT
              	
0002:         	nf_rdsk	equ	2	; Defines which drives contains system
              				; resources (2 = A, 4 = B)
              				
0040:         	nf_ayda	equ	0x40	; AY-3-8910 data port
0041:         	nf_atla	equ	0x41	; AY-3-8910 latch port
              	
              	;
              	;**************************************************************
              	;*
              	;*         D I S K   D R I V E   G E O M E T R Y
              	;* 
              	;**************************************************************
              	;
              	
              	; Disk A DPH
F609:         	nf_dpha:
F609: 00000000		defw	0,0,0,0
F60D: 00000000	
F611: 10FF    		defw	dircbuf	; DIRBUF
F613: 29F6    		defw	nf_dpb	; DPB
F615: DAFA    		defw	nf_csva	; CSV
F617: A6FA    		defw	nf_asva	; ALV
              	
              	; Disk B DPH
F619:         	nf_dphb:
F619: 00000000		defw	0,0,0,0
F61D: 00000000	
F621: 10FF    		defw	dircbuf	; DIRBUF
F623: 29F6    		defw	nf_dpb	; DPB
F625: E9FA    		defw	nf_csvb	; CSV
F627: C0FA    		defw	nf_asvb	; ALV
              	
              	; Osborne 1 format
F629:         	nf_dpb:
F629: 2800    		defw	40	; # sectors per track
F62B: 03      		defb	3	; BSH
F62C: 07      		defb	7	; BLM
F62D: 00      		defb	0	; EXM
F62E: B800    		defw	184	; DSM
F630: 3F00    		defw	63	; DRM
F632: C0      		defb	0xC0	; AL0
F633: 00      		defb	0	; AL1
F634: 1000    		defw	16	; Size of directory check vector
F636: 0300    		defw	3	; Number of reserved tracks at the beginning of disk
              	
              	
              	; Driver entry point
              	; a = Command #
              	;
              	; uses: all
F638: B7      	nfddev:	or	a
F639: 2815    		jr	z,nf_init
F63B: 3D      		dec	a
F63C: 283D    		jr	z,nf_home
F63E: 3D      		dec	a
F63F: 2852    		jr	z,nf_sel
F641: 3D      		dec	a
F642: CAE7F6  		jp	z,nf_strk
F645: 3D      		dec	a
F646: CA1DF7  		jp	z,nf_ssec
F649: 3D      		dec	a
F64A: CA6EF7  		jp	z,nf_read
F64D: C376F7  		jp	nf_writ
              		
              	; Initialize device
              	; Sets the current track to 0
F650: AF      	nf_init:xor	a
F651: 329FFA  		ld	(nf_io),a
              	
              		; Look for the FDC
F654: 0ECF    		ld	c,0xCF
F656: ED78    	nf_ini1:in	a,(c)
F658: FE10    		cp	0x10
F65A: 2808    		jr	z,nf_ini2
F65C: 0C      		inc	c
F65D: C8      		ret	z	; Should not be possible!
F65E: 3E0F    		ld	a,0x0F
F660: 81      		add	a,c
F661: 4F      		ld	c,a
F662: 18F2    		jr	nf_ini1
              		
              		; Get command register
F664: 79      	nf_ini2:ld	a,c
F665: D60F    		sub	15
F667: 4F      		ld	c,a
F668: 329FFA  		ld	(nf_io),a
              		
              		; Select drive defined by hl
F66B: CB25    		sla	l
F66D: 3E02    		ld	a,2
F66F: 85      		add	l
F670: 32A1FA  		ld	(nf_curd),a
              		
              		; Force FDC interrupt
F673: 3ED0    		ld	a,0xD0
F675: ED79    		out	(c),a
              		
              		; Re-home drive
F677: CD7BF6  		call	nf_home
              		
              		; De-select drive
              		
F67A: C9      		ret
              	
              	; Sends the drive to track 0, and syncs the drive
              	;
              	; uses : af, c
F67B: CD8EF7  	nf_home:call	nf_wdef
F67E: CD41F8  		call	nf_dvsc
              	
F681: 3A9FFA  		ld	a,(nf_io)
F684: 4F      		ld	c,a
              		
              		; Restore to track 0
F685: 3E09    		ld	a,0x09
F687: ED79    		out	(c),a 
F689: CD58F8  		call	nf_busy
              		
              		; Reset sync flag
F68C: AF      		xor	a
F68D: 32A3FA  		ld	(nf_sync),a
              		
              		; De-select drive
F690: C346F8  		jp	nf_udsl
              		
              	; Selects the drive
              	; c = Logging status
              	; hl = Call argument
              	;
              	; uses; all
F693: 3A9FFA  	nf_sel:	ld	a,(nf_io)
F696: B7      		or	a
F697: FA9EF6  		jp	m,nf_seld
              		
              		; no FDC card
F69A: 210000  		ld	hl,0
F69D: C9      		ret
              	
F69E: 7D      	nf_seld:ld	a,l		; Select a disk
F69F: 0602    		ld	b,2
F6A1: B7      		or	a
F6A2: 2809    		jr	z,nf_sel0
F6A4: 3D      		dec	a
F6A5: 0604    		ld	b,4
F6A7: 2804    		jr	z,nf_sel0
F6A9: 210000  		ld	hl,0
F6AC: C9      		ret
              	
              		; Move control of drive buffers
F6AD: CD8EF7  	nf_sel0:call	nf_wdef		; Write back if needed
F6B0: 3EFF    		ld	a,0xFF
F6B2: 32A3FA  		ld	(nf_sync),a	; Set sync flag
F6B5: 78      		ld	a,b
F6B6: 32A1FA  		ld	(nf_curd),a	; Set current drive
F6B9: 5F      		ld	e,a
              		
              		; Check to make sure there is a disk
F6BA: 16FF    	nf_selc	ld	d,255
F6BC: CD41F8  		call	nf_dvsc
F6BF: 3A9FFA  		ld	a,(nf_io)
F6C2: 4F      		ld	c,a
F6C3: 3ED0    		ld	a,0xD0
F6C5: ED79    		out	(c),a		; Force FDC interrupt
F6C7: CD5EF8  	nf_sel1:call	nf_stal
F6CA: ED78    		in	a,(c)
F6CC: E602    		and	0x02
F6CE: 2009    		jr	nz,nf_sel2
F6D0: 15      		dec	d
F6D1: 20F4    		jr	nz,nf_sel1
              		
              		; No disk!
F6D3: 210000  		ld	hl,0
F6D6: C346F8  		jp	nf_udsl
              		
              		
              		; Output DPH
F6D9: CD46F8  	nf_sel2:call	nf_udsl
F6DC: 2109F6  		ld	hl,nf_dpha
F6DF: 3E02    		ld	a,2
F6E1: BB      		cp	e
F6E2: C8      		ret	z
F6E3: 2119F6  		ld	hl,nf_dphb
F6E6: C9      		ret
              	
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	; hl = Call argument
              	;
              	; uses: all
F6E7: 51      	nf_strk:ld	d,c		; Track = d
F6E8: 3A9FFA  		ld	a,(nf_io)
F6EB: 4F      		ld	c,a
F6EC: 3AA3FA  		ld	a,(nf_sync)
F6EF: B7      		or	a
F6F0: 280E    		jr	z,nf_str0	; Check if disk direct
              		
F6F2: CD41F8  		call	nf_dvsc
              		
              		; Restore to track 0
F6F5: 3E09    		ld	a,0x09
F6F7: ED79    		out	(c),a 
F6F9: CD58F8  		call	nf_busy
              		
              		; Reset sync flag
F6FC: AF      		xor	a
F6FD: 32A3FA  		ld	(nf_sync),a
              		
              		; Check to see if tracks match
F700: 59      	nf_str0:ld	e,c
F701: 0C      		inc	c
F702: ED78    		in	a,(c)
F704: BA      		cp	d
F705: CA46F8  		jp	z,nf_udsl	; They match, do nothing
              	
              		; Write a deferred block
F708: CD8EF7  		call	nf_wdef
              	
              		; Seek to track
F70B: CD41F8  		call	nf_dvsc
F70E: 0C      		inc	c
F70F: 0C      		inc	c
F710: ED51    		out	(c),d
F712: 3E19    		ld	a,0x19
F714: 4B      		ld	c,e
F715: ED79    		out	(c),a 
F717: CD58F8  		call	nf_busy	
              		
F71A: C346F8  		jp	nf_udsl
              	
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	; hl = Call argument
              	;
              	; uses: all
F71D: 79      	nf_ssec:ld	a,c
F71E: E607    		and	0x07
F720: 32A2FA  		ld	(nf_subs),a
F723: 79      		ld	a,c
              		
              		; Compute physical sector
F724: CB3F    		srl	a
F726: CB3F    		srl	a
F728: CB3F    		srl	a
F72A: 3C      		inc	a
F72B: 47      		ld	b,a	; b = Physical sector
F72C: 3A9FFA  		ld	a,(nf_io)
F72F: 3C      		inc	a
F730: 3C      		inc	a
F731: 4F      		ld	c,a
F732: ED78    		in	a,(c)
F734: B8      		cp	b
F735: C8      		ret	z	; Return if the same
              		
              		; Set FDC sector, after writing back if needed
F736: CD8EF7  		call	nf_wdef
F739: ED41    		out	(c),b
F73B: C9      		ret
              		
              	; Ensure sector is in core, and set up for DMA transfer
              	;
              	; uses: all
F73C: 3AA4FA  	nf_rdwr:ld	a,(nf_inco)
F73F: B7      		or	a
F740: 2019    		jr	nz,nf_rdw0
              		
              		; Read in to cache
F742: CD41F8  		call	nf_dvsc
F745: 3A9FFA  		ld	a,(nf_io)
F748: 4F      		ld	c,a
F749: 21F8FA  		ld	hl,nf_cach
F74C: CD1FF8  		call	nf_rphy
F74F: 47      		ld	b,a
F750: CD46F8  		call	nf_udsl
F753: 78      		ld	a,b
              		
              		; Error checking
F754: B7      		or	a
F755: 3E01    		ld	a,1
F757: C0      		ret	nz
F758: 32A4FA  		ld	(nf_inco),a
              		
              		; DMA subsector
F75B: 2A49EF  	nf_rdw0:ld	hl,(biodma)
F75E: EB      		ex	de,hl
              	
F75F: 3AA2FA  		ld	a,(nf_subs)
F762: 2178FA  		ld	hl,nf_cach-128
F765: 018000  		ld	bc,128
F768: 3C      		inc	a
F769: 09      	nf_rdw1:add	hl,bc
F76A: 3D      		dec	a
F76B: 20FC    		jr	nz,nf_rdw1
F76D: C9      		ret
              	
              	; Reads a sector and DMA transfers it to memory
F76E: CD3CF7  	nf_read:call	nf_rdwr
F771: B7      		or	a
F772: C0      		ret	nz
F773: EDB0    		ldir
F775: C9      		ret
              	
              	
              	; Write a sector from DMA, and defer it if possible
F776: C5      	nf_writ:push	bc
F777: CD3CF7  		call	nf_rdwr
F77A: B7      		or	a
F77B: C1      		pop	bc
F77C: C0      		ret	nz
F77D: 3E01    		ld	a,1
F77F: 32A5FA  		ld	(nf_dirt),a
F782: 79      		ld	a,c
F783: 018000  		ld	bc,128
F786: EB      		ex	de,hl
F787: EDB0    		ldir
F789: FE01    		cp	1
F78B: 3E00    		ld	a,0
F78D: C0      		ret	nz
              		
              		; Drop down to defer read
              	
              	
              	; Checks to see if the cache needs to be written back
              	; after a deferred write.
              	;
              	; uses, af
F78E: 3AA5FA  	nf_wdef:ld	a,(nf_dirt)
F791: B7      		or	a
F792: 283D    		jr	z,nf_wde4
              	
F794: C5      		push	bc
F795: D5      		push	de
F796: E5      		push	hl
              		
              		
              		; Write physical sector
F797: CD63F8  		call	nf_dint
F79A: CD41F8  		call	nf_dvsc
F79D: 3A9FFA  		ld	a,(nf_io)
F7A0: 4F      		ld	c,a
F7A1: C603    		add	a,3
F7A3: 57      		ld	d,a
F7A4: 59      		ld	e,c
F7A5: 3EA8    		ld	a,0xA8		; Write command
F7A7: ED79    		out	(c),a
F7A9: 21F8FA  		ld	hl,nf_cach
F7AC: ED78    	nf_wde1:in	a,(c)
F7AE: 1F      		rra	
F7AF: 3009    		jr	nc,nf_wde2
F7B1: 1F      		rra
F7B2: 30F8    		jr	nc,nf_wde1
F7B4: 4A      		ld	c,d
F7B5: EDA3    		outi 
F7B7: 4B      		ld	c,e
F7B8: 18F2    		jr	nf_wde1
F7BA: CD6CF8  	nf_wde2:call	nf_eint
F7BD: ED78    		in	a,(c)
              		
              		; Deselect drive
F7BF: 47      		ld	b,a
F7C0: CD46F8  		call	nf_udsl
F7C3: 78      		ld	a,b
              		
F7C4: E1      		pop	hl
F7C5: D1      		pop	de
F7C6: C1      		pop	bc
              		
              		; Error checking
F7C7: E6FC    		and	0xFC
F7C9: 2803    		jr	z,nf_wde3
              		
F7CB: 3E01    		ld	a,1
F7CD: C9      		ret
              		
              		; Cache is no longer dirty
F7CE: 32A5FA  	nf_wde3:ld	(nf_dirt),a
              		
              		; Data no longer in core
F7D1: AF      	nf_wde4:xor	a
F7D2: 32A4FA  		ld	(nf_inco),a
              		
F7D5: C9      		ret
              		
              	; Loads the GRB into memory from sector 2-3
F7D6: 3E02    	nf_grb:	ld	a,2
F7D8: 32A0FA  		ld	(nf_r2ks),a
F7DB: 1805    		jr	nf_r2k
              		
              	; Loads the CCP into memory from sectors 4-5
F7DD: 3E04    	nf_ccp:	ld	a,4
F7DF: 32A0FA  		ld	(nf_r2ks),a
              	
              	; Reads in a 2K bytes, starting at track 0, sector (nf_r2ks)
              	; This is placed into the cbase
F7E2: 3E02    	nf_r2k: ld	a,nf_rdsk
F7E4: CD47F8  		call	nf_dvsl
              		
              		; Restore to track 0
F7E7: 3A9FFA  		ld	a,(nf_io)
F7EA: 4F      		ld	c,a
F7EB: 3E09    		ld	a,0x09
F7ED: ED79    		out	(c),a 
F7EF: CD58F8  		call	nf_busy
              		
              		; Set sector # to 4
F7F2: 3AA0FA  		ld	a,(nf_r2ks)
F7F5: 0C      		inc	c
F7F6: 0C      		inc	c
F7F7: ED79    		out	(c),a
F7F9: C5      		push	bc
F7FA: 0D      		dec	c
F7FB: 0D      		dec	c
              		
              		; Read into memory
F7FC: 2100D8  		ld	hl,cbase
F7FF: CD1FF8  		call	nf_rphy
F802: C1      		pop	bc
F803: B7      		or	a
F804: 2805    		jr	z,nf_r2k0
F806: CD50F6  		call	nf_init		; Error!
F809: 18D7    		jr	nf_r2k
              		
              		; Increment sector
F80B: ED78    	nf_r2k0:in	a,(c)
F80D: 3C      		inc	a
F80E: ED79    		out	(c),a
F810: 0D      		dec	c
F811: 0D      		dec	c
              		
              		; Read into memory again
F812: CD1FF8  		call	nf_rphy
F815: B7      		or	a
F816: C8      		ret	z
F817: CD50F6  		call	nf_init		; Error!
F81A: 18C6    		jr	nf_r2k
              		
              		; De-select drive
F81C: C346F8  		jp	nf_udsl
              	
              	; Reads a physical sector
              	; Track and sector should be set up
              	; c = FDC command address
              	; hl = memory location of result
              	;
              	; Returns a=0 if successful
              	; uses: af, bc, de, hl
F81F: CD63F8  	nf_rphy:call	nf_dint
F822: 51      		ld	d,c
F823: 59      		ld	e,c
F824: 14      		inc	d
F825: 14      		inc	d
F826: 14      		inc	d
              		
              		; Read command
F827: 3E88    		ld	a,0x88
F829: ED79    		out	(c),a
F82B: ED78    	nf_rph1:in	a,(c)
F82D: 1F      		rra	
F82E: 3009    		jr	nc,nf_rph2
F830: 1F      		rra
F831: 30F8    		jr	nc,nf_rph1
F833: 4A      		ld	c,d
F834: EDA2    		ini
F836: 4B      		ld	c,e
F837: 18F2    		jr	nf_rph1
F839: CD6CF8  	nf_rph2:call	nf_eint
F83C: ED78    		in	a,(c)
F83E: E6FC    		and	0xFC
F840: C9      		ret
              	
              	; Selects or deselects a drive
              	; a = Drive density / selection
              	;
              	; uses: af
F841: 3AA1FA  	nf_dvsc:ld	a,(nf_curd)	; Select current drive
F844: 1801    		jr	nf_dvsl
F846: AF      	nf_udsl:xor	a		; Unselects a drive
F847: C5      	nf_dvsl:push	bc
F848: 47      		ld	b,a
F849: 3A9FFA  		ld	a,(nf_io)
F84C: C60F    		add	a,0x0F
F84E: 4F      		ld	c,a
F84F: ED41    		out	(c),b
F851: 06FF    		ld	b,0xFF
F853: CD5EF8  		call	nf_stal
F856: C1      		pop	bc
F857: C9      		ret
              		
              	
              	; Waits until FDC is not busy
              	; c = FDC command address
              	;
              	; uses: af
F858: ED78    	nf_busy:in	a,(c)
F85A: 1F      		rra
F85B: 38FB    		jr	c,nf_busy
F85D: C9      		ret
              		
              	; Waits a little bit
              	;
              	; uses: b
F85E: C5      	nf_stal:push	bc
F85F: C1      		pop	bc
F860: 10FC    		djnz	nf_stal
F862: C9      		ret
              		
              	; Disables all interrupts while FDC operations occur
              	;
              	; uses: a
F863: 3E0E    	nf_dint:ld	a,0x0E
F865: D341    		out	(nf_atla),a	; AY register = 14
F867: 3E00    		ld	a,0x00
F869: D340    		out	(nf_ayda),a	
F86B: C9      		ret
              		
              	; Enables interrupts again
              	;
              	; uses: a
F86C: 3E0E    	nf_eint:ld	a,0x0E
F86E: D341    		out	(nf_atla),a	; AY register = 14
F870: 3EB0    		ld	a,0xB0
F872: D340    		out	(nf_ayda),a
F874: C9      		ret
              	#include "../dev/nabu_prt.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   P A R A L L E L   O U T P U T
              	;*
              	;*      A simple output-only device driver for the NABU
              	;*      parellel printer port. 
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
0040:         	pr_ayda	equ	0x40		; AY-3-8910 data port
0041:         	pr_atla	equ	0x41		; AY-3-8910 latch port
00B0:         	pr_prnt	equ	0xB0		; Parallel output
0000:         	pr_ctrl	equ	0x00		; Device control register
              	
              	; Driver jump table 
F875: B7      	prtdev:	or	a
F876: 2808    		jr	z,pr_init
F878: 3D      		dec	a
F879: 2806    		jr	z,pr_stat
F87B: 3D      		dec	a
F87C: 2805    		jr	z,pr_read
F87E: 1805    		jr	pr_writ
              		
              	; Device init
              	; Does nothing
              	;
              	; uses: none
F880: C9      	pr_init:ret
              	
              	; Device status 
              	; There are never any characters to read
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
F881: AF      	pr_stat:xor	a
F882: C9      		ret
              		
              	; Waits for a character to come in and returns it
              	; No characters to read, returns 0
              	;
              	; Returns ASCII key in A
              	; uses: af
F883: AF      	pr_read:xor	a
F884: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	;
              	; uses: af, bc
F885: 3E0F    	pr_writ:ld	a,0x0F
F887: D341    		out	(pr_atla),a	; AY register = 15
              		
F889: DB40    	pr_wri0:in	a,(pr_ayda)	; Wait for not busy
F88B: E610    		and	0x10
F88D: 20FA    		jr	nz,pr_wri0
              		
F88F: 79      		ld	a,c
F890: D3B0    		out	(pr_prnt),a	; Write data
              		
F892: 3E05    		ld	a,0x05		; Strobe
F894: D300    		out	(pr_ctrl),a
              		
F896: 0620    		ld	b,32		
F898: 10FE    	pr_wri1:djnz	pr_wri1		; Wait a few cycles
              		
F89A: 3E01    		ld	a,0x01		; Strobe off
F89C: D300    		out	(pr_ctrl),a
              		
F89E: C9      		ret
              		
              	#include "../dev/nabu_sio.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   S E R I A L   O P T I O N   C A R D
              	;*
              	;*      This driver allows the NABU serial option card to be
              	;*      used as a bidirectional Ishkur serial device. It will
              	;*      automatically search for a serial card on init. Serial
              	;*      cards are numbered by order. The first serial card gets
              	;*      a minor # of 0, the second card gets a minor number of
              	;*      1, etc... Up to 4 serial cards are supported.
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
              	
              	
              	; Driver jump table 
F89F: B7      	siodev:	or	a
F8A0: 2808    		jr	z,so_init
F8A2: 3D      		dec	a
F8A3: 2833    		jr	z,so_stat
F8A5: 3D      		dec	a
F8A6: 2841    		jr	z,so_read
F8A8: 1851    		jr	so_writ
              		
              	; Device init
              	; Tries to find the option card if it is installed
              	; hl = Device options
              	;
              	; uses: none
F8AA: 110FF9  	so_init:ld	de,so_atab
F8AD: 45      		ld	b,l
F8AE: 04      		inc	b		; Slot 1,2,3,...
F8AF: 19      		add	hl,de 		; Get address table entry
F8B0: 0ECF    		ld	c,0xCF		; First slot
              		
F8B2: ED78    	so_ini0:in	a,(c)
F8B4: FE08    		cp	0x08
F8B6: 2807    		jr	z,so_ini2
              		
F8B8: 3E10    	so_ini1:ld	a,0x10
F8BA: 81      		add	c
F8BB: F0      		ret	p		; Can't find, failure
F8BC: 4F      		ld	c,a
F8BD: 18F3    		jr	so_ini0
              		
F8BF: 10F7    	so_ini2:djnz	so_ini1		; Repeat if looking for next card
F8C1: 79      		ld	a,c
F8C2: D60F    		sub	0x0F
F8C4: 4F      		ld	c,a
F8C5: 71      		ld	(hl),c
F8C6: 1113F9  		ld	de,so_conf
F8C9: 060D    		ld	b,13
              		
              		; Lets set up the serial card for 9600 8N1
              		; First we set up the 8253, then the 8251
F8CB: 1A      	so_ini3:ld	a,(de)
F8CC: 13      		inc	de
F8CD: 86      		add	a,(hl)
F8CE: 4F      		ld	c,a
F8CF: 1A      		ld	a,(de)
F8D0: 13      		inc	de
F8D1: ED79    		out	(c),a
F8D3: E5      		push	hl
F8D4: E1      		pop	hl	; Small delay
F8D5: 10F4    		djnz	so_ini3
F8D7: C9      		ret
              	
              	; Device status 
              	; hl = Device options
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
F8D8: 110FF9  	so_stat:ld	de,so_atab
F8DB: 19      		add	hl,de
F8DC: AF      		xor	a
F8DD: BE      		cp	(hl)
F8DE: C8      		ret	z	; No device, return 0
F8DF: 4E      		ld	c,(hl)
F8E0: 0C      		inc	c
F8E1: ED78    	so_sta0:in	a,(c)	; Check status register
F8E3: E602    		and	0x02
F8E5: C8      		ret	z
F8E6: 3EFF    		ld	a,0xFF
F8E8: C9      		ret
              		
              		
              	; Waits for a character to come in and returns it
              	; hl = Device options
              	;
              	; Returns ASCII key in A
              	; uses: af
F8E9: 110FF9  	so_read:ld	de,so_atab
F8EC: 19      		add	hl,de
F8ED: AF      		xor	a
F8EE: BE      		cp	(hl)
F8EF: C8      		ret	z	; No device, return 0
F8F0: 4E      		ld	c,(hl)
F8F1: 0C      		inc	c
F8F2: CDE1F8  	so_rea0:call	so_sta0	; Wait for a character
F8F5: 28FB    		jr	z,so_rea0
F8F7: 0D      		dec	c
F8F8: ED78    		in	a,(c)
F8FA: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	; hl = Device options
              	;
              	; uses: af, bc
F8FB: 41      	so_writ:ld	b,c
F8FC: 110FF9  		ld	de,so_atab
F8FF: 19      		add	hl,de
F900: AF      		xor	a
F901: BE      		cp	(hl)
F902: C8      		ret	z	; No device, return 0
F903: 4E      		ld	c,(hl)
F904: 0C      		inc	c
F905: ED78    	so_wri0:in	a,(c)
F907: E601    		and	0x01
F909: 28FA    		jr	z,so_wri0
F90B: 0D      		dec	c
F90C: ED41    		out	(c),b
F90E: C9      		ret
              		
              		
              	; Variables
              	; 4 possible slots
F90F: 00000000	so_atab:defb	0x00,0x00,0x00,0x00
              	
              	; Configuration string
              	; Sets up counters 1 and 2 on the 8523 timer
F913: 0737    	so_conf:defb	0x07,0x37	; Counter 1 setup
F915: 0412    		defb	0x04,0x12
F917: 0400    		defb	0x04,0x00
F919: 0777    		defb	0x07,0x77	; Counter 2 setup
F91B: 0512    		defb	0x05,0x12
F91D: 0500    		defb	0x05,0x00
              		
F91F: 0100    		defb	0x01,0x00	; 8251 setup
F921: 0100    		defb	0x01,0x00
F923: 0100    		defb	0x01,0x00
F925: 0100    		defb	0x01,0x00
F927: 0140    		defb	0x01,0x40
F929: 014E    		defb	0x01,0x4E
F92B: 0137    		defb	0x01,0x37


; +++ segments +++

#CODE _TEXT        = $D800 = 55296,  size = $212D =  8493
#DATA _BSS         = $F92D = 63789,  size = $05CB =  1483
#DATA _JUMP_TABLE  = $FF00 = 65280,  size = $0090 =   144

; +++ global symbols +++

ADDAH            = $DB58 = 56152  _TEXT       zcpr1_ccp.asm:1311
ADVAN            = $DB4B = 56139  _TEXT       zcpr1_ccp.asm:1294
BDOS             = $0005 =     5  _TEXT       zcpr1_ccp.asm:13
BDOSB            = $DA09 = 55817  _TEXT       zcpr1_ccp.asm:985
BDOSJP           = $DA35 = 55861  _TEXT       zcpr1_ccp.asm:1040
BEL              = $0007 =     7  _TEXT       zcpr1_ccp.asm:475
BREAK            = $DB00 = 56064  _TEXT       zcpr1_ccp.asm:1224
BRKBK            = $DB09 = 56073  _TEXT       zcpr1_ccp.asm:1229 (unused)
BUFLEN           = $0050 =    80  _TEXT       zcpr1_ccp.asm:555
CALLPROG         = $DF32 = 57138  _TEXT       zcpr1_ccp.asm:2219
CB1              = $DAEF = 56047  _TEXT       zcpr1_ccp.asm:1210
CB2              = $DAF7 = 56055  _TEXT       zcpr1_ccp.asm:1216 (unused)
CBUFF            = $D807 = 55303  _TEXT       zcpr1_ccp.asm:558
CHRCNT           = $D8BD = 55485  _TEXT       zcpr1_ccp.asm:635
CIBPTR           = $D859 = 55385  _TEXT       zcpr1_ccp.asm:577
CIBUF            = $D83E = 55358  _TEXT       zcpr1_ccp.asm:571
CIBUFF           = $D808 = 55304  _TEXT       zcpr1_ccp.asm:561
CIPTR            = $D85B = 55387  _TEXT       zcpr1_ccp.asm:579
CLEVEL3          = $00FF =   255  _TEXT       zcpr1_ccp.asm:442
CLOSE            = $DA4B = 55883  _TEXT       zcpr1_ccp.asm:1068
CMDSER           = $DC81 = 56449  _TEXT       zcpr1_ccp.asm:1595
CMDTBL           = $D965 = 55653  _TEXT       zcpr1_ccp.asm:817
CMS1             = $DC86 = 56454  _TEXT       zcpr1_ccp.asm:1606
CMS2             = $DC8B = 56459  _TEXT       zcpr1_ccp.asm:1609
CMS3             = $DC99 = 56473  _TEXT       zcpr1_ccp.asm:1620
CMS4             = $DC9C = 56476  _TEXT       zcpr1_ccp.asm:1623
CNVBUF           = $DAEA = 56042  _TEXT       zcpr1_ccp.asm:1206
COM              = $DEF1 = 57073  _TEXT       zcpr1_ccp.asm:2180
COM1             = $DF17 = 57111  _TEXT       zcpr1_ccp.asm:2201
COM4             = $DF60 = 57184  _TEXT       zcpr1_ccp.asm:2239
COM5             = $DF69 = 57193  _TEXT       zcpr1_ccp.asm:2249
COM6             = $DF6F = 57199  _TEXT       zcpr1_ccp.asm:2253
COM7             = $DF77 = 57207  _TEXT       zcpr1_ccp.asm:2264 (unused)
COMLOG           = $DBF8 = 56312  _TEXT       zcpr1_ccp.asm:1462
COMMSG           = $D877 = 55415  _TEXT       zcpr1_ccp.asm:588
CONIN            = $D9BB = 55739  _TEXT       zcpr1_ccp.asm:899
CONOUT           = $D9AE = 55726  _TEXT       zcpr1_ccp.asm:886
CPR              = $D8C3 = 55491  _TEXT       zcpr1_ccp.asm:684
CPR1             = $D8BF = 55487  _TEXT       zcpr1_ccp.asm:669
CPRDIR           = $00FF =   255  _TEXT       zcpr1_ccp.asm:356
CPRLST           = $00FF =   255  _TEXT       zcpr1_ccp.asm:355
CPRMPT           = $003E =    62  _TEXT       zcpr1_ccp.asm:462
CPRTYP           = $00FF =   255  _TEXT       zcpr1_ccp.asm:352
CR               = $000D =    13  _TEXT       zcpr1_ccp.asm:471
CRLF             = $D9A7 = 55719  _TEXT       zcpr1_ccp.asm:881
DEFDMA           = $DA2C = 55852  _TEXT       zcpr1_ccp.asm:1032
DEFUSR           = $0000 =     0  _TEXT       zcpr1_ccp.asm:337
DELETE           = $DA65 = 55909  _TEXT       zcpr1_ccp.asm:1092
DFU              = $DEDF = 57055  _TEXT       zcpr1_ccp.asm:2133
DFUSR            = $DFB3 = 57267  _TEXT       zcpr1_ccp.asm:2359
DIR              = $DCA3 = 56483  _TEXT       zcpr1_ccp.asm:1645
DIR10            = $DD40 = 56640  _TEXT       zcpr1_ccp.asm:1773
DIR11            = $DD4A = 56650  _TEXT       zcpr1_ccp.asm:1778
DIR2             = $DCD2 = 56530  _TEXT       zcpr1_ccp.asm:1670
DIR2A            = $DCD3 = 56531  _TEXT       zcpr1_ccp.asm:1672 (unused)
DIR3             = $DCE1 = 56545  _TEXT       zcpr1_ccp.asm:1691
DIR4             = $DD04 = 56580  _TEXT       zcpr1_ccp.asm:1726
DIR5             = $DD0C = 56588  _TEXT       zcpr1_ccp.asm:1741
DIR6             = $DD0E = 56590  _TEXT       zcpr1_ccp.asm:1743
DIR7             = $DD29 = 56617  _TEXT       zcpr1_ccp.asm:1758
DIR8             = $DD2B = 56619  _TEXT       zcpr1_ccp.asm:1760
DIR9             = $DD3F = 56639  _TEXT       zcpr1_ccp.asm:1771
DIRPR            = $DCD3 = 56531  _TEXT       zcpr1_ccp.asm:1680
DIRPTR           = $DBDB = 56283  _TEXT       zcpr1_ccp.asm:1435
DLOG5            = $DBF5 = 56309  _TEXT       zcpr1_ccp.asm:1458
DLOGIN           = $DBEE = 56302  _TEXT       zcpr1_ccp.asm:1453
DMASET           = $DA2F = 55855  _TEXT       zcpr1_ccp.asm:1034
DRUSER           = $00FF =   255  _TEXT       zcpr1_ccp.asm:348
ENTRY            = $D800 = 55296  _TEXT       zcpr1_ccp.asm:516
EPRMPT           = $0000 =     0  _TEXT       zcpr1_ccp.asm:350
ERA              = $DD54 = 56660  _TEXT       zcpr1_ccp.asm:1801
ERA1             = $DD6D = 56685  _TEXT       zcpr1_ccp.asm:1813
ERARJ            = $DD67 = 56679  _TEXT       zcpr1_ccp.asm:1810 (unused)
ERR1             = $DB24 = 56100  _TEXT       zcpr1_ccp.asm:1262
ERR2             = $DB17 = 56087  _TEXT       zcpr1_ccp.asm:1253
ERRLOG           = $DFF6 = 57334  _TEXT       zcpr1_ccp.asm:2425
ERROR            = $DB11 = 56081  _TEXT       zcpr1_ccp.asm:1250
EXECADR          = $DF85 = 57221  _TEXT       zcpr1_ccp.asm:2273
EXTEST           = $DE62 = 56930  _TEXT       zcpr1_ccp.asm:2032
FALSE            = $0000 =     0  _TEXT       zcpr1_ccp.asm:146
FCBCR            = $D8BB = 55483  _TEXT       zcpr1_ccp.asm:628
FCBDM            = $D8AB = 55467  _TEXT       zcpr1_ccp.asm:626
FCBDN            = $D89B = 55451  _TEXT       zcpr1_ccp.asm:617
FCBFN            = $D89C = 55452  _TEXT       zcpr1_ccp.asm:619
FCBFT            = $D8A4 = 55460  _TEXT       zcpr1_ccp.asm:621
FENCE            = $007C =   124  _TEXT       zcpr1_ccp.asm:449
FFEED            = $000C =    12  _TEXT       zcpr1_ccp.asm:474
FILLQ            = $DD4C = 56652  _TEXT       zcpr1_ccp.asm:1784
FQLP             = $DD4E = 56654  _TEXT       zcpr1_ccp.asm:1786
GET              = $DF93 = 57235  _TEXT       zcpr1_ccp.asm:2291
GETDRV           = $DA28 = 55848  _TEXT       zcpr1_ccp.asm:1026
GETUSR           = $DA6E = 55918  _TEXT       zcpr1_ccp.asm:1103
GO               = $DEEC = 57068  _TEXT       zcpr1_ccp.asm:2169
GOTSYS           = $DCC6 = 56518  _TEXT       zcpr1_ccp.asm:1662
GRBDOS           = $DA46 = 55878  _TEXT       zcpr1_ccp.asm:1063
HEXNUM           = $DB9B = 56219  _TEXT       zcpr1_ccp.asm:1381
HNUM0            = $DB9E = 56222  _TEXT       zcpr1_ccp.asm:1383
HNUM1            = $DBA6 = 56230  _TEXT       zcpr1_ccp.asm:1387
HNUM2            = $DBBD = 56253  _TEXT       zcpr1_ccp.asm:1400
HNUM3            = $DBD8 = 56280  _TEXT       zcpr1_ccp.asm:1428
INPASS           = $0000 =     0  _TEXT       zcpr1_ccp.asm:346
JUMP             = $DEE7 = 57063  _TEXT       zcpr1_ccp.asm:2149
LC1              = $D9E2 = 55778  _TEXT       zcpr1_ccp.asm:941
LCOUT            = $D9D6 = 55766  _TEXT       zcpr1_ccp.asm:924
LF               = $000A =    10  _TEXT       zcpr1_ccp.asm:472
LIST             = $DD7B = 56699  _TEXT       zcpr1_ccp.asm:1846
LOADADR          = $DFD1 = 57297  _TEXT       zcpr1_ccp.asm:2391
LOGIN            = $DA38 = 55864  _TEXT       zcpr1_ccp.asm:1043
LSTOUT           = $D9DD = 55773  _TEXT       zcpr1_ccp.asm:937 (unused)
LTAB             = $DDEA = 56810  _TEXT       zcpr1_ccp.asm:1931
MAXDR            = $0001 =     1  _TEXT       zcpr1_ccp.asm:333 (unused)
MAXDRIV          = $0000 =     0  _TEXT       zcpr1_ccp.asm:330
MAXUSR           = $000F =    15  _TEXT       zcpr1_ccp.asm:326
MBUFF            = $D806 = 55302  _TEXT       zcpr1_ccp.asm:556
MEMLOAD          = $DF9E = 57246  _TEXT       zcpr1_ccp.asm:2308
ML2              = $DFD3 = 57299  _TEXT       zcpr1_ccp.asm:2393
ML3              = $DFEC = 57324  _TEXT       zcpr1_ccp.asm:2408
ML4              = $DFF0 = 57328  _TEXT       zcpr1_ccp.asm:2415
MLA              = $DFAA = 57258  _TEXT       zcpr1_ccp.asm:2318
MLA0             = $DFC1 = 57281  _TEXT       zcpr1_ccp.asm:2374
MLA1             = $DFD0 = 57296  _TEXT       zcpr1_ccp.asm:2390
MLERR            = $DFF3 = 57331  _TEXT       zcpr1_ccp.asm:2419
NCHARS           = $0004 =     4  _TEXT       zcpr1_ccp.asm:812
NCMNDS           = $000B =    11  _TEXT       zcpr1_ccp.asm:871
NLINES           = $0018 =    24  _TEXT       zcpr1_ccp.asm:447
NOBOP            = $DDFA = 56826  _TEXT       zcpr1_ccp.asm:1943
NOECHO           = $D9C9 = 55753  _TEXT       zcpr1_ccp.asm:913
NOHYPH           = $DDD2 = 56786  _TEXT       zcpr1_ccp.asm:1916
NOLOG            = $D8E4 = 55524  _TEXT       zcpr1_ccp.asm:711
NOSLAS           = $DD96 = 56726  _TEXT       zcpr1_ccp.asm:1880
NRCMDS           = $0003 =     3  _TEXT       zcpr1_ccp.asm:839 (unused)
NUM0             = $DB73 = 56179  _TEXT       zcpr1_ccp.asm:1341
NUM1             = $DB79 = 56185  _TEXT       zcpr1_ccp.asm:1345
NUM2             = $DB96 = 56214  _TEXT       zcpr1_ccp.asm:1369
NUMBASE          = $0048 =    72  _TEXT       zcpr1_ccp.asm:464
NUMBER           = $DB5D = 56157  _TEXT       zcpr1_ccp.asm:1321
NUMERR           = $DB98 = 56216  _TEXT       zcpr1_ccp.asm:1375
NUMS             = $DB65 = 56165  _TEXT       zcpr1_ccp.asm:1328
NUMS1            = $DB6F = 56175  _TEXT       zcpr1_ccp.asm:1335
OPEN             = $DA44 = 55876  _TEXT       zcpr1_ccp.asm:1060
OPENF            = $DA3D = 55869  _TEXT       zcpr1_ccp.asm:1055
OUTPUT           = $D9B1 = 55729  _TEXT       zcpr1_ccp.asm:889
PAGCNT           = $D8BC = 55484  _TEXT       zcpr1_ccp.asm:633
PGBAK            = $DA02 = 55810  _TEXT       zcpr1_ccp.asm:973
PGDFLG           = $0050 =    80  _TEXT       zcpr1_ccp.asm:452
PGDFLT           = $0000 =     0  _TEXT       zcpr1_ccp.asm:451
PGFLG            = $D9F5 = 55797  _TEXT       zcpr1_ccp.asm:960
PRFLG            = $D9D8 = 55768  _TEXT       zcpr1_ccp.asm:929
PRIN1            = $DA1D = 55837  _TEXT       zcpr1_ccp.asm:1011
PRINT            = $DA15 = 55829  _TEXT       zcpr1_ccp.asm:1000
PRINTC           = $DA10 = 55824  _TEXT       zcpr1_ccp.asm:995
PRNLE            = $DE58 = 56920  _TEXT       zcpr1_ccp.asm:2022
PRNNF            = $D95A = 55642  _TEXT       zcpr1_ccp.asm:804
PRT              = $DDF9 = 56825  _TEXT       zcpr1_ccp.asm:1942
QMCNT            = $D8BE = 55486  _TEXT       zcpr1_ccp.asm:637
RAS              = $0000 =     0  _TEXT       zcpr1_ccp.asm:315
RB1              = $DAD4 = 56020  _TEXT       zcpr1_ccp.asm:1185
RCPRNL           = $D949 = 55625  _TEXT       zcpr1_ccp.asm:793
READ             = $DA07 = 55815  _TEXT       zcpr1_ccp.asm:980
READF            = $DA04 = 55812  _TEXT       zcpr1_ccp.asm:978
REDBUF           = $DA89 = 55945  _TEXT       zcpr1_ccp.asm:1140
REN              = $DE91 = 56977  _TEXT       zcpr1_ccp.asm:2063
REN0             = $DE98 = 56984  _TEXT       zcpr1_ccp.asm:2068 (unused)
REN1             = $DEAA = 57002  _TEXT       zcpr1_ccp.asm:2076 (unused)
REN2             = $DEC1 = 57025  _TEXT       zcpr1_ccp.asm:2091
REN3             = $DECF = 57039  _TEXT       zcpr1_ccp.asm:2099 (unused)
REN4             = $DED2 = 57042  _TEXT       zcpr1_ccp.asm:2101
RESET            = $DA33 = 55859  _TEXT       zcpr1_ccp.asm:1038
RESETUSR         = $DA69 = 55913  _TEXT       zcpr1_ccp.asm:1098
RESTRT           = $D8F8 = 55544  _TEXT       zcpr1_ccp.asm:727
RNGSUB           = $D8E8 = 55528  _TEXT       zcpr1_ccp.asm:714
RS00             = $D916 = 55574  _TEXT       zcpr1_ccp.asm:750
RS000            = $D91B = 55579  _TEXT       zcpr1_ccp.asm:756 (unused)
RS1              = $D91E = 55582  _TEXT       zcpr1_ccp.asm:761
RSTCPR           = $D946 = 55622  _TEXT       zcpr1_ccp.asm:788
RSTJP            = $DEDC = 57052  _TEXT       zcpr1_ccp.asm:2118
SAVE             = $DE0C = 56844  _TEXT       zcpr1_ccp.asm:1976
SAVE0            = $DE2C = 56876  _TEXT       zcpr1_ccp.asm:1994
SAVE1            = $DE33 = 56883  _TEXT       zcpr1_ccp.asm:1997
SAVE2            = $DE4F = 56911  _TEXT       zcpr1_ccp.asm:2014
SAVE3            = $DE5F = 56927  _TEXT       zcpr1_ccp.asm:2026
SBLANK           = $DB4F = 56143  _TEXT       zcpr1_ccp.asm:1300
SCAN15           = $DC3F = 56383  _TEXT       zcpr1_ccp.asm:1525
SCAN16           = $DC42 = 56386  _TEXT       zcpr1_ccp.asm:1530
SCAN17           = $DC44 = 56388  _TEXT       zcpr1_ccp.asm:1532
SCAN2            = $DC1E = 56350  _TEXT       zcpr1_ccp.asm:1499
SCAN3            = $DC24 = 56356  _TEXT       zcpr1_ccp.asm:1503
SCAN4            = $DC2A = 56362  _TEXT       zcpr1_ccp.asm:1511
SCANER           = $DC02 = 56322  _TEXT       zcpr1_ccp.asm:1482
SCANF            = $DC52 = 56402  _TEXT       zcpr1_ccp.asm:1551
SCANF1           = $DC63 = 56419  _TEXT       zcpr1_ccp.asm:1560
SCANF2           = $DC6A = 56426  _TEXT       zcpr1_ccp.asm:1565
SCANF3           = $DC6C = 56428  _TEXT       zcpr1_ccp.asm:1567
SCANF4           = $DC73 = 56435  _TEXT       zcpr1_ccp.asm:1575
SCANX            = $DC05 = 56325  _TEXT       zcpr1_ccp.asm:1484
SCQ              = $DC79 = 56441  _TEXT       zcpr1_ccp.asm:1585
SDELM            = $DB2E = 56110  _TEXT       zcpr1_ccp.asm:1270
SEAR1            = $DA52 = 55890  _TEXT       zcpr1_ccp.asm:1074
SEARF            = $DA4F = 55887  _TEXT       zcpr1_ccp.asm:1072
SEARN            = $DA56 = 55894  _TEXT       zcpr1_ccp.asm:1078
SECTFLG          = $0053 =    83  _TEXT       zcpr1_ccp.asm:467
SECURE           = $0000 =     0  _TEXT       zcpr1_ccp.asm:335
SETTSE           = $DFB8 = 57272  _TEXT       zcpr1_ccp.asm:2366
SETU0D           = $DA83 = 55939  _TEXT       zcpr1_ccp.asm:1130
SETUD            = $DA74 = 55924  _TEXT       zcpr1_ccp.asm:1117
SETUSR           = $DA70 = 55920  _TEXT       zcpr1_ccp.asm:1105
SLOGIN           = $DBE4 = 56292  _TEXT       zcpr1_ccp.asm:1444
SOFLG            = $0053 =    83  _TEXT       zcpr1_ccp.asm:457
SPRMPT           = $0024 =    36  _TEXT       zcpr1_ccp.asm:461
STACK            = $D877 = 55415  _TEXT       zcpr1_ccp.asm:584
SUBA             = $00FF =   255  _TEXT       zcpr1_ccp.asm:421
SUBFCB           = $D87A = 55418  _TEXT       zcpr1_ccp.asm:593
SUBFCR           = $D89A = 55450  _TEXT       zcpr1_ccp.asm:613
SUBFRC           = $D889 = 55433  _TEXT       zcpr1_ccp.asm:610
SUBFS2           = $D888 = 55432  _TEXT       zcpr1_ccp.asm:608
SUBKIL           = $DA5A = 55898  _TEXT       zcpr1_ccp.asm:1084
SUPRES           = $0000 =     0  _TEXT       zcpr1_ccp.asm:459
SUSER            = $DED9 = 57049  _TEXT       zcpr1_ccp.asm:2116
SYSFLG           = $0041 =    65  _TEXT       zcpr1_ccp.asm:455
SYSTST           = $DCF3 = 56563  _TEXT       zcpr1_ccp.asm:1704
TAB              = $0009 =     9  _TEXT       zcpr1_ccp.asm:473
TBUFF            = $0080 =   128  _TEXT       zcpr1_ccp.asm:16
TDRIVE           = $DA84 = 55940  _TEXT       zcpr1_ccp.asm:1131
TEMPDR           = $DBF9 = 56313  _TEXT       zcpr1_ccp.asm:1463
TFCB             = $005C =    92  _TEXT       zcpr1_ccp.asm:15
TMPUSR           = $DA6A = 55914  _TEXT       zcpr1_ccp.asm:1099
TPA              = $0100 =   256  _TEXT       zcpr1_ccp.asm:484
TRUE             = $00FF =   255  _TEXT       zcpr1_ccp.asm:147
TSELUSR          = $DFB5 = 57269  _TEXT       zcpr1_ccp.asm:2361
TWOCOL           = $0000 =     0  _TEXT       zcpr1_ccp.asm:377
TWOPOK           = $DCFB = 56571  _TEXT       zcpr1_ccp.asm:1718 (unused)
TYPE             = $DD7F = 56703  _TEXT       zcpr1_ccp.asm:1859
TYPE0            = $DD80 = 56704  _TEXT       zcpr1_ccp.asm:1867
TYPE1            = $DDAE = 56750  _TEXT       zcpr1_ccp.asm:1890
TYPE2            = $DDBF = 56767  _TEXT       zcpr1_ccp.asm:1901
TYPE2L           = $DDFD = 56829  _TEXT       zcpr1_ccp.asm:1948
TYPE3            = $DE07 = 56839  _TEXT       zcpr1_ccp.asm:1954
TYPE4            = $DE09 = 56841  _TEXT       zcpr1_ccp.asm:1957
UCASE            = $D9C0 = 55744  _TEXT       zcpr1_ccp.asm:905
UDFLAG           = $0004 =     4  _TEXT       zcpr1_ccp.asm:11
USER             = $DED5 = 57045  _TEXT       zcpr1_ccp.asm:2113
USRMAX           = $0000 =     0  _TEXT       zcpr1_ccp.asm:319
USRNUM           = $DB0B = 56075  _TEXT       zcpr1_ccp.asm:1235
WIDE             = $00FF =   255  _TEXT       zcpr1_ccp.asm:448
WSTYPE           = $00FF =   255  _TEXT       zcpr1_ccp.asm:353
YESCR            = $DDF7 = 56823  _TEXT       zcpr1_ccp.asm:1940
_BSS             = $F92D = 63789  _BSS        config_ndsk_hybrid.asm:42 (unused)
_BSS_end         = $FEF8 = 65272  _BSS        config_ndsk_hybrid.asm:42 (unused)
_BSS_size        = $05CB =  1483  _BSS        config_ndsk_hybrid.asm:42
_JUMP_TABLE      = $FF00 = 65280  _JUMP_TABLE config_ndsk_hybrid.asm:43 (unused)
_JUMP_TABLE_end  = $FF90 = 65424  _JUMP_TABLE config_ndsk_hybrid.asm:43 (unused)
_JUMP_TABLE_size = $0090 =   144  _JUMP_TABLE config_ndsk_hybrid.asm:43 (unused)
_TEXT            = $D800 = 55296  _TEXT       config_ndsk_hybrid.asm:41 (unused)
_TEXT_end        = $F92D = 63789  _TEXT       config_ndsk_hybrid.asm:41
_TEXT_size       = $212D =  8493  _TEXT       config_ndsk_hybrid.asm:41 (unused)
active           = $E34D = 58189  _TEXT       bdos.asm:493
adda2hl          = $E56F = 58735  _TEXT       bdos.asm:922
alloc0           = $EDD5 = 60885  _TEXT       bdos.asm:2470
alloc1           = $EDD7 = 60887  _TEXT       bdos.asm:2471
alocvect         = $EDCA = 60874  _TEXT       bdos.asm:2460
auto             = $EDE9 = 60905  _TEXT       bdos.asm:2485
autoflag         = $EDEB = 60907  _TEXT       bdos.asm:2487
autosel          = $EC5C = 60508  _TEXT       bdos.asm:2200
autosl1          = $EC80 = 60544  _TEXT       bdos.asm:2216
backup           = $E1AF = 57775  _TEXT       bdos.asm:253
backup1          = $E1B7 = 57783  _TEXT       bdos.asm:256
badsctr          = $E00C = 57356  _TEXT       bdos.asm:34
badsec           = $E0D5 = 57557  _TEXT       bdos.asm:108
badsel           = $E0E0 = 57568  _TEXT       bdos.asm:109
badslct          = $E00E = 57358  _TEXT       bdos.asm:35
batch            = $D8E8 = 55528  _TEXT       zcpr1_ccp.asm:713
bdevsw           = $EF6A = 61290  _TEXT       config_ndsk_hybrid.asm:159
bdosdrv          = $E0D1 = 57553  _TEXT       bdos.asm:107
bdoserr          = $E0C5 = 57541  _TEXT       bdos.asm:106
bigdisk          = $EDE8 = 60904  _TEXT       bdos.asm:2484
biodma           = $EF49 = 61257  _TEXT       bios.asm:326
bitmap           = $E6AE = 59054  _TEXT       bdos.asm:1215
bitmap1          = $E6BC = 59068  _TEXT       bdos.asm:1230
bitmap2          = $E6DD = 59101  _TEXT       bdos.asm:1251
bitmap3          = $E701 = 59137  _TEXT       bdos.asm:1268
blkmask          = $EDCF = 60879  _TEXT       bdos.asm:2466
blknmbr          = $EDF0 = 60912  _TEXT       bdos.asm:2491
blkshft          = $EDCE = 60878  _TEXT       bdos.asm:2465
boot             = $EE3A = 60986  _TEXT       bios.asm:42
bs               = $0008 =     8  _TEXT       zcpr1_ccp.asm:24
callbd           = $EEF8 = 61176  _TEXT       bios.asm:225
callmj           = $EF46 = 61254  _TEXT       bios.asm:320
cbase            = $D800 = 55296  _TEXT       zcpr1_ccp.asm:515
cbinit           = $EF5A = 61274  _TEXT       config_ndsk_hybrid.asm:90
cdevsw           = $EFAA = 61354  _TEXT       config_ndsk_hybrid.asm:198
cdindi0          = $EF1E = 61214  _TEXT       bios.asm:285
cdindi1          = $EF24 = 61220  _TEXT       bios.asm:289
cdindir          = $EF1A = 61210  _TEXT       bios.asm:283
cfirq            = $EF60 = 61280  _TEXT       config_ndsk_hybrid.asm:106 (unused)
charbuf          = $E319 = 58137  _TEXT       bdos.asm:482
checkdir         = $E5A9 = 58793  _TEXT       bdos.asm:995
checksum         = $E502 = 58626  _TEXT       bdos.asm:834
chgnam1          = $E832 = 59442  _TEXT       bdos.asm:1507
chgnames         = $E821 = 59425  _TEXT       bdos.asm:1499
chkblk           = $E48F = 58511  _TEXT       bdos.asm:741
chkchar          = $E11F = 57631  _TEXT       bdos.asm:150
chkdir1          = $E5CF = 58831  _TEXT       bdos.asm:1015
chknmbr          = $E597 = 58775  _TEXT       bdos.asm:968
chkrofl          = $E54F = 58703  _TEXT       bdos.asm:898
chksum1          = $E508 = 58632  _TEXT       bdos.asm:837
chkvect          = $EDC8 = 60872  _TEXT       bdos.asm:2459
chkwprt          = $E55F = 58719  _TEXT       bdos.asm:909
chrout           = $EEBB = 61115  _TEXT       bios.asm:166
ckbitmap         = $E640 = 58944  _TEXT       bdos.asm:1109
ckbmap1          = $E661 = 58977  _TEXT       bdos.asm:1144
ckcon1           = $E14D = 57677  _TEXT       bdos.asm:180
ckcon2           = $E150 = 57680  _TEXT       bdos.asm:181
ckconsol         = $E12E = 57646  _TEXT       bdos.asm:166
ckfilpos         = $E600 = 58880  _TEXT       bdos.asm:1058
ckrof1           = $E552 = 58706  _TEXT       bdos.asm:899
cksumtbl         = $EDF7 = 60919  _TEXT       bdos.asm:2499
clears2          = $E57D = 58749  _TEXT       bdos.asm:939
closefil         = $ECB0 = 60592  _TEXT       bdos.asm:2247
closeflg         = $EDDD = 60893  _TEXT       bdos.asm:2476
closeit          = $E8AD = 59565  _TEXT       bdos.asm:1593
closeit1         = $E8D8 = 59608  _TEXT       bdos.asm:1613
closeit2         = $E8E6 = 59622  _TEXT       bdos.asm:1621
closeit3         = $E8EC = 59628  _TEXT       bdos.asm:1625
closeit4         = $E8F3 = 59635  _TEXT       bdos.asm:1628
closeit5         = $E908 = 59656  _TEXT       bdos.asm:1641
closeit6         = $E922 = 59682  _TEXT       bdos.asm:1659
closeit7         = $E92A = 59690  _TEXT       bdos.asm:1662
cntrlc           = $0003 =     3  _TEXT       zcpr1_ccp.asm:22
cntrle           = $0005 =     5  _TEXT       zcpr1_ccp.asm:23
cntrlp           = $0010 =    16  _TEXT       zcpr1_ccp.asm:29
cntrlr           = $0012 =    18  _TEXT       zcpr1_ccp.asm:30
cntrls           = $0013 =    19  _TEXT       zcpr1_ccp.asm:31
cntrlu           = $0015 =    21  _TEXT       zcpr1_ccp.asm:32
cntrlx           = $0018 =    24  _TEXT       zcpr1_ccp.asm:33
cntrlz           = $001A =    26  _TEXT       zcpr1_ccp.asm:34 (unused)
comblk           = $E482 = 58498  _TEXT       bdos.asm:732
comprand         = $EBB0 = 60336  _TEXT       bdos.asm:2066
conin            = $EEAD = 61101  _TEXT       bios.asm:153
conout           = $EEB9 = 61113  _TEXT       bios.asm:165
const            = $EEA2 = 61090  _TEXT       bios.asm:141
counter          = $EDE3 = 60899  _TEXT       bdos.asm:2482
cpmlow           = $EE9A = 61082  _TEXT       bios.asm:130
cr               = $000D =    13  _TEXT       zcpr1_ccp.asm:28
curpos           = $E317 = 58135  _TEXT       bdos.asm:480
de2hl            = $E35A = 58202  _TEXT       bdos.asm:511
de2hl1           = $E35B = 58203  _TEXT       bdos.asm:512
default          = $0000 =     0              config_ndsk_hybrid.asm:19
defdma           = $E5E5 = 58853  _TEXT       bdos.asm:1033
del              = $007F =   127  _TEXT       zcpr1_ccp.asm:35
delfile          = $ECE2 = 60642  _TEXT       bdos.asm:2278
dirbuf           = $EDC4 = 60868  _TEXT       bdos.asm:2457
dirc1            = $E2EB = 58091  _TEXT       bdos.asm:438
dircbuf          = $FF10 = 65296  _JUMP_TABLE config_ndsk_hybrid.asm:45
dircio           = $E2DF = 58079  _TEXT       bdos.asm:432
dirdma           = $E5EB = 58859  _TEXT       bdos.asm:1038
dirdma1          = $E5EE = 58862  _TEXT       bdos.asm:1043
dirread          = $E5DF = 58847  _TEXT       bdos.asm:1028
dirsize          = $EDD3 = 60883  _TEXT       bdos.asm:2469
dirwrite         = $E5D1 = 58833  _TEXT       bdos.asm:1020
diskpb           = $EDC6 = 60870  _TEXT       bdos.asm:2458
diskro           = $E0EC = 57580  _TEXT       bdos.asm:111
doread           = $E3BD = 58301  _TEXT       bdos.asm:582
dowrite          = $E3C3 = 58307  _TEXT       bdos.asm:587
dsksize          = $EDD1 = 60881  _TEXT       bdos.asm:2468
emptyfcb         = $EDB7 = 60855  _TEXT       bdos.asm:2444
entry            = $0005 =     5  _TEXT       zcpr1_ccp.asm:12 (unused)
eparam           = $EDE1 = 60897  _TEXT       bdos.asm:2480
erafil1          = $E7AF = 59311  _TEXT       bdos.asm:1385
erafile          = $E7A7 = 59303  _TEXT       bdos.asm:1382
error1           = $E09F = 57503  _TEXT       bdos.asm:87
error2           = $E0AB = 57515  _TEXT       bdos.asm:93
error3           = $E0B1 = 57521  _TEXT       bdos.asm:96
error4           = $E0B7 = 57527  _TEXT       bdos.asm:99
error5           = $E0BA = 57530  _TEXT       bdos.asm:101
extblk           = $E469 = 58473  _TEXT       bdos.asm:713
extblk1          = $E47C = 58492  _TEXT       bdos.asm:723
extmask          = $EDD0 = 60880  _TEXT       bdos.asm:2467
fbase            = $E006 = 57350  _TEXT       bdos.asm:29
fbase1           = $E014 = 57364  _TEXT       bdos.asm:42
fcb2hl           = $E569 = 58729  _TEXT       bdos.asm:917
fcbpos           = $EDF4 = 60916  _TEXT       bdos.asm:2493
fcbset           = $E808 = 59400  _TEXT       bdos.asm:1477
fcreate          = $ECF7 = 60663  _TEXT       bdos.asm:2295
ff               = $000C =    12  _TEXT       zcpr1_ccp.asm:27 (unused)
filepos          = $EDF5 = 60917  _TEXT       bdos.asm:2494
filero           = $E0E7 = 57575  _TEXT       bdos.asm:110
filesize         = $ED58 = 60760  _TEXT       bdos.asm:2369
findfst          = $E723 = 59171  _TEXT       bdos.asm:1302
findnxt          = $E738 = 59192  _TEXT       bdos.asm:1315
fndnxt1          = $E755 = 59221  _TEXT       bdos.asm:1328
fndnxt2          = $E75E = 59230  _TEXT       bdos.asm:1332
fndnxt3          = $E77E = 59262  _TEXT       bdos.asm:1348
fndnxt4          = $E787 = 59271  _TEXT       bdos.asm:1357
fndnxt5          = $E78E = 59278  _TEXT       bdos.asm:1362
fndnxt6          = $E79F = 59295  _TEXT       bdos.asm:1375
fndspa1          = $E7CB = 59339  _TEXT       bdos.asm:1415
fndspa2          = $E7DC = 59356  _TEXT       bdos.asm:1438
fndspa3          = $E7F7 = 59383  _TEXT       bdos.asm:1459
fndspa4          = $E7FF = 59391  _TEXT       bdos.asm:1469
fndspace         = $E7C9 = 59337  _TEXT       bdos.asm:1409
fndstat          = $EDDF = 60895  _TEXT       bdos.asm:2478
functns          = $E04D = 57421  _TEXT       bdos.asm:78
getaloc          = $ED1C = 60700  _TEXT       bdos.asm:2323
getblk1          = $E450 = 58448  _TEXT       bdos.asm:691
getblk2          = $E45E = 58462  _TEXT       bdos.asm:700
getblk3          = $E467 = 58471  _TEXT       bdos.asm:705
getblock         = $E449 = 58441  _TEXT       bdos.asm:688
getchar          = $E106 = 57606  _TEXT       bdos.asm:128
getcon           = $E2D3 = 58067  _TEXT       bdos.asm:420
getcrnt          = $ED0F = 60687  _TEXT       bdos.asm:2312
getcsts          = $E309 = 58121  _TEXT       bdos.asm:465
getecho          = $E111 = 57617  _TEXT       bdos.asm:137
getempty         = $E92F = 59695  _TEXT       bdos.asm:1669
getfst           = $ECB6 = 60598  _TEXT       bdos.asm:2254
getfst1          = $ECCD = 60621  _TEXT       bdos.asm:2265
getiob           = $E2F8 = 58104  _TEXT       bdos.asm:446
getlog           = $ED09 = 60681  _TEXT       bdos.asm:2307
getmt1           = $E951 = 59729  _TEXT       bdos.asm:1685
getnext          = $E965 = 59749  _TEXT       bdos.asm:1699
getnxt           = $ECD3 = 60627  _TEXT       bdos.asm:2270
getparm          = $ED31 = 60721  _TEXT       bdos.asm:2340
getprm1          = $ED34 = 60724  _TEXT       bdos.asm:2341
getrdr           = $E2D9 = 58073  _TEXT       bdos.asm:425
getrov           = $ED22 = 60706  _TEXT       bdos.asm:2328
gets2            = $E574 = 58740  _TEXT       bdos.asm:931
getuser          = $ED38 = 60728  _TEXT       bdos.asm:2348
getver           = $EC89 = 60553  _TEXT       bdos.asm:2224
getwprt          = $E529 = 58665  _TEXT       bdos.asm:871
goback           = $ED7F = 60799  _TEXT       bdos.asm:2404
goback1          = $ED9C = 60828  _TEXT       bdos.asm:2416
gtnext1          = $E98E = 59790  _TEXT       bdos.asm:1719
gtnext2          = $E999 = 59801  _TEXT       bdos.asm:1728
gtnext3          = $E9B7 = 59831  _TEXT       bdos.asm:1739
gtnext4          = $E9BA = 59834  _TEXT       bdos.asm:1740
gtnext5          = $E9C1 = 59841  _TEXT       bdos.asm:1747
home             = $EEDB = 61147  _TEXT       bios.asm:199
homedrv          = $E3AC = 58284  _TEXT       bdos.asm:568
inbuff           = $D806 = 55302  _TEXT       zcpr1_ccp.asm:554
intvec           = $FF00 = 65280  _JUMP_TABLE config_ndsk_hybrid.asm:44
iobyte           = $0003 =     3  _TEXT       zcpr1_ccp.asm:9
ioerr1           = $E310 = 58128  _TEXT       bdos.asm:475
ioret            = $E3C6 = 58310  _TEXT       bdos.asm:588
jumphl           = $E355 = 58197  _TEXT       bdos.asm:503
lf               = $000A =    10  _TEXT       zcpr1_ccp.asm:26
list             = $EEC5 = 61125  _TEXT       bios.asm:176
logical          = $E495 = 58517  _TEXT       bdos.asm:752
logicl1          = $E49B = 58523  _TEXT       bdos.asm:754
login            = $EDBA = 60858  _TEXT       bdos.asm:2446
logindrv         = $EC2C = 60460  _TEXT       bdos.asm:2168
logoff           = $ED5E = 60766  _TEXT       bdos.asm:2378
logsect          = $EDF2 = 60914  _TEXT       bdos.asm:2492
mem              = $0036 =    54              config_ndsk_hybrid.asm:38
mode             = $EDE0 = 60896  _TEXT       bdos.asm:2479
morefls          = $E58A = 58762  _TEXT       bdos.asm:955
movedir          = $E5F4 = 58868  _TEXT       bdos.asm:1050
moveword         = $E89F = 59551  _TEXT       bdos.asm:1576
nd_asva          = $F99D = 63901  _BSS        nabu_ndsk.asm:33
nd_asvb          = $FA1E = 64030  _BSS        nabu_ndsk.asm:34
nd_atla          = $0041 =    65  _TEXT       nabu_ndsk.asm:38
nd_ayda          = $0040 =    64  _TEXT       nabu_ndsk.asm:37
nd_buff          = $F95D = 63837  _BSS        nabu_ndsk.asm:32
nd_ccp           = $F43B = 62523  _TEXT       nabu_ndsk.asm:255
nd_csec          = $F95A = 63834  _BSS        nabu_ndsk.asm:30
nd_ctrk          = $F95B = 63835  _BSS        nabu_ndsk.asm:31
nd_dfl0          = $F422 = 62498  _TEXT       nabu_ndsk.asm:230
nd_dflt          = $F41A = 62490  _TEXT       nabu_ndsk.asm:225
nd_dpb           = $F36A = 62314  _TEXT       nabu_ndsk.asm:68
nd_dpha          = $F34A = 62282  _TEXT       nabu_ndsk.asm:54
nd_dphb          = $F35A = 62298  _TEXT       nabu_ndsk.asm:61
nd_dsnd          = $F431 = 62513  _TEXT       nabu_ndsk.asm:247
nd_esnd          = $F427 = 62503  _TEXT       nabu_ndsk.asm:238
nd_fild          = $0080 =   128  _TEXT       nabu_ndsk.asm:42
nd_gbno          = $F3F0 = 62448  _TEXT       nabu_ndsk.asm:187
nd_get0          = $F487 = 62599  _TEXT       nabu_ndsk.asm:302
nd_get1          = $F4B0 = 62640  _TEXT       nabu_ndsk.asm:324
nd_get2          = $F4BA = 62650  _TEXT       nabu_ndsk.asm:331
nd_getb          = $F481 = 62593  _TEXT       nabu_ndsk.asm:300
nd_grb           = $F440 = 62528  _TEXT       nabu_ndsk.asm:259
nd_grb0          = $F443 = 62531  _TEXT       nabu_ndsk.asm:260
nd_grb1          = $F45A = 62554  _TEXT       nabu_ndsk.asm:268
nd_hcca          = $0080 =   128  _TEXT       nabu_ndsk.asm:39
nd_hcer          = $F539 = 62777  _TEXT       nabu_ndsk.asm:433
nd_hcr0          = $F526 = 62758  _TEXT       nabu_ndsk.asm:418
nd_hcr1          = $F540 = 62784  _TEXT       nabu_ndsk.asm:438
nd_hcr2          = $F549 = 62793  _TEXT       nabu_ndsk.asm:444
nd_hcrd          = $F517 = 62743  _TEXT       nabu_ndsk.asm:411
nd_hcre          = $F51A = 62746  _TEXT       nabu_ndsk.asm:412
nd_hcw0          = $F576 = 62838  _TEXT       nabu_ndsk.asm:481
nd_hcw1          = $F58E = 62862  _TEXT       nabu_ndsk.asm:498
nd_hcw2          = $F593 = 62867  _TEXT       nabu_ndsk.asm:500
nd_hcwr          = $F564 = 62820  _TEXT       nabu_ndsk.asm:473
nd_hini          = $F400 = 62464  _TEXT       nabu_ndsk.asm:207
nd_home          = $F392 = 62354  _TEXT       nabu_ndsk.asm:107
nd_inb           = $F5B0 = 62896  _TEXT       nabu_ndsk.asm:526
nd_inf           = $F5B1 = 62897  _TEXT       nabu_ndsk.asm:529
nd_init          = $F391 = 62353  _TEXT       nabu_ndsk.asm:102
nd_m0            = $F5D1 = 62929  _TEXT       nabu_ndsk.asm:547
nd_m0fl          = $F5D7 = 62935  _TEXT       nabu_ndsk.asm:551
nd_m0na          = $F5DA = 62938  _TEXT       nabu_ndsk.asm:553
nd_m1            = $F5E9 = 62953  _TEXT       nabu_ndsk.asm:558
nd_m2            = $F5F1 = 62961  _TEXT       nabu_ndsk.asm:566
nd_m2bn          = $F5F7 = 62967  _TEXT       nabu_ndsk.asm:570
nd_m3            = $F5FD = 62973  _TEXT       nabu_ndsk.asm:575
nd_m3bn          = $F603 = 62979  _TEXT       nabu_ndsk.asm:579
nd_nctl          = $0000 =     0  _TEXT       nabu_ndsk.asm:40
nd_opef          = $F467 = 62567  _TEXT       nabu_ndsk.asm:281
nd_open          = $F464 = 62564  _TEXT       nabu_ndsk.asm:280
nd_outb          = $F5AE = 62894  _TEXT       nabu_ndsk.asm:520
nd_outf          = $F5AF = 62895  _TEXT       nabu_ndsk.asm:523
nd_p0            = $F5B2 = 62898  _TEXT       nabu_ndsk.asm:533
nd_p1            = $F5BC = 62908  _TEXT       nabu_ndsk.asm:537
nd_p2            = $F5C6 = 62918  _TEXT       nabu_ndsk.asm:541
nd_p2im          = $F5CB = 62923  _TEXT       nabu_ndsk.asm:542
nd_put0          = $F4C8 = 62664  _TEXT       nabu_ndsk.asm:345
nd_put1          = $F4DA = 62682  _TEXT       nabu_ndsk.asm:355
nd_putb          = $F4C2 = 62658  _TEXT       nabu_ndsk.asm:343
nd_read          = $F3CE = 62414  _TEXT       nabu_ndsk.asm:161
nd_rec0          = $F4F9 = 62713  _TEXT       nabu_ndsk.asm:376
nd_rec1          = $F504 = 62724  _TEXT       nabu_ndsk.asm:383
nd_rece          = $F4F0 = 62704  _TEXT       nabu_ndsk.asm:373
nd_rirq          = $F556 = 62806  _TEXT       nabu_ndsk.asm:456
nd_sel           = $F399 = 62361  _TEXT       nabu_ndsk.asm:116
nd_send          = $F50E = 62734  _TEXT       nabu_ndsk.asm:397
nd_ssec          = $F3C9 = 62409  _TEXT       nabu_ndsk.asm:154
nd_strk          = $F3C3 = 62403  _TEXT       nabu_ndsk.asm:144
nd_tran          = $F959 = 63833  _BSS        nabu_ndsk.asm:29
nd_wirq          = $F59D = 62877  _TEXT       nabu_ndsk.asm:509
nd_writ          = $F3DF = 62431  _TEXT       nabu_ndsk.asm:173
ndkdev           = $F379 = 62329  _TEXT       nabu_ndsk.asm:83
newline          = $E1BC = 57788  _TEXT       bdos.asm:262
newln1           = $E1C4 = 57796  _TEXT       bdos.asm:265
nf_asva          = $FAA6 = 64166  _BSS        nabu_fdc.asm:34
nf_asvb          = $FAC0 = 64192  _BSS        nabu_fdc.asm:35
nf_atla          = $0041 =    65  _TEXT       nabu_fdc.asm:46
nf_ayda          = $0040 =    64  _TEXT       nabu_fdc.asm:45
nf_busy          = $F858 = 63576  _TEXT       nabu_fdc.asm:532
nf_cach          = $FAF8 = 64248  _BSS        nabu_fdc.asm:39
nf_ccp           = $F7DD = 63453  _TEXT       nabu_fdc.asm:428 (unused)
nf_csva          = $FADA = 64218  _BSS        nabu_fdc.asm:36
nf_csvb          = $FAE9 = 64233  _BSS        nabu_fdc.asm:37
nf_curd          = $FAA1 = 64161  _BSS        nabu_fdc.asm:28
nf_dint          = $F863 = 63587  _TEXT       nabu_fdc.asm:548
nf_dirt          = $FAA5 = 64165  _BSS        nabu_fdc.asm:32
nf_dpb           = $F629 = 63017  _TEXT       nabu_fdc.asm:73
nf_dpha          = $F609 = 62985  _TEXT       nabu_fdc.asm:57
nf_dphb          = $F619 = 63001  _TEXT       nabu_fdc.asm:65
nf_dvsc          = $F841 = 63553  _TEXT       nabu_fdc.asm:513
nf_dvsl          = $F847 = 63559  _TEXT       nabu_fdc.asm:516
nf_eint          = $F86C = 63596  _TEXT       nabu_fdc.asm:557
nf_grb           = $F7D6 = 63446  _TEXT       nabu_fdc.asm:423 (unused)
nf_home          = $F67B = 63099  _TEXT       nabu_fdc.asm:147
nf_inco          = $FAA4 = 64164  _BSS        nabu_fdc.asm:31
nf_ini1          = $F656 = 63062  _TEXT       nabu_fdc.asm:111
nf_ini2          = $F664 = 63076  _TEXT       nabu_fdc.asm:122
nf_init          = $F650 = 63056  _TEXT       nabu_fdc.asm:106
nf_io            = $FA9F = 64159  _BSS        nabu_fdc.asm:25
nf_r2k           = $F7E2 = 63458  _TEXT       nabu_fdc.asm:433
nf_r2k0          = $F80B = 63499  _TEXT       nabu_fdc.asm:462
nf_r2ks          = $FAA0 = 64160  _BSS        nabu_fdc.asm:26
nf_rdsk          = $0002 =     2  _TEXT       nabu_fdc.asm:42
nf_rdw0          = $F75B = 63323  _TEXT       nabu_fdc.asm:322
nf_rdw1          = $F769 = 63337  _TEXT       nabu_fdc.asm:329
nf_rdwr          = $F73C = 63292  _TEXT       nabu_fdc.asm:301
nf_read          = $F76E = 63342  _TEXT       nabu_fdc.asm:335
nf_rph1          = $F82B = 63531  _TEXT       nabu_fdc.asm:495
nf_rph2          = $F839 = 63545  _TEXT       nabu_fdc.asm:504
nf_rphy          = $F81F = 63519  _TEXT       nabu_fdc.asm:485
nf_sel           = $F693 = 63123  _TEXT       nabu_fdc.asm:170
nf_sel0          = $F6AD = 63149  _TEXT       nabu_fdc.asm:189
nf_sel1          = $F6C7 = 63175  _TEXT       nabu_fdc.asm:203
nf_sel2          = $F6D9 = 63193  _TEXT       nabu_fdc.asm:216
nf_selc          = $F6BA = 63162  _TEXT       nabu_fdc.asm:197 (unused)
nf_seld          = $F69E = 63134  _TEXT       nabu_fdc.asm:178
nf_ssec          = $F71D = 63261  _TEXT       nabu_fdc.asm:274
nf_stal          = $F85E = 63582  _TEXT       nabu_fdc.asm:540
nf_str0          = $F700 = 63232  _TEXT       nabu_fdc.asm:248
nf_strk          = $F6E7 = 63207  _TEXT       nabu_fdc.asm:229
nf_subs          = $FAA2 = 64162  _BSS        nabu_fdc.asm:29
nf_sync          = $FAA3 = 64163  _BSS        nabu_fdc.asm:30
nf_udsl          = $F846 = 63558  _TEXT       nabu_fdc.asm:515
nf_wde1          = $F7AC = 63404  _TEXT       nabu_fdc.asm:385
nf_wde2          = $F7BA = 63418  _TEXT       nabu_fdc.asm:394
nf_wde3          = $F7CE = 63438  _TEXT       nabu_fdc.asm:414
nf_wde4          = $F7D1 = 63441  _TEXT       nabu_fdc.asm:417
nf_wdef          = $F78E = 63374  _TEXT       nabu_fdc.asm:365
nf_writ          = $F776 = 63350  _TEXT       nabu_fdc.asm:343
nfddev           = $F638 = 63032  _TEXT       nabu_fdc.asm:90
nfuncts          = $0029 =    41  _TEXT       bdos.asm:76
nulldev          = $EF45 = 61253  _TEXT       bios.asm:317 (unused)
nxent1           = $E624 = 58916  _TEXT       bdos.asm:1088
nxent2           = $E62B = 58923  _TEXT       bdos.asm:1091
nxentry          = $E610 = 58896  _TEXT       bdos.asm:1080
offset           = $EDD9 = 60889  _TEXT       bdos.asm:2472
olddrv           = $EDEA = 60906  _TEXT       bdos.asm:2486
openfil          = $ECA7 = 60583  _TEXT       bdos.asm:2241
openit           = $E85C = 59484  _TEXT       bdos.asm:1533
openit1          = $E865 = 59493  _TEXT       bdos.asm:1537
openit2          = $E896 = 59542  _TEXT       bdos.asm:1565
outchar          = $E153 = 57683  _TEXT       bdos.asm:188
outchr1          = $E16D = 57709  _TEXT       bdos.asm:202
outchr2          = $E184 = 57732  _TEXT       bdos.asm:218
outcon           = $E19B = 57755  _TEXT       bdos.asm:239
outcon1          = $E1A1 = 57761  _TEXT       bdos.asm:242
outcrlf          = $E1D4 = 57812  _TEXT       bdos.asm:275
outflag          = $E315 = 58133  _TEXT       bdos.asm:478
params           = $E34E = 58190  _TEXT       bdos.asm:494
pattrn2          = $E000 = 57344  _TEXT       bdos.asm:21 (unused)
position         = $EB0E = 60174  _TEXT       bdos.asm:1943
positn1          = $EB12 = 60178  _TEXT       bdos.asm:1948
positn2          = $EB52 = 60242  _TEXT       bdos.asm:1994
positn3          = $EB8A = 60298  _TEXT       bdos.asm:2026
positn4          = $EB8F = 60303  _TEXT       bdos.asm:2032
positn5          = $EB96 = 60310  _TEXT       bdos.asm:2039
pr_atla          = $0041 =    65  _TEXT       nabu_prt.asm:14
pr_ayda          = $0040 =    64  _TEXT       nabu_prt.asm:13
pr_ctrl          = $0000 =     0  _TEXT       nabu_prt.asm:16
pr_init          = $F880 = 63616  _TEXT       nabu_prt.asm:31
pr_prnt          = $00B0 =   176  _TEXT       nabu_prt.asm:15
pr_read          = $F883 = 63619  _TEXT       nabu_prt.asm:46
pr_stat          = $F881 = 63617  _TEXT       nabu_prt.asm:38
pr_wri0          = $F889 = 63625  _TEXT       nabu_prt.asm:56
pr_wri1          = $F898 = 63640  _TEXT       nabu_prt.asm:67
pr_writ          = $F885 = 63621  _TEXT       nabu_prt.asm:53
prstat           = $EF14 = 61204  _TEXT       bios.asm:271
prtdev           = $F875 = 63605  _TEXT       nabu_prt.asm:19
prterr           = $E0F0 = 57584  _TEXT       bdos.asm:115
prtflag          = $E318 = 58136  _TEXT       bdos.asm:481
prtmesg          = $E1DE = 57822  _TEXT       bdos.asm:282
prtstr           = $E303 = 58115  _TEXT       bdos.asm:458
punch            = $EEC9 = 61129  _TEXT       bios.asm:182
putdma           = $ED15 = 60693  _TEXT       bdos.asm:2317
ransiz1          = $EBEF = 60399  _TEXT       bdos.asm:2122
ransiz2          = $EC11 = 60433  _TEXT       bdos.asm:2144
ransiz3          = $EC17 = 60439  _TEXT       bdos.asm:2146
ransize          = $EBDD = 60381  _TEXT       bdos.asm:2111
rdbuf1           = $E1FA = 57850  _TEXT       bdos.asm:301
rdbuf10          = $E27B = 57979  _TEXT       bdos.asm:363
rdbuf11          = $E283 = 57987  _TEXT       bdos.asm:369
rdbuf12          = $E295 = 58005  _TEXT       bdos.asm:381
rdbuf13          = $E2A4 = 58020  _TEXT       bdos.asm:388
rdbuf14          = $E2B1 = 58033  _TEXT       bdos.asm:396
rdbuf15          = $E2B4 = 58036  _TEXT       bdos.asm:399
rdbuf16          = $E2C8 = 58056  _TEXT       bdos.asm:411
rdbuf17          = $E2CC = 58060  _TEXT       bdos.asm:413
rdbuf2           = $E1FC = 57852  _TEXT       bdos.asm:303
rdbuf3           = $E221 = 57889  _TEXT       bdos.asm:320
rdbuf4           = $E231 = 57905  _TEXT       bdos.asm:329
rdbuf5           = $E242 = 57922  _TEXT       bdos.asm:337
rdbuf6           = $E253 = 57939  _TEXT       bdos.asm:346
rdbuf7           = $E259 = 57945  _TEXT       bdos.asm:349
rdbuf8           = $E26A = 57962  _TEXT       bdos.asm:356
rdbuf9           = $E276 = 57974  _TEXT       bdos.asm:361
rdbuff           = $E1EC = 57836  _TEXT       bdos.asm:294
rdrandom         = $ED4C = 60748  _TEXT       bdos.asm:2359
rdseq            = $E9C7 = 59847  _TEXT       bdos.asm:1752
rdseq1           = $E9CC = 59852  _TEXT       bdos.asm:1754
rdseq2           = $E9F1 = 59889  _TEXT       bdos.asm:1769
rdseq3           = $EA06 = 59910  _TEXT       bdos.asm:1779
rdwrtflg         = $EDDE = 60894  _TEXT       bdos.asm:2477
read             = $EF0C = 61196  _TEXT       bios.asm:256
reader           = $EECD = 61133  _TEXT       bios.asm:188
readran          = $EB9E = 60318  _TEXT       bdos.asm:2046
readseq          = $ECEB = 60651  _TEXT       bdos.asm:2285
relblock         = $EDE2 = 60898  _TEXT       bdos.asm:2481
renfile          = $ED00 = 60672  _TEXT       bdos.asm:2301
resccp           = $EF64 = 61284  _TEXT       config_ndsk_hybrid.asm:148
resgrb           = $EF67 = 61287  _TEXT       config_ndsk_hybrid.asm:154
rodisk           = $E010 = 57360  _TEXT       bdos.asm:36
rofile           = $E012 = 57362  _TEXT       bdos.asm:37
rstdsk           = $EC8E = 60558  _TEXT       bdos.asm:2229
rtn              = $E30F = 58127  _TEXT       bdos.asm:471
samext           = $E712 = 59154  _TEXT       bdos.asm:1283
savatr1          = $E84B = 59467  _TEXT       bdos.asm:1523
saveattr         = $E846 = 59462  _TEXT       bdos.asm:1521
savefcb          = $EDE4 = 60900  _TEXT       bdos.asm:2483
savext           = $EDED = 60909  _TEXT       bdos.asm:2489
savnrec          = $EDEE = 60910  _TEXT       bdos.asm:2490
savnxt           = $EDEC = 60908  _TEXT       bdos.asm:2488
scratch1         = $EDBE = 60862  _TEXT       bdos.asm:2451
scratch2         = $EDC0 = 60864  _TEXT       bdos.asm:2452
scratch3         = $EDC2 = 60866  _TEXT       bdos.asm:2453
sectors          = $EDCC = 60876  _TEXT       bdos.asm:2464
sectrn           = $EF17 = 61207  _TEXT       bios.asm:276
seldsk           = $EEE0 = 61152  _TEXT       bios.asm:208
select           = $E364 = 58212  _TEXT       bdos.asm:522
select1          = $E3A8 = 58280  _TEXT       bdos.asm:562
setattr          = $ED28 = 60712  _TEXT       bdos.asm:2333
setbit           = $E516 = 58646  _TEXT       bdos.asm:854
setdir           = $E5A7 = 58791  _TEXT       bdos.asm:988
setdma           = $EF06 = 61190  _TEXT       bios.asm:248
setdsk           = $EC50 = 60496  _TEXT       bdos.asm:2189
setext           = $E4B1 = 58545  _TEXT       bdos.asm:769
setfile          = $E676 = 58998  _TEXT       bdos.asm:1173
setfl1           = $E680 = 59008  _TEXT       bdos.asm:1178
setfl2           = $E693 = 59027  _TEXT       bdos.asm:1190
setfl3           = $E699 = 59033  _TEXT       bdos.asm:1196
setfl4           = $E6A8 = 59048  _TEXT       bdos.asm:1205
sethlde          = $E4B9 = 58553  _TEXT       bdos.asm:777
setiob           = $E2FE = 58110  _TEXT       bdos.asm:451
setnrec          = $E4DD = 58589  _TEXT       bdos.asm:803
setran           = $EC19 = 60441  _TEXT       bdos.asm:2152
sets2b7          = $E583 = 58755  _TEXT       bdos.asm:945
setsec           = $EF02 = 61186  _TEXT       bios.asm:241
setstat          = $E30C = 58124  _TEXT       bdos.asm:470
settrk           = $EEFE = 61182  _TEXT       bios.asm:234
setuser          = $ED46 = 60742  _TEXT       bdos.asm:2353
shiftl           = $E50F = 58639  _TEXT       bdos.asm:845
shiftl1          = $E510 = 58640  _TEXT       bdos.asm:846
shiftr           = $E4F5 = 58613  _TEXT       bdos.asm:819
shiftr1          = $E4F6 = 58614  _TEXT       bdos.asm:820
showit           = $E18A = 57738  _TEXT       bdos.asm:226
siodev           = $F89F = 63647  _TEXT       nabu_sio.asm:20
slcterr          = $E352 = 58194  _TEXT       bdos.asm:499
so_atab          = $F90F = 63759  _TEXT       nabu_sio.asm:131
so_conf          = $F913 = 63763  _TEXT       nabu_sio.asm:135
so_ini0          = $F8B2 = 63666  _TEXT       nabu_sio.asm:39
so_ini1          = $F8B8 = 63672  _TEXT       nabu_sio.asm:43
so_ini2          = $F8BF = 63679  _TEXT       nabu_sio.asm:49
so_ini3          = $F8CB = 63691  _TEXT       nabu_sio.asm:59
so_init          = $F8AA = 63658  _TEXT       nabu_sio.asm:33
so_rea0          = $F8F2 = 63730  _TEXT       nabu_sio.asm:102
so_read          = $F8E9 = 63721  _TEXT       nabu_sio.asm:95
so_sta0          = $F8E1 = 63713  _TEXT       nabu_sio.asm:83
so_stat          = $F8D8 = 63704  _TEXT       nabu_sio.asm:76
so_wri0          = $F905 = 63749  _TEXT       nabu_sio.asm:121
so_writ          = $F8FB = 63739  _TEXT       nabu_sio.asm:113
starting         = $E316 = 58134  _TEXT       bdos.asm:479
status           = $E350 = 58192  _TEXT       bdos.asm:495
stbitmap         = $E667 = 58983  _TEXT       bdos.asm:1153
stbmap1          = $E66F = 58991  _TEXT       bdos.asm:1164
stfilpos         = $E609 = 58889  _TEXT       bdos.asm:1068
stkarea          = $E34C = 58188  _TEXT       bdos.asm:490
stnrec1          = $E4E9 = 58601  _TEXT       bdos.asm:808
strdata          = $E4C6 = 58566  _TEXT       bdos.asm:787
ststatus         = $E70C = 59148  _TEXT       bdos.asm:1275
subhl            = $E5A0 = 58784  _TEXT       bdos.asm:978
swindi0          = $EF2D = 61229  _TEXT       bios.asm:300
swindi1          = $EF33 = 61235  _TEXT       bios.asm:304
swindir          = $EF29 = 61225  _TEXT       bios.asm:298
syshook          = $EF63 = 61283  _TEXT       config_ndsk_hybrid.asm:126
tab              = $0009 =     9  _TEXT       zcpr1_ccp.asm:25
tbase            = $0100 =   256  _TEXT       zcpr1_ccp.asm:18 (unused)
tbuff            = $0080 =   128  _TEXT       zcpr1_ccp.asm:17
tdrive           = $0004 =     4  _TEXT       zcpr1_ccp.asm:10
tfcb             = $005C =    92  _TEXT       zcpr1_ccp.asm:14 (unused)
tm_40c           = $F1F0 = 61936  _TEXT       nabu_vdp.asm:462
tm_80c           = $F1FD = 61949  _TEXT       nabu_vdp.asm:469
tm_addh          = $F314 = 62228  _TEXT       nabu_vdp.asm:707
tm_addr          = $F316 = 62230  _TEXT       nabu_vdp.asm:709
tm_atla          = $0041 =    65  _TEXT       nabu_vdp.asm:37
tm_ayda          = $0040 =    64  _TEXT       nabu_vdp.asm:36
tm_bs            = $F146 = 61766  _TEXT       nabu_vdp.asm:348
tm_cbuf          = $F931 = 63793  _BSS        nabu_vdp.asm:26
tm_cha0          = $F2B8 = 62136  _TEXT       nabu_vdp.asm:630
tm_chat          = $F2B2 = 62130  _TEXT       nabu_vdp.asm:625
tm_cle0          = $F1DC = 61916  _TEXT       nabu_vdp.asm:447
tm_clea          = $F1CD = 61901  _TEXT       nabu_vdp.asm:438
tm_cles          = $F1CB = 61899  _TEXT       nabu_vdp.asm:437
tm_cloc          = $F057 = 61527  _TEXT       nabu_vdp.asm:172
tm_cls           = $F2F9 = 62201  _TEXT       nabu_vdp.asm:684
tm_cls0          = $F302 = 62210  _TEXT       nabu_vdp.asm:687
tm_cold          = $F349 = 62281  _TEXT       nabu_vdp.asm:754
tm_colr          = $F344 = 62276  _TEXT       nabu_vdp.asm:749
tm_cr            = $F143 = 61763  _TEXT       nabu_vdp.asm:345
tm_cshm          = $F155 = 61781  _TEXT       nabu_vdp.asm:362
tm_cupd          = $F1F4 = 61940  _TEXT       nabu_vdp.asm:464
tm_curx          = $F347 = 62279  _TEXT       nabu_vdp.asm:752
tm_cury          = $F348 = 62280  _TEXT       nabu_vdp.asm:753
tm_data          = $00A0 =   160  _TEXT       nabu_vdp.asm:30
tm_dint          = $F327 = 62247  _TEXT       nabu_vdp.asm:728
tm_dsc0          = $F223 = 61987  _TEXT       nabu_vdp.asm:495
tm_dsco          = $F210 = 61968  _TEXT       nabu_vdp.asm:488
tm_eint          = $F337 = 62263  _TEXT       nabu_vdp.asm:740
tm_esc           = $F18A = 61834  _TEXT       nabu_vdp.asm:394
tm_esc0          = $F19B = 61851  _TEXT       nabu_vdp.asm:405
tm_esc1          = $F1B5 = 61877  _TEXT       nabu_vdp.asm:420
tm_esc2          = $F1C0 = 61888  _TEXT       nabu_vdp.asm:427
tm_escd          = $F196 = 61846  _TEXT       nabu_vdp.asm:402
tm_esci          = $F1AF = 61871  _TEXT       nabu_vdp.asm:417
tm_escr          = $F197 = 61847  _TEXT       nabu_vdp.asm:403
tm_escs          = $F92F = 63791  _BSS        nabu_vdp.asm:24
tm_get0          = $F24C = 62028  _TEXT       nabu_vdp.asm:530
tm_getc          = $F236 = 62006  _TEXT       nabu_vdp.asm:516
tm_home          = $F158 = 61784  _TEXT       nabu_vdp.asm:363
tm_inb           = $F345 = 62277  _TEXT       nabu_vdp.asm:750
tm_inf           = $F346 = 62278  _TEXT       nabu_vdp.asm:751
tm_ini0          = $F02A = 61482  _TEXT       nabu_vdp.asm:140
tm_ini1          = $F04A = 61514  _TEXT       nabu_vdp.asm:161
tm_inir          = $EFD0 = 61392  _TEXT       nabu_vdp.asm:79
tm_init          = $F002 = 61442  _TEXT       nabu_vdp.asm:116
tm_inr0          = $EFD1 = 61393  _TEXT       nabu_vdp.asm:80
tm_keyd          = $0090 =   144  _TEXT       nabu_vdp.asm:33
tm_keys          = $0091 =   145  _TEXT       nabu_vdp.asm:34
tm_kirq          = $F254 = 62036  _TEXT       nabu_vdp.asm:539
tm_last          = $F930 = 63792  _BSS        nabu_vdp.asm:25
tm_latc          = $00A1 =   161  _TEXT       nabu_vdp.asm:31
tm_lf            = $F137 = 61751  _TEXT       nabu_vdp.asm:336
tm_map           = $F262 = 62050  _TEXT       nabu_vdp.asm:554
tm_map0          = $F266 = 62054  _TEXT       nabu_vdp.asm:558
tm_map2          = $F272 = 62066  _TEXT       nabu_vdp.asm:571
tm_mapt          = $F279 = 62073  _TEXT       nabu_vdp.asm:578
tm_mode          = $F342 = 62274  _TEXT       nabu_vdp.asm:748
tm_oti0          = $EFC8 = 61384  _TEXT       nabu_vdp.asm:66
tm_otir          = $EFC7 = 61383  _TEXT       nabu_vdp.asm:65
tm_outc          = $F92D = 63789  _BSS        nabu_vdp.asm:22
tm_putc          = $F28E = 62094  _TEXT       nabu_vdp.asm:596
tm_putf          = $F29C = 62108  _TEXT       nabu_vdp.asm:604 (unused)
tm_rea0          = $F0B0 = 61616  _TEXT       nabu_vdp.asm:237
tm_rea1          = $F0C6 = 61638  _TEXT       nabu_vdp.asm:249
tm_rea2          = $F0DB = 61659  _TEXT       nabu_vdp.asm:262
tm_rea3          = $F0EB = 61675  _TEXT       nabu_vdp.asm:272
tm_read          = $F0A4 = 61604  _TEXT       nabu_vdp.asm:231
tm_ri            = $F130 = 61744  _TEXT       nabu_vdp.asm:330
tm_sclf          = $F06F = 61551  _TEXT       nabu_vdp.asm:188
tm_scol          = $F203 = 61955  _TEXT       nabu_vdp.asm:474
tm_scr0          = $F067 = 61543  _TEXT       nabu_vdp.asm:185
tm_scr1          = $F06D = 61549  _TEXT       nabu_vdp.asm:187
tm_scri          = $F05D = 61533  _TEXT       nabu_vdp.asm:180
tm_scro          = $F92E = 63790  _BSS        nabu_vdp.asm:23
tm_setp          = $F079 = 61561  _TEXT       nabu_vdp.asm:198
tm_sta0          = $EFE5 = 61413  _TEXT       nabu_vdp.asm:98
tm_sta1          = $EFF0 = 61424  _TEXT       nabu_vdp.asm:103
tm_sta2          = $F0FC = 61692  _TEXT       nabu_vdp.asm:286
tm_stal          = $F0F9 = 61689  _TEXT       nabu_vdp.asm:284
tm_stat          = $EFD9 = 61401  _TEXT       nabu_vdp.asm:92
tm_up            = $F150 = 61776  _TEXT       nabu_vdp.asm:357
tm_updc          = $F207 = 61959  _TEXT       nabu_vdp.asm:478
tm_usc0          = $F2E5 = 62181  _TEXT       nabu_vdp.asm:663
tm_usco          = $F2D6 = 62166  _TEXT       nabu_vdp.asm:656
tm_vcpy          = $F2BE = 62142  _TEXT       nabu_vdp.asm:642
tm_virq          = $F321 = 62241  _TEXT       nabu_vdp.asm:718
tm_wri0          = $F11D = 61725  _TEXT       nabu_vdp.asm:318
tm_wri1          = $F15C = 61788  _TEXT       nabu_vdp.asm:368
tm_writ          = $F102 = 61698  _TEXT       nabu_vdp.asm:298
trksec           = $E3CE = 58318  _TEXT       bdos.asm:596
trksec1          = $E3DC = 58332  _TEXT       bdos.asm:605
trksec2          = $E3EF = 58351  _TEXT       bdos.asm:618
trksec3          = $E405 = 58373  _TEXT       bdos.asm:634
trksec4          = $E41A = 58394  _TEXT       bdos.asm:651
update           = $E80C = 59404  _TEXT       bdos.asm:1484
update1          = $E81B = 59419  _TEXT       bdos.asm:1492
userdma          = $EDBC = 60860  _TEXT       bdos.asm:2447
userno           = $E34C = 58188  _TEXT       bdos.asm:492
usrstack         = $E31A = 58138  _TEXT       bdos.asm:486
vdpdev           = $EFBA = 61370  _TEXT       nabu_vdp.asm:51
wbinit           = $EF4B = 61259  _TEXT       config_ndsk_hybrid.asm:64
wboot            = $EE48 = 61000  _TEXT       bios.asm:57
wboot0           = $EE6F = 61039  _TEXT       bios.asm:94
wbootin          = $EE0A = 60938  _TEXT       bios.asm:22
wbootr           = $EE5F = 61023  _TEXT       bios.asm:82
write            = $EF10 = 61200  _TEXT       bios.asm:263
writeran         = $EBA7 = 60327  _TEXT       bdos.asm:2053
wrtprt           = $EDB8 = 60856  _TEXT       bdos.asm:2445
wrtprtd          = $E537 = 58679  _TEXT       bdos.asm:881
wrtseq           = $ECF1 = 60657  _TEXT       bdos.asm:2290
wtrandom         = $ED52 = 60754  _TEXT       bdos.asm:2364
wtseq            = $EA09 = 59913  _TEXT       bdos.asm:1783
wtseq1           = $EA0E = 59918  _TEXT       bdos.asm:1785
wtseq10          = $EADD = 60125  _TEXT       bdos.asm:1900
wtseq11          = $EB09 = 60169  _TEXT       bdos.asm:1924
wtseq12          = $EB0B = 60171  _TEXT       bdos.asm:1925
wtseq2           = $EA46 = 59974  _TEXT       bdos.asm:1808
wtseq3           = $EA53 = 59987  _TEXT       bdos.asm:1814
wtseq4           = $EA6F = 60015  _TEXT       bdos.asm:1826
wtseq5           = $EA77 = 60023  _TEXT       bdos.asm:1833
wtseq6           = $EA79 = 60025  _TEXT       bdos.asm:1834
wtseq7           = $EA97 = 60055  _TEXT       bdos.asm:1857
wtseq8           = $EAA5 = 60069  _TEXT       bdos.asm:1864
wtseq9           = $EAC6 = 60102  _TEXT       bdos.asm:1884
wtseq99          = $EAEA = 60138  _TEXT       bdos.asm:1911 (unused)
wtspecl          = $EDA6 = 60838  _TEXT       bdos.asm:2430
xlate            = $EDDB = 60891  _TEXT       bdos.asm:2473


total time: 0.0784 sec.
no errors
