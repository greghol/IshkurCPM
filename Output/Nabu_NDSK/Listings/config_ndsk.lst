              	; --------------------------------------
              	; zasm: assemble "config_ndsk.asm"
              	; date: 2023-06-18 01:22:50
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*          I S H K U R   S Y S T E M   C O N F I G
              	;*
              	;*      This file contains points that should be modifed
              	;*      if new devices are to be added to IshkurCP/M. At
              	;*      a mimumum, they need to be included at the bottom
              	;*      of the file, and added to their appropriate dev
              	;*      switch. Some devices may need additional config
              	;*      directly in their source files
              	;*       
              	;*
              	;**************************************************************
              	;
              	;   Set default drive / user
              	;   (uuuudddd) where 'uuuu' is the user number and 'dddd' is the drive number.
              	;
0000:         	default	equ	0
              	
              	;
              	;**************************************************************
              	;*
              	;*                M E M O R Y   C O N F I G
              	;*
              	;*        CP/M memory will start at mem*1024. For example,
              	;*        if memory is configured to be 40, then the image
              	;*        will start at 40kb. The higher memory is configured
              	;*        to, the more memory user programs will have. If memory
              	;*        is configured to be too high, then the core image and
              	;*        BSS space will not fit.
              	;*
              	;**************************************************************
              	;
              	;
              	;   Set memory base here. 
              	;
0037:         	mem	equ	55		; CP/M image starts at mem*1024
              	
              	
              	
              	#target	BIN			; Set up memory segments
DC00:         	#code	_TEXT,(mem)*1024
FAC1:         	#data	_BSS,_TEXT_end
FF00:         	#data	_JUMP_TABLE,0xFF00
FF00: 00000000	intvec:	defs	16
FF04: 00...   	
FF10: 00000000	dircbuf:defs	128
FF14: 00...   	
              	.area	_TEXT
              	
              	; Include CP/M and BIOS
              	#include "../zcpr1_ccp.asm"
              	;**************************************************************
              	;*
              	;*         Z C P R 1   C O M M A N D   P R O C E S S O R
              	;*
              	;*          Adapted to work with Ishkur by snhirsch
              	;*
              	;**************************************************************
              	
0003:         	iobyte	equ	3		;i/o definition byte.
0004:         	tdrive	equ	4		;current drive name and user number.
0004:         	UDFLAG  equ     4
0005:         	entry	equ	5		;entry point for the cp/m bdos.
0005:         	BDOS    equ     5
005C:         	tfcb	equ	5ch		;default file control block.
005C:         	TFCB    equ     5ch
0080:         	TBUFF   equ     80h
0080:         	tbuff	equ	80h		;i/o buffer and command line storage.
0100:         	tbase	equ	100h		;transiant program storage area.
              	;
              	;   set control character equates.
              	;
0003:         	cntrlc	equ	3		;control-c
0005:         	cntrle	equ	05h		;control-e
0008:         	bs	equ	08h		;backspace
0009:         	tab	equ	09h		;tab
000A:         	lf	equ	0ah		;line feed
000C:         	ff	equ	0ch		;form feed
000D:         	cr	equ	0dh		;carriage return
0010:         	cntrlp	equ	10h		;control-p
0012:         	cntrlr	equ	12h		;control-r
0013:         	cntrls	equ	13h		;control-s
0015:         	cntrlu	equ	15h		;control-u
0018:         	cntrlx	equ	18h		;control-x
001A:         	cntrlz	equ	1ah		;control-z (end-of-file mark)
007F:         	del	equ	7fh		;rubout
              	
              	;================================================================
              	
              	;	.Z80
              	;	TITLE	'NZCPR V 1.6Z OF 01/07/84'
              	;  This is ZCPR Version 1.6 changed to Zilog mnemonics and put in a
              	;form suitable for the Microsoft M80 assembler. Note that the file uses
              	;the PHASE option to create the memory offset. The COM file should be 
              	;created using L80 with the /P:100 switch option. The COM file can be
              	;loaded into the sysgen program using the methods described in the ZCPR
              	;documentation.
              	;		MMA - Murray Arnow
              	;
              	;  CP/M Z80 Command Processor Replacement (CPR) Version 1.6 in
              	; the NZCPR line.
              	;
              	;	CCPZ CREATED AND CUSTOMIZED FOR ARIES-II BY RLC
              	;	ZCPR VERSION 1.0 CREATED FROM CCPZ VERSION 4.0 BY RLC IN
              	;		A COORDINATED EFFORT WITH CCP-GROUP
              	;
              	;	ZCPR is a group effort by CCP-GROUP, whose active membership involved
              	; in this project consists of the following:
              	;		RLC - Richard Conn
              	;		RGF - Ron Fowler
              	;		KBP - Keith Peterson
              	;		FJW - Frank Wancho
              	;	The following individuals also provided a contribution:
              	;		SBB - Steve Bogolub
              	;
              	;  Since RLC has decided that ZCPR V1.0 is the last official version
              	; sanctioned by the CCPZ group, changes beyond that point are being
              	; called by consensus of a group of new changers "NZCPR Vx.x". The
              	; following individuals have put in their code or opinions:
              	;
              	;		SBB - Steve Bogolub
              	;		PST - Paul Traina
              	;		HLB - Howard Booker
              	;		CAF - Chuck Forsberg
              	;		RAF - Bob Fischer
              	;		BB  - Ben Bronson
              	;		PRG - Paul Grupp
              	;		PJH - Paul Homchick
              	;		HEW - Hal Walchli
              	;
              	;   In an attempt to maintain a link to the past, changes between the
              	; current version of NZCPR are provided as both a difference file
              	; between NZCPR's (NZ14-16.DIF) and as a difference between the current
              	; version and the "official" ZCPR V1.0 (NZCPR-16.DIF).  These changes
              	; are made and supported by individuals in contact with each other through
              	; the Hyde Park RCPM in Chicago. Make comments or complaints there, to
              	; SBB or PST or anyone else interested.
              	;
              	;   The most obvious differences between NZCPR and ZCPR are the security
              	; features, controlled by additional conditional assembly flags. Such
              	; features restrict access to ZCPR intrinsic commands, add additional
              	; levels of .COM file searching, and prevent access to higher drives
              	; or user levels, with either internal or external password control of
              	; these features. Less obvious differences involve code optimization to
              	; gain space, and some minor bug fixes in the TYPE command.
              	;
              	;******** Structure Notes ********
              	;
              	;	This CPR is divided into a number of major sections.  The following
              	; is an outline of these sections and the names of the major routines
              	; located therein.
              	;
              	; Section	Function/Routines
              	; -------	-----------------
              	;
              	;   --		Opening Comments, Equates, and Macro Definitions
              	;
              	;    0		JMP Table into CPR
              	;
              	;    1		Buffers
              	;
              	;    2		CPR Starting Modules
              	;			CPR1	CPR	RESTRT	RSTCPR	RCPRNL
              	;			PRNNF	CMDTBL
              	;
              	;    3		Utilities
              	;			CRLF	CONOUT	CONIN	LCOUT	LSTOUT
              	;			READF	READ	BDOSB	PRINTC	PRINT
              	;			GETDRV	DEFDMA	DMASET	RESET	BDOSJP
              	;			LOGIN	OPENF	OPEN	GRBDOS	CLOSE
              	;			SEARF	SEAR1	SEARN	SUBKIL	DELETE
              	;			RESETUSR GETUSR	SETUSR	PAGER	UCASE
              	;			NOECHO
              	;
              	;     4		CPR Utilities
              	;			SETUD	SETU0D	REDBUF	CNVBUF	CMDSER
              	;			BREAK	USRNUM	ERROR	SDELM	ADVAN
              	;			SBLANK	ADDAH	NUMBER	NUMERR	HEXNUM
              	;			DIRPTR	SLOGIN	DLOGIN	COMLOG	SCANER
              	;
              	;     5		CPR-Resident Commands and Functions
              	;     5A		DIR	DIRPR	FILLQ
              	;     5B		ERA
              	;     5C		LIST
              	;     5D		TYPE
              	;     5E		SAVE
              	;     5F		REN
              	;     5G		USER
              	;     5H		DFU
              	;     5I		JUMP
              	;     5J		GO
              	;     5K		COM	CALLPROG	ERRLOG	ERRJMP
              	;     5L		GET	MEMLOAD	PRNLE
              	;     5M		PASS	NORM
              	;
              	;
0000:         	FALSE	EQU	0
00FF:         	TRUE	EQU	0FFh
              	;
              	;  CUSTOMIZATION EQUATES
              	;
              	;  The following equates may be used to customize this CPR for the user's
              	;    system and integration technique.  The following constants are provided:
              	;
              	;    REL - TRUE if integration is to be done via MOVCPM
              	;        - FALSE if integration is to be done via DDT and SYSGEN
              	;
              	;    SECURE -  TRUE to conditionally disable potentially-harmful
              	;	       commands (GO, ERA, SAVE, REN, DFU, GET, JUMP). Under
              	;	       SECURE, if WHEEL contains RESTRCT, do not accept those
              	;	       commands, and search for COM files under current user
              	;	       then user "DEFUSR" only. If WHEEL does not contain
              	;	       RESTRCT (presumably from passworded change), allow
              	;	       all commands, and search current user, then last user
              	;	       set by DFU (originally "RESUSR"), then user "DEFUSR"
              	;	       for COM files, giving access with password to an
              	;	       additional level of COM files.
              	;
              	;	       (Note: WHEEL must point to a safe place in memory that
              	;		won't be overlayed)
              	;
              	;	If you have chosen a SECURE system,  all resident commands may be
              	; activated by entering:  PASS <password> <cr>  Where <password> is a sequence
              	; of characters placed at PASSID (if INPASS is true, otherwise, see
              	; documentation in PST's PASS.ASM).  If the password is incorrect. the system
              	; will come back with PASS? as if it was looking for a COM file.
              	;	NORM is the reverse of PASS, it will disable the WHEEL mode.
              	;
              	;    INPASS -  If in the SECURE mode, you wish to use a program similar
              	;	       to PST's PASS.ASM, set this false, otherwise, ZCPR will
              	;	       handle the PASSword coding with a built in command.
              	;
              	;    DRUSER -  Set this EQU false if you wish to disable RAF's neat hack
              	;	       that allows you the type B: 7 to move to drive B: user area
              	;	       seven.  This also removes the USER command.  Basically, set
              	;	       this equate false if you want to use USERPW or some other pgm.
              	;
              	;    RAS    -  Remote-Access System; setting this equate to TRUE disables
              	;	       certain CPR commands that are considered harmful in a Remote-
              	;	       Access environment; use under Remote-Access Systems (RBBS) for
              	;	       security purposes.  Note: SECURE is the direct enemy of RAS,
              	;	       DON'T define both equates or you will be VERY sorry.
              	;	       The advantage SECURE has over RAS is that by saying a magic
              	;	       word, all of the normal commands pop into existance.
              	;
              	;    MAXDRIV - Maximum legal drive number stored in this location.
              	;	       (0 means only A:, etc.)  0000H disables this feature.
              	;	       The value MAXDR is stuffed into MAXDRIV at cold boot,
              	;	       and presumably will be changed later by a passworded
              	;	       program if desired.
              	;
              	;	       (This code is in addition to BIOS checks. It's needed here
              	;	       because X: can hang if X: is off line in some BIOS
              	;	       implementations. Personally, I think CAF and others should fix
              	;	       their BIOS instead. Mine works right...SBB).
              	;
              	;    USRMAX -  Maximum legal user # + 1 stored in this location. 0000H
              	;	       disables this feature, and uses the value of MAXUSR+1 instead.
              	;
              	;    BASE - Base Address of user's CP/M system (normally 0 for DR version)
              	;           This equate allows easy modification by non-standard CP/M (eg,H89)
              	;
              	;    CPRLOC - Base Page Address of CPR; this value can be obtained by running
              	;	      the BDOSLOC program on your system, or by setting the
              	;	      MSIZE and BIOSEX equates to the system memory size in
              	;	      K-bytes and the "extra" memory required by your BIOS
              	;	      in K-bytes. BIOSEX is zero if your BIOS is normal size,
              	;	      and can be negative if your BIOS is in PROM or in
              	;	      non-contiguous memory.
              	;
              	;    EPRMPT - Set TRUE to be prompted "OK?" after seeing what files will
              	;	      be erased. No, this is NOT for individual file prompting,
              	;	      it is just to confirm deletion of all selected files at once.
              	;
              	;  Various individuals keep trying to yank out the TYPE, LIST, and DIR
              	; commands, either to use the space for other options or just because
              	; they prefer replacement COM files. To these individuals, I (SBB) say
              	; keep your paws off these commands. For compatibility with the stock
              	; CCP, intrinsic DIR and TYPE commands are required. And many users in
              	; MY neighborhood find it more convenient to use the intrinsic LIST
              	; command than to have a LIST/PRINT program on every disk. If you want
              	; to call a transient program by an intrinsic, then CHANGE THE INTRINSIC
              	; NAME IN THE TABLE. Even setting the name to blanks is fine to get
              	; rid of it. The point is, don't remove features others may want, just
              	; because you disagree, then throw it back in our laps. For those who
              	; simply MUST be rid of these commands, the following symbols control
              	; generation of the code in a CLEAN ACCEPTABLE fashion that allows
              	; others to have these features:
              	;
              	;    CPRTYP -	Set to TRUE to generate code for intrinsic TYPE command.
              	;
              	;    WSTYPE -	Set to TRUE to generate an extra three lines of code
              	;		to correctly interpret the WordStar (tm) internal
              	;		end of line hyphen for display, which is the ASCII
              	;		NEWLINE code (1FH) and normally non-printing or
              	;		troublemaking -- thanks to PJH for this one. CPRTYP
              	;		must be TRUE, or this symbol will be ignored.
              	;
              	;    CPRLST -	Set to TRUE to generate code for intrinsic LIST command.
              	;		Since almost all of the LIST code is common to the
              	;		TYPE code, CPRTYP must be set TRUE as well, or this
              	;		symbol will be ignored.
              	;
              	;    CPRDIR -	Set to TRUE to generate code for intrinsic DIR command.
              	;		Note that unlike the various directory programs, a
              	;		restricted DIR command here allows displaying the names
              	;		of SYS file ONLY, so many RCPM operators WANT this code.
              	;
              	;  Remember, you only get a total of 2048 (0800H) bytes of space for
              	; ALL of the generated code, or many other areas of your system
              	; generation will be affected. For example, to be fully SECURE, you
              	; would set SECURE to TRUE, and define MAXDRIV and USRMAX, and maybe
              	; use the internal password by setting INPASS to TRUE (external is
              	; MUCH recommended for easier modification). Those options absolutely
              	; generate too much code unless either CPRTYP or CPRDIR or both are
              	; set FALSE. A system with SECURE set to FALSE is right on the edge,
              	; and requires a give and take on options to fit, i.e. you can have
              	; MAXDRIV and USRMAX with DIR and TYPE if you leave out LIST and
              	; querying on ERASE, and so on.
              	;
              	;***************************************************************************
              	;** Be careful when playing with different combinations of these equates. **
              	;** You might not have enough memory to some combinations.  Check this    **
              	;** if you have problems, if they still persist, gripe to me (PST).       **
              	;***************************************************************************
              	;
              	;REL	EQU	TRUE		;SET TO TRUE FOR MOVCPM INTEGRATION
              	;
              	;BASE	EQU	0		;BASE OF CP/M SYSTEM (SET FOR STANDARD CP/M)
              	;
              	;; 	IF	REL
              	;; CPRLOC	EQU	0		;MOVCPM IMAGE
              	;; 	ELSE
              	;; ;
              	;; ; If REL is FALSE, the value of CPRLOC may be set in one
              	;; ; of two ways.  The first way is to set MSIZE and BIOSEX
              	;; ; as described above using the following three lines:
              	;; ;
              	;; ;MSIZE	EQU	56		;SIZE OF MEM IN K-BYTES
              	;; ;BIOSEX	EQU	2		;EXTRA # K-BYTES IN BIOS
              	;; ;CPRLOC	EQU	3400H+(MSIZE-20-BIOSEX)*1024	;CPR ORIGIN
              	;; ;
              	;; ; The second way is to obtain the origin of your current
              	;; ; CPR using BDSLOC or its equivalent, then merely set CPRLOC
              	;; ; to that value as in the following line:
              	;; ;
              	;; CPRLOC	EQU	0C400H		;FILL IN WITH BDOSLOC SUPPLIED VALUE
              	;; ;
              	;; ; Note that you should only use one method or the other.
              	;; ; Do NOT define CPRLOC twice!
              	;; ;
              	;; ; The following gives the required offset to load the CPR into the
              	;; ; CP/M SYSGEN Image through DDT (the Roffset command); Note that this
              	;; ; value conforms with the standard value presented in the CP/M reference
              	;; ; manuals, but it may not necessarily conform with the location of the
              	;; ; CCP in YOUR CP/M system; several systems (Morrow Designs, P&T, Heath
              	;; ; Org-0 to name a few) have the CCP located at a non-standard address in
              	;; ; the SYSGEN Image
              	;; ;
              	;; CPRR	EQU	0E00H-CPRLOC	;DDT LOAD OFFSET FOR APPLE SOFTCARD 56K
              	;; ;CPRR	EQU	0980H-CPRLOC	;DDT LOAD OFFSET
              	;; ;CPRR	EQU	1600H-CPRLOC	;DDT LOAD OFFSET FOR COMPUPRO DISK-1
              	;; ;CPRR	EQU	1100H-CPRLOC	;DDT LOAD OFFSET FOR MORROW DESIGNS
              	;; 	ENDIF
              	;
0000:         	RAS	EQU	FALSE		;SET TO TRUE IF CPR IS FOR A REMOTE-ACCESS
              					; SYSTEM AND YOU DON'T WANT TO RUN SECURE
              					; (FOO...)
              	;
0000:         	USRMAX	EQU	0000H		;LOCATION OF BYTE IN MEMORY CONTAINING
              					; NUMBER OF HIGHEST ALLOWABLE USER CODE + 1
              					; THIS VALUE IS SET BY CPR ON COLD BOOT,
              					; AND PRESUMABLY CONTROLLED AFTER THAT
              					; BY A PASSWORD PROGRAM. IF USRMAX=0, THEN
              					; MAXUSR BELOW IS USED FOR CHECKING ONLY.
              					; 03FH IS RECOMMENDED IF USED  ***
0013:         	MAXUSR	EQU	19		;MAX ALLOWED USER NUMBER, THIS + 1 IS STUFFED
              					; INTO USRMAX ON COLD BOOT, OR USED DIRECTLY
              					; IF USRMAX=0
              	;
0000:         	MAXDRIV	EQU	0000H		;LOCATION THAT HAS MAX LEGAL DRIVE #
              					;SET IT TO ZERO TO DISABLE THIS CHECK
              					;03DH IS RECOMMENDED IF USED ***
0001:         	MAXDR	EQU	1		;MAX DRIVE # TO SET INTO MAXDRIV ON COLD BOOT
              	;
0000:         	SECURE	EQU	FALSE		;SET TRUE FOR SECURE ENVIRONMENT...
              	;
0000:         	DEFUSR	EQU	0		;DEFAULT USER FOR UNRESTRICTED COM FILES
              	;
              		IF	SECURE
              	WHEEL	EQU	3EH		;SET TO "RESTRCT" FOR LIMITED ACCESS
              	RESTRCT EQU	0		;WHEN (WHEEL)==RESTRCT, LIMIT COMMANDS
              	RESUSR	EQU	15		;CHECK HERE FOR RESTRICTED ACCESS COM FILES
              					; (LIKE PIP) UNTIL CHANGED BY DFU OR WARM BOOT
              		ENDIF			;SECURE
              	;
0000:         	INPASS	EQU	FALSE		;SET TRUE IF RUNNING SECURE AND NOT PASS.COM
              	;
00FF:         	DRUSER	EQU	TRUE		;TRUE TO ALLOW USER COMMAND AND DRIVE/USER HACK
              	;
0000:         	EPRMPT	EQU	FALSE		;TRUE TO PROMPT BEFORE ERASING ALL FILES
              	;
00FF:         	CPRTYP	EQU	TRUE		;TRUE TO GENERATE TYPE CODE
00FF:         	WSTYPE	EQU	TRUE		;TRUE TO GENERATE WORDSTAR HYPHEN CHECK (CPRTYP
              					; MUST BE TRUE TOO)
00FF:         	CPRLST	EQU	TRUE		;TRUE TO GENERATE LIST CODE (CPRTYP MUST BETRUE TOO)
00FF:         	CPRDIR	EQU	TRUE		;TRUE TO GENERATE DIR CODE
              	;
              	;  ***  Note to Apple Softcard Users  ***
              	;
              	;  In their infinite (?) wisdom (???), Microsoft decided that the way to
              	; get a two-column directory display instead of four-column (narrow 40-col
              	; screen, remember) was to have their BIOS poke CCP every time it was
              	; loaded, if there was no terminal interface card in I/O slot 3.
              	; Naturally, that will turn into a random poke on any non-standard
              	; CCP, like this one.  The best way to get this CPR up on the Apple is to
              	; load it into CPM56.COM, at location 0E00H in the image.  The BIOS code
              	; that pokes the CPR can also be modified at that time.  The poke is done
              	; by "STA 0C8B2H", found at 24FEH in the CPM56 image.  To keep this
              	; feature, change the 0C8B2H address in that instruction by hand to
              	; the value generated for the symbol TWOPOK in the DIR routine.  If
              	; you have assembled out the DIR code by setting CPRDIR to FALSE, then
              	; disable this feature by changing the "STA" to "LDA", i.e. set the
              	; contents of location 24FEH from 32H to 3AH. If you wish to force
              	; a two-column display in all cases, set the TWOCOL switch below to a
              	; value of TRUE, and disable the poke.
              	;
0000:         	TWOCOL	EQU	FALSE		;TRUE IF TWO COL DIR INSTEAD OF FOUR
              	;
              	; The following is presented as an option, but is not generally user-customiz-
              	; able.  A basic design choice had to be made in the design of ZCPR concerning
              	; the execution of SUBMIT files.  The original CCP had a problem in this sense
              	; in that it ALWAYS looked for the SUBMIT file from drive A: and the SUBMIT
              	; program itself (SUBMIT.COM) would place the $$$.SUB file on the currently
              	; logged-in drive, so when the user was logged into B: and he issued a SUBMIT
              	; command, the $$$.SUB was placed on B: and did not execute because the CCP
              	; looked for it on A: and never found it.
              	;
              	;	After much debate it was decided to have ZCPR perform the same type of
              	; function as CCP (look for the $$$.SUB file on A:), but the problem with
              	; SUBMIT.COM still exists.  Hence, RGF designed SuperSUB and RLC took his
              	; SuperSUB and designed SUB from it; both programs are set up to allow the
              	; selection at assembly time of creating the $$$.SUB on the logged-in drive
              	; or on drive A:.
              	;
              	;	A final definition of the Indirect Command File ($$$.SUB or SUBMIT
              	; File) is presented as follows:
              	;
              	;		"An Indirect Command File is one which contains
              	;		 a series of commands exactly as they would be
              	;		 entered from a CP/M Console.  The SUBMIT Command
              	;		 (or SUB Command) reads this files and transforms
              	;		 it for processing by the ZCPR (the $$$.SUB File).
              	;		 ZCPR will then execute the commands indicated
              	;		 EXACTLY as if they were typed at the Console."
              	;
              	;	Hence, to permit this to happen, the $$$.SUB file must always
              	; be present on a specific drive, and A: is the choice for said drive.
              	; With this facility engaged as such, Indirect Command Files like:
              	;
              	;		DIR
              	;		A:
              	;		DIR
              	;
              	; can be executed, even though the currently logged-in drive is changed
              	; during execution.  If the $$$.SUB file was present on the currently
              	; logged-in drive, the above series of commands would not work since the
              	; ZCPR would be looking for $$$.SUB on the logged-in drive, and switching
              	; logged-in drives without moving the $$$.SUB file as well would cause
              	; processing to abort.
              	;
00FF:         	SUBA	EQU	TRUE 		;Set to TRUE to have $$$.SUB always on A:
              					;Set to FALSE to have $$$.SUB on the
              					; logged-in drive
              	;
              	;   The following flag enables extended processing for user-program supplied
              	; command lines.  This is for Command Level 3 of ZCPR.  Under the current
              	; ZCPR philosophy, three command levels exist:
              	;
              	;	(1) that command issued by the user from his console at the '>' prompt
              	;	(2) that command issued by a $$$.SUB file at the '$' prompt
              	;	(3) that command issued by a user program by placing the command into
              	;	    CIBUFF and setting the character count in CBUFF
              	;
              	;   Setting CLEVEL3 to TRUE enables extended processing of the third level of
              	; ZCPR command.  All the user program need do is to store the command line and
              	; set the character count; ZCPR will initialize the pointers properly, store
              	; the ending zero properly, and capitalize the command line for processing.
              	; Once the command line is properly stored, the user executes the command line
              	; by reentering the ZCPR through CPRLOC [NOTE:  The C register MUST contain
              	; a valid User/Disk Flag (see location 4) at this time.]
              	;
00FF:         	CLEVEL3	EQU	TRUE		;ENABLE COMMAND LEVEL 3 PROCESSING
              	;
              	;
              	;*** TERMINAL AND 'TYPE' CUSTOMIZATION EQUATES
              	;
0018:         	NLINES	EQU	24		;NUMBER OF LINES ON CRT SCREEN
00FF:         	WIDE	EQU	TRUE		;TRUE IF WIDE DIR DISPLAY
007C:         	FENCE	EQU	'|'		;SEP CHAR BETWEEN DIR FILES
              	;
0000:         	PGDFLT	EQU	FALSE 		;SET TO FALSE TO DISABLE PAGING BY DEFAULT
0050:         	PGDFLG	EQU	'P'		;FOR TYPE COMMAND: PAGE OR NOT (DEP ON PGDFLT)
              					;  THIS FLAG REVERSES THE DEFAULT EFFECT
              	;
0041:         	SYSFLG	EQU	'A' 		;FOR DIR COMMAND: LIST $SYS AND $DIR
              	;
0053:         	SOFLG	EQU	'S'		;FOR DIR COMMAND: LIST $SYS FILES ONLY
              	;
0000:         	SUPRES	EQU	FALSE		;SUPRESSES USER # REPORT FOR USER 0
              	;
0024:         	SPRMPT	EQU	'$'		;CPR PROMPT INDICATING SUBMIT COMMAND
003E:         	CPRMPT	EQU	'>'		;CPR PROMPT INDICATING USER COMMAND
              	;
0048:         	NUMBASE	EQU	'H'		;CHARACTER USED TO SWITCH FROM DEFAULT
              					; NUMBER BASE
              	;
0053:         	SECTFLG	EQU	'S'		;OPTION CHAR FOR SAVE COMMAND TO SAVE SECTORS
              	;
              	; END OF CUSTOMIZATION SECTION
              	;
000D:         	CR	EQU	0DH
000A:         	LF	EQU	0AH
0009:         	TAB	EQU	09H
000C:         	FFEED	EQU	0CH
0007:         	BEL	EQU	07H
              	;
              	;; WBOOT	EQU	BASE+0000H		;CP/M WARM BOOT ADDRESS
              	;; UDFLAG	EQU	BASE+0004H		;USER NUM IN HIGH NYBBLE, DISK IN LOW
              	;; BDOS	EQU	BASE+0005H		;BDOS FUNCTION CALL ENTRY PT
              	;; TFCB	EQU	BASE+005CH		;DEFAULT FCB BUFFER
              	;; TBUFF	EQU	BASE+0080H		;DEFAULT DISK I/O BUFFER
              	;; TPA	EQU	BASE+0100H		;BASE OF TPA
              	
0100:         	TPA    EQU     100H
              	
              	;
              	;**** Section 0 ****
              	;
              	;	ORG	0100H
              	;	.PHASE	CPRLOC
              	;
              	;  ENTRY POINTS INTO ZCPR
              	;
              	;    If the ZCPR is entered at location CPRLOC (at the JMP to CPR), then
              	; the default command in CIBUFF will be processed.  If the ZCPR is entered
              	; at location CPRLOC+3 (at the JMP to CPR1), then the default command in
              	; CIBUFF will NOT be processed.
              	;
              	;    NOTE:  Entry into ZCPR in this way is permitted under this version,
              	; but in order for this to work, CIBUFF and CBUFF MUST be initialized properly
              	; AND the C register MUST contain a valid User/Disk Flag (see Location 4: the
              	; most significant nybble contains the User Number and the least significant
              	; nybble contains the Disk Number).
              	;
              	;    Some user programs (such as SYNONYM3) attempt to use the default
              	; command facility.  Under the original CCP, it was necessary to initialize
              	; the pointer after the reserved space for the command buffer to point to
              	; the first byte of the command buffer.  Under current versions, this is
              	; no longer the case.  The CIBPTR (Command Input Buffer PoinTeR) is located
              	; to be compatible with such programs (provided they determine the buffer
              	; length from the byte at MBUFF [CPRLOC + 6]), but under ZCPR this is
              	; no longer necessary, since this buffer pointer is automatically
              	; initialized in all cases.
              	;
DC00:         	cbase:  
DC00:         	ENTRY:
DC00: C3C0DC  		JP	CPR		; Process potential default command, and set
              					; USRMAX to MAXUSR default
              	;	JP	CPR1		; Do NOT process potential default command
              	;	
              	;**** Section 1 ****
              	; BUFFERS ET AL
              	;
              	; INPUT COMMAND LINE AND DEFAULT COMMAND
              	;
              	;   The command line to be executed is stored here.  This command line
              	; is generated in one of three ways:
              	;
              	;	(1) by the user entering it through the BDOS READLN function at
              	;	    the du> prompt [user input from keyboard]
              	;	(2) by the SUBMIT File Facility placing it there from a $$$.SUB
              	;	    file
              	;	(3) by an external program or user placing the required command
              	;	    into this buffer
              	;
              	;   In all cases, the command line is placed into the buffer starting at
              	; CIBUFF.  This command line is terminated by the last character (NOT Carriage
              	; Return), and a character count of all characters in the command line
              	; up to and including the last character is placed into location CBUFF
              	; (immediately before the command line at CIBUFF).  The placed command line
              	; is then parsed, interpreted, and the indicated command is executed.
              	; If CLEVEL3 is permitted, a terminating zero is placed after the command
              	; (otherwise the user program has to place this zero) and the CIBPTR is
              	; properly initialized (otherwise the user program has to init this ptr).
              	; If the command is placed by a user program, entering at CPRLOC is enough
              	; to have the command processed.  Again, under the current ZCPR, it is not
              	; necessary to store the pointer to CIBUFF in CIBPTR; ZCPR will do this for
              	; the calling program if CLEVEL3 is made TRUE.
              	;
              	;   WARNING:  The command line must NOT exceed BUFLEN characters in length.
              	; For user programs which load this command, the value of BUFLEN can be
              	; obtained by examining the byte at MBUFF (CPRLOC + 6).
              	;
DC03:         	inbuff: 
0050:         	BUFLEN	EQU	80		;MAXIMUM BUFFER LENGTH
DC03:         	MBUFF:
DC03: 50      		DEFB	BUFLEN		;MAXIMUM BUFFER LENGTH
DC04:         	CBUFF:
DC04: 00      		DEFB	0		;NUMBER OF VALID CHARS IN COMMAND LINE
              	
DC05:         	CIBUFF:
DC05: 494E4954	 	DEFM	'INIT '
DC09: 20      	
DC0A: FF      	        DEFB    255
DC0B: 20202020	        DEFM    '        ';DEFAULT (COLD BOOT) COMMAND
DC0F: 20202020	
              	;
              	;  The copyright notice from Digital Research is genned into the
              	; stock CCP at this location. It should be maintained in ZCPR,
              	; since Digital Research grants permission for ZCPR to exist.
              	;
DC13: 2020434F		DEFM	'  COPYRIGHT (C) 1979, DIGITAL RESEARCH  '
DC17: 50595249	
DC1B: 47485420	
DC1F: 28432920	
DC23: 31393739	
DC27: 2C204449	
DC2B: 47495441	
DC2F: 4C205245	
DC33: 53454152	
DC37: 43482020	
DC3B:         	CIBUF:
DC3B: 00      		DEFB	0		;COMMAND STRING TERMINATOR
DC3C: 4E5A4350		DEFM	'NZCPR V 1.6 of'
DC40: 52205620	
DC44: 312E3620	
DC48: 6F66    	
DC4A: 2030382F		DEFM	' 08/03/82 '	;ZCPR ID FOR DISK DUMP
DC4E: 30332F38	
DC52: 3220    	
DC54: 0000    	 	DEFS	BUFLEN-($-CIBUFF)+1	;TOTAL IS 'BUFLEN' BYTES
              	;
DC56:         	CIBPTR:
DC56: 05DC    		DEFW	CIBUFF		;POINTER TO COMMAND INPUT BUFFER
DC58:         	CIPTR:
DC58: 3BDC    		DEFW	CIBUF		;POINTER TO CURR COMMAND FOR
              					; ERROR REPORTING
              	;
DC5A: 00000000		DEFS	26		;STACK AREA
DC5E: 00...   	
DC74:         	STACK	EQU	$		;TOP OF STACK
              	;
              	; FILE TYPE FOR COMMAND
              	;
DC74:         	COMMSG:
DC74: 434F4D  		DEFM	'COM'
              	;
              	; SUBMIT FILE CONTROL BLOCK
              	;
DC77:         	SUBFCB:
              		IF	SUBA		;IF $$$.SUB ON A:
DC77: 01      		DEFB	1		;DISK NAME SET TO DEFAULT TO DRIVE A:
              	;	ENDIF
              	;
              	;	IF	NOT SUBA	;IF $$$.SUB ON CURRENT DRIVE
              	        ELSE
              		DEFB	0		;DISK NAME SET TO DEFAULT TO CURRENT DRIVE
              		ENDIF
              	;
DC78: 242424  		DEFM	'$$$'		;FILE NAME
DC7B: 20202020		DEFM	'     '
DC7F: 20      	
DC80: 535542  		DEFM	'SUB'		;FILE TYPE
DC83: 00      		DEFB	0		;EXTENT NUMBER
DC84: 00      		DEFB	0		;S1
DC85:         	SUBFS2:
DC85: 00      		DEFS	1		;S2
DC86:         	SUBFRC:
DC86: 00      		DEFS	1		;RECORD COUNT
DC87: 00000000		DEFS	16		;DISK GROUP MAP
DC8B: 00...   	
DC97:         	SUBFCR:
DC97: 00      		DEFS	1		;CURRENT RECORD NUMBER
              	; COMMAND FILE CONTROL BLOCK
              	;
DC98:         	FCBDN:
DC98: 00      		DEFS	1		;DISK NAME
DC99:         	FCBFN:
DC99: 00000000		DEFS	8		;FILE NAME
DC9D: 00000000	
DCA1:         	FCBFT:
DCA1: 000000  		DEFS	3		;FILE TYPE
DCA4: 00      		DEFS	1		;EXTENT NUMBER
DCA5: 0000    		DEFS	2		;S1 AND S2
DCA7: 00      		DEFS	1		;RECORD COUNT
DCA8:         	FCBDM:
DCA8: 00000000		DEFS	16		;DISK GROUP MAP
DCAC: 00...   	
DCB8:         	FCBCR:
DCB8: 00      		DEFS	1		;CURRENT RECORD NUMBER
              	;
              	; OTHER BUFFERS
              	;
DCB9:         	PAGCNT:
DCB9: 16      		DEFB	NLINES-2	;LINES LEFT ON PAGE
DCBA:         	CHRCNT:
DCBA: 00      		DEFB	0		;CHAR COUNT FOR TYPE
DCBB:         	QMCNT:
DCBB: 00      		DEFB	0		;QUESTION MARK COUNT FOR FCB TOKEN SCANNER
              	;
              	;
              	;**** Section 2 ****
              	; CPR STARTING POINTS.  NOTE THAT SOME CP/M IMPLEMENTATIONS
              	; REQUIRE THE COLD START ADDRESS TO BE IN THE STARTING PAGE
              	; OF THE CPR, FOR DYNAMIC CCP LOADING.  CMDTBL WAS MOVED FOR
              	; THIS REASON.
              	;
              	; SET USRMAX AND/OR MAXDRIV TO DEFAULT VALUES ON COLD BOOT
              	; IF REQUIRED. NOTE THAT SOME BIOS IMPLEMENTATIONS WILL END
              	; UP HERE INSTEAD OF AT THE WARM BOOT, DEFEATING PASSWORDING
              	; OF THESE OPTIONS. RECOMMEND SUCH A BIOS BE FIXED.
              	;
              		IF	USRMAX OR MAXDRIV
              	CPR:
              		IF	USRMAX
              		LD	A,MAXUSR+1	;SET USRMAX ON COLD BOOT
              		LD	(USRMAX),A
              		ENDIF			;USRMAX
              	;
              		IF	MAXDRIV
              		LD	A,MAXDR		;SET MAXDRIV ON COLD BOOT
              		LD	(MAXDRIV),A
              		ENDIF			;MAXDRIV
              	;
              		JR	CPR2		; THEN PROCEED
              		ENDIF			;USRMAX OR MAXDRIV
              	;
              	; START CPR AND DON'T PROCESS DEFAULT COMMAND STORED
              	;
DCBC:         	CPR1:
DCBC: AF      		XOR	A		;SET NO DEFAULT COMMAND
DCBD: 3204DC  		LD	(CBUFF),A
              	;
              	; START CPR AND POSSIBLY PROCESS DEFAULT COMMAND
              	;
              	; NOTE ON MODIFICATION BY RGF: BDOS RETURNS 0FFH IN
              	; ACCUMULATOR WHENEVER IT LOGS IN A DIRECTORY, IF ANY
              	; FILE NAME CONTAINS A '$' IN IT.  THIS IS NOW USED AS
              	; A CLUE TO DETERMINE WHETHER OR NOT TO DO A SEARCH
              	; FOR SUBMIT FILE, IN ORDER TO ELIMINATE WASTEFUL SEARCHES.
              	;
              		IF	USRMAX OR MAXDRIV
              	CPR2:
              		ELSE
DCC0:         	CPR:
              		ENDIF			;USRMAX OR MAXDRIV
              	;
DCC0: 3174DC  		LD	SP,STACK	;RESET STACK
DCC3: C5      		PUSH	BC
DCC4: 79      		LD	A,C		;C=USER/DISK NUMBER (SEE LOC 4)
DCC5: 1F      		RRA			;EXTRACT USER NUMBER
DCC6: 1F      		RRA
DCC7: 1F      		RRA
DCC8: 1F      		RRA
DCC9: E60F    		AND	0FH
DCCB: 5F      		LD	E,A		;SET USER NUMBER
DCCC: CD6ADE  		CALL	SETUSR
DCCF: CD2DDE  		CALL	RESET		;RESET DISK SYSTEM
              		;LD	(RNGSUB),A	;SAVE SUBMIT CLUE FROM DRIVE A:
DCD2: C1      		POP	BC
DCD3: 79      		LD	A,C		;C=USER/DISK NUMBER (SEE LOC 4)
DCD4: E60F    		AND	0FH		;EXTRACT DEFAULT DISK DRIVE
DCD6: 327EDE  		LD	(TDRIVE),A	;SET IT
DCD9: 2803    		JR	Z,NOLOG		;SKIP IF 0...ALREADY LOGGED
DCDB: CD32DE  		CALL	LOGIN		;LOG IN DEFAULT DISK
              	;
              		IF	SUBA	;IF $$$.SUB IS ON CURRENT DRIVE
              	        ELSE
              		LD	(RNGSUB),A	;BDOS '$' CLUE
              		ENDIF
              	;
DCDE:         	NOLOG:
DCDE: 1177DC  		LD	DE,SUBFCB	;CHECK FOR $$$.SUB ON CURRENT DISK
DCE2:         	batch:  EQU     $+1
DCE2:         	RNGSUB:	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
DCE1: 3E00    	        LD	A,0	        ;2ND BYTE (IMMEDIATE ARG) IS THE RNGSUB FLAG
DCE3: B7      		OR	A		;SET FLAGS ON CLUE
DCE4: 2F      		CPL			;PREPARE FOR COMING 'CPL'
DCE5: C44CDE  		CALL	NZ,SEAR1
DCE8: 2F      		CPL			;0FFH IS RETURNED IF NO $$$.SUB, SO COMPLEMENT
DCE9: 32E2DC  		LD	(RNGSUB),A	;SET FLAG (0=NO $$$.SUB)
DCEC: 3A04DC  		LD	A,(CBUFF)	;EXECUTE DEFAULT COMMAND?
DCEF: B7      		OR	A		;0=NO
DCF0: 2026    		JR	NZ,RS1
              	;
              	; PROMPT USER AND INPUT COMMAND LINE FROM HIM
              	;
DCF2:         	RESTRT:
DCF2: 3174DC  		LD	SP,STACK	;RESET STACK
              	;
              	; PRINT PROMPT (DU>)
              	;
DCF5: CDA1DD  		CALL	CRLF		;PRINT PROMPT
DCF8: CD22DE  		CALL	GETDRV		;CURRENT DRIVE IS PART OF PROMPT
DCFB: C641    		ADD	A,'A'		;CONVERT TO ASCII A-P
DCFD: CDA8DD  		CALL	CONOUT
DD00: CD68DE  		CALL	GETUSR		;GET USER NUMBER
              	;
              		IF	SUPRES		;IF SUPPRESSING USR # REPORT FOR USR 0
              		OR	A
              		JR	Z,RS000
              		ENDIF
              	;
DD03: FE0A    		CP	10		;USER < 10?
DD05: 3809    		JR	C,RS00
DD07: D60A    		SUB	10		;SUBTRACT 10 FROM IT
DD09: F5      		PUSH	AF		;SAVE IT
DD0A: 3E31    		LD	A,'1'		;OUTPUT 10'S DIGIT
DD0C: CDA8DD  		CALL	CONOUT
DD0F: F1      		POP	AF
DD10:         	RS00:
DD10: C630    		ADD	A,'0'		;OUTPUT 1'S DIGIT (CONVERT TO ASCII)
DD12: CDA8DD  		CALL	CONOUT
              	;
              	; READ INPUT LINE FROM USER OR $$$.SUB
              	;
DD15:         	RS000:
DD15: CD83DE  		CALL	REDBUF		;INPUT COMMAND LINE FROM USER (OR $$$.SUB)
              	;
              	; PROCESS INPUT LINE
              	;
DD18:         	RS1:
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
DD18: CDF0DE  		CALL	CNVBUF		;CAPITALIZE COMMAND LINE, PLACE ENDING 0,
              					; AND SET CIBPTR VALUE
              		ENDIF
              	;
DD1B: CD26DE  		CALL	DEFDMA		;SET TBUFF TO DMA ADDRESS
DD1E: CD22DE  		CALL	GETDRV		;GET DEFAULT DRIVE NUMBER
DD21: 327EDE  		LD	(TDRIVE),A	;SET IT
DD24: CD08E0  		CALL	SCANER		;PARSE COMMAND NAME FROM COMMAND LINE
DD27: C417DF  		CALL	NZ,ERROR	;ERROR IF COMMAND NAME CONTAINS A '?'
DD2A: 1140DD  		LD	DE,RSTCPR	;PUT RETURN ADDRESS OF COMMAND
DD2D: D5      		PUSH	DE		;ON THE STACK
DD2E: 3AFFDF  		LD	A,(TEMPDR)	;IS COMMAND OF FORM 'D:COMMAND'?
DD31: B7      		OR	A		;NZ=YES
DD32: C2F7E2  		JP	NZ,COM		; IMMEDIATELY
DD35: CD87E0  		CALL	CMDSER		;SCAN FOR CPR-RESIDENT COMMAND
DD38: C2F7E2  		JP	NZ,COM		;NOT CPR-RESIDENT
DD3B: 7E      		LD	A,(HL)		;FOUND IT:  GET LOW-ORDER PART
DD3C: 23      		INC	HL		;GET HIGH-ORDER PART
DD3D: 66      		LD	H,(HL)		;STORE HIGH
DD3E: 6F      		LD	L,A		;STORE LOW
DD3F: E9      		JP	(HL)		;EXECUTE CPR ROUTINE
              	;
              	; ENTRY POINT FOR RESTARTING CPR AND LOGGING IN DEFAULT DRIVE
              	;
DD40:         	RSTCPR:
DD40: CDF4DF  		CALL	DLOGIN		;LOG IN DEFAULT DRIVE
              	;
              	; ENTRY POINT FOR RESTARTING CPR WITHOUT LOGGING IN DEFAULT DRIVE
              	;
DD43:         	RCPRNL:
DD43: CD08E0  		CALL	SCANER		;EXTRACT NEXT TOKEN FROM COMMAND LINE
DD46: 3A99DC  		LD	A,(FCBFN)	;GET FIRST CHAR OF TOKEN
DD49: D620    		SUB	' '		;ANY CHAR?
DD4B: 21FFDF  		LD	HL,TEMPDR
DD4E: B6      		OR	(HL)
DD4F: C217DF  		JP	NZ,ERROR
DD52: 189E    		JR	RESTRT
              	;
              	; No File Error Message
              	;
DD54:         	PRNNF:
DD54: CD0ADE  		CALL	PRINTC		;NO FILE MESSAGE
DD57: 4E6F2046		DEFM	'No Fil'
DD5B: 696C    	
DD5D: E5      		DEFB	'e'+80H
DD5E: C9      		RET
              	;
              	; CPR BUILT-IN COMMAND TABLE
              	;
0004:         	NCHARS	EQU	4		;NUMBER OF CHARS/COMMAND
              	;
              	; CPR COMMAND NAME TABLE
              	;   EACH TABLE ENTRY IS COMPOSED OF THE 4-BYTE COMMAND AND 2-BYTE ADDRESS
              	;
DD5F:         	CMDTBL:
              	;
              		IF	INPASS AND SECURE
              		DEFM	'PASS'		;ENABLE WHEEL (SYSOP) MODE
              		DEFW	PASS
              		ENDIF			;INPASS AND SECURE
              	;
              		IF	DRUSER
DD5F: 55534552		DEFM	'USER'		;CHANGE USER AREAS
DD63: DBE2    		DEFW	USER
              		ENDIF			;DRUSER
              	;
              		IF	CPRTYP
DD65: 54595045		DEFM	'TYPE'		;TYPE A FILE TO CON:
DD69: 85E1    		DEFW	TYPE
              		ENDIF			;CPRTYP
              	;
              		IF	CPRDIR
DD6B: 44495220		DEFM	'DIR '		;PULL A DIRECTORY OF DISK FILES
DD6F: A9E0    		DEFW	DIR
              		ENDIF			;CPRDIR
              	
0003:         	NRCMDS	EQU	($-CMDTBL)/(NCHARS+2)
              					;PUT ANY COMMANDS THAT ARE OK TO
              					;RUN WHEN NOT UNDER WHEEL MODE
              					;IN FRONT OF THIS LABEL
              		IF	CPRLST AND CPRTYP
DD71: 4C495354		DEFM	'LIST'		;LIST FILE TO PRINTER
DD75: 81E1    		DEFW	LIST
              		ENDIF			;CPRLST AND CPRTYP
              	;
              		IF	INPASS AND SECURE
              		DEFM	'NORM'		;DISABLE WHEEL MODE
              		DEFW	NORM
              		ENDIF			;INPASS AND SECURE
              	;
              		IF	RAS		;FOR NON-RAS
              	        ELSE
DD77: 474F2020		DEFM	'GO  '		;JUMP TO 100H
DD7B: F2E2    		DEFW	GO
DD7D: 45524120		DEFM	'ERA '		;ERASE FILE
DD81: 5AE1    		DEFW	ERA
DD83: 53415645		DEFM	'SAVE'		;SAVE MEMORY IMAGE TO DISK
DD87: 12E2    		DEFW	SAVE
DD89: 52454E20		DEFM	'REN '		;RENAME FILE
DD8D: 97E2    		DEFW	REN
DD8F: 44465520		DEFM	'DFU '		;SET DEFAULT USER
DD93: E5E2    		DEFW	DFU
DD95: 47455420		DEFM	'GET '		;LOAD FILE INTO MEMORY
DD99: 97E3    		DEFW	GET
DD9B: 4A554D50		DEFM	'JUMP'		;JUMP TO LOCATION IN MEMORY
DD9F: EDE2    		DEFW	JUMP
              		ENDIF			;RAS
              	;
000B:         	NCMNDS	EQU	($-CMDTBL)/(NCHARS+2)
              	;
              	;**** Section 3 ****
              	; I/O UTILITIES
              	;
              	; OUTPUT CHAR IN REG A TO CONSOLE AND DON'T CHANGE BC
              	;
              	;
              	; OUTPUT <CRLF>
              	;
DDA1:         	CRLF:
DDA1: 3E0D    		LD	A,CR
DDA3: CDA8DD  		CALL	CONOUT
DDA6: 3E0A    		LD	A,LF		;FALL THRU TO CONOUT
              	;
DDA8:         	CONOUT:
DDA8: C5      		PUSH	BC
DDA9: 0E02    		LD	C,02H
DDAB:         	OUTPUT:
DDAB: E67F    		AND	7FH		;PREVENT INADVERTANT GRAPHIC OUTPUT
              					; TO EPSON-TYPE PRINTERS
DDAD: 5F      		LD	E,A
DDAE: E5      		PUSH	HL
DDAF: CD0500  		CALL	BDOS
DDB2: E1      		POP	HL
DDB3: C1      		POP	BC
DDB4: C9      		RET
              	;
DDB5:         	CONIN:
DDB5: 0E01    		LD	C,01H		;GET CHAR FROM CON: WITH ECHO
DDB7: CD03DE  		CALL	BDOSB
              	;
              	; CONVERT CHAR IN A TO UPPER CASE
              	;
DDBA:         	UCASE:
DDBA: FE61    		CP	61H		;LOWER-CASE A
DDBC: D8      		RET	C
DDBD: FE7B    		CP	7BH		;GREATER THAN LOWER-CASE Z?
DDBF: D0      		RET	NC
DDC0: E65F    		AND	5FH		;CAPITALIZE
DDC2: C9      		RET
              	;
DDC3:         	NOECHO:
DDC3: D5      		PUSH	DE		;SAVE D
DDC4: 0E06    		LD	C,6		;DIRECT CONSOLE I/O
DDC6: 1EFF    		LD	E,0FFH		;INPUT
DDC8: CD03DE  		CALL	BDOSB
DDCB: D1      		POP	DE
DDCC: B7      		OR	A		;DID WE GET A CHAR?
DDCD: 28F4    		JR	Z,NOECHO	;WAIT FOR IT IF NOT, IT'S EXPECTED
DDCF: C9      		RET
              	;
              		IF	CPRTYP
DDD0:         	LCOUT:
              		ENDIF			;CPRTYP
              	;
              		IF	CPRTYP AND CPRLST
DDD0: F5      		PUSH	AF		;OUTPUT CHAR TO CON: OR LST: DEP ON PRFLG
DDD2:         	PRFLG	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
DDD1: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS THE PRINT FLAG
DDD3: B7      		OR	A		;0=TYPE
DDD4: 2806    		JR	Z,LC1
DDD6: F1      		POP	AF		;GET CHAR
              	;
              	; OUTPUT CHAR IN REG A TO LIST DEVICE
              	;
DDD7:         	LSTOUT:
DDD7: C5      		PUSH	BC
DDD8: 0E05    		LD	C,05H
DDDA: 18CF    		JR	OUTPUT
DDDC:         	LC1:
DDDC: F1      		POP	AF		;GET CHAR
              		ENDIF			;CPRTYP AND CPRLST
              	;
              		IF	CPRTYP
DDDD: F5      		PUSH	AF
DDDE: CDA8DD  		CALL	CONOUT		;OUTPUT TO CON:
DDE1: F1      		POP	AF
DDE2: FE0A    		CP	LF		;CHECK FOR PAGING
DDE4: C0      		RET	NZ		;DONE IF NOT EOL YET
              	;
              	;  COUNT DOWN LINES AND PAUSE FOR INPUT (DIRECT) IF COUNT EXPIRES
              	;
DDE5: E5      		PUSH	HL
DDE6: 21B9DC  		LD	HL,PAGCNT	;COUNT DOWN
DDE9: 35      		DEC	(HL)
DDEA: 2010    		JR	NZ,PGBAK	;JUMP IF NOT END OF PAGE
DDEC: 3616    		LD	(HL),NLINES-2	;REFILL COUNTER
              	;
DDEF:         	PGFLG	EQU	$+1		;POINTER TO IN-THE-CODE BUFFER PGFLG
DDEE: 3E00    		LD	A,0		;0 MAY BE CHANGED BY PGFLG EQUATE
DDF0: FE50    		CP	PGDFLG		;PAGE DEFAULT OVERRIDE OPTION WANTED?
              	;
              		IF	PGDFLT		;IF PAGING IS DEFAULT
              		JR	Z,PGBAK		;  PGDFLG MEANS NO PAGING, PLEASE
              		ELSE			;IF PAGING NOT DEFAULT
DDF2: 2008    		JR	NZ,PGBAK	;  PGDFLG MEANS PLEASE PAGINATE
              		ENDIF
              	;
DDF4: CDC3DD  		CALL	NOECHO		;GET CHAR BUT DON'T ECHO TO SCREEN
DDF7: FE03    		CP	'C'-'@' 	;^C
DDF9: CA40DD  		JP	Z,RSTCPR	;RESTART CPR
DDFC:         	PGBAK:
DDFC: E1      		POP	HL		;RESTORE HL
DDFD: C9      		RET
              		ENDIF			;CPRTYP
              	;
DDFE:         	READF:
DDFE: 1198DC  		LD	DE,FCBDN 	;FALL THRU TO READ
DE01:         	READ:
DE01: 0E14    		LD	C,14H		;FALL THRU TO BDOSB
              	;
              	; CALL BDOS AND SAVE BC
              	;
DE03:         	BDOSB:
DE03: C5      		PUSH	BC
DE04: CD0500  		CALL	BDOS
DE07: C1      		POP	BC
DE08: B7      		OR	A
DE09: C9      		RET
              	;
              	; PRINT STRING ENDING WITH ZERO BYTE OR CHAR WITH HIGH BIT SET
              	; PT'ED TO BY RET ADDR, START WITH <CR><LF>
              	;
DE0A:         	PRINTC:
DE0A: F5      		PUSH	AF		;SAVE FLAGS
DE0B: CDA1DD  		CALL	CRLF		;NEW LINE
DE0E: F1      		POP	AF
              	;
DE0F:         	PRINT:
DE0F: E3      		EX	(SP),HL		;GET PTR TO STRING
DE10: F5      		PUSH	AF		;SAVE FLAGS
DE11: CD17DE  		CALL	PRIN1		;PRINT STRING
DE14: F1      		POP	AF		;GET FLAGS
DE15: E3      		EX	(SP),HL		;RESTORE HL AND RET ADR
DE16: C9      		RET
              	;
              	; PRINT STRING ENDING WITH ZERO BYTE OR CHAR WITH HIGH BIT SET
              	; PT'ED TO BY HL
              	;
DE17:         	PRIN1:
DE17: 7E      		LD	A,(HL)		;GET NEXT BYTE
DE18: CDA8DD  		CALL	CONOUT		;PRINT CHAR
DE1B: 7E      		LD	A,(HL)		;GET NEXT BYTE AGAIN FOR TEST
DE1C: 23      		INC	HL		;PT TO NEXT BYTE
DE1D: B7      		OR	A		;SET FLAGS
DE1E: C8      		RET	Z		;DONE IF ZERO
DE1F: F8      		RET	M		;DONE IF MSB SET
DE20: 18F5    		JR	PRIN1
              	;
              	; BDOS FUNCTION ROUTINES
              	;
              	;
              	; RETURN NUMBER OF CURRENT DISK IN A
              	;
DE22:         	GETDRV:
DE22: 0E19    		LD	C,19H
DE24: 1809    		JR	BDOSJP
              	;
              	; SET 80H AS DMA ADDRESS
              	;
DE26:         	DEFDMA:
DE26: 118000  		LD	DE,TBUFF 	;80H=TBUFF
DE29:         	DMASET:
DE29: 0E1A    		LD	C,1AH
DE2B: 1802    		JR	BDOSJP
              	;
DE2D:         	RESET:
DE2D: 0E0D    		LD	C,0DH
DE2F:         	BDOSJP:
DE2F: C30500  		JP	BDOS
              	;
DE32:         	LOGIN:
DE32: 5F      		LD	E,A		;MOVE DESIRED # TO BDOS REG
              	;
              		IF	MAXDRIV
              		LD	A,(MAXDRIV)	;CHECK FOR LEGAL DRIVE #
              		CP	E
              		JP	C,ERROR		;DON'T DO IT IF TOO HIGH
              		ENDIF			;MAXDRIV
              	;
DE33: 0E0E    		LD	C,0EH
DE35: 18F8    		JR	BDOSJP		;SAVE SOME CODE SPACE
              	;
DE37:         	OPENF:
DE37: AF      		XOR	A
DE38: 32B8DC  		LD	(FCBCR),A
DE3B: 1198DC  		LD	DE,FCBDN 	;FALL THRU TO OPEN
              	;
DE3E:         	OPEN:
DE3E: 0E0F    		LD	C,0FH		;FALL THRU TO GRBDOS
              	;
DE40:         	GRBDOS:
DE40: CD0500  		CALL	BDOS
DE43: 3C      		INC	A		;SET ZERO FLAG FOR ERROR RETURN
DE44: C9      		RET
              	;
DE45:         	CLOSE:
DE45: 0E10    		LD	C,10H
DE47: 18F7    		JR	GRBDOS
              	;
DE49:         	SEARF:
DE49: 1198DC  		LD	DE,FCBDN 	;SPECIFY FCB
DE4C:         	SEAR1:
DE4C: 0E11    		LD	C,11H
DE4E: 18F0    		JR	GRBDOS
              	;
DE50:         	SEARN:
DE50: 0E12    		LD	C,12H
DE52: 18EC    		JR	GRBDOS
              	;
              	; CHECK FOR SUBMIT FILE IN EXECUTION AND ABORT IT IF SO
              	;
DE54:         	SUBKIL:
DE54: 21E2DC  		LD	HL,RNGSUB	;CHECK FOR SUBMIT FILE IN EXECUTION
DE57: 7E      		LD	A,(HL)
DE58: B7      		OR	A		;0=NO
DE59: C8      		RET	Z
DE5A: 3600    		LD	(HL),0		;ABORT SUBMIT FILE
DE5C: 1177DC  		LD	DE,SUBFCB	;DELETE $$$.SUB
              	;
DE5F:         	DELETE:
DE5F: 0E13    		LD	C,13H
DE61: 18CC    		JR	BDOSJP		;SAVE MORE SPACE
              	;
              	; RESET USER NUMBER IF CHANGED
              	;
DE63:         	RESETUSR:
DE64:         	TMPUSR	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
DE63: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TMPUSR
DE65: 5F      		LD	E,A		;PLACE IN E
DE66: 1802    		JR	SETUSR		;THEN GO SET USER
DE68:         	GETUSR:
DE68: 1EFF    		LD	E,0FFH		;GET CURRENT USER NUMBER
DE6A:         	SETUSR:
DE6A: 0E20    		LD	C,20H		;SET USER NUMBER TO VALUE IN E (GET IF E=FFH)
DE6C: 18C1    		JR	BDOSJP		;MORE SPACE SAVING
              	;
              	; END OF BDOS FUNCTIONS
              	;
              	;
              	;**** Section 4 ****
              	; CPR UTILITIES
              	;
              	; SET USER/DISK FLAG TO CURRENT USER AND DEFAULT DISK
              	;
DE6E:         	SETUD:
DE6E: CD68DE  		CALL	GETUSR		;GET NUMBER OF CURRENT USER
DE71: 87      		ADD	A,A		;PLACE IT IN HIGH NYBBLE
DE72: 87      		ADD	A,A
DE73: 87      		ADD	A,A
DE74: 87      		ADD	A,A
DE75: 217EDE  		LD	HL,TDRIVE	;MASK IN DEFAULT DRIVE NUMBER (LOW NYBBLE)
DE78: B6      		OR	(HL)		;MASK IN
DE79: 320400  		LD	(UDFLAG),A	;SET USER/DISK NUMBER
DE7C: C9      		RET
              	;
              	; SET USER/DISK FLAG TO USER 0 AND DEFAULT DISK
              	;
DE7D:         	SETU0D:
DE7E:         	TDRIVE	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
DE7D: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TDRIVE
DE7F: 320400  		LD	(UDFLAG),A	;SET USER/DISK NUMBER
DE82: C9      		RET
              	;
              	; INPUT NEXT COMMAND TO CPR
              	;	This routine determines if a SUBMIT file is being processed
              	; and extracts the command line from it if so or from the user's console
              	;
DE83:         	REDBUF:
DE83: 3AE2DC  		LD	A,(RNGSUB)	;SUBMIT FILE CURRENTLY IN EXECUTION?
DE86: B7      		OR	A		;0=NO
DE87: 2851    		JR	Z,RB1		;GET LINE FROM CONSOLE IF NOT
DE89: 1177DC  		LD	DE,SUBFCB	;OPEN $$$.SUB
DE8C: CD3EDE  		CALL	OPEN
DE8F: 2849    		JR	Z,RB1		;ERASE $$$.SUB IF END OF FILE AND GET CMND
DE91: 3A86DC  		LD	A,(SUBFRC)	;GET VALUE OF LAST RECORD IN FILE
DE94: 1177DC  	REDBUF0:LD	DE,SUBFCB
DE97: 3D      		DEC	A		;PT TO NEXT TO LAST RECORD
DE98: 3297DC  		LD	(SUBFCR),A	;SAVE NEW VALUE OF LAST RECORD IN $$$.SUB
DE9B: F5      		PUSH	AF
DE9C: CD01DE  		CALL	READ		;DE=SUBFCB
DE9F: C1      		POP	BC
DEA0: 2038    		JR	NZ,RB1		;ABORT $$$.SUB IF ERROR IN READING LAST REC
DEA2: 218000  		LD	HL,TBUFF
DEA5: AF      		XOR	A
DEA6: BE      		CP	(HL)
DEA7: 78      		LD	A,B
DEA8: 28EA    		JR	Z,REDBUF0
DEAA: 1104DC  		LD	DE,CBUFF 	;COPY LAST RECORD (NEXT SUBMIT CMND) TO CBUFF FROM TBUFF
DEAD: E5      		PUSH	HL
DEAE: 015000  		LD	BC,BUFLEN	;NUMBER OF BYTES
DEB1: EDB0    		LDIR
DEB3: E1      		POP	HL
DEB4: 71      		LD	(HL),C
DEB5: 2197DC  		LD	HL,SUBFCR
DEB8: 35      		DEC	(HL)
DEB9: 1177DC  		LD	DE,SUBFCB	
DEBC: D5      		PUSH	DE
DEBD: 0E15    		LD	C,15H
DEBF: CD0500  		CALL	BDOS		; SCRATCH OFF COMMAND
DEC2: D1      		POP	DE
DEC3: CD45DE  		CALL	CLOSE		;CLOSE $$$.SUB
              	;	JR	Z,RB1		;ABORT $$$.SUB IF ERROR (PROBABLY NOT GOING TO HIT THIS ONE)
DEC6: 3E24    		LD	A,SPRMPT	;PRINT SUBMIT PROMPT
DEC8: CDA8DD  		CALL	CONOUT
DECB: 2105DC  		LD	HL,CIBUFF	;PRINT COMMAND LINE FROM $$$.SUB
DECE: CD17DE  		CALL	PRIN1
DED1: CD06DF  		CALL	BREAK		;CHECK FOR ABORT (ANY CHAR)
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
DED4: C8      		RET	Z		;IF <NULL> (NO ABORT), RETURN TO CALLER AND RUN
              		ENDIF
              	;
              		IF	CLEVEL3	;IF THIRD COMMAND LEVEL IS NOT PERMITTED
              	        ELSE
              		JR	Z,CNVBUF	;IF <NULL> (NO ABORT), CAPITALIZE COMMAND
              		ENDIF
              	;
DED5: CD54DE  		CALL	SUBKIL		;KILL $$$.SUB IF ABORT
DED8: 1857    		JR	RESTTMP		;RESTART CPR
              	;
              	; INPUT COMMAND LINE FROM USER CONSOLE
              	;
DEDA:         	RB1:
DEDA: CD54DE  		CALL	SUBKIL		;ERASE $$$.SUB IF PRESENT
DEDD: CD6EDE  		CALL	SETUD		;SET USER AND DISK
DEE0: 3E3E    		LD	A,CPRMPT	;PRINT PROMPT
DEE2: CDA8DD  		CALL	CONOUT
DEE5: 0E0A    		LD	C,0AH		;READ COMMAND LINE FROM USER
DEE7: 1103DC  		LD	DE,MBUFF
DEEA: CD0500  		CALL	BDOS
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
DEED: C37DDE  		JP	SETU0D		;SET CURRENT DISK NUMBER IN LOWER PARAMS
              		ENDIF
              	;
              		IF	CLEVEL3	;IF THIRD COMMAND LEVEL IS NOT PERMITTED
              	        ELSE
              		CALL	SETU0D		;SET CURRENT DISK NUMBER IF LOWER PARAMS
              					; AND FALL THRU TO CNVBUF
              		ENDIF
              	;
              	; CAPITALIZE STRING (ENDING IN 0) IN CBUFF AND SET PTR FOR PARSING
              	;
DEF0:         	CNVBUF:
DEF0: 2104DC  		LD	HL,CBUFF 	;PT TO USER'S COMMAND
DEF3: 46      		LD	B,(HL)		;CHAR COUNT IN B
DEF4: 04      		INC	B		;ADD 1 IN CASE OF ZERO
DEF5:         	CB1:
DEF5: 23      		INC	HL		;PT TO 1ST VALID CHAR
DEF6: 7E      		LD	A,(HL)		;CAPITALIZE COMMAND CHAR
DEF7: CDBADD  		CALL	UCASE
DEFA: 77      		LD	(HL),A
DEFB: 10F8    		DJNZ	CB1		;CONTINUE TO END OF COMMAND LINE
DEFD:         	CB2:
DEFD: 3600    		LD	(HL),0		;STORE ENDING <NULL>
DEFF: 2105DC  		LD	HL,CIBUFF	;SET COMMAND LINE PTR TO 1ST CHAR
DF02: 2256DC  		LD	(CIBPTR),HL
DF05: C9      		RET
              	;
              	; CHECK FOR ANY CHAR FROM USER CONSOLE;RET W/ZERO SET IF NONE
              	;
DF06:         	BREAK:
DF06: D5      		PUSH	DE		;SAVE DE
DF07: 0E0B    		LD	C,11		;CSTS CHECK
DF09: CD03DE  		CALL	BDOSB
DF0C: C4B5DD  		CALL	NZ,CONIN	;GET INPUT CHAR
DF0F:         	BRKBK:
DF0F: D1      		POP	DE
DF10: C9      		RET
              	;
              	; GET THE REQUESTED USER NUMBER FROM THE COMMAND LINE AND VALIDATE IT.
              	;
DF11:         	USRNUM:		
DF11: CD63DF  		CALL	NUMBER
              	;
              		IF	USRMAX
              		LD	HL,USRMAX 	;PT TO MAXUSR + 1
              		CP	(HL)		;NEW VALUE ALLOWED?
              		ELSE
DF14: FE14    		CP	MAXUSR+1 	;NEW VALUE ALLOWED?
              		ENDIF			;USRMAX
              	;
DF16: D8      		RET	C		;RETURN TO CALLER IF SO,
              					; ELSE FLAG AS ERROR
              	;
              	; INVALID COMMAND -- PRINT IT
              	;
DF17:         	ERROR:
DF17: CDA1DD  		CALL	CRLF		;NEW LINE
DF1A: 2A58DC  		LD	HL,(CIPTR)	;PT TO BEGINNING OF COMMAND LINE
DF1D:         	ERR2:
DF1D: 7E      		LD	A,(HL)		;GET CHAR
DF1E: FE21    		CP	' '+1		;SIMPLE '?' IF <SP> OR LESS
DF20: 3808    		JR	C,ERR1
DF22: E5      		PUSH	HL		;SAVE PTR TO ERROR COMMAND CHAR
DF23: CDA8DD  		CALL	CONOUT		;PRINT COMMAND CHAR
DF26: E1      		POP	HL		;GET PTR
DF27: 23      		INC	HL		;PT TO NEXT
DF28: 18F3    		JR	ERR2		;CONTINUE
DF2A:         	ERR1:
DF2A: CD0FDE  		CALL	PRINT		;PRINT '?'
DF2D: BF      		DEFB	'?'+80H
DF2E: CD54DE  		CALL	SUBKIL		;TERMINATE ACTIVE $$$.SUB IF ANY
DF31: C3F2DC  	RESTTMP:JP	RESTRT		;RESTART CPR
              	;
              	; CHECK TO SEE IF DE PTS TO DELIMITER; IF SO, RET W/ZERO FLAG SET
              	;
DF34:         	SDELM:
DF34: 1A      		LD	A,(DE)
DF35: B7      		OR	A		;0=DELIMITER
DF36: C8      		RET	Z
DF37: FE20    		CP	' '		;ERROR IF < <SP>
DF39: 38DC    		JR	C,ERROR
DF3B: C8      		RET	Z			;<SP>=DELIMITER
DF3C: FE3D    		CP	'='		;'='=DELIMITER
DF3E: C8      		RET	Z
DF3F: FE5F    		CP	5FH		;UNDERSCORE=DELIMITER
DF41: C8      		RET	Z
DF42: FE2E    		CP	'.'		;'.'=DELIMITER
DF44: C8      		RET	Z
DF45: FE3A    		CP	':'		;':'=DELIMITER
DF47: C8      		RET	Z
DF48: FE3B    		CP	';'		;';'=DELIMITER
DF4A: C8      		RET	Z
DF4B: FE3C    		CP	'<'		;'<'=DELIMITER
DF4D: C8      		RET	Z
DF4E: FE3E    		CP	'>'		;'>'=DELIMITER
DF50: C9      		RET
              	;
              	; ADVANCE INPUT PTR TO FIRST NON-BLANK AND FALL THROUGH TO SBLANK
              	;
DF51:         	ADVAN:
DF51: ED5B56DC		LD	DE,(CIBPTR)
              	;
              	; SKIP STRING PTED TO BY DE (STRING ENDS IN 0) UNTIL END OF STRING
              	;   OR NON-BLANK ENCOUNTERED (BEGINNING OF TOKEN)
              	;
DF55:         	SBLANK:
DF55: 1A      		LD	A,(DE)
DF56: B7      		OR	A
DF57: C8      		RET	Z
DF58: FE20    		CP	' '
DF5A: C0      		RET	NZ
DF5B: 13      		INC	DE
DF5C: 18F7    		JR	SBLANK
              	;
              	; ADD A TO HL (HL=HL+A)
              	;
DF5E:         	ADDAH:
DF5E: 85      		ADD	A,L
DF5F: 6F      		LD	L,A
DF60: D0      		RET	NC
DF61: 24      		INC	H
DF62: C9      		RET
              	;
              	; EXTRACT DECIMAL NUMBER FROM COMMAND LINE
              	;   RETURN WITH VALUE IN REG A;ALL REGISTERS MAY BE AFFECTED
              	;
DF63:         	NUMBER:
DF63: CD08E0  		CALL	SCANER		;PARSE NUMBER AND PLACE IN FCBFN
DF66: 21A3DC  		LD	HL,FCBFN+10 	;PT TO END OF TOKEN FOR CONVERSION
DF69: 060B    		LD	B,11		;11 CHARS MAX
              	;
              	; CHECK FOR SUFFIX FOR HEXADECIMAL NUMBER
              	;
DF6B:         	NUMS:
DF6B: 7E      		LD	A,(HL)		;GET CHARS FROM END, SEARCHING FOR SUFFIX
DF6C: 2B      		DEC	HL		;BACK UP
DF6D: FE20    		CP	' '		;SPACE?
DF6F: 2004    		JR	NZ,NUMS1	;CHECK FOR SUFFIX
DF71: 10F8    		DJNZ	NUMS		;COUNT DOWN
DF73: 1804    		JR	NUM0		;BY DEFAULT, PROCESS
DF75:         	NUMS1:
DF75: FE48    		CP	NUMBASE		;CHECK AGAINST BASE SWITCH FLAG
DF77: 282B    		JR	Z,HNUM0
              	;
              	; PROCESS DECIMAL NUMBER
              	;
DF79:         	NUM0:
DF79: 2199DC  		LD	HL,FCBFN	;PT TO BEGINNING OF TOKEN
DF7C: 010011  		LD	BC,1100H	;C=ACCUMULATED VALUE, B=CHAR COUNT
              					; (C=0, B=11)
DF7F:         	NUM1:
DF7F: 7E      		LD	A,(HL)		;GET CHAR
DF80: FE20    		CP	' '		;DONE IF <SP>
DF82: 2818    		JR	Z,NUM2
DF84: 23      		INC	HL		;PT TO NEXT CHAR
DF85: D630    		SUB	'0'		;CONVERT TO BINARY (ASCII 0-9 TO BINARY)
DF87: FE0A    		CP	10		;ERROR IF >= 10
DF89: 3013    		JR	NC,NUMERR
DF8B: 57      		LD	D,A		;DIGIT IN D
DF8C: 79      		LD	A,C		;NEW VALUE = OLD VALUE * 10
DF8D: 07      		RLCA
DF8E: 07      		RLCA
DF8F: 07      		RLCA
DF90: 81      		ADD	A,C		;CHECK FOR RANGE ERROR
DF91: 380B    		JR	C,NUMERR
DF93: 81      		ADD	A,C		;CHECK FOR RANGE ERROR
DF94: 3808    		JR	C,NUMERR
DF96: 82      		ADD	A,D		;NEW VALUE = OLD VALUE * 10 + DIGIT
DF97: 3805    		JR	C,NUMERR	;CHECK FOR RANGE ERROR
DF99: 4F      		LD	C,A		;SET NEW VALUE
DF9A: 10E3    		DJNZ	NUM1		;COUNT DOWN
              	;
              	; RETURN FROM NUMBER
              	;
DF9C:         	NUM2:
DF9C: 79      		LD	A,C		;GET ACCUMULATED VALUE
DF9D: C9      		RET
              	;
              	; NUMBER ERROR ROUTINE FOR SPACE CONSERVATION
              	;
DF9E:         	NUMERR:
DF9E: C317DF  		JP	ERROR		;USE ERROR ROUTINE - THIS IS RELATIVE PT
              	;
              	; EXTRACT HEXADECIMAL NUMBER FROM COMMAND LINE
              	;   RETURN WITH VALUE IN REG A; ALL REGISTERS MAY BE AFFECTED
              	;
DFA1:         	HEXNUM:
DFA1: CD08E0  		CALL	SCANER		;PARSE NUMBER AND PLACE IN FCBFN
DFA4:         	HNUM0:
DFA4: 2199DC  		LD	HL,FCBFN	;PT TO TOKEN FOR CONVERSION
DFA7: 110000  		LD	DE,0		;DE=ACCUMULATED VALUE
DFAA: 060B    		LD	B,11		;B=CHAR COUNT
DFAC:         	HNUM1:
DFAC: 7E      		LD	A,(HL)		;GET CHAR
DFAD: FE20    		CP	' '		;DONE?
DFAF: 282D    		JR	Z,HNUM3		;RETURN IF SO
DFB1: FE48    		CP	NUMBASE		;DONE IF NUMBASE SUFFIX
DFB3: 2829    		JR	Z,HNUM3
DFB5: D630    		SUB	'0'		;CONVERT TO BINARY
DFB7: 38E5    		JR	C,NUMERR	;RETURN AND DONE IF ERROR
DFB9: FE0A    		CP	10		;0-9?
DFBB: 3806    		JR	C,HNUM2
DFBD: D607    		SUB	7		;A-F?
DFBF: FE10    		CP	10H		;ERROR?
DFC1: 30DB    		JR	NC,NUMERR
DFC3:         	HNUM2:
DFC3: 23      		INC	HL		;PT TO NEXT CHAR
DFC4: 4F      		LD	C,A		;DIGIT IN C
DFC5: 7A      		LD	A,D		;GET ACCUMULATED VALUE
DFC6: 07      		RLCA			;EXCHANGE NYBBLES
DFC7: 07      		RLCA
DFC8: 07      		RLCA
DFC9: 07      		RLCA
DFCA: E6F0    		AND	0F0H		;MASK OUT LOW NYBBLE
DFCC: 57      		LD	D,A
DFCD: 7B      		LD	A,E		;SWITCH LOW-ORDER NYBBLES
DFCE: 07      		RLCA
DFCF: 07      		RLCA
DFD0: 07      		RLCA
DFD1: 07      		RLCA
DFD2: 5F      		LD	E,A		;HIGH NYBBLE OF E=NEW HIGH OF E,
              					;  LOW NYBBLE OF E=NEW LOW OF D
DFD3: E60F    		AND	0FH		;GET NEW LOW OF D
DFD5: B2      		OR	D		;MASK IN HIGH OF D
DFD6: 57      		LD	D,A		;NEW HIGH BYTE IN D
DFD7: 7B      		LD	A,E
DFD8: E6F0    		AND	0F0H		;MASK OUT LOW OF E
DFDA: B1      		OR	C		;MASK IN NEW LOW
DFDB: 5F      		LD	E,A		;NEW LOW BYTE IN E
DFDC: 10CE    		DJNZ	HNUM1		;COUNT DOWN
              	;
              	; RETURN FROM HEXNUM
              	;
DFDE:         	HNUM3:
DFDE: EB      		EX	DE,HL		;RETURNED VALUE IN HL
DFDF: 7D      		LD	A,L		;LOW-ORDER BYTE IN A
DFE0: C9      		RET
              	;
              	; PT TO DIRECTORY ENTRY IN TBUFF WHOSE OFFSET IS SPECIFIED BY A AND C
              	;
DFE1:         	DIRPTR:
DFE1: 218000  		LD	HL,TBUFF 	;PT TO TEMP BUFFER
DFE4: 81      		ADD	A,C		;PT TO 1ST BYTE OF DIR ENTRY
DFE5: CD5EDF  		CALL	ADDAH		;PT TO DESIRED BYTE IN DIR ENTRY
DFE8: 7E      		LD	A,(HL)		;GET DESIRED BYTE
DFE9: C9      		RET
              	;
              	; CHECK FOR SPECIFIED DRIVE AND LOG IT IN IF NOT DEFAULT
              	;
DFEA:         	SLOGIN:
DFEA: AF      		XOR	A		;SET FCBDN FOR DEFAULT DRIVE
DFEB: 3298DC  		LD	(FCBDN),A
DFEE: CDFEDF  		CALL	COMLOG		;CHECK DRIVE
DFF1: C8      		RET	Z
DFF2: 1807    		JR	DLOG5		;DO LOGIN OTHERWISE
              	;
              	; CHECK FOR SPECIFIED DRIVE AND LOG IN DEFAULT DRIVE IF SPECIFIED<>DEFAULT
              	;
DFF4:         	DLOGIN:
DFF4: CDFEDF  		CALL	COMLOG		;CHECK DRIVE
DFF7: C8      		RET	Z		;ABORT IF SAME
DFF8: 3A7EDE  		LD	A,(TDRIVE)	;LOG IN DEFAULT DRIVE
              	;
DFFB: C332DE  	DLOG5:	JP	LOGIN
              	;
              	; ROUTINE COMMON TO BOTH LOGIN ROUTINES; ON EXIT, Z SET MEANS ABORT
              	;
DFFE:         	COMLOG:
DFFF:         	TEMPDR	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
DFFE: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TEMPDR
E000: B7      		OR	A		;0=NO
E001: C8      		RET	Z
E002: 3D      		DEC	A		;COMPARE IT AGAINST DEFAULT
E003: 217EDE  		LD	HL,TDRIVE
E006: BE      		CP	(HL)
E007: C9      		RET			;ABORT IF SAME
              	;
              	; EXTRACT TOKEN FROM COMMAND LINE AND PLACE IT INTO FCBDN;
              	;   FORMAT FCBDN FCB IF TOKEN RESEMBLES FILE NAME AND TYPE (FILENAME.TYP);
              	;   ON INPUT, CIBPTR PTS TO CHAR AT WHICH TO START SCAN;
              	;   ON OUTPUT, CIBPTR PTS TO CHAR AT WHICH TO CONTINUE AND ZERO FLAG IS RESET
              	;     IF '?' IS IN TOKEN
              	;
              	; ENTRY POINTS:
              	;	SCANER - LOAD TOKEN INTO FIRST FCB
              	;	SCANX - LOAD TOKEN INTO FCB PTED TO BY HL
              	;
E008:         	SCANER:
E008: 2198DC  		LD	HL,FCBDN 	;POINT TO FCBDN
E00B:         	SCANX:
E00B: AF      		XOR	A		;SET TEMPORRY DRIVE NUMBER TO DEFAULT
E00C: 32FFDF  		LD	(TEMPDR),A
E00F: CD51DF  		CALL	ADVAN		;SKIP TO NON-BLANK OR END OF LINE
E012: ED5358DC		LD	(CIPTR),DE	;SET PTR TO NON-BLANK OR END OF LINE
E016: 1A      		LD	A,(DE)		;END OF LINE?
E017: B7      		OR	A		;0=YES
E018: 280A    		JR	Z,SCAN2
E01A: DE40    		SBC	A,'A'-1		;CONVERT POSSIBLE DRIVE SPEC TO NUMBER
E01C: 47      		LD	B,A		;STORE NUMBER (A:=0, B:=1, ETC) IN B
E01D: 13      		INC	DE		;PT TO NEXT CHAR
E01E: 1A      		LD	A,(DE)		;SEE IF IT IS A COLON (:)
E01F: FE3A    		CP	':'
E021: 2807    		JR	Z,SCAN3		;YES, WE HAVE A DRIVE SPEC
E023: 1B      		DEC	DE		;NO, BACK UP PTR TO FIRST NON-BLANK CHAR
E024:         	SCAN2:
E024: 3A7EDE  		LD	A,(TDRIVE)	;SET 1ST BYTE OF FCBDN AS DEFAULT DRIVE
E027: 77      		LD	(HL),A
E028: 1806    		JR	SCAN4
E02A:         	SCAN3:
E02A: 78      		LD	A,B		;WE HAVE A DRIVE SPEC
E02B: 32FFDF  		LD	(TEMPDR),A	;SET TEMPORRY DRIVE
E02E: 70      		LD	(HL),B		;SET 1ST BYTE OF FCBDN AS SPECIFIED DRIVE
E02F: 13      		INC	DE		;PT TO BYTE AFTER ':'
              	;
              	; EXTRACT FILENAME FROM POSSIBLE FILENAME.TYP
              	;
E030:         	SCAN4:
E030: AF      		XOR	A		;A=0
E031: 32BBDC  		LD	(QMCNT),A	;INIT COUNT OF NUMBER OF QUESTION MARKS IN FCB
E034: 0608    		LD	B,8		;MAX OF 8 CHARS IN FILE NAME
E036: CD58E0  		CALL	SCANF		;FILL FCB FILE NAME
              	;
              	; EXTRACT FILE TYPE FROM POSSIBLE FILENAME.TYP
              	;
E039: 0603    		LD	B,3		;PREPARE TO EXTRACT TYPE
E03B: FE2E    		CP	'.'		;IF (DE) DELIMITER IS A '.', WE HAVE A TYPE
E03D: 2006    		JR	NZ,SCAN15	;FILL FILE TYPE BYTES WITH <SP>
E03F: 13      		INC	DE		;PT TO CHAR IN COMMAND LINE AFTER '.'
E040: CD58E0  		CALL	SCANF		;FILL FCB FILE TYPE
E043: 1803    		JR	SCAN16		;SKIP TO NEXT PROCESSING
E045:         	SCAN15:
E045: CD79E0  		CALL	SCANF4		;SPACE FILL
              	;
              	; FILL IN EX, S1, S2, AND RC WITH ZEROES
              	;
E048:         	SCAN16:
E048: 0604    		LD	B,4		;4 BYTES
E04A:         	SCAN17:
E04A: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
E04B: 3600    		LD	(HL),0
E04D: 10FB    		DJNZ	SCAN17
              	;
              	; SCAN COMPLETE -- DE PTS TO DELIMITER BYTE AFTER TOKEN
              	;
E04F: ED5356DC		LD	(CIBPTR),DE
              	;
              	; SET ZERO FLAG TO INDICATE PRESENCE OF '?' IN FILENAME.TYP
              	;
E053: 3ABBDC  		LD	A,(QMCNT)	;GET NUMBER OF QUESTION MARKS
E056: B7      		OR	A		;SET ZERO FLAG TO INDICATE ANY '?'
E057: C9      		RET
              	;
              	;  SCANF -- SCAN TOKEN PTED TO BY DE FOR A MAX OF B BYTES; PLACE IT INTO
              	;    FILE NAME FIELD PTED TO BY HL; EXPAND AND INTERPRET WILD CARDS OF
              	;    '*' AND '?'; ON EXIT, DE PTS TO TERMINATING DELIMITER
              	;
E058:         	SCANF:
E058: CD34DF  		CALL	SDELM		;DONE IF DELIMITER ENCOUNTERED - <SP> FILL
E05B: 281C    		JR	Z,SCANF4
E05D: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
E05E: FE2A    		CP	'*'		;IS (DE) A WILD CARD?
E060: 2007    		JR	NZ,SCANF1	;CONTINUE IF NOT
E062: 363F    		LD	(HL),'?'	;PLACE '?' IN FCBDN AND DON'T ADVANCE DE IF SO
E064: CD7FE0  		CALL	SCQ		;SCANNER COUNT QUESTION MARKS
E067: 1807    		JR	SCANF2
E069:         	SCANF1:
E069: 77      		LD	(HL),A		;STORE FILENAME CHAR IN FCBDN
E06A: 13      		INC	DE		;PT TO NEXT CHAR IN COMMAND LINE
E06B: FE3F    		CP	'?'		;CHECK FOR QUESTION MARK (WILD)
E06D: CC7FE0  		CALL	Z,SCQ		;SCANNER COUNT QUESTION MARKS
E070:         	SCANF2:
E070: 10E6    		DJNZ	SCANF		;DECREMENT CHAR COUNT UNTIL 8 ELAPSED
E072:         	SCANF3:
E072: CD34DF  		CALL	SDELM		;8 CHARS OR MORE - SKIP UNTIL DELIMITER
E075: C8      		RET	Z		;ZERO FLAG SET IF DELIMITER FOUND
E076: 13      		INC	DE		;PT TO NEXT CHAR IN COMMAND LINE
E077: 18F9    		JR	SCANF3
              	;
              	;  FILL MEMORY POINTED TO BY HL WITH SPACES FOR B BYTES
              	;
E079:         	SCANF4:
E079: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
E07A: 3620    		LD	(HL),' '	;FILL FILENAME PART WITH <SP>
E07C: 10FB    		DJNZ	SCANF4
E07E: C9      		RET
              	;
              	;  INCREMENT QUESTION MARK COUNT FOR SCANNER
              	;    THIS ROUTINE INCREMENTS THE COUNT OF THE NUMBER OF QUESTION MARKS IN
              	;    THE CURRENT FCB ENTRY
              	;
E07F:         	SCQ:
E07F: 3ABBDC  		LD	A,(QMCNT)	;GET COUNT
E082: 3C      		INC	A		;INCREMENT
E083: 32BBDC  		LD	(QMCNT),A	;PUT COUNT
E086: C9      		RET
              	;
              	; CMDTBL (COMMAND TABLE) SCANNER
              	;   ON RETURN, HL PTS TO ADDRESS OF COMMAND IF CPR-RESIDENT
              	;   ON RETURN, ZERO FLAG SET MEANS CPR-RESIDENT COMMAND
              	;
E087:         	CMDSER:
E087: 215FDD  		LD	HL,CMDTBL	;PT TO COMMAND TABLE
              	;
              		IF	SECURE
              		LD	C,NRCMDS
              		LD	A,(WHEEL)	;SEE IF NON-RESTRCTED
              		CP	RESTRCT
              		JR	Z,CMS1		;PASS IF RESTRCTED
              		ENDIF			;SECURE
              	;
E08A: 0E0B    		LD	C,NCMNDS	;SET COMMAND COUNTER
E08C:         	CMS1:
E08C: 1199DC  		LD	DE,FCBFN 	;PT TO STORED COMMAND NAME
E08F: 0604    		LD	B,NCHARS	;NUMBER OF CHARS/COMMAND (8 MAX)
E091:         	CMS2:
E091: 1A      		LD	A,(DE)		;COMPARE AGAINST TABLE ENTRY
E092: BE      		CP	(HL)
E093: 200A    		JR	NZ,CMS3		;NO MATCH
E095: 13      		INC	DE		;PT TO NEXT CHAR
E096: 23      		INC	HL
E097: 10F8    		DJNZ	CMS2		;COUNT DOWN
E099: 1A      		LD	A,(DE)		;NEXT CHAR IN INPUT COMMAND MUST BE <SP>
E09A: FE20    		CP	' '
E09C: 2004    		JR	NZ,CMS4
E09E: C9      		RET			;COMMAND IS CPR-RESIDENT (ZERO FLAG SET)
E09F:         	CMS3:
E09F: 23      		INC	HL		;SKIP TO NEXT COMMAND TABLE ENTRY
E0A0: 10FD    		DJNZ	CMS3
E0A2:         	CMS4:
E0A2: 23      		INC	HL		;SKIP ADDRESS
E0A3: 23      		INC	HL
E0A4: 0D      		DEC	C		;DECREMENT TABLE ENTRY NUMBER
E0A5: 20E5    		JR	NZ,CMS1
E0A7: 0C      		INC	C		;CLEAR ZERO FLAG
E0A8: C9      		RET			;COMMAND IS DISK-RESIDENT (ZERO FLAG CLEAR)
              	;
              	;**** Section 5 ****
              	; CPR-Resident Commands
              	;
              	;
              	;Section 5A
              	;Command: DIR
              	;Function:  To display a directory of the files on disk
              	;Forms:
              	;	DIR <afn>	Displays the DIR files
              	;	DIR <afn> S	Displays the SYS files
              	;	DIR <afn> A	Display both DIR and SYS files
              	;
              		IF	CPRDIR
              	;
E0A9:         	DIR:
E0A9: 3E80    		LD	A,80H		;SET SYSTEM BIT EXAMINATION
E0AB: F5      		PUSH	AF
E0AC: CD08E0  		CALL	SCANER		;EXTRACT POSSIBLE D:FILENAME.TYP TOKEN
E0AF: CDEADF  		CALL	SLOGIN		;LOG IN DRIVE IF NECESSARY
E0B2: 2199DC  		LD	HL,FCBFN 	;MAKE FCB WILD (ALL '?') IF NO FILENAME.TYP
E0B5: 7E      		LD	A,(HL)		;GET FIRST CHAR OF FILENAME.TYP
E0B6: FE20    		CP	' '		;IF <SP>, ALL WILD
E0B8: CC52E1  		CALL	Z,FILLQ
E0BB: CD51DF  		CALL	ADVAN		;LOOK AT NEXT INPUT CHAR
E0BE: 0600    		LD	B,0		;SYS TOKEN DEFAULT
E0C0: 2816    		JR	Z,DIR2		;JUMP; THERE ISN'T ONE
E0C2: FE41    		CP	SYSFLG		;SYSTEM FLAG SPECIFIER?
E0C4: 2806    		JR	Z,GOTSYS	;GOT SYSTEM SPECIFIER
E0C6: FE53    		CP	SOFLG		;SYS ONLY?
E0C8: 200E    		JR	NZ,DIR2
E0CA: 0680    		LD	B,80H		;FLAG SYS ONLY
E0CC:         	GOTSYS:
E0CC: 13      		INC	DE
E0CD: ED5356DC		LD	(CIBPTR),DE
E0D1: FE53    		CP	SOFLG		;SYS ONLY SPEC?
E0D3: 2803    		JR	Z,DIR2		;THEN LEAVE BIT SPEC UNCHAGNED
E0D5: F1      		POP	AF		;GET FLAG
E0D6: AF      		XOR	A		;SET NO SYSTEM BIT EXAMINATION
E0D7: F5      		PUSH	AF 
E0D8:         	DIR2:
E0D8: F1      		POP	AF		;GET FLAG
E0D9:         	DIR2A:
              					;DROP INTO DIRPR TO PRINT DIRECTORY
              					; THEN RESTART CPR
              		ENDIF			;CPRDIR
              	;
              	; DIRECTORY PRINT ROUTINE; ON ENTRY, MSB OF A IS 1 (80H) IF SYSTEM FILES
              	; EXCLUDED. THIS ROUTINE IS ALSO USED BY ERA.
              	;
E0D9:         	DIRPR:
E0D9: 57      		LD	D,A		;STORE SYSTEM FLAG IN D
E0DA: 1E00    		LD	E,0		;SET COLUMN COUNTER TO ZERO
E0DC: D5      		PUSH	DE		;SAVE COLUMN COUNTER (E) AND SYSTEM FLAG (D)
E0DD: 78      		LD	A,B		;SYS ONLY SPECIFIER
E0DE: 32F9E0  		LD	(SYSTST),A
E0E1: CD49DE  		CALL	SEARF		;SEARCH FOR SPECIFIED FILE (FIRST OCCURRANCE)
E0E4: CC54DD  		CALL	Z,PRNNF		;PRINT NO FILE MSG;REG A NOT CHANGED
              	;
              	; ENTRY SELECTION LOOP; ON ENTRY, A=OFFSET FROM SEARF OR SEARN
              	;
E0E7:         	DIR3:
E0E7: 2867    		JR	Z,DIR11		;DONE IF ZERO FLAG SET
E0E9: 3D      		DEC	A		;ADJUST TO RETURNED VALUE
E0EA: 0F      		RRCA			;CONVERT NUMBER TO OFFSET INTO TBUFF
E0EB: 0F      		RRCA
E0EC: 0F      		RRCA
E0ED: E660    		AND	60H
E0EF: 4F      		LD	C,A		;OFFSET INTO TBUFF IN C (C=OFFSET TO ENTRY)
E0F0: 3E0A    		LD	A,10		;ADD 10 TO PT TO SYSTEM FILE ATTRIBUTE BIT
E0F2: CDE1DF  		CALL	DIRPTR
E0F5: D1      		POP	DE		;GET SYSTEM BIT MASK FROM D
E0F6: D5      		PUSH	DE
E0F7: A2      		AND	D		;MASK FOR SYSTEM BIT
E0F9:         	SYSTST	EQU	$+1		;POINTER TO IN-THE-CODE BUFFER SYSTST
E0F8: FE00    		CP	0
E0FA: 204A    		JR	NZ,DIR10
E0FC: D1      		POP	DE		;GET ENTRY COUNT (=<CR> COUNTER)
E0FD: 7B      		LD	A,E		;ADD 1 TO IT
E0FE: 1C      		INC	E
E0FF: D5      		PUSH	DE		;SAVE IT
              	;
              		IF	TWOCOL
              		AND	01H		;OUTPUT <CRLF> IF 2 ENTRIES PRINTED IN LINE
              		ENDIF			;TWOCOL
              	;
              		IF	TWOCOL
              	        ELSE
E101:         	TWOPOK	EQU	$+1		;FOR APPLE PATCHING
E100: E603    		AND	03H		;OUTPUT <CRLF> IF 4 ENTRIES PRINTED IN LINE
              		ENDIF			;NOT TWOCOL
              	;
E102: F5      		PUSH	AF
E103: 2005    		JR	NZ,DIR4
E105: CDA1DD  		CALL	CRLF		;NEW LINE
E108: 1808    		JR	DIR5
E10A:         	DIR4:
E10A: CD0FDE  		CALL	PRINT
              	;
              		IF	WIDE
E10D: 2020    		DEFM	'  '		;2 SPACES
E10F: 7C      		DEFB	FENCE		;THEN FENCE CHAR
E110: 20A0    		DEFB	' ',' '+80H	;THEN 2 MORE SPACES
              	;	ENDIF
              	;
              	        ELSE
              		DEFB	' '		;SPACE
              		DEFB	FENCE		;THEN FENCE CHAR
              		DEFB	' '+80H		;THEN SPACE
              		ENDIF
              	;
E112:         	DIR5:
E112: 0601    		LD	B,01H		;PT TO 1ST BYTE OF FILE NAME
E114:         	DIR6:
E114: 78      		LD	A,B		;A=OFFSET
E115: CDE1DF  		CALL	DIRPTR		;HL NOW PTS TO 1ST BYTE OF FILE NAME
E118: E67F    		AND	7FH		;MASK OUT MSB
E11A: FE20    		CP	' '		;NO FILE NAME?
E11C: 2013    		JR	NZ,DIR8		;PRINT FILE NAME IF PRESENT
E11E: F1      		POP	AF
E11F: F5      		PUSH	AF
E120: FE03    		CP	03H
E122: 200B    		JR	NZ,DIR7
E124: 3E09    		LD	A,09H		;PT TO 1ST BYTE OF FILE TYPE
E126: CDE1DF  		CALL	DIRPTR		;HL NOW PTS TO 1ST BYTE OF FILE TYPE
E129: E67F    		AND	7FH		;MASK OUT MSB
E12B: FE20    		CP	' '		;NO FILE TYPE?
E12D: 2816    		JR	Z,DIR9		;CONTINUE IF SO
E12F:         	DIR7:
E12F: 3E20    		LD	A,' '		;OUTPUT <SP>
E131:         	DIR8:
E131: CDA8DD  		CALL	CONOUT		;PRINT CHAR
E134: 04      		INC	B		;INCR CHAR COUNT
E135: 78      		LD	A,B
E136: FE0C    		CP	12		;END OF FILENAME.TYP?
E138: 300B    		JR	NC,DIR9		;CONTINUE IF SO
E13A: FE09    		CP	09H		;END IF FILENAME ONLY?
E13C: 20D6    		JR	NZ,DIR6		;PRINT TYP IF SO
E13E: 3E2E    		LD	A,'.'		;PRINT DOT BETWEEN FILE NAME AND TYPE
E140: CDA8DD  		CALL	CONOUT
E143: 18CF    		JR	DIR6
E145:         	DIR9:
E145: F1      		POP	AF
E146:         	DIR10:
E146: CD06DF  		CALL	BREAK		;CHECK FOR ABORT
E149: 2005    		JR	NZ,DIR11
E14B: CD50DE  		CALL	SEARN		;SEARCH FOR NEXT FILE
E14E: 1897    		JR	DIR3		;CONTINUE
E150:         	DIR11:
E150: D1      		POP	DE		;RESTORE STACK
E151: C9      		RET
              	;
              	; FILL FCB @HL WITH '?'
              	;
E152:         	FILLQ:
E152: 060B    		LD	B,11		;NUMBER OF CHARS IN FN & FT
E154:         	FQLP:
E154: 363F    		LD	(HL),'?'	;STORE '?'
E156: 23      		INC	HL
E157: 10FB    		DJNZ	FQLP
E159: C9      		RET
              	;
              	;Section 5B
              	;Command: ERA
              	;Function:  Erase files
              	;Forms:
              	;	ERA <afn>	Erase Specified files and print their names
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
E15A:         	ERA:
E15A: CD08E0  		CALL	SCANER		;PARSE FILE SPECIFICATION
E15D: FE0B    		CP	11		;ALL WILD (ALL FILES = 11 '?')?
E15F: 2012    		JR	NZ,ERA1		;IF NOT, THEN DO ERASES
E161: CD0ADE  		CALL	PRINTC
E164: 416C6C  		DEFM	'All'
E167: BF      		DEFB	'?'+80H
E168: CDB5DD  		CALL	CONIN		;GET REPLY
E16B: FE59    		CP	'Y'		;YES?
E16D:         	ERARJ:
E16D: C2F2DC  		JP	NZ,RESTRT	;RESTART CPR IF NOT
E170: CDA1DD  		CALL	CRLF		;NEW LINE
E173:         	ERA1:
E173: CDEADF  		CALL	SLOGIN		;LOG IN SELECTED DISK IF ANY
E176: AF      		XOR	A		;PRINT ALL FILES (EXAMINE SYSTEM BIT)
E177: 47      		LD	B,A		;NO SYS-ONLY OPT TO DIRPR
E178: CDD9E0  		CALL	DIRPR		;PRINT DIRECTORY OF ERASED FILES
              	;
              		IF	EPRMPT
              	;
              	;  QUERY USER AFTER FILES ARE SEEN, AND GIVE ONE LAST CHANCE TO BACK OUT
              	;
              		LD	A,E		;HOW MANY FILES DISPLAYED?
              		OR	A
              		JP	Z,RESTRT	;IF NONE, DON'T ASK OR DELETE
              		CALL	PRINTC		;PROMPT
              		DEFM	'Ok'
              		DEFB	'?'+80H
              		CALL	CONIN		;GET REPLY FOLDED
              		CP	'Y'		;YES?
              		JR	NZ,ERARJ	;GET OUT IF NOT
              		ENDIF			;EPRMPT
              	;
E17B: 1198DC  		LD	DE,FCBDN 	;DELETE FILE(S) SPECIFIED
E17E: C35FDE  		JP	DELETE		;RESTART CPR AFTER DELETE
              	;
              		ENDIF			;RAS
              	;
              	;Section 5C
              	;Command: LIST
              	;Function:  Print out specified file on the LST: Device
              	;Forms:
              	;	LIST <ufn>	Print file (NO Paging)
              	;
              		IF	CPRLST
E181:         	LIST:
E181: 3EFF    		LD	A,0FFH		;TURN ON PRINTER FLAG
E183: 1801    		JR	TYPE0
              		ENDIF			;CPRLST
              	;
              	;Section 5D
              	;Command: TYPE
              	;Function:  Print out specified file on the CON: Device
              	;Forms:
              	;	TYPE <ufn>	Print file
              	;	TYPE <ufn> P	Print file with paging flag	
              	;
              		IF	CPRTYP
E185:         	TYPE:
              		ENDIF			;CPRTYP
              	;
              		IF	CPRTYP AND CPRLST
E185: AF      		XOR	A		;TURN OFF PRINTER FLAG
              	;
              	; ENTRY POINT FOR CPR LIST FUNCTION (LIST)
              	;
E186:         	TYPE0:
E186: 32D2DD  		LD	(PRFLG),A	;SET FLAG
              		ENDIF			;CPRTYP AND CPRLST
              	;
              		IF	CPRTYP
E189: CD08E0  		CALL	SCANER		;EXTRACT FILENAME.TYP TOKEN
E18C: C217DF  		JP	NZ,ERROR	;ERROR IF ANY QUESTION MARKS
E18F: CD51DF  		CALL	ADVAN		;GET PGDFLG IF IT'S THERE
E192: 32EFDD  		LD	(PGFLG),A	;SAVE IT AS A FLAG
E195: 2805    		JR	Z,NOSLAS	;JUMP IF INPUT ENDED
E197: 13      		INC	DE		;PUT NEW BUF POINTER
E198: EB      		EX	DE,HL
E199: 2256DC  		LD	(CIBPTR),HL
E19C:         	NOSLAS:
E19C: CDEADF  		CALL	SLOGIN		;LOG IN SELECTED DISK IF ANY
E19F: CD37DE  		CALL	OPENF		;OPEN SELECTED FILE
E1A2: CA0FE2  		JP	Z,TYPE4		;ABORT IF ERROR
E1A5: CDA1DD  		CALL	CRLF		;NEW LINE
E1A8: 3E17    		LD	A,NLINES-1	;SET LINE COUNT
E1AA: 32B9DC  		LD	(PAGCNT),A
E1AD: 21BADC  		LD	HL,CHRCNT	;SET CHAR POSITION/COUNT
E1B0: 36FF    		LD	(HL),0FFH	;EMPTY LINE
E1B2: 0600    		LD	B,0		;SET TAB CHAR COUNTER
E1B4:         	TYPE1:
E1B4: 21BADC  		LD	HL,CHRCNT	;PT TO CHAR POSITION/COUNT
E1B7: 7E      		LD	A,(HL)		;END OF BUFFER?
E1B8: FE80    		CP	80H
E1BA: 3809    		JR	C,TYPE2
E1BC: E5      		PUSH	HL		;READ NEXT BLOCK
E1BD: CDFEDD  		CALL	READF
E1C0: E1      		POP	HL
E1C1: 204A    		JR	NZ,TYPE3	;ERROR?
E1C3: AF      		XOR	A		;RESET COUNT
E1C4: 77      		LD	(HL),A
E1C5:         	TYPE2:
E1C5: 34      		INC	(HL)		;INCREMENT CHAR COUNT
E1C6: 218000  		LD	HL,TBUFF 	;PT TO BUFFER
E1C9: CD5EDF  		CALL	ADDAH		;COMPUTE ADDRESS OF NEXT CHAR FROM OFFSET
E1CC: 7E      		LD	A,(HL)		;GET NEXT CHAR
E1CD: E67F    		AND	7FH		;MASK OUT MSB
E1CF: FE1A    		CP	1AH		;END OF FILE (^Z)?
E1D1: C8      		RET	Z		;RESTART CPR IF SO
              	;
              	; OUTPUT CHAR TO CON: OR LST: DEVICE WITH TABULATION
              	;
              		IF	WSTYPE		;WORDSTAR HYPHEN CHECK
E1D2: FE1F    		CP	1FH		;IS CHAR WORDSTAR EOL HYPHEN?
E1D4: 2002    		JR	NZ,NOHYPH	;PASS IF NOT
E1D6: 3E2D    		LD	A,'-'		;YES, MAKE IT A REAL HYPHEN
E1D8:         	NOHYPH:
              		ENDIF			;WSTYPE
              	;
E1D8: FE20    		CP	' '		;IS CHAR CONTROL CODE?
E1DA: 3023    		JR	NC,PRT		;GO BOP CHAR COUNT AND PRINT IF NOT
E1DC: FE0D    		CP	CR		;IS CHAR A CR?
E1DE: 281D    		JR	Z,YESCR		;IF SO, GO ZERO B THEN PRINT
E1E0: FE0C    		CP	FFEED		;FORM FEED?
E1E2: 2819    		JR	Z,YESCR		;MANY PRINTERS RETURN CARRIAGE ON THIS
E1E4: FE0A    		CP	LF		;LINE FEED?
E1E6: 2818    		JR	Z,NOBOP		;PRINT, BUT DON'T BOP B
E1E8: FE07    		CP	BEL		;BELL?
E1EA: 2814    		JR	Z,NOBOP		;GO RING BUT DON'T BOP B
E1EC: FE09    		CP	TAB		;TAB?
E1EE: 2013    		JR	NZ,TYPE2L	;IF NOT, NO OTHER CHOICES, TOSS CONTROL
E1F0:         	LTAB:
E1F0: 3E20    		LD	A,' '		;<SP>
E1F2: CDD0DD  		CALL	LCOUT
E1F5: 04      		INC	B		;INCR POS COUNT
E1F6: 78      		LD	A,B
E1F7: E607    		AND	7
E1F9: 20F5    		JR	NZ,LTAB
E1FB: 1806    		JR	TYPE2L
              	;
E1FD: 06FF    	YESCR:	LD	B,0FFH		;COMBINE WITH INC BELOW TO GET ZERO
              	;
E1FF: 04      	PRT:	INC	B		;INCREMENT CHAR COUNT
E200: CDD0DD  	NOBOP:	CALL	LCOUT		;PRINT IT
              	;
              	; CONTINUE PROCESSING
              	;
              	;
E203:         	TYPE2L:
E203: CD06DF  		CALL	BREAK		;CHECK FOR ABORT
E206: 28AC    		JR	Z,TYPE1		;CONTINUE IF NO CHAR
E208: FE03    		CP	'C'-'@' 	;^C?
E20A: C8      		RET	Z		;RESTART IF SO
E20B: 18A7    		JR	TYPE1
E20D:         	TYPE3:
E20D: 3D      		DEC	A		;NO ERROR?
E20E: C8      		RET	Z		;RESTART CPR
E20F:         	TYPE4:
E20F: C3FAE3  		JP	ERRLOG
              		ENDIF			;CPRTYP
              	;
              	;Section 5E
              	;Command: SAVE
              	;Function:  To save the contents of the TPA onto disk as a file
              	;Forms:
              	;	SAVE <Number of Pages> <ufn>
              	;				Save specified number of pages (start at 100H)
              	;				from TPA into specified file; <Number of
              	;				Pages> is in DEC
              	;	SAVE <Number of Sectors> <ufn> S
              	;				Like SAVE above, but numeric argument specifies
              	;				number of sectors rather than pages
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
E212:         	SAVE:
E212: CD63DF  		CALL	NUMBER		;EXTRACT NUMBER FROM COMMAND LINE
E215: 6F      		LD	L,A		;HL=PAGE COUNT
E216: 2600    		LD	H,0
E218: E5      		PUSH	HL		;SAVE PAGE COUNT
E219: CD68E2  		CALL	EXTEST		;TEST FOR EXISTENCE OF FILE AND ABORT IF SO
E21C: 0E16    		LD	C,16H		;BDOS MAKE FILE
E21E: CD40DE  		CALL	GRBDOS
E221: E1      		POP	HL		;GET PAGE COUNT
E222: 2841    		JR	Z,SAVE3		;ERROR?
E224: AF      		XOR	A		;SET RECORD COUNT FIELD OF NEW FILE'S FCB
E225: 32B8DC  		LD	(FCBCR),A
E228: CD51DF  		CALL	ADVAN		;LOOK FOR 'S' FOR SECTOR OPTION
E22B: 13      		INC	DE		;PT TO AFTER 'S' TOKEN
E22C: FE53    		CP	SECTFLG
E22E: 2802    		JR	Z,SAVE0
E230: 1B      		DEC	DE		;NO 'S' TOKEN, SO BACK UP
E231: 29      		ADD	HL,HL		;DOUBLE IT FOR HL=SECTOR (128 BYTES) COUNT
E232:         	SAVE0:
E232: ED5356DC		LD	(CIBPTR),DE	;SET PTR TO BAD TOKEN OR AFTER GOOD TOKEN
E236: 110001  		LD	DE,TPA		;PT TO START OF SAVE AREA (TPA)
E239:         	SAVE1:
E239: 7C      		LD	A,H		;DONE WITH SAVE?
E23A: B5      		OR	L		;HL=0 IF SO
E23B: 2818    		JR	Z,SAVE2
E23D: 2B      		DEC	HL		;COUNT DOWN ON SECTORS
E23E: E5      		PUSH	HL		;SAVE PTR TO BLOCK TO SAVE
E23F: 218000  		LD	HL,128		;128 BYTES PER SECTOR
E242: 19      		ADD	HL,DE		;PT TO NEXT SECTOR
E243: E5      		PUSH	HL		;SAVE ON STACK
E244: CD29DE  		CALL	DMASET		;SET DMA ADDRESS FOR WRITE (ADDRESS IN DE)
E247: 1198DC  		LD	DE,FCBDN 	;WRITE SECTOR
E24A: 0E15    		LD	C,15H		;BDOS WRITE SECTOR
E24C: CD03DE  		CALL	BDOSB		;SAVE BC
E24F: D1      		POP	DE		;GET PTR TO NEXT SECTOR IN DE
E250: E1      		POP	HL		;GET SECTOR COUNT
E251: 28E6    		JR	Z,SAVE1		;CONTINUE IF NO WRITE ERROR
E253: 1809    		JR	PRNLE		;GO PRINT ERROR AND RESET DMA
E255:         	SAVE2:
E255: 1198DC  		LD	DE,FCBDN 	;CLOSE SAVED FILE
E258: CD45DE  		CALL	CLOSE
E25B: 3C      		INC	A		;ERROR?
E25C: 2007    		JR	NZ,SAVE3	;PASS IF OK
              	;
              	;  PRNLE IS ALSO USED BY MEMLOAD FOR TPA FULL ERROR
              	;
E25E: CD0ADE  	PRNLE:	CALL	PRINTC		;DISK OR MEM FULL
E261: 46756C  		DEFM	'Ful'
E264: EC      		DEFB	'l'+80H
              	;
E265: C326DE  	SAVE3:	JP	DEFDMA		;SET DMA TO 0080 AND RESTART CPR
              					; OR RETURN TO MLERR
              	;
              	; Test File in FCB for existence, ask user to delete if so, and abort if he
              	;  choses not to
              	;
E268:         	EXTEST:
E268: CD08E0  		CALL	SCANER		;EXTRACT FILE NAME
E26B: C217DF  		JP	NZ,ERROR	;'?' IS NOT PERMITTED
E26E: CDEADF  		CALL	SLOGIN		;LOG IN SELECTED DISK
E271: CD49DE  		CALL	SEARF		;LOOK FOR SPECIFIED FILE
E274: 1198DC  		LD	DE,FCBDN	;PT TO FILE FCB
E277: C8      		RET	Z		;OK IF NOT FOUND
E278: D5      		PUSH	DE		;SAVE PTR TO FCB
E279: CD0ADE  		CALL	PRINTC
E27C: 44656C65		DEFM	'Delete File'
E280: 74652046	
E284: 696C65  	
E287: BF      		DEFB	'?'+80H
E288: CDB5DD  		CALL	CONIN		;GET RESPONSE
E28B: D1      		POP	DE		;GET PTR TO FCB
E28C: FE59    		CP	'Y'		;KEY ON YES
E28E: C240DD  		JP	NZ,RSTCPR	;RESTART IF NO, SP RESET EVENTUALLY
E291: D5      		PUSH	DE		;SAVE PTR TO FCB
E292: CD5FDE  		CALL	DELETE		;DELETE FILE
E295: D1      		POP	DE		;GET PTR TO FCB
E296: C9      		RET
              	;
              		ENDIF			;RAS
              	;
              	;Section 5F
              	;Command: REN
              	;Function:  To change the name of an existing file
              	;Forms:
              	;	REN <New ufn>=<Old ufn>	Perform function
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
E297:         	REN:
E297: CD68E2  		CALL	EXTEST		;TEST FOR FILE EXISTENCE AND RETURN
              					; IF FILE DOESN'T EXIST; ABORT IF IT DOES
E29A: 3AFFDF  		LD	A,(TEMPDR)	;SAVE CURRENT DEFAULT DISK
E29D: F5      		PUSH	AF		;SAVE ON STACK
E29E:         	REN0:
E29E: 2198DC  		LD	HL,FCBDN 	;SAVE NEW FILE NAME
E2A1: 11A8DC  		LD	DE,FCBDM
E2A4: 011000  		LD	BC,16		;16 BYTES
E2A7: EDB0    		LDIR
E2A9: CD51DF  		CALL	ADVAN		;ADVANCE CIBPTR
E2AC: FE3D    		CP	'='		;'=' OK
E2AE: 2028    		JR	NZ,REN4
E2B0:         	REN1:
E2B0: EB      		EX	DE,HL		;PT TO CHAR AFTER '=' IN HL
E2B1: 23      		INC	HL
E2B2: 2256DC  		LD	(CIBPTR),HL	;SAVE PTR TO OLD FILE NAME
E2B5: CD08E0  		CALL	SCANER		;EXTRACT FILENAME.TYP TOKEN
E2B8: 201E    		JR	NZ,REN4		;ERROR IF ANY '?'
E2BA: F1      		POP	AF		;GET OLD DEFAULT DRIVE
E2BB: 47      		LD	B,A		;SAVE IT
E2BC: 21FFDF  		LD	HL,TEMPDR	;COMPARE IT AGAINST CURRENT DEFAULT DRIVE
E2BF: 7E      		LD	A,(HL)		;MATCH?
E2C0: B7      		OR	A
E2C1: 2804    		JR	Z,REN2
E2C3: B8      		CP	B		;CHECK FOR DRIVE ERROR
E2C4: 70      		LD	(HL),B
E2C5: 2011    		JR	NZ,REN4
E2C7:         	REN2:
E2C7: 70      		LD	(HL),B
E2C8: AF      		XOR	A
E2C9: 3298DC  		LD	(FCBDN),A	;SET DEFAULT DRIVE
E2CC: 1198DC  		LD	DE,FCBDN 	;RENAME FILE
E2CF: 0E17    		LD	C,17H		;BDOS RENAME FCT
E2D1: CD40DE  		CALL	GRBDOS
E2D4: C0      		RET	NZ
E2D5:         	REN3:
E2D5: CD54DD  		CALL	PRNNF		;PRINT NO FILE MSG
E2D8:         	REN4:
E2D8: C3FAE3  		JP	ERRLOG
              	;
              		ENDIF			;RAS
              	;
              	;Section 5G
              	;Command: USER
              	;Function:  Change current USER number
              	;Forms:
              	;	USER <unum>	Select specified user number;<unum> is in DEC
              	;
              		IF	DRUSER		;IF DRIVE/USER CODE OK...
E2DB:         	USER:
E2DB: CD11DF  		CALL	USRNUM		;EXTRACT USER NUMBER FROM COMMAND LINE
E2DE: 5F      		LD	E,A		;PLACE USER NUMBER IN E
E2DF: CD6ADE  	SUSER:	CALL	SETUSR		;SET SPECIFIED USER
              		ENDIF			;DRUSER
E2E2:         	RSTJP:
E2E2: C343DD  		JP	RCPRNL		;RESTART CPR
              	;
              	;Section 5H
              	;Command: DFU
              	;Function:  Set the Default User Number for the command/file scanner
              	;	     (MEMLOAD)
              	;	    Note: When under SECURE mode, this will select the second
              	;	          user area to check for programs (normally user 15).
              	;
              	;Forms:
              	;	DFU <unum>	Select Default User Number;<unum> is in DEC
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
E2E5:         	DFU:
E2E5: CD11DF  		CALL	USRNUM		;GET USER NUMBER
E2E8: 32B7E3  		LD	(DFUSR),A	;PUT IT AWAY
E2EB: 18F5    		JR	RSTJP		;RESTART CPR (NO DEFAULT LOGIN)
              		ENDIF			;NOT RAS
              	;
              	;Section 5I
              	;Command: JUMP
              	;Function:  To Call the program (subroutine) at the specified address
              	;	     without loading from disk
              	;Forms:
              	;	JUMP <adr>		Call at <adr>;<adr> is in HEX
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
E2ED:         	JUMP:
E2ED: CDA1DF  		CALL	HEXNUM		;GET LOAD ADDRESS IN HL
E2F0: 1844    		JR	CALLPROG	;PERFORM CALL
              	;
              		ENDIF			;RAS
              	;
              	;Section 5J
              	;Command: GO
              	;Function:  To Call the program in the TPA without loading
              	;	     loading from disk. Same as JUMP 100H, but much
              	;	     more convenient, especially when used with
              	;	     parameters for programs like STAT. Also can be
              	;	     allowed on remote-access systems with no problems.
              	;
              	;Form:
              	;	GO <parameters like for COMMAND>
              	;
              		IF	RAS		;ONLY IF RAS
              	        ELSE
              	;
E2F2: 210001  	GO:	LD	HL,TPA		;Always to TPA
E2F5: 183F    		JR	CALLPROG	;Perform call
              	;
              		ENDIF			;END OF GO FOR RAS
              	;
              	;Section 5K
              	;Command: COM file processing
              	;Function:  To load the specified COM file from disk and execute it
              	;Forms:
              	;	<command>
              	;
E2F7:         	COM:
E2F7: 3A99DC  		LD	A,(FCBFN)	;ANY COMMAND?
E2FA: FE20    		CP	' '		;' ' MEANS COMMAND WAS 'D:' TO SWITCH
E2FC: 201D    		JR	NZ,COM1		;NOT <SP>, SO MUST BE TRANSIENT OR ERROR
E2FE: 3AFFDF  		LD	A,(TEMPDR)	;LOOK FOR DRIVE SPEC
E301: B7      		OR	A		;IF ZERO, JUST BLANK
E302: 28DE    		JR	Z,RSTJP
E304: 3D      		DEC	A		;ADJUST FOR LOG IN
E305: 327EDE  		LD	(TDRIVE),A	;SET DEFAULT DRIVE
E308: CD7DDE  		CALL	SETU0D		;SET DRIVE WITH USER 0
E30B: CD32DE  		CALL	LOGIN		;LOG IN DRIVE
              	;
              		IF	DRUSER		;DRIVE/USER HACKERY OK?
E30E: CD11DF  		CALL	USRNUM		;GET USER #, IF ANY
E311: 5F      		LD	E,A		;GET IT READY FOR BDOS
E312: 3A99DC  		LD	A,(FCBFN)	;SEE IF # SPECIFIED
E315: FE20    		CP	' '
E317: 20C6    		JR	NZ,SUSER	;SELECT IF WANTED
              		ENDIF			;DRUSER
              	;
E319: 18C7    		JR	RSTJP		;RESTART CPR
E31B:         	COM1:
E31B: 3AA1DC  		LD	A,(FCBFT)	;FILE TYPE MUST BE BLANK
E31E: FE20    		CP	' '
E320: C217DF  		JP	NZ,ERROR
E323: 2174DC  		LD	HL,COMMSG	;PLACE DEFAULT FILE TYPE (COM) INTO FCB
E326: 11A1DC  		LD	DE,FCBFT	;COPY INTO FILE TYPE
E329: 010300  		LD	BC,3		;3 BYTES
E32C: EDB0    		LDIR
E32E: 210001  		LD	HL,TPA		;SET EXECUTION/LOAD ADDRESS
E331: E5      		PUSH	HL		;SAVE FOR EXECUTION
E332: CDA2E3  		CALL	MEMLOAD		;LOAD MEMORY WITH FILE SPECIFIED IN CMD LINE
              					; (NO RETURN IF ERROR OR TOO BIG)
E335: E1      		POP	HL		;GET EXECUTION ADDRESS
              	;
              	; CALLPROG IS THE ENTRY POINT FOR THE EXECUTION OF THE LOADED
              	;   PROGRAM. ON ENTRY TO THIS ROUTINE, HL MUST CONTAIN THE EXECUTION
              	;   ADDRESS OF THE PROGRAM (SUBROUTINE) TO EXECUTE
              	;
E336:         	CALLPROG:
E336: 2289E3  		LD	(EXECADR),HL	;PERFORM IN-LINE CODE MODIFICATION
E339: CDF4DF  		CALL	DLOGIN		;LOG IN DEFAULT DRIVE
E33C: CD08E0  		CALL	SCANER		;SEARCH COMMAND LINE FOR NEXT TOKEN
E33F: 21FFDF  		LD	HL,TEMPDR	;SAVE PTR TO DRIVE SPEC
E342: E5      		PUSH	HL
E343: 7E      		LD	A,(HL)		;SET DRIVE SPEC
E344: 3298DC  		LD	(FCBDN),A
E347: 21A8DC  		LD	HL,FCBDN+10H	;PT TO 2ND FILE NAME
E34A: CD0BE0  		CALL	SCANX		;SCAN FOR IT AND LOAD IT INTO FCBDN+16
E34D: E1      		POP	HL		;SET UP DRIVE SPECS
E34E: 7E      		LD	A,(HL)
E34F: 32A8DC  		LD	(FCBDM),A
E352: AF      		XOR	A
E353: 32B8DC  		LD	(FCBCR),A
E356: 115C00  		LD	DE,TFCB		;COPY TO DEFAULT FCB
E359: 2198DC  		LD	HL,FCBDN 	;FROM FCBDN
E35C: 012100  		LD	BC,33		;SET UP DEFAULT FCB
E35F: EDB0    		LDIR
E361: 2104DC  		LD	HL,CIBUFF-1
E364:         	COM4:
E364: 23      		INC	HL
E365: 7E      		LD	A,(HL)		;SKIP TO END OF 2ND FILE NAME
E366: B7      		OR	A		;END OF LINE?
E367: 2804    		JR	Z,COM5
E369: FE20    		CP	' '		;END OF TOKEN?
E36B: 20F7    		JR	NZ,COM4
              	;
              	; LOAD COMMAND LINE INTO TBUFF
              	;
E36D:         	COM5:
E36D: 06FF    		LD	B,-1		;SET CHAR COUNT
E36F: 118000  		LD	DE,TBUFF	;PT TO CHAR POS
E372: 2B      		DEC	HL
E373:         	COM6:
E373: 04      		INC	B		;INCR CHAR COUNT
E374: 23      		INC	HL		;PT TO NEXT
E375: 13      		INC	DE
E376: 7E      		LD	A,(HL)		;COPY COMMAND LINE TO TBUFF
E377: 12      		LD	(DE),A
E378: B7      		OR	A		;DONE IF ZERO
E379: 20F8    		JR	NZ,COM6
              	;
              	; RUN LOADED TRANSIENT PROGRAM
              	;
E37B:         	COM7:
E37B: 78      		LD	A,B		;SAVE CHAR COUNT
E37C: 328000  		LD	(TBUFF),A
E37F: CDA1DD  		CALL	CRLF		;NEW LINE
E382: CD26DE  		CALL	DEFDMA		;SET DMA TO 0080
E385: CD6EDE  		CALL	SETUD		;SET USER/DISK
              	;
              	; EXECUTION (CALL) OF PROGRAM (SUBROUTINE) OCCURS HERE
              	;
E389:         	EXECADR	EQU	$+1		;CHANGE ADDRESS FOR IN-LINE CODE MODIFICATION
E388: CD0001  		CALL	TPA		;CALL TRANSIENT
E38B: CD26DE  		CALL	DEFDMA		;SET DMA TO 0080, IN CASE
              					;PROG CHANGED IT ON US
E38E: CD7DDE  		CALL	SETU0D		;SET USER 0/DISK
E391: CD32DE  		CALL	LOGIN		;LOGIN DISK
E394: C3F2DC  		JP	RESTRT		;RESTART CPR
              	;
              	;Section 5L
              	;Command: GET
              	;Function:  To load the specified file from disk to the specified address
              	;Forms:
              	;	GET <adr> <ufn>	Load the specified file at the specified page;
              	;			<adr> is in HEX
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
E397:         	GET:
E397: CDA1DF  		CALL	HEXNUM		;GET LOAD ADDRESS IN HL
E39A: E5      		PUSH	HL		;SAVE ADDRESS
E39B: CD08E0  		CALL	SCANER		;GET FILE NAME
E39E: E1      		POP	HL		;RESTORE ADDRESS
E39F: C217DF  		JP	NZ,ERROR	;MUST BE UNAMBIGUOUS
              	;
              	; FALL THRU TO MEMLOAD
              	;
              		ENDIF			;RAS
              	;
              	; LOAD MEMORY WITH THE FILE WHOSE NAME IS SPECIFIED IN THE COMMAND LINE
              	;   ON INPUT, HL CONTAINS STARTING ADDRESS TO LOAD
              	;
              	;  EXIT BACK TO CALLER IF NO ERROR.  IF COM FILE TOO BIG OR
              	; OTHER ERROR, EXIT DIRECTLY TO MLERR.
              	;
E3A2:         	MEMLOAD:
E3A2: 22D5E3  		LD	(LOADADR),HL	;SET LOAD ADDRESS
E3A5: CD68DE  		CALL	GETUSR		;GET CURRENT USER NUMBER
E3A8: 3264DE  		LD	(TMPUSR),A	;SAVE IT FOR LATER
E3AB: 32B9E3  		LD	(TSELUSR),A	;TEMP USER TO SELECT
              	;
              	;   MLA is a reentry point for a non-standard CP/M Modification
              	; This is the return point for when the .COM (or GET) file is not found the
              	; first time, Drive A: is selected for a second attempt
              	;
E3AE:         	MLA:
E3AE: CDEADF  		CALL	SLOGIN		;LOG IN SPECIFIED DRIVE IF ANY
E3B1: CD37DE  		CALL	OPENF		;OPEN COMMAND.COM FILE
E3B4: 201E    		JR	NZ,MLA1		;FILE FOUND - LOAD IT
              	;
              		IF	SECURE
              	;
              	;  IF SECURE ENABLED, SEARCH CURRENT DRIVE, CURRENT USER, THEN
              	; IF IN WHEEL MODE, SEARCH UNDER LAST USER SET BY DFU (ORIG
              	; "RESUSR" AFTER WARM BOOT) ON CURRENT DRIVE. IF NOT FOUND, OR
              	; NOT IN WHEEL MODE, THEN SEARCH ON CURRENT DRIVE, UNDER USER
              	; "DEFUSR". IF STILL NOT FOUND, LOOK AT SAME SERIES OF USERS
              	; ON DRIVE A.
              	;
              	DFLAG	EQU	$+1		;MARK IN-THE-CODE VARIABLE
              		LD	A,0		;HAVE WE CHECKED THIS DRIVE ALREADY?
              		OR	A
              		JR	NZ,MLA0		;PASS IF SO TO GO TO DRIVE A:
              		LD	A,(WHEEL)	;RESTRICTED PROGS ALLOWED?
              		CP	RESTRCT
              		JR	Z,MLA00		;PASS IF NOT
              		PUSH	BC		;PUSH BC
              		LD	A,(DFUSR)	;LOAD DEFAULT USER
              		LD	B,A		;PUT IT IN B
              		LD	A,(TSELUSR)	;CHECK CURR USER
              	DFUSR	EQU	$+1		;DEFAULT USER LOCATION
              		CP	RESUSR		;RESTRICTED USER?
              		LD	A,B		;ASSUME NOT
              		POP	BC		;RESTORE BC
              		JR	NZ,SETTSE	;GO TRY IF NOT
              	MLA00:				;SS IF NOT
              	TSELUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
              		LD	A,0		;GET CURR USER
              		SUB	DEFUSR		;IS IT UNRESTRICTED COM AREA?
              		JR	Z,MLA0		;NO MORE CHOICES IF SO
              		LD	(DFLAG),A	;MAKE DFLAG NON-ZERO IF NOT
              		LD	A,DEFUSR	; AND TRY UNRESTRICTED COM AREA
              		ENDIF			;SECURE
              	;
              		IF	SECURE
              	        ELSE
E3B7:         	DFUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
E3B6: 3E00    		LD	A,DEFUSR	;GET DEFAULT USER
E3B9:         	TSELUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
E3B8: FE00    		CP	DEFUSR		;CHECK FOR THE USER AREA..
E3BA: 2809    		JR	Z,MLA0		;..EQUAL DEFAULT, AND JUMP IF SO
              		ENDIF			;NOT SECURE
              	;
E3BC:         	SETTSE:
E3BC: 32B9E3  		LD	(TSELUSR),A	;PUT DOWN NEW ONE
E3BF: 5F      		LD	E,A
E3C0: CD6ADE  		CALL	SETUSR		;GO SET NEW USER NUMBER
E3C3: 18E9    		JR	MLA		;AND TRY AGAIN
              	;
              	; ERROR ROUTINE TO SELECT DRIVE A: IF DEFAULT WAS ORIGINALLY SELECTED
              	;
E3C5:         	MLA0:
E3C5: 21FFDF  		LD	HL,TEMPDR	;GET DRIVE FROM CURRENT COMMAND
E3C8: AF      		XOR	A		;A=0
              	;
              		IF	SECURE
              		LD	(DFLAG),A	;ALLOW A: SEARCH
              		ENDIF			;SECURE
              	;
E3C9: B6      		OR	(HL)
E3CA: C2F7E3  		JP	NZ,MLERR	;ERROR IF ALREADY DISK A:
E3CD: 3601    		LD	(HL),1		;SELECT DRIVE A:
E3CF: 3A64DE  		LD	A,(TMPUSR)	;GO TO 'CURRENT' USER CODE
E3D2: 18E8    		JR	SETTSE
              	;
              	; FILE FOUND -- PROCEED WITH LOAD
              	;
E3D4:         	MLA1:
E3D5:         	LOADADR	EQU	$+1
E3D4: 210001  		LD	HL,TPA
E3D7:         	ML2:
E3D7: 3EDB    		LD	A,ENTRY/256-1	;GET HIGH-ORDER ADR OF JUST BELOW CPR
E3D9: BC      		CP	H		;ARE WE GOING TO OVERWRITE THE CPR?
E3DA: 3818    		JR	C,ML4		;ERROR IF SO
E3DC: E5      		PUSH	HL		;SAVE ADDRESS OF NEXT SECTOR
E3DD: EB      		EX	DE,HL		;... IN DE
E3DE: CD29DE  		CALL	DMASET		;SET DMA ADDRESS FOR LOAD
E3E1: 1198DC  		LD	DE,FCBDN 	;READ NEXT SECTOR
E3E4: CD01DE  		CALL	READ
E3E7: E1      		POP	HL		;GET ADDRESS OF NEXT SECTOR
E3E8: 2006    		JR	NZ,ML3		;READ ERROR OR EOF?
E3EA: 118000  		LD	DE,128		;MOVE 128 BYTES PER SECTOR
E3ED: 19      		ADD	HL,DE		;PT TO NEXT SECTOR IN HL
E3EE: 18E7    		JR	ML2
              	;
E3F0:         	ML3:
E3F0: 3D      		DEC	A		;LOAD COMPLETE
E3F1: CA63DE  		JP	Z,RESETUSR	;IF ZERO, OK, GO RESET CORRECT USER #
              					; ON WAY OUT, ELSE FALL THRU TO PRNLE
              	;
              	;  TPA FULL
              	;
E3F4: CD5EE2  	ML4:	CALL	PRNLE		;PRINT MSG AND RESET DEF DMA
              	;
              	; TRANSIENT LOAD ERROR
              	;
E3F7:         	MLERR:
              					;NOTE THAT THERE IS AN EXTRA RETURN ADDRESS ON
              					; THE STACK. IT WILL BE TOSSED WHEN ERROR EXITS
              					; TO RESTRT, WHICH RELOADS SP.
E3F7: CD63DE  		CALL	RESETUSR	;RESET CURRENT USER NUMBER
              					;  RESET MUST BE DONE BEFORE LOGIN
E3FA:         	ERRLOG:
E3FA: CDF4DF  		CALL	DLOGIN		;LOG IN DEFAULT DISK
E3FD: C317DF  		JP	ERROR		;FLAG ERROR
              	;
              	;
              	;Section: 5M
              	;PASS:  Enable wheel mode.
              	;NORM:	Disable wheel mode.
              	;
              	;  Type PASS <password> <cr> to CP/M prompt to enter wheel mode.
              	; This code can be replaced with PST's PASS.ASM which gives many
              	; nice little options like no keyboard echo, etc.
              	;
              		IF	INPASS		;WE WANT TO USE THIS CODE, NOT PASS.COM
              	PASS:
              		LD	HL,PASSWD	;SET UP POINTERS
              		LD	DE,CIBUFF+NCHARS+1
              		LD	B,PRGEND-PASSWD	;B= LENGTH
              	CKPASS:	LD	A,(DE)		;TRIAL PW TO A
              		CP	(HL)		;CHECK FOR MATCH
              		JP	NZ,COM		;NOPE.. LOOK FOR PASS.COM
              		INC	HL		;INCREMENT COUNTER
              		INC	DE
              		DJNZ	CKPASS		;CONTINUE IF MORE
              		LD	A,NOT RESTRCT	;WHEEL = NOT RESTRCT
              	
              	PWOUT:	LD	(WHEEL),A
              		JP	RESTRT
              	;
              	NORM:
              		LD	A,RESTRCT
              		JR	PWOUT
              	;
              	PASSWD:
              		DEFM	'YOURPW'	;YOUR PASSWORD
              	PRGEND	EQU	$		;END OF PASSWORD
              	;
              		ENDIF			;INPASS
              	
              	;        DEFS    4
              	;
              	;; 	IF	($ GE CPRLOC+800H)
              	;; 	.PRINTX	/ZCPR exceeds 2K memory size !!!/
              	;; 	ENDIF
              	;; ;
              	;; 	END
              	
              	#include "../bdos.asm"
              	;**************************************************************
              	;*
              	;*             C P / M   version   2 . 2
              	;*
              	;*   Reconstructed from memory image on February 27, 1981
              	;*
              	;*                by Clark A. Calkins
              	;*
              	;*      Modified to build as single image from source
              	;*
              	;*
              	;*
              	;**************************************************************
              	
              	
              	
              	;
              	;   note that the following six bytes must match those at
              	; (pattrn1) or cp/m will halt. why?
              	;
E400: 00160000	pattrn2:defb	0,22,0,0,0,0	;(* serial number bytes *).
E404: 0000    	
              	;
              	;**************************************************************
              	;*
              	;*                    B D O S   E N T R Y
              	;*
              	;**************************************************************
              	;
E406: C314E4  	fbase:	jp	fbase1
E409: C33AF2  		jp	boot
              	;
              	;   bdos error table.
              	;
E40C: 9FE4    	badsctr:defw	error1		;bad sector on read or write.
E40E: ABE4    	badslct:defw	error2		;bad disk select.
E410: B1E4    	rodisk:	defw	error3		;disk is read only.
E412: B7E4    	rofile:	defw	error4		;file is read only.
              	;
              	;   entry into bdos. (de) or (e) are the parameters passed. the
              	; function number desired is in register (c).
              	;
E414: EB      	fbase1:	ex	de,hl		;save the (de) parameters.
E415: 224EE7  		ld	(params),hl
E418: EB      		ex	de,hl
E419: 7B      		ld	a,e		;and save register (e) in particular.
E41A: 32E1F1  		ld	(eparam),a
E41D: 210000  		ld	hl,0
E420: 2250E7  		ld	(status),hl	;clear return status.
E423: 39      		add	hl,sp
E424: 221AE7  		ld	(usrstack),hl	;save users stack pointer.
E427: 314CE7  		ld	sp,stkarea	;and set our own.
E42A: AF      		xor	a		;clear auto select storage space.
E42B: 32EBF1  		ld	(autoflag),a
E42E: 32E9F1  		ld	(auto),a
E431: 217FF1  		ld	hl,goback	;set return address.
E434: E5      		push	hl
E435: CD63F3  		call	syshook		; see if anyone wants to intercept the call
E438: 79      		ld	a,c		;get function number.
E439: FE29    		cp	nfuncts		;valid function number?
E43B: D0      		ret	nc
E43C: 4B      		ld	c,e		;keep single register function here.
E43D: 214DE4  		ld	hl,functns	;now look thru the function table.
E440: 5F      		ld	e,a
E441: 1600    		ld	d,0		;(de)=function number.
E443: 19      		add	hl,de
E444: 19      		add	hl,de		;(hl)=(start of table)+2*(function number).
E445: 5E      		ld	e,(hl)
E446: 23      		inc	hl
E447: 56      		ld	d,(hl)		;now (de)=address for this function.
E448: 2A4EE7  		ld	hl,(params)	;retrieve parameters.
E44B: EB      		ex	de,hl		;now (de) has the original parameters.
E44C: E9      		jp	(hl)		;execute desired function.
              	;
              	;   bdos function jump table.
              	;
0029:         	nfuncts equ	41		;number of functions in followin table.
              	;
E44D: 48F2D3E6	functns:defw	wboot,getcon,outcon,getrdr,punch,list,dircio,getiob
E451: 9BE5D9E6	
E455: C9F2C5F2	
E459: DFE6F8E6	
E45D: FEE603E7		defw	setiob,prtstr,rdbuff,getcsts,getver,rstdsk,setdsk,openfil
E461: ECE509E7	
E465: 89F08EF0	
E469: 50F0A7F0	
E46D: B0F0B6F0		defw	closefil,getfst,getnxt,delfile,readseq,wrtseq,fcreate
E471: D3F0E2F0	
E475: EBF0F1F0	
E479: F7F0    	
E47B: 00F109F1		defw	renfile,getlog,getcrnt,putdma,getaloc,wrtprtd,getrov,setattr
E47F: 0FF115F1	
E483: 1CF137E9	
E487: 22F128F1	
E48B: 31F138F1		defw	getparm,getuser,rdrandom,wtrandom,filesize,setran,logoff,rtn
E48F: 4CF152F1	
E493: 58F119F0	
E497: 5EF10FE7	
E49B: 0FE7A6F1		defw	rtn,wtspecl
              	;
              	;   bdos error message section.
              	;
E49F: 21D5E4  	error1:	ld	hl,badsec	;bad sector message.
E4A2: CDF0E4  		call	prterr		;print it and get a 1 char responce.
E4A5: FE03    		cp	cntrlc		;re-boot request (control-c)?
E4A7: CA0000  		jp	z,0		;yes.
E4AA: C9      		ret			;no, return to retry i/o function.
              	;
E4AB: 21E0E4  	error2:	ld	hl,badsel	;bad drive selected.
E4AE: C3BAE4  		jp	error5
              	;
E4B1: 21ECE4  	error3:	ld	hl,diskro	;disk is read only.
E4B4: C3BAE4  		jp	error5
              	;
E4B7: 21E7E4  	error4:	ld	hl,filero	;file is read only.
              	;
E4BA: 3E00    	error5:	ld	a,default
E4BC: 320400  		ld	(tdrive),a
E4BF: CDF0E4  		call	prterr
E4C2: C30000  		jp	0		;always reboot on these errors.
              	;
E4C5: 42646F73	bdoserr:defb	'Bdos Err on '
E4C9: 20457272	
E4CD: 206F6E20	
E4D1: 203A2024	bdosdrv:defb	' : $'
E4D5: 42616420	badsec:	defb	'Bad Sector$'
E4D9: 53656374	
E4DD: 6F7224  	
E4E0: 53656C65	badsel:	defb	'Select$'
E4E4: 637424  	
E4E7: 46696C65	filero:	defb	'File '
E4EB: 20      	
E4EC: 522F4F24	diskro:	defb	'R/O$'
              	;
              	;   print bdos error message.
              	;
E4F0: E5      	prterr:	push	hl		;save second message pointer.
E4F1: CDD4E5  		call	outcrlf		;send (cr)(lf).
E4F4: 3A4DE7  		ld	a,(active)	;get active drive.
E4F7: C641    		add	a,'A'		;make ascii.
E4F9: 32D1E4  		ld	(bdosdrv),a	;and put in message.
E4FC: 01C5E4  		ld	bc,bdoserr	;and print it.
E4FF: CDDEE5  		call	prtmesg
E502: C1      		pop	bc		;print second message line now.
E503: CDDEE5  		call	prtmesg
              	;
              	;   get an input character. we will check our 1 character
              	; buffer first. this may be set by the console status routine.
              	;
E506: 2119E7  	getchar:ld	hl,charbuf	;check character buffer.
E509: 7E      		ld	a,(hl)		;anything present already?
E50A: 3600    		ld	(hl),0		;...either case clear it.
E50C: B7      		or	a
E50D: C0      		ret	nz		;yes, use it.
E50E: C3ADF2  		jp	conin		;nope, go get a character responce.
              	;
              	;   input and echo a character.
              	;
E511: CD06E5  	getecho:call	getchar		;input a character.
E514: CD1FE5  		call	chkchar		;carriage control?
E517: D8      		ret	c		;no, a regular control char so don't echo.
E518: F5      		push	af		;ok, save character now.
E519: 4F      		ld	c,a
E51A: CD9BE5  		call	outcon		;and echo it.
E51D: F1      		pop	af		;get character and return.
E51E: C9      		ret	
              	;
              	;   check character in (a). set the zero flag on a carriage
              	; control character and the carry flag on any other control
              	; character.
              	;
E51F: FE0D    	chkchar:cp	cr		;check for carriage return, line feed, backspace,
E521: C8      		ret	z		;or a tab.
E522: FE0A    		cp	lf
E524: C8      		ret	z
E525: FE09    		cp	tab
E527: C8      		ret	z
E528: FE08    		cp	bs
E52A: C8      		ret	z
E52B: FE20    		cp	' '		;other control char? set carry flag.
E52D: C9      		ret	
              	;
              	;   check the console during output. halt on a control-s, then
              	; reboot on a control-c. if anything else is ready, clear the
              	; zero flag and return (the calling routine may want to do
              	; something).
              	;
E52E: 3A19E7  	ckconsol: ld	a,(charbuf)	;check buffer.
E531: B7      		or	a		;if anything, just return without checking.
E532: C250E5  		jp	nz,ckcon2
E535: CDA2F2  		call	const		;nothing in buffer. check console.
E538: E601    		and	01h		;look at bit 0.
E53A: C8      		ret	z		;return if nothing.
E53B: CDADF2  		call	conin		;ok, get it.
E53E: FE13    		cp	cntrls		;if not control-s, return with zero cleared.
E540: C24DE5  		jp	nz,ckcon1
E543: CDADF2  		call	conin		;halt processing until another char
E546: FE03    		cp	cntrlc		;is typed. control-c?
E548: CA0000  		jp	z,0		;yes, reboot now.
E54B: AF      		xor	a		;no, just pretend nothing was ever ready.
E54C: C9      		ret	
E54D: 3219E7  	ckcon1:	ld	(charbuf),a	;save character in buffer for later processing.
E550: 3E01    	ckcon2:	ld	a,1		;set (a) to non zero to mean something is ready.
E552: C9      		ret	
              	;
              	;   output (c) to the screen. if the printer flip-flop flag
              	; is set, we will send character to printer also. the console
              	; will be checked in the process.
              	;
E553: 3A15E7  	outchar:ld	a,(outflag)	;check output flag.
E556: B7      		or	a		;anything and we won't generate output.
E557: C26DE5  		jp	nz,outchr1
E55A: C5      		push	bc
E55B: CD2EE5  		call	ckconsol	;check console (we don't care whats there).
E55E: C1      		pop	bc
E55F: C5      		push	bc
E560: CDB9F2  		call	conout		;output (c) to the screen.
E563: C1      		pop	bc
E564: C5      		push	bc
E565: 3A18E7  		ld	a,(prtflag)	;check printer flip-flop flag.
E568: B7      		or	a
E569: C4C5F2  		call	nz,list		;print it also if non-zero.
E56C: C1      		pop	bc
E56D: 79      	outchr1:ld	a,c		;update cursors position.
E56E: 2117E7  		ld	hl,curpos
E571: FE7F    		cp	del		;rubouts don't do anything here.
E573: C8      		ret	z
E574: 34      		inc	(hl)		;bump line pointer.
E575: FE20    		cp	' '		;and return if a normal character.
E577: D0      		ret	nc
E578: 35      		dec	(hl)		;restore and check for the start of the line.
E579: 7E      		ld	a,(hl)
E57A: B7      		or	a
E57B: C8      		ret	z		;ingnore control characters at the start of the line.
E57C: 79      		ld	a,c
E57D: FE08    		cp	bs		;is it a backspace?
E57F: C284E5  		jp	nz,outchr2
E582: 35      		dec	(hl)		;yes, backup pointer.
E583: C9      		ret	
E584: FE0A    	outchr2:cp	lf		;is it a line feed?
E586: C0      		ret	nz		;ignore anything else.
E587: 3600    		ld	(hl),0		;reset pointer to start of line.
E589: C9      		ret	
              	;
              	;   output (a) to the screen. if it is a control character
              	; (other than carriage control), use ^x format.
              	;
E58A: 79      	showit:	ld	a,c
E58B: CD1FE5  		call	chkchar		;check character.
E58E: D29BE5  		jp	nc,outcon	;not a control, use normal output.
E591: F5      		push	af
E592: 0E5E    		ld	c,'^'		;for a control character, preceed it with '^'.
E594: CD53E5  		call	outchar
E597: F1      		pop	af
E598: F640    		or	'@'		;and then use the letter equivelant.
E59A: 4F      		ld	c,a
              	;
              	;   function to output (c) to the console device and expand tabs
              	; if necessary.
              	;
E59B: 79      	outcon:	ld	a,c
E59C: FE09    		cp	tab		;is it a tab?
E59E: C253E5  		jp	nz,outchar	;use regular output.
E5A1: 0E20    	outcon1:ld	c,' '		;yes it is, use spaces instead.
E5A3: CD53E5  		call	outchar
E5A6: 3A17E7  		ld	a,(curpos)	;go until the cursor is at a multiple of 8
              	
E5A9: E607    		and	07h		;position.
E5AB: C2A1E5  		jp	nz,outcon1
E5AE: C9      		ret	
              	;
              	;   echo a backspace character. erase the prevoius character
              	; on the screen.
              	;
E5AF: CDB7E5  	backup:	call	backup1		;backup the screen 1 place.
E5B2: 0E20    		ld	c,' '		;then blank that character.
E5B4: CDB9F2  		call	conout
E5B7: 0E08    	backup1:ld	c,bs		;then back space once more.
E5B9: C3B9F2  		jp	conout
              	;
              	;   signal a deleted line. print a '#' at the end and start
              	; over.
              	;
E5BC: 0E23    	newline:ld	c,'#'
E5BE: CD53E5  		call	outchar		;print this.
E5C1: CDD4E5  		call	outcrlf		;start new line.
E5C4: 3A17E7  	newln1:	ld	a,(curpos)	;move the cursor to the starting position.
E5C7: 2116E7  		ld	hl,starting
E5CA: BE      		cp	(hl)
E5CB: D0      		ret	nc		;there yet?
E5CC: 0E20    		ld	c,' '
E5CE: CD53E5  		call	outchar		;nope, keep going.
E5D1: C3C4E5  		jp	newln1
              	;
              	;   output a (cr) (lf) to the console device (screen).
              	;
E5D4: 0E0D    	outcrlf:ld	c,cr
E5D6: CD53E5  		call	outchar
E5D9: 0E0A    		ld	c,lf
E5DB: C353E5  		jp	outchar
              	;
              	;   print message pointed to by (bc). it will end with a '$'.
              	;
E5DE: 0A      	prtmesg:ld	a,(bc)		;check for terminating character.
E5DF: FE24    		cp	'$'
E5E1: C8      		ret	z
E5E2: 03      		inc	bc
E5E3: C5      		push	bc		;otherwise, bump pointer and print it.
E5E4: 4F      		ld	c,a
E5E5: CD9BE5  		call	outcon
E5E8: C1      		pop	bc
E5E9: C3DEE5  		jp	prtmesg
              	;
              	;   function to execute a buffered read.
              	;
E5EC: 3A17E7  	rdbuff:	ld	a,(curpos)	;use present location as starting one.
E5EF: 3216E7  		ld	(starting),a
E5F2: 2A4EE7  		ld	hl,(params)	;get the maximum buffer space.
E5F5: 4E      		ld	c,(hl)
E5F6: 23      		inc	hl		;point to first available space.
E5F7: E5      		push	hl		;and save.
E5F8: 0600    		ld	b,0		;keep a character count.
E5FA: C5      	rdbuf1:	push	bc
E5FB: E5      		push	hl
E5FC: CD06E5  	rdbuf2:	call	getchar		;get the next input character.
E5FF: E67F    		and	7fh		;strip bit 7.
E601: E1      		pop	hl		;reset registers.
E602: C1      		pop	bc
E603: FE0D    		cp	cr		;en of the line?
E605: CACCE6  		jp	z,rdbuf17
E608: FE0A    		cp	lf
E60A: CACCE6  		jp	z,rdbuf17
E60D: FE08    		cp	bs		;how about a backspace?
E60F: C221E6  		jp	nz,rdbuf3
E612: 78      		ld	a,b		;yes, but ignore at the beginning of the line.
E613: B7      		or	a
E614: CAFAE5  		jp	z,rdbuf1
E617: 05      		dec	b		;ok, update counter.
E618: 3A17E7  		ld	a,(curpos)	;if we backspace to the start of the line,
E61B: 3215E7  		ld	(outflag),a	;treat as a cancel (control-x).
E61E: C37BE6  		jp	rdbuf10
E621: FE7F    	rdbuf3:	cp	del		;user typed a rubout?
E623: C231E6  		jp	nz,rdbuf4
E626: 78      		ld	a,b		;ignore at the start of the line.
E627: B7      		or	a
E628: CAFAE5  		jp	z,rdbuf1
E62B: 7E      		ld	a,(hl)		;ok, echo the prevoius character.
E62C: 05      		dec	b		;and reset pointers (counters).
E62D: 2B      		dec	hl
E62E: C3B4E6  		jp	rdbuf15
E631: FE05    	rdbuf4:	cp	cntrle		;physical end of line?
E633: C242E6  		jp	nz,rdbuf5
E636: C5      		push	bc		;yes, do it.
E637: E5      		push	hl
E638: CDD4E5  		call	outcrlf
E63B: AF      		xor	a		;and update starting position.
E63C: 3216E7  		ld	(starting),a
E63F: C3FCE5  		jp	rdbuf2
E642: FE10    	rdbuf5:	cp	cntrlp		;control-p?
E644: C253E6  		jp	nz,rdbuf6
E647: E5      		push	hl		;yes, flip the print flag filp-flop byte.
E648: 2118E7  		ld	hl,prtflag
E64B: 3E01    		ld	a,1		;prtflag=1-prtflag
E64D: 96      		sub	(hl)
E64E: 77      		ld	(hl),a
E64F: E1      		pop	hl
E650: C3FAE5  		jp	rdbuf1
E653: FE18    	rdbuf6:	cp	cntrlx		;control-x (cancel)?
E655: C26AE6  		jp	nz,rdbuf8
E658: E1      		pop	hl
E659: 3A16E7  	rdbuf7:	ld	a,(starting)	;yes, backup the cursor to here.
E65C: 2117E7  		ld	hl,curpos
E65F: BE      		cp	(hl)
E660: D2ECE5  		jp	nc,rdbuff	;done yet?
E663: 35      		dec	(hl)		;no, decrement pointer and output back up one space.
E664: CDAFE5  		call	backup
E667: C359E6  		jp	rdbuf7
E66A: FE15    	rdbuf8:	cp	cntrlu		;cntrol-u (cancel line)?
E66C: C276E6  		jp	nz,rdbuf9
E66F: CDBCE5  		call	newline		;start a new line.
E672: E1      		pop	hl
E673: C3ECE5  		jp	rdbuff
E676: FE12    	rdbuf9:	cp	cntrlr		;control-r?
E678: C2B1E6  		jp	nz,rdbuf14
E67B: C5      	rdbuf10:push	bc		;yes, start a new line and retype the old one.
E67C: CDBCE5  		call	newline
E67F: C1      		pop	bc
E680: E1      		pop	hl
E681: E5      		push	hl
E682: C5      		push	bc
E683: 78      	rdbuf11:ld	a,b		;done whole line yet?
E684: B7      		or	a
E685: CA95E6  		jp	z,rdbuf12
E688: 23      		inc	hl		;nope, get next character.
E689: 4E      		ld	c,(hl)
E68A: 05      		dec	b		;count it.
E68B: C5      		push	bc
E68C: E5      		push	hl
E68D: CD8AE5  		call	showit		;and display it.
E690: E1      		pop	hl
E691: C1      		pop	bc
E692: C383E6  		jp	rdbuf11
E695: E5      	rdbuf12:push	hl		;done with line. if we were displaying
E696: 3A15E7  		ld	a,(outflag)	;then update cursor position.
E699: B7      		or	a
E69A: CAFCE5  		jp	z,rdbuf2
E69D: 2117E7  		ld	hl,curpos	;because this line is shorter, we must
E6A0: 96      		sub	(hl)		;back up the cursor (not the screen however)
E6A1: 3215E7  		ld	(outflag),a	;some number of positions.
E6A4: CDAFE5  	rdbuf13:call	backup		;note that as long as (outflag) is non
E6A7: 2115E7  		ld	hl,outflag	;zero, the screen will not be changed.
E6AA: 35      		dec	(hl)
E6AB: C2A4E6  		jp	nz,rdbuf13
E6AE: C3FCE5  		jp	rdbuf2		;now just get the next character.
              	;
              	;   just a normal character, put this in our buffer and echo.
              	;
E6B1: 23      	rdbuf14:inc	hl
E6B2: 77      		ld	(hl),a		;store character.
E6B3: 04      		inc	b		;and count it.
E6B4: C5      	rdbuf15:push	bc
E6B5: E5      		push	hl
E6B6: 4F      		ld	c,a		;echo it now.
E6B7: CD8AE5  		call	showit
E6BA: E1      		pop	hl
E6BB: C1      		pop	bc
E6BC: 7E      		ld	a,(hl)		;was it an abort request?
E6BD: FE03    		cp	cntrlc		;control-c abort?
E6BF: 78      		ld	a,b
E6C0: C2C8E6  		jp	nz,rdbuf16
E6C3: FE01    		cp	1		;only if at start of line.
E6C5: CA0000  		jp	z,0
E6C8: B9      	rdbuf16:cp	c		;nope, have we filled the buffer?
E6C9: DAFAE5  		jp	c,rdbuf1
E6CC: E1      	rdbuf17:pop	hl		;yes end the line and return.
E6CD: 70      		ld	(hl),b
E6CE: 0E0D    		ld	c,cr
E6D0: C353E5  		jp	outchar		;output (cr) and return.
              	;
              	;   function to get a character from the console device.
              	;
E6D3: CD11E5  	getcon:	call	getecho		;get and echo.
E6D6: C30CE7  		jp	setstat		;save status and return.
              	;
              	;   function to get a character from the tape reader device.
              	;
E6D9: CDCDF2  	getrdr:	call	reader		;get a character from reader, set status and return.
E6DC: C30CE7  		jp	setstat
              	;
              	;  function to perform direct console i/o. if (c) contains (ff)
              	; then this is an input request. if (c) contains (fe) then
              	; this is a status request. otherwise we are to output (c).
              	;
E6DF: 79      	dircio:	ld	a,c		;test for (ff).
E6E0: 3C      		inc	a
E6E1: CAEBE6  		jp	z,dirc1
E6E4: 3C      		inc	a		;test for (fe).
E6E5: CAA2F2  		jp	z,const
E6E8: C3B9F2  		jp	conout		;just output (c).
E6EB: CDA2F2  	dirc1:	call	const		;this is an input request.
E6EE: B7      		or	a
E6EF: CA9CF1  		jp	z,goback1	;not ready? just return (directly).
E6F2: CDADF2  		call	conin		;yes, get character.
E6F5: C30CE7  		jp	setstat		;set status and return.
              	;
              	;   function to return the i/o byte.
              	;
E6F8: 3A0300  	getiob:	ld	a,(iobyte)
E6FB: C30CE7  		jp	setstat
              	;
              	;   function to set the i/o byte.
              	;
E6FE: 210300  	setiob:	ld	hl,iobyte
E701: 71      		ld	(hl),c
E702: C9      		ret	
              	;
              	;   function to print the character string pointed to by (de)
              	; on the console device. the string ends with a '$'.
              	;
E703: EB      	prtstr:	ex	de,hl
E704: 4D      		ld	c,l
E705: 44      		ld	b,h		;now (bc) points to it.
E706: C3DEE5  		jp	prtmesg
              	;
              	;   function to interigate the console device.
              	;
E709: CD2EE5  	getcsts:call	ckconsol
              	;
              	;   get here to set the status and return to the cleanup
              	; section. then back to the user.
              	;
E70C: 3250E7  	setstat:ld	(status),a
E70F: C9      	rtn:	ret	
              	;
              	;   set the status to 1 (read or write error code).
              	;
E710: 3E01    	ioerr1:	ld	a,1
E712: C30CE7  		jp	setstat
              	;
E715: 00      	outflag:defb	0		;output flag (non zero means no output).
E716: 02      	starting: defb	2		;starting position for cursor.
E717: 00      	curpos:	defb	0		;cursor position (0=start of line).
E718: 00      	prtflag:defb	0		;printer flag (control-p toggle). list if non zero.
E719: 00      	charbuf:defb	0		;single input character buffer.
              	;
              	;   stack area for bdos calls.
              	;
E71A: 0000    	usrstack: defw	0		;save users stack pointer here.
              	;
E71C: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
E720: 00...   	
E734: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
E738: 00...   	
E74C:         	stkarea equ	$		;end of stack area.
              	;
E74C: 00      	userno:	defb	0		;current user number.
E74D: 00      	active:	defb	0		;currently active drive.
E74E: 0000    	params:	defw	0		;save (de) parameters here on entry.
E750: 0000    	status:	defw	0		;status returned from bdos function.
              	;
              	;   select error occured, jump to error routine.
              	;
E752: 210EE4  	slcterr:ld	hl,badslct
              	;
              	;   jump to (hl) indirectly.
              	;
E755: 5E      	jumphl:	ld	e,(hl)
E756: 23      		inc	hl
E757: 56      		ld	d,(hl)		;now (de) contain the desired address.
E758: EB      		ex	de,hl
E759: E9      		jp	(hl)
              	;
              	;   block move. (de) to (hl), (c) bytes total.
              	;
E75A: 0C      	de2hl:	inc	c		;is count down to zero?
E75B: 0D      	de2hl1:	dec	c
E75C: C8      		ret	z		;yes, we are done.
E75D: 1A      		ld	a,(de)		;no, move one more byte.
E75E: 77      		ld	(hl),a
E75F: 13      		inc	de
E760: 23      		inc	hl
E761: C35BE7  		jp	de2hl1		;and repeat.
              	;
              	;   select the desired drive.
              	;
E764: 3A4DE7  	select:	ld	a,(active)	;get active disk.
E767: 4F      		ld	c,a
E768: CDE0F2  		call	seldsk		;select it.
E76B: 7C      		ld	a,h		;valid drive?
E76C: B5      		or	l		;valid drive?
E76D: C8      		ret	z		;return if not.
              	;
              	;   here, the bios returned the address of the parameter block
              	; in (hl). we will extract the necessary pointers and save them.
              	;
E76E: 5E      		ld	e,(hl)		;yes, get address of translation table into (de).
E76F: 23      		inc	hl
E770: 56      		ld	d,(hl)
E771: 23      		inc	hl
E772: 22BEF1  		ld	(scratch1),hl	;save pointers to scratch areas.
E775: 23      		inc	hl
E776: 23      		inc	hl
E777: 22C0F1  		ld	(scratch2),hl	;ditto.
E77A: 23      		inc	hl
E77B: 23      		inc	hl
E77C: 22C2F1  		ld	(scratch3),hl	;ditto.
E77F: 23      		inc	hl
E780: 23      		inc	hl
E781: EB      		ex	de,hl		;now save the translation table address.
E782: 22DBF1  		ld	(xlate),hl
E785: 21C4F1  		ld	hl,dirbuf	;put the next 8 bytes here.
E788: 0E08    		ld	c,8		;they consist of the directory buffer
E78A: CD5AE7  		call	de2hl		;pointer, parameter block pointer,
E78D: 2AC6F1  		ld	hl,(diskpb)	;check and allocation vectors.
E790: EB      		ex	de,hl
E791: 21CCF1  		ld	hl,sectors	;move parameter block into our ram.
E794: 0E0F    		ld	c,15		;it is 15 bytes long.
E796: CD5AE7  		call	de2hl
E799: 2AD1F1  		ld	hl,(dsksize)	;check disk size.
E79C: 7C      		ld	a,h		;more than 256 blocks on this?
E79D: 21E8F1  		ld	hl,bigdisk
E7A0: 36FF    		ld	(hl),0ffh	;set to samll.
E7A2: B7      		or	a
E7A3: CAA8E7  		jp	z,select1
E7A6: 3600    		ld	(hl),0		;wrong, set to large.
E7A8: 3EFF    	select1:ld	a,0ffh		;clear the zero flag.
E7AA: B7      		or	a
E7AB: C9      		ret	
              	;
              	;   routine to home the disk track head and clear pointers.
              	;
E7AC: CDDBF2  	homedrv:call	home		;home the head.
E7AF: AF      		xor	a
E7B0: 2AC0F1  		ld	hl,(scratch2)	;set our track pointer also.
E7B3: 77      		ld	(hl),a
E7B4: 23      		inc	hl
E7B5: 77      		ld	(hl),a
E7B6: 2AC2F1  		ld	hl,(scratch3)	;and our sector pointer.
E7B9: 77      		ld	(hl),a
E7BA: 23      		inc	hl
E7BB: 77      		ld	(hl),a
E7BC: C9      		ret	
              	;
              	;   do the actual disk read and check the error return status.
              	;
E7BD: CD0CF3  	doread:	call	read
E7C0: C3C6E7  		jp	ioret
              	;
              	;   do the actual disk write and handle any bios error.
              	;
E7C3: CD10F3  	dowrite:call	write
E7C6: B7      	ioret:	or	a
E7C7: C8      		ret	z		;return unless an error occured.
E7C8: 210CE4  		ld	hl,badsctr	;bad read/write on this sector.
E7CB: C355E7  		jp	jumphl
              	;
              	;   routine to select the track and sector that the desired
              	; block number falls in.
              	;
E7CE: 2AF5F1  	trksec:	ld	hl,(filepos)	;get position of last accessed file
E7D1: 0E02    		ld	c,2		;in directory and compute sector #.
E7D3: CDF5E8  		call	shiftr		;sector #=file-position/4.
E7D6: 22F0F1  		ld	(blknmbr),hl	;save this as the block number of interest.
E7D9: 22F7F1  		ld	(cksumtbl),hl	;what's it doing here too?
              	;
              	;   if the sector number has already been set (blknmbr), enter
              	; at this point.
              	;
E7DC: 21F0F1  	trksec1:ld	hl,blknmbr
E7DF: 4E      		ld	c,(hl)		;move sector number into (bc).
E7E0: 23      		inc	hl
E7E1: 46      		ld	b,(hl)
E7E2: 2AC2F1  		ld	hl,(scratch3)	;get current sector number and
E7E5: 5E      		ld	e,(hl)		;move this into (de).
E7E6: 23      		inc	hl
E7E7: 56      		ld	d,(hl)
E7E8: 2AC0F1  		ld	hl,(scratch2)	;get current track number.
E7EB: 7E      		ld	a,(hl)		;and this into (hl).
E7EC: 23      		inc	hl
E7ED: 66      		ld	h,(hl)
E7EE: 6F      		ld	l,a
E7EF: 79      	trksec2:ld	a,c		;is desired sector before current one?
E7F0: 93      		sub	e
E7F1: 78      		ld	a,b
E7F2: 9A      		sbc	a,d
E7F3: D205E8  		jp	nc,trksec3
E7F6: E5      		push	hl		;yes, decrement sectors by one track.
E7F7: 2ACCF1  		ld	hl,(sectors)	;get sectors per track.
E7FA: 7B      		ld	a,e
E7FB: 95      		sub	l
E7FC: 5F      		ld	e,a
E7FD: 7A      		ld	a,d
E7FE: 9C      		sbc	a,h
E7FF: 57      		ld	d,a		;now we have backed up one full track.
E800: E1      		pop	hl
E801: 2B      		dec	hl		;adjust track counter.
E802: C3EFE7  		jp	trksec2
E805: E5      	trksec3:push	hl		;desired sector is after current one.
E806: 2ACCF1  		ld	hl,(sectors)	;get sectors per track.
E809: 19      		add	hl,de		;bump sector pointer to next track.
E80A: DA1AE8  		jp	c,trksec4
E80D: 79      		ld	a,c		;is desired sector now before current one?
E80E: 95      		sub	l
E80F: 78      		ld	a,b
E810: 9C      		sbc	a,h
E811: DA1AE8  		jp	c,trksec4
E814: EB      		ex	de,hl		;not yes, increment track counter
E815: E1      		pop	hl		;and continue until it is.
E816: 23      		inc	hl
E817: C305E8  		jp	trksec3
              	;
              	;   here we have determined the track number that contains the
              	; desired sector.
              	;
E81A: E1      	trksec4:pop	hl		;get track number (hl).
E81B: C5      		push	bc
E81C: D5      		push	de
E81D: E5      		push	hl
E81E: EB      		ex	de,hl
E81F: 2AD9F1  		ld	hl,(offset)	;adjust for first track offset.
E822: 19      		add	hl,de
E823: 44      		ld	b,h
E824: 4D      		ld	c,l
E825: CDFEF2  		call	settrk		;select this track.
E828: D1      		pop	de		;reset current track pointer.
E829: 2AC0F1  		ld	hl,(scratch2)
E82C: 73      		ld	(hl),e
E82D: 23      		inc	hl
E82E: 72      		ld	(hl),d
E82F: D1      		pop	de
E830: 2AC2F1  		ld	hl,(scratch3)	;reset the first sector on this track.
E833: 73      		ld	(hl),e
E834: 23      		inc	hl
E835: 72      		ld	(hl),d
E836: C1      		pop	bc
E837: 79      		ld	a,c		;now subtract the desired one.
E838: 93      		sub	e		;to make it relative (1-# sectors/track).
E839: 4F      		ld	c,a
E83A: 78      		ld	a,b
E83B: 9A      		sbc	a,d
E83C: 47      		ld	b,a
E83D: 2ADBF1  		ld	hl,(xlate)	;translate this sector according to this table.
E840: EB      		ex	de,hl
E841: CD17F3  		call	sectrn		;let the bios translate it.
E844: 4D      		ld	c,l
E845: 44      		ld	b,h
E846: C302F3  		jp	setsec		;and select it.
              	;
              	;   compute block number from record number (savnrec) and
              	; extent number (savext).
              	;
E849: 21CEF1  	getblock: ld	hl,blkshft	;get logical to physical conversion.
E84C: 4E      		ld	c,(hl)		;note that this is base 2 log of ratio.
E84D: 3AEEF1  		ld	a,(savnrec)	;get record number.
E850: B7      	getblk1:or	a		;compute (a)=(a)/2^blkshft.
E851: 1F      		rra	
E852: 0D      		dec	c
E853: C250E8  		jp	nz,getblk1
E856: 47      		ld	b,a		;save result in (b).
E857: 3E08    		ld	a,8
E859: 96      		sub	(hl)
E85A: 4F      		ld	c,a		;compute (c)=8-blkshft.
E85B: 3AEDF1  		ld	a,(savext)
E85E: 0D      	getblk2:dec	c		;compute (a)=savext*2^(8-blkshft).
E85F: CA67E8  		jp	z,getblk3
E862: B7      		or	a
E863: 17      		rla	
E864: C35EE8  		jp	getblk2
E867: 80      	getblk3:add	a,b
E868: C9      		ret	
              	;
              	;   routine to extract the (bc) block byte from the fcb pointed
              	; to by (params). if this is a big-disk, then these are 16 bit
              	; block numbers, else they are 8 bit numbers.
              	; number is returned in (hl).
              	;
E869: 2A4EE7  	extblk:	ld	hl,(params)	;get fcb address.
E86C: 111000  		ld	de,16		;block numbers start 16 bytes into fcb.
E86F: 19      		add	hl,de
E870: 09      		add	hl,bc
E871: 3AE8F1  		ld	a,(bigdisk)	;are we using a big-disk?
E874: B7      		or	a
E875: CA7CE8  		jp	z,extblk1
E878: 6E      		ld	l,(hl)		;no, extract an 8 bit number from the fcb.
E879: 2600    		ld	h,0
E87B: C9      		ret	
E87C: 09      	extblk1:add	hl,bc		;yes, extract a 16 bit number.
E87D: 5E      		ld	e,(hl)
E87E: 23      		inc	hl
E87F: 56      		ld	d,(hl)
E880: EB      		ex	de,hl		;return in (hl).
E881: C9      		ret	
              	;
              	;   compute block number.
              	;
E882: CD49E8  	comblk:	call	getblock
E885: 4F      		ld	c,a
E886: 0600    		ld	b,0
E888: CD69E8  		call	extblk
E88B: 22F0F1  		ld	(blknmbr),hl
E88E: C9      		ret	
              	;
              	;   check for a zero block number (unused).
              	;
E88F: 2AF0F1  	chkblk:	ld	hl,(blknmbr)
E892: 7D      		ld	a,l		;is it zero?
E893: B4      		or	h
E894: C9      		ret	
              	;
              	;   adjust physical block (blknmbr) and convert to logical
              	; sector (logsect). this is the starting sector of this block.
              	; the actual sector of interest is then added to this and the
              	; resulting sector number is stored back in (blknmbr). this
              	; will still have to be adjusted for the track number.
              	;
E895: 3ACEF1  	logical:ld	a,(blkshft)	;get log2(physical/logical sectors).
E898: 2AF0F1  		ld	hl,(blknmbr)	;get physical sector desired.
E89B: 29      	logicl1:add	hl,hl		;compute logical sector number.
E89C: 3D      		dec	a		;note logical sectors are 128 bytes long.
E89D: C29BE8  		jp	nz,logicl1
E8A0: 22F2F1  		ld	(logsect),hl	;save logical sector.
E8A3: 3ACFF1  		ld	a,(blkmask)	;get block mask.
E8A6: 4F      		ld	c,a
E8A7: 3AEEF1  		ld	a,(savnrec)	;get next sector to access.
E8AA: A1      		and	c		;extract the relative position within physical block.
E8AB: B5      		or	l		;and add it too logical sector.
E8AC: 6F      		ld	l,a
E8AD: 22F0F1  		ld	(blknmbr),hl	;and store.
E8B0: C9      		ret	
              	;
              	;   set (hl) to point to extent byte in fcb.
              	;
E8B1: 2A4EE7  	setext:	ld	hl,(params)
E8B4: 110C00  		ld	de,12		;it is the twelth byte.
E8B7: 19      		add	hl,de
E8B8: C9      		ret	
              	;
              	;   set (hl) to point to record count byte in fcb and (de) to
              	; next record number byte.
              	;
E8B9: 2A4EE7  	sethlde:ld	hl,(params)
E8BC: 110F00  		ld	de,15		;record count byte (#15).
E8BF: 19      		add	hl,de
E8C0: EB      		ex	de,hl
E8C1: 211100  		ld	hl,17		;next record number (#32).
E8C4: 19      		add	hl,de
E8C5: C9      		ret	
              	;
              	;   save current file data from fcb.
              	;
E8C6: CDB9E8  	strdata:call	sethlde
E8C9: 7E      		ld	a,(hl)		;get and store record count byte.
E8CA: 32EEF1  		ld	(savnrec),a
E8CD: EB      		ex	de,hl
E8CE: 7E      		ld	a,(hl)		;get and store next record number byte.
E8CF: 32ECF1  		ld	(savnxt),a
E8D2: CDB1E8  		call	setext		;point to extent byte.
E8D5: 3AD0F1  		ld	a,(extmask)	;get extent mask.
E8D8: A6      		and	(hl)
E8D9: 32EDF1  		ld	(savext),a	;and save extent here.
E8DC: C9      		ret	
              	;
              	;   set the next record to access. if (mode) is set to 2, then
              	; the last record byte (savnrec) has the correct number to access.
              	; for sequential access, (mode) will be equal to 1.
              	;
E8DD: CDB9E8  	setnrec:call	sethlde
E8E0: 3AE0F1  		ld	a,(mode)	;get sequential flag (=1).
E8E3: FE02    		cp	2		;a 2 indicates that no adder is needed.
E8E5: C2E9E8  		jp	nz,stnrec1
E8E8: AF      		xor	a		;clear adder (random access?).
E8E9: 4F      	stnrec1:ld	c,a
E8EA: 3AEEF1  		ld	a,(savnrec)	;get last record number.
E8ED: 81      		add	a,c		;increment record count.
E8EE: 77      		ld	(hl),a		;and set fcb's next record byte.
E8EF: EB      		ex	de,hl
E8F0: 3AECF1  		ld	a,(savnxt)	;get next record byte from storage.
E8F3: 77      		ld	(hl),a		;and put this into fcb as number of records used.
E8F4: C9      		ret	
              	;
              	;   shift (hl) right (c) bits.
              	;
E8F5: 0C      	shiftr:	inc	c
E8F6: 0D      	shiftr1:dec	c
E8F7: C8      		ret	z
E8F8: 7C      		ld	a,h
E8F9: B7      		or	a
E8FA: 1F      		rra	
E8FB: 67      		ld	h,a
E8FC: 7D      		ld	a,l
E8FD: 1F      		rra	
E8FE: 6F      		ld	l,a
E8FF: C3F6E8  		jp	shiftr1
              	;
              	;   compute the check-sum for the directory buffer. return
              	; integer sum in (a).
              	;
E902: 0E80    	checksum: ld	c,128		;length of buffer.
E904: 2AC4F1  		ld	hl,(dirbuf)	;get its location.
E907: AF      		xor	a		;clear summation byte.
E908: 86      	chksum1:add	a,(hl)		;and compute sum ignoring carries.
E909: 23      		inc	hl
E90A: 0D      		dec	c
E90B: C208E9  		jp	nz,chksum1
E90E: C9      		ret	
              	;
              	;   shift (hl) left (c) bits.
              	;
E90F: 0C      	shiftl:	inc	c
E910: 0D      	shiftl1:dec	c
E911: C8      		ret	z
E912: 29      		add	hl,hl		;shift left 1 bit.
E913: C310E9  		jp	shiftl1
              	;
              	;   routine to set a bit in a 16 bit value contained in (bc).
              	; the bit set depends on the current drive selection.
              	;
E916: C5      	setbit:	push	bc		;save 16 bit word.
E917: 3A4DE7  		ld	a,(active)	;get active drive.
E91A: 4F      		ld	c,a
E91B: 210100  		ld	hl,1
E91E: CD0FE9  		call	shiftl		;shift bit 0 into place.
E921: C1      		pop	bc		;now 'or' this with the original word.
E922: 79      		ld	a,c
E923: B5      		or	l
E924: 6F      		ld	l,a		;low byte done, do high byte.
E925: 78      		ld	a,b
E926: B4      		or	h
E927: 67      		ld	h,a
E928: C9      		ret	
              	;
              	;   extract the write protect status bit for the current drive.
              	; the result is returned in (a), bit 0.
              	;
E929: 2AB8F1  	getwprt:ld	hl,(wrtprt)	;get status bytes.
E92C: 3A4DE7  		ld	a,(active)	;which drive is current?
E92F: 4F      		ld	c,a
E930: CDF5E8  		call	shiftr		;shift status such that bit 0 is the
E933: 7D      		ld	a,l		;one of interest for this drive.
E934: E601    		and	01h		;and isolate it.
E936: C9      		ret	
              	;
              	;   function to write protect the current disk.
              	;
E937: 21B8F1  	wrtprtd:ld	hl,wrtprt	;point to status word.
E93A: 4E      		ld	c,(hl)		;set (bc) equal to the status.
E93B: 23      		inc	hl
E93C: 46      		ld	b,(hl)
E93D: CD16E9  		call	setbit		;and set this bit according to current drive.
E940: 22B8F1  		ld	(wrtprt),hl	;then save.
E943: 2AD3F1  		ld	hl,(dirsize)	;now save directory size limit.
E946: 23      		inc	hl		;remember the last one.
E947: EB      		ex	de,hl
E948: 2ABEF1  		ld	hl,(scratch1)	;and store it here.
E94B: 73      		ld	(hl),e		;put low byte.
E94C: 23      		inc	hl
E94D: 72      		ld	(hl),d		;then high byte.
E94E: C9      		ret	
              	;
              	;   check for a read only file.
              	;
E94F: CD69E9  	chkrofl:call	fcb2hl		;set (hl) to file entry in directory buffer.
E952: 110900  	ckrof1:	ld	de,9		;look at bit 7 of the ninth byte.
E955: 19      		add	hl,de
E956: 7E      		ld	a,(hl)
E957: 17      		rla	
E958: D0      		ret	nc		;return if ok.
E959: 2112E4  		ld	hl,rofile	;else, print error message and terminate.
E95C: C355E7  		jp	jumphl
              	;
              	;   check the write protect status of the active disk.
              	;
E95F: CD29E9  	chkwprt:call	getwprt
E962: C8      		ret	z		;return if ok.
E963: 2110E4  		ld	hl,rodisk	;else print message and terminate.
E966: C355E7  		jp	jumphl
              	;
              	;   routine to set (hl) pointing to the proper entry in the
              	; directory buffer.
              	;
E969: 2AC4F1  	fcb2hl:	ld	hl,(dirbuf)	;get address of buffer.
E96C: 3AF4F1  		ld	a,(fcbpos)	;relative position of file.
              	;
              	;   routine to add (a) to (hl).
              	;
E96F: 85      	adda2hl:add	a,l
E970: 6F      		ld	l,a
E971: D0      		ret	nc
E972: 24      		inc	h		;take care of any carry.
E973: C9      		ret	
              	;
              	;   routine to get the 's2' byte from the fcb supplied in
              	; the initial parameter specification.
              	;
E974: 2A4EE7  	gets2:	ld	hl,(params)	;get address of fcb.
E977: 110E00  		ld	de,14		;relative position of 's2'.
E97A: 19      		add	hl,de
E97B: 7E      		ld	a,(hl)		;extract this byte.
E97C: C9      		ret	
              	;
              	;   clear the 's2' byte in the fcb.
              	;
E97D: CD74E9  	clears2:call	gets2		;this sets (hl) pointing to it.
E980: 3600    		ld	(hl),0		;now clear it.
E982: C9      		ret	
              	;
              	;   set bit 7 in the 's2' byte of the fcb.
              	;
E983: CD74E9  	sets2b7:call	gets2		;get the byte.
E986: F680    		or	80h		;and set bit 7.
E988: 77      		ld	(hl),a		;then store.
E989: C9      		ret	
              	;
              	;   compare (filepos) with (scratch1) and set flags based on
              	; the difference. this checks to see if there are more file
              	; names in the directory. we are at (filepos) and there are
              	; (scratch1) of them to check.
              	;
E98A: 2AF5F1  	morefls:ld	hl,(filepos)	;we are here.
E98D: EB      		ex	de,hl
E98E: 2ABEF1  		ld	hl,(scratch1)	;and don't go past here.
E991: 7B      		ld	a,e		;compute difference but don't keep.
E992: 96      		sub	(hl)
E993: 23      		inc	hl
E994: 7A      		ld	a,d
E995: 9E      		sbc	a,(hl)		;set carry if no more names.
E996: C9      		ret	
              	;
              	;   call this routine to prevent (scratch1) from being greater
              	; than (filepos).
              	;
E997: CD8AE9  	chknmbr:call	morefls		;scratch1 too big?
E99A: D8      		ret	c
E99B: 13      		inc	de		;yes, reset it to (filepos).
E99C: 72      		ld	(hl),d
E99D: 2B      		dec	hl
E99E: 73      		ld	(hl),e
E99F: C9      		ret	
              	;
              	;   compute (hl)=(de)-(hl)
              	;
E9A0: 7B      	subhl:	ld	a,e		;compute difference.
E9A1: 95      		sub	l
E9A2: 6F      		ld	l,a		;store low byte.
E9A3: 7A      		ld	a,d
E9A4: 9C      		sbc	a,h
E9A5: 67      		ld	h,a		;and then high byte.
E9A6: C9      		ret	
              	;
              	;   set the directory checksum byte.
              	;
E9A7: 0EFF    	setdir:	ld	c,0ffh
              	;
              	;   routine to set or compare the directory checksum byte. if
              	; (c)=0ffh, then this will set the checksum byte. else the byte
              	; will be checked. if the check fails (the disk has been changed),
              	; then this disk will be write protected.
              	;
E9A9: 2AF7F1  	checkdir: ld	hl,(cksumtbl)
E9AC: EB      		ex	de,hl
E9AD: 2AD7F1  		ld	hl,(alloc1)
E9B0: CDA0E9  		call	subhl
E9B3: D0      		ret	nc		;ok if (cksumtbl) > (alloc1), so return.
E9B4: C5      		push	bc
E9B5: CD02E9  		call	checksum	;else compute checksum.
E9B8: 2AC8F1  		ld	hl,(chkvect)	;get address of checksum table.
E9BB: EB      		ex	de,hl
E9BC: 2AF7F1  		ld	hl,(cksumtbl)
E9BF: 19      		add	hl,de		;set (hl) to point to byte for this drive.
E9C0: C1      		pop	bc
E9C1: 0C      		inc	c		;set or check ?
E9C2: CACFE9  		jp	z,chkdir1
E9C5: BE      		cp	(hl)		;check them.
E9C6: C8      		ret	z		;return if they are the same.
E9C7: CD8AE9  		call	morefls		;not the same, do we care?
E9CA: D0      		ret	nc
E9CB: CD37E9  		call	wrtprtd		;yes, mark this as write protected.
E9CE: C9      		ret	
E9CF: 77      	chkdir1:ld	(hl),a		;just set the byte.
E9D0: C9      		ret	
              	;
              	;   do a write to the directory of the current disk.
              	;
E9D1: CDA7E9  	dirwrite: call	setdir		;set checksum byte.
E9D4: CDEBE9  		call	dirdma		;set directory dma address.
E9D7: 0E01    		ld	c,1		;tell the bios to actually write.
E9D9: CDC3E7  		call	dowrite		;then do the write.
E9DC: C3E5E9  		jp	defdma
              	;
              	;   read from the directory.
              	;
E9DF: CDEBE9  	dirread:call	dirdma		;set the directory dma address.
E9E2: CDBDE7  		call	doread		;and read it.
              	;
              	;   routine to set the dma address to the users choice.
              	;
E9E5: 21BCF1  	defdma:	ld	hl,userdma	;reset the default dma address and return.
E9E8: C3EEE9  		jp	dirdma1
              	;
              	;   routine to set the dma address for directory work.
              	;
E9EB: 21C4F1  	dirdma:	ld	hl,dirbuf
              	;
              	;   set the dma address. on entry, (hl) points to
              	; word containing the desired dma address.
              	;
E9EE: 4E      	dirdma1:ld	c,(hl)
E9EF: 23      		inc	hl
E9F0: 46      		ld	b,(hl)		;setup (bc) and go to the bios to set it.
E9F1: C306F3  		jp	setdma
              	;
              	;   move the directory buffer into user's dma space.
              	;
E9F4: 2AC4F1  	movedir:ld	hl,(dirbuf)	;buffer is located here, and
E9F7: EB      		ex	de,hl
E9F8: 2ABCF1  		ld	hl,(userdma)	; put it here.
E9FB: 0E80    		ld	c,128		;this is its length.
E9FD: C35AE7  		jp	de2hl		;move it now and return.
              	;
              	;   check (filepos) and set the zero flag if it equals 0ffffh.
              	;
EA00: 21F5F1  	ckfilpos: ld	hl,filepos
EA03: 7E      		ld	a,(hl)
EA04: 23      		inc	hl
EA05: BE      		cp	(hl)		;are both bytes the same?
EA06: C0      		ret	nz
EA07: 3C      		inc	a		;yes, but are they each 0ffh?
EA08: C9      		ret	
              	;
              	;   set location (filepos) to 0ffffh.
              	;
EA09: 21FFFF  	stfilpos: ld	hl,0ffffh
EA0C: 22F5F1  		ld	(filepos),hl
EA0F: C9      		ret	
              	;
              	;   move on to the next file position within the current
              	; directory buffer. if no more exist, set pointer to 0ffffh
              	; and the calling routine will check for this. enter with (c)
              	; equal to 0ffh to cause the checksum byte to be set, else we
              	; will check this disk and set write protect if checksums are
              	; not the same (applies only if another directory sector must
              	; be read).
              	;
EA10: 2AD3F1  	nxentry:ld	hl,(dirsize)	;get directory entry size limit.
EA13: EB      		ex	de,hl
EA14: 2AF5F1  		ld	hl,(filepos)	;get current count.
EA17: 23      		inc	hl		;go on to the next one.
EA18: 22F5F1  		ld	(filepos),hl
EA1B: CDA0E9  		call	subhl		;(hl)=(dirsize)-(filepos)
EA1E: D224EA  		jp	nc,nxent1	;is there more room left?
EA21: C309EA  		jp	stfilpos	;no. set this flag and return.
EA24: 3AF5F1  	nxent1:	ld	a,(filepos)	;get file position within directory.
EA27: E603    		and	03h		;only look within this sector (only 4 entries fit).
EA29: 0605    		ld	b,5		;convert to relative position (32 bytes each).
EA2B: 87      	nxent2:	add	a,a		;note that this is not efficient code.
EA2C: 05      		dec	b		;5 'add a's would be better.
EA2D: C22BEA  		jp	nz,nxent2
EA30: 32F4F1  		ld	(fcbpos),a	;save it as position of fcb.
EA33: B7      		or	a
EA34: C0      		ret	nz		;return if we are within buffer.
EA35: C5      		push	bc
EA36: CDCEE7  		call	trksec		;we need the next directory sector.
EA39: CDDFE9  		call	dirread
EA3C: C1      		pop	bc
EA3D: C3A9E9  		jp	checkdir
              	;
              	;   routine to to get a bit from the disk space allocation
              	; map. it is returned in (a), bit position 0. on entry to here,
              	; set (bc) to the block number on the disk to check.
              	; on return, (d) will contain the original bit position for
              	; this block number and (hl) will point to the address for it.
              	;
EA40: 79      	ckbitmap: ld	a,c		;determine bit number of interest.
EA41: E607    		and	07h		;compute (d)=(e)=(c and 7)+1.
EA43: 3C      		inc	a
EA44: 5F      		ld	e,a		;save particular bit number.
EA45: 57      		ld	d,a
              	;
              	;   compute (bc)=(bc)/8.
              	;
EA46: 79      		ld	a,c
EA47: 0F      		rrca			;now shift right 3 bits.
EA48: 0F      		rrca	
EA49: 0F      		rrca	
EA4A: E61F    		and	1fh		;and clear bits 7,6,5.
EA4C: 4F      		ld	c,a
EA4D: 78      		ld	a,b
EA4E: 87      		add	a,a		;now shift (b) into bits 7,6,5.
EA4F: 87      		add	a,a
EA50: 87      		add	a,a
EA51: 87      		add	a,a
EA52: 87      		add	a,a
EA53: B1      		or	c		;and add in (c).
EA54: 4F      		ld	c,a		;ok, (c) ha been completed.
EA55: 78      		ld	a,b		;is there a better way of doing this?
EA56: 0F      		rrca	
EA57: 0F      		rrca	
EA58: 0F      		rrca	
EA59: E61F    		and	1fh
EA5B: 47      		ld	b,a		;and now (b) is completed.
              	;
              	;   use this as an offset into the disk space allocation
              	; table.
              	;
EA5C: 2ACAF1  		ld	hl,(alocvect)
EA5F: 09      		add	hl,bc
EA60: 7E      		ld	a,(hl)		;now get correct byte.
EA61: 07      	ckbmap1:rlca			;get correct bit into position 0.
EA62: 1D      		dec	e
EA63: C261EA  		jp	nz,ckbmap1
EA66: C9      		ret	
              	;
              	;   set or clear the bit map such that block number (bc) will be marked
              	; as used. on entry, if (e)=0 then this bit will be cleared, if it equals
              	; 1 then it will be set (don't use anyother values).
              	;
EA67: D5      	stbitmap: push	de
EA68: CD40EA  		call	ckbitmap	;get the byte of interest.
EA6B: E6FE    		and	0feh		;clear the affected bit.
EA6D: C1      		pop	bc
EA6E: B1      		or	c		;and now set it acording to (c).
              	;
              	;  entry to restore the original bit position and then store
              	; in table. (a) contains the value, (d) contains the bit
              	; position (1-8), and (hl) points to the address within the
              	; space allocation table for this byte.
              	;
EA6F: 0F      	stbmap1:rrca			;restore original bit position.
EA70: 15      		dec	d
EA71: C26FEA  		jp	nz,stbmap1
EA74: 77      		ld	(hl),a		;and stor byte in table.
EA75: C9      		ret	
              	;
              	;   set/clear space used bits in allocation map for this file.
              	; on entry, (c)=1 to set the map and (c)=0 to clear it.
              	;
EA76: CD69E9  	setfile:call	fcb2hl		;get address of fcb
EA79: 111000  		ld	de,16
EA7C: 19      		add	hl,de		;get to block number bytes.
EA7D: C5      		push	bc
EA7E: 0E11    		ld	c,17		;check all 17 bytes (max) of table.
EA80: D1      	setfl1:	pop	de
EA81: 0D      		dec	c		;done all bytes yet?
EA82: C8      		ret	z
EA83: D5      		push	de
EA84: 3AE8F1  		ld	a,(bigdisk)	;check disk size for 16 bit block numbers.
EA87: B7      		or	a
EA88: CA93EA  		jp	z,setfl2
EA8B: C5      		push	bc		;only 8 bit numbers. set (bc) to this one.
EA8C: E5      		push	hl
EA8D: 4E      		ld	c,(hl)		;get low byte from table, always
EA8E: 0600    		ld	b,0		;set high byte to zero.
EA90: C399EA  		jp	setfl3
EA93: 0D      	setfl2:	dec	c		;for 16 bit block numbers, adjust counter.
EA94: C5      		push	bc
EA95: 4E      		ld	c,(hl)		;now get both the low and high bytes.
EA96: 23      		inc	hl
EA97: 46      		ld	b,(hl)
EA98: E5      		push	hl
EA99: 79      	setfl3:	ld	a,c		;block used?
EA9A: B0      		or	b
EA9B: CAA8EA  		jp	z,setfl4
EA9E: 2AD1F1  		ld	hl,(dsksize)	;is this block number within the
EAA1: 7D      		ld	a,l		;space on the disk?
EAA2: 91      		sub	c
EAA3: 7C      		ld	a,h
EAA4: 98      		sbc	a,b
EAA5: D467EA  		call	nc,stbitmap	;yes, set the proper bit.
EAA8: E1      	setfl4:	pop	hl		;point to next block number in fcb.
EAA9: 23      		inc	hl
EAAA: C1      		pop	bc
EAAB: C380EA  		jp	setfl1
              	;
              	;   construct the space used allocation bit map for the active
              	; drive. if a file name starts with '$' and it is under the
              	; current user number, then (status) is set to minus 1. otherwise
              	; it is not set at all.
              	;
EAAE: 2AD1F1  	bitmap:	ld	hl,(dsksize)	;compute size of allocation table.
EAB1: 0E03    		ld	c,3
EAB3: CDF5E8  		call	shiftr		;(hl)=(hl)/8.
EAB6: 23      		inc	hl		;at lease 1 byte.
EAB7: 44      		ld	b,h
EAB8: 4D      		ld	c,l		;set (bc) to the allocation table length.
              	;
              	;   initialize the bitmap for this drive. right now, the first
              	; two bytes are specified by the disk parameter block. however
              	; a patch could be entered here if it were necessary to setup
              	; this table in a special mannor. for example, the bios could
              	; determine locations of 'bad blocks' and set them as already
              	; 'used' in the map.
              	;
EAB9: 2ACAF1  		ld	hl,(alocvect)	;now zero out the table now.
EABC: 3600    	bitmap1:ld	(hl),0
EABE: 23      		inc	hl
EABF: 0B      		dec	bc
EAC0: 78      		ld	a,b
EAC1: B1      		or	c
EAC2: C2BCEA  		jp	nz,bitmap1
EAC5: 2AD5F1  		ld	hl,(alloc0)	;get initial space used by directory.
EAC8: EB      		ex	de,hl
EAC9: 2ACAF1  		ld	hl,(alocvect)	;and put this into map.
EACC: 73      		ld	(hl),e
EACD: 23      		inc	hl
EACE: 72      		ld	(hl),d
              	;
              	;   end of initialization portion.
              	;
EACF: CDACE7  		call	homedrv		;now home the drive.
EAD2: 2ABEF1  		ld	hl,(scratch1)
EAD5: 3603    		ld	(hl),3		;force next directory request to read
EAD7: 23      		inc	hl		;in a sector.
EAD8: 3600    		ld	(hl),0
EADA: CD09EA  		call	stfilpos	;clear initial file position also.
EADD: 0EFF    	bitmap2:ld	c,0ffh		;read next file name in directory
EADF: CD10EA  		call	nxentry		;and set checksum byte.
EAE2: CD00EA  		call	ckfilpos	;is there another file?
EAE5: C8      		ret	z
EAE6: CD69E9  		call	fcb2hl		;yes, get its address.
EAE9: 3EE5    		ld	a,0e5h
EAEB: BE      		cp	(hl)		;empty file entry?
EAEC: CADDEA  		jp	z,bitmap2
EAEF: 3A4CE7  		ld	a,(userno)	;no, correct user number?
EAF2: BE      		cp	(hl)
EAF3: C201EB  		jp	nz,bitmap3
EAF6: 23      		inc	hl
EAF7: 7E      		ld	a,(hl)		;yes, does name start with a '$'?
EAF8: D624    		sub	'$'
EAFA: C201EB  		jp	nz,bitmap3
EAFD: 3D      		dec	a		;yes, set atatus to minus one.
EAFE: 3250E7  		ld	(status),a
EB01: 0E01    	bitmap3:ld	c,1		;now set this file's space as used in bit map.
EB03: CD76EA  		call	setfile
EB06: CD97E9  		call	chknmbr		;keep (scratch1) in bounds.
EB09: C3DDEA  		jp	bitmap2
              	;
              	;   set the status (status) and return.
              	;
EB0C: 3ADFF1  	ststatus: ld	a,(fndstat)
EB0F: C30CE7  		jp	setstat
              	;
              	;   check extents in (a) and (c). set the zero flag if they
              	; are the same. the number of 16k chunks of disk space that
              	; the directory extent covers is expressad is (extmask+1).
              	; no registers are modified.
              	;
EB12: C5      	samext:	push	bc
EB13: F5      		push	af
EB14: 3AD0F1  		ld	a,(extmask)	;get extent mask and use it to
EB17: 2F      		cpl			;to compare both extent numbers.
EB18: 47      		ld	b,a		;save resulting mask here.
EB19: 79      		ld	a,c		;mask first extent and save in (c).
EB1A: A0      		and	b
EB1B: 4F      		ld	c,a
EB1C: F1      		pop	af		;now mask second extent and compare
EB1D: A0      		and	b		;with the first one.
EB1E: 91      		sub	c
EB1F: E61F    		and	1fh		;(* only check buts 0-4 *)
EB21: C1      		pop	bc		;the zero flag is set if they are the same.
EB22: C9      		ret			;restore (bc) and return.
              	;
              	;   search for the first occurence of a file name. on entry,
              	; register (c) should contain the number of bytes of the fcb
              	; that must match.
              	;
EB23: 3EFF    	findfst:ld	a,0ffh
EB25: 32DFF1  		ld	(fndstat),a
EB28: 21E3F1  		ld	hl,counter	;save character count.
EB2B: 71      		ld	(hl),c
EB2C: 2A4EE7  		ld	hl,(params)	;get filename to match.
EB2F: 22E4F1  		ld	(savefcb),hl	;and save.
EB32: CD09EA  		call	stfilpos	;clear initial file position (set to 0ffffh).
EB35: CDACE7  		call	homedrv		;home the drive.
              	;
              	;   entry to locate the next occurence of a filename within the
              	; directory. the disk is not expected to have been changed. if
              	; it was, then it will be write protected.
              	;
EB38: 0E00    	findnxt:ld	c,0		;write protect the disk if changed.
EB3A: CD10EA  		call	nxentry		;get next filename entry in directory.
EB3D: CD00EA  		call	ckfilpos	;is file position = 0ffffh?
EB40: CA9FEB  		jp	z,fndnxt6	;yes, exit now then.
EB43: 2AE4F1  		ld	hl,(savefcb)	;set (de) pointing to filename to match.
EB46: EB      		ex	de,hl
EB47: 1A      		ld	a,(de)
EB48: FEE5    		cp	0e5h		;empty directory entry?
EB4A: CA55EB  		jp	z,fndnxt1	;(* are we trying to reserect erased entries? *)
EB4D: D5      		push	de
EB4E: CD8AE9  		call	morefls		;more files in directory?
EB51: D1      		pop	de
EB52: D29FEB  		jp	nc,fndnxt6	;no more. exit now.
EB55: CD69E9  	fndnxt1:call	fcb2hl		;get address of this fcb in directory.
EB58: 3AE3F1  		ld	a,(counter)	;get number of bytes (characters) to check.
EB5B: 4F      		ld	c,a
EB5C: 0600    		ld	b,0		;initialize byte position counter.
EB5E: 79      	fndnxt2:ld	a,c		;are we done with the compare?
EB5F: B7      		or	a
EB60: CA8EEB  		jp	z,fndnxt5
EB63: 1A      		ld	a,(de)		;no, check next byte.
EB64: FE3F    		cp	'?'		;don't care about this character?
EB66: CA87EB  		jp	z,fndnxt4
EB69: 78      		ld	a,b		;get bytes position in fcb.
EB6A: FE0D    		cp	13		;don't care about the thirteenth byte either.
EB6C: CA87EB  		jp	z,fndnxt4
EB6F: FE0C    		cp	12		;extent byte?
EB71: 1A      		ld	a,(de)
EB72: CA7EEB  		jp	z,fndnxt3
EB75: 96      		sub	(hl)		;otherwise compare characters.
EB76: E67F    		and	7fh
EB78: C238EB  		jp	nz,findnxt	;not the same, check next entry.
EB7B: C387EB  		jp	fndnxt4		;so far so good, keep checking.
EB7E: C5      	fndnxt3:push	bc		;check the extent byte here.
EB7F: 4E      		ld	c,(hl)
EB80: CD12EB  		call	samext
EB83: C1      		pop	bc
EB84: C238EB  		jp	nz,findnxt	;not the same, look some more.
              	;
              	;   so far the names compare. bump pointers to the next byte
              	; and continue until all (c) characters have been checked.
              	;
EB87: 13      	fndnxt4:inc	de		;bump pointers.
EB88: 23      		inc	hl
EB89: 04      		inc	b
EB8A: 0D      		dec	c		;adjust character counter.
EB8B: C35EEB  		jp	fndnxt2
EB8E: 3AF5F1  	fndnxt5:ld	a,(filepos)	;return the position of this entry.
EB91: E603    		and	03h
EB93: 3250E7  		ld	(status),a
EB96: 21DFF1  		ld	hl,fndstat
EB99: 7E      		ld	a,(hl)
EB9A: 17      		rla	
EB9B: D0      		ret	nc
EB9C: AF      		xor	a
EB9D: 77      		ld	(hl),a
EB9E: C9      		ret	
              	;
              	;   filename was not found. set appropriate status.
              	;
EB9F: CD09EA  	fndnxt6:call	stfilpos	;set (filepos) to 0ffffh.
EBA2: 3EFF    		ld	a,0ffh		;say not located.
EBA4: C30CE7  		jp	setstat
              	;
              	;   erase files from the directory. only the first byte of the
              	; fcb will be affected. it is set to (e5).
              	;
EBA7: CD5FE9  	erafile:call	chkwprt		;is disk write protected?
EBAA: 0E0C    		ld	c,12		;only compare file names.
EBAC: CD23EB  		call	findfst		;get first file name.
EBAF: CD00EA  	erafil1:call	ckfilpos	;any found?
EBB2: C8      		ret	z		;nope, we must be done.
EBB3: CD4FE9  		call	chkrofl		;is file read only?
EBB6: CD69E9  		call	fcb2hl		;nope, get address of fcb and
EBB9: 36E5    		ld	(hl),0e5h	;set first byte to 'empty'.
EBBB: 0E00    		ld	c,0		;clear the space from the bit map.
EBBD: CD76EA  		call	setfile
EBC0: CDD1E9  		call	dirwrite	;now write the directory sector back out.
EBC3: CD38EB  		call	findnxt		;find the next file name.
EBC6: C3AFEB  		jp	erafil1		;and repeat process.
              	;
              	;   look through the space allocation map (bit map) for the
              	; next available block. start searching at block number (bc-1).
              	; the search procedure is to look for an empty block that is
              	; before the starting block. if not empty, look at a later
              	; block number. in this way, we return the closest empty block
              	; on either side of the 'target' block number. this will speed
              	; access on random devices. for serial devices, this should be
              	; changed to look in the forward direction first and then start
              	; at the front and search some more.
              	;
              	;   on return, (de)= block number that is empty and (hl) =0
              	; if no empry block was found.
              	;
EBC9: 50      	fndspace: ld	d,b		;set (de) as the block that is checked.
EBCA: 59      		ld	e,c
              	;
              	;   look before target block. registers (bc) are used as the lower
              	; pointer and (de) as the upper pointer.
              	;
EBCB: 79      	fndspa1:ld	a,c		;is block 0 specified?
EBCC: B0      		or	b
EBCD: CADCEB  		jp	z,fndspa2
EBD0: 0B      		dec	bc		;nope, check previous block.
EBD1: D5      		push	de
EBD2: C5      		push	bc
EBD3: CD40EA  		call	ckbitmap
EBD6: 1F      		rra			;is this block empty?
EBD7: D2F7EB  		jp	nc,fndspa3	;yes. use this.
              	;
              	;   note that the above logic gets the first block that it finds
              	; that is empty. thus a file could be written 'backward' making
              	; it very slow to access. this could be changed to look for the
              	; first empty block and then continue until the start of this
              	; empty space is located and then used that starting block.
              	; this should help speed up access to some files especially on
              	; a well used disk with lots of fairly small 'holes'.
              	;
EBDA: C1      		pop	bc		;nope, check some more.
EBDB: D1      		pop	de
              	;
              	;   now look after target block.
              	;
EBDC: 2AD1F1  	fndspa2:ld	hl,(dsksize)	;is block (de) within disk limits?
EBDF: 7B      		ld	a,e
EBE0: 95      		sub	l
EBE1: 7A      		ld	a,d
EBE2: 9C      		sbc	a,h
EBE3: D2FFEB  		jp	nc,fndspa4
EBE6: 13      		inc	de		;yes, move on to next one.
EBE7: C5      		push	bc
EBE8: D5      		push	de
EBE9: 42      		ld	b,d
EBEA: 4B      		ld	c,e
EBEB: CD40EA  		call	ckbitmap	;check it.
EBEE: 1F      		rra			;empty?
EBEF: D2F7EB  		jp	nc,fndspa3
EBF2: D1      		pop	de		;nope, continue searching.
EBF3: C1      		pop	bc
EBF4: C3CBEB  		jp	fndspa1
              	;
              	;   empty block found. set it as used and return with (hl)
              	; pointing to it (true?).
              	;
EBF7: 17      	fndspa3:rla			;reset byte.
EBF8: 3C      		inc	a		;and set bit 0.
EBF9: CD6FEA  		call	stbmap1		;update bit map.
EBFC: E1      		pop	hl		;set return registers.
EBFD: D1      		pop	de
EBFE: C9      		ret	
              	;
              	;   free block was not found. if (bc) is not zero, then we have
              	; not checked all of the disk space.
              	;
EBFF: 79      	fndspa4:ld	a,c
EC00: B0      		or	b
EC01: C2CBEB  		jp	nz,fndspa1
EC04: 210000  		ld	hl,0		;set 'not found' status.
EC07: C9      		ret	
              	;
              	;   move a complete fcb entry into the directory and write it.
              	;
EC08: 0E00    	fcbset:	ld	c,0
EC0A: 1E20    		ld	e,32		;length of each entry.
              	;
              	;   move (e) bytes from the fcb pointed to by (params) into
              	; fcb in directory starting at relative byte (c). this updated
              	; directory buffer is then written to the disk.
              	;
EC0C: D5      	update:	push	de
EC0D: 0600    		ld	b,0		;set (bc) to relative byte position.
EC0F: 2A4EE7  		ld	hl,(params)	;get address of fcb.
EC12: 09      		add	hl,bc		;compute starting byte.
EC13: EB      		ex	de,hl
EC14: CD69E9  		call	fcb2hl		;get address of fcb to update in directory.
EC17: C1      		pop	bc		;set (c) to number of bytes to change.
EC18: CD5AE7  		call	de2hl
EC1B: CDCEE7  	update1:call	trksec		;determine the track and sector affected.
EC1E: C3D1E9  		jp	dirwrite	;then write this sector out.
              	;
              	;   routine to change the name of all files on the disk with a
              	; specified name. the fcb contains the current name as the
              	; first 12 characters and the new name 16 bytes into the fcb.
              	;
EC21: CD5FE9  	chgnames: call	chkwprt		;check for a write protected disk.
EC24: 0E0C    		ld	c,12		;match first 12 bytes of fcb only.
EC26: CD23EB  		call	findfst		;get first name.
EC29: 2A4EE7  		ld	hl,(params)	;get address of fcb.
EC2C: 7E      		ld	a,(hl)		;get user number.
EC2D: 111000  		ld	de,16		;move over to desired name.
EC30: 19      		add	hl,de
EC31: 77      		ld	(hl),a		;keep same user number.
EC32: CD00EA  	chgnam1:call	ckfilpos	;any matching file found?
EC35: C8      		ret	z		;no, we must be done.
EC36: CD4FE9  		call	chkrofl		;check for read only file.
EC39: 0E10    		ld	c,16		;start 16 bytes into fcb.
EC3B: 1E0C    		ld	e,12		;and update the first 12 bytes of directory.
EC3D: CD0CEC  		call	update
EC40: CD38EB  		call	findnxt		;get te next file name.
EC43: C332EC  		jp	chgnam1		;and continue.
              	;
              	;   update a files attributes. the procedure is to search for
              	; every file with the same name as shown in fcb (ignoring bit 7)
              	; and then to update it (which includes bit 7). no other changes
              	; are made.
              	;
EC46: 0E0C    	saveattr: ld	c,12		;match first 12 bytes.
EC48: CD23EB  		call	findfst		;look for first filename.
EC4B: CD00EA  	savatr1:call	ckfilpos	;was one found?
EC4E: C8      		ret	z		;nope, we must be done.
EC4F: 0E00    		ld	c,0		;yes, update the first 12 bytes now.
EC51: 1E0C    		ld	e,12
EC53: CD0CEC  		call	update		;update filename and write directory.
EC56: CD38EB  		call	findnxt		;and get the next file.
EC59: C34BEC  		jp	savatr1		;then continue until done.
              	;
              	;  open a file (name specified in fcb).
              	;
EC5C: 0E0F    	openit:	ld	c,15		;compare the first 15 bytes.
EC5E: CD23EB  		call	findfst		;get the first one in directory.
EC61: CD00EA  		call	ckfilpos	;any at all?
EC64: C8      		ret	z
EC65: CDB1E8  	openit1:call	setext		;point to extent byte within users fcb.
EC68: 7E      		ld	a,(hl)		;and get it.
EC69: F5      		push	af		;save it and address.
EC6A: E5      		push	hl
EC6B: CD69E9  		call	fcb2hl		;point to fcb in directory.
EC6E: EB      		ex	de,hl
EC6F: 2A4EE7  		ld	hl,(params)	;this is the users copy.
EC72: 0E20    		ld	c,32		;move it into users space.
EC74: D5      		push	de
EC75: CD5AE7  		call	de2hl
EC78: CD83E9  		call	sets2b7		;set bit 7 in 's2' byte (unmodified).
EC7B: D1      		pop	de		;now get the extent byte from this fcb.
EC7C: 210C00  		ld	hl,12
EC7F: 19      		add	hl,de
EC80: 4E      		ld	c,(hl)		;into (c).
EC81: 210F00  		ld	hl,15		;now get the record count byte into (b).
EC84: 19      		add	hl,de
EC85: 46      		ld	b,(hl)
EC86: E1      		pop	hl		;keep the same extent as the user had originally.
EC87: F1      		pop	af
EC88: 77      		ld	(hl),a
EC89: 79      		ld	a,c		;is it the same as in the directory fcb?
EC8A: BE      		cp	(hl)
EC8B: 78      		ld	a,b		;if yes, then use the same record count.
EC8C: CA96EC  		jp	z,openit2
EC8F: 3E00    		ld	a,0		;if the user specified an extent greater than
EC91: DA96EC  		jp	c,openit2	;the one in the directory, then set record count to 0.
EC94: 3E80    		ld	a,128		;otherwise set to maximum.
EC96: 2A4EE7  	openit2:ld	hl,(params)	;set record count in users fcb to (a).
EC99: 110F00  		ld	de,15
EC9C: 19      		add	hl,de		;compute relative position.
EC9D: 77      		ld	(hl),a		;and set the record count.
EC9E: C9      		ret	
              	;
              	;   move two bytes from (de) to (hl) if (and only if) (hl)
              	; point to a zero value (16 bit).
              	;   return with zero flag set it (de) was moved. registers (de)
              	; and (hl) are not changed. however (a) is.
              	;
EC9F: 7E      	moveword: ld	a,(hl)		;check for a zero word.
ECA0: 23      		inc	hl
ECA1: B6      		or	(hl)		;both bytes zero?
ECA2: 2B      		dec	hl
ECA3: C0      		ret	nz		;nope, just return.
ECA4: 1A      		ld	a,(de)		;yes, move two bytes from (de) into
ECA5: 77      		ld	(hl),a		;this zero space.
ECA6: 13      		inc	de
ECA7: 23      		inc	hl
ECA8: 1A      		ld	a,(de)
ECA9: 77      		ld	(hl),a
ECAA: 1B      		dec	de		;don't disturb these registers.
ECAB: 2B      		dec	hl
ECAC: C9      		ret	
              	;
              	;   get here to close a file specified by (fcb).
              	;
ECAD: AF      	closeit:xor	a		;clear status and file position bytes.
ECAE: 3250E7  		ld	(status),a
ECB1: 32F5F1  		ld	(filepos),a
ECB4: 32F6F1  		ld	(filepos+1),a
ECB7: CD29E9  		call	getwprt		;get write protect bit for this drive.
ECBA: C0      		ret	nz		;just return if it is set.
ECBB: CD74E9  		call	gets2		;else get the 's2' byte.
ECBE: E680    		and	80h		;and look at bit 7 (file unmodified?).
ECC0: C0      		ret	nz		;just return if set.
ECC1: 0E0F    		ld	c,15		;else look up this file in directory.
ECC3: CD23EB  		call	findfst
ECC6: CD00EA  		call	ckfilpos	;was it found?
ECC9: C8      		ret	z		;just return if not.
ECCA: 011000  		ld	bc,16		;set (hl) pointing to records used section.
ECCD: CD69E9  		call	fcb2hl
ECD0: 09      		add	hl,bc
ECD1: EB      		ex	de,hl
ECD2: 2A4EE7  		ld	hl,(params)	;do the same for users specified fcb.
ECD5: 09      		add	hl,bc
ECD6: 0E10    		ld	c,16		;this many bytes are present in this extent.
ECD8: 3AE8F1  	closeit1: ld	a,(bigdisk)	;8 or 16 bit record numbers?
ECDB: B7      		or	a
ECDC: CAF3EC  		jp	z,closeit4
ECDF: 7E      		ld	a,(hl)		;just 8 bit. get one from users fcb.
ECE0: B7      		or	a
ECE1: 1A      		ld	a,(de)		;now get one from directory fcb.
ECE2: C2E6EC  		jp	nz,closeit2
ECE5: 77      		ld	(hl),a		;users byte was zero. update from directory.
ECE6: B7      	closeit2: or	a
ECE7: C2ECEC  		jp	nz,closeit3
ECEA: 7E      		ld	a,(hl)		;directories byte was zero, update from users fcb.
ECEB: 12      		ld	(de),a
ECEC: BE      	closeit3: cp	(hl)		;if neither one of these bytes were zero,
ECED: C22AED  		jp	nz,closeit7	;then close error if they are not the same.
ECF0: C308ED  		jp	closeit5	;ok so far, get to next byte in fcbs.
ECF3: CD9FEC  	closeit4: call	moveword	;update users fcb if it is zero.
ECF6: EB      		ex	de,hl
ECF7: CD9FEC  		call	moveword	;update directories fcb if it is zero.
ECFA: EB      		ex	de,hl
ECFB: 1A      		ld	a,(de)		;if these two values are no different,
ECFC: BE      		cp	(hl)		;then a close error occured.
ECFD: C22AED  		jp	nz,closeit7
ED00: 13      		inc	de		;check second byte.
ED01: 23      		inc	hl
ED02: 1A      		ld	a,(de)
ED03: BE      		cp	(hl)
ED04: C22AED  		jp	nz,closeit7
ED07: 0D      		dec	c		;remember 16 bit values.
ED08: 13      	closeit5: inc	de		;bump to next item in table.
ED09: 23      		inc	hl
ED0A: 0D      		dec	c		;there are 16 entries only.
ED0B: C2D8EC  		jp	nz,closeit1	;continue if more to do.
ED0E: 01ECFF  		ld	bc,0ffech	;backup 20 places (extent byte).
ED11: 09      		add	hl,bc
ED12: EB      		ex	de,hl
ED13: 09      		add	hl,bc
ED14: 1A      		ld	a,(de)
ED15: BE      		cp	(hl)		;directory's extent already greater than the
ED16: DA22ED  		jp	c,closeit6	;users extent?
ED19: 77      		ld	(hl),a		;no, update directory extent.
ED1A: 010300  		ld	bc,3		;and update the record count byte in
ED1D: 09      		add	hl,bc		;directories fcb.
ED1E: EB      		ex	de,hl
ED1F: 09      		add	hl,bc
ED20: 7E      		ld	a,(hl)		;get from user.
ED21: 12      		ld	(de),a		;and put in directory.
ED22: 3EFF    	closeit6: ld	a,0ffh		;set 'was open and is now closed' byte.
ED24: 32DDF1  		ld	(closeflg),a
ED27: C31BEC  		jp	update1		;update the directory now.
ED2A: 2150E7  	closeit7: ld	hl,status	;set return status and then return.
ED2D: 35      		dec	(hl)
ED2E: C9      		ret	
              	;
              	;   routine to get the next empty space in the directory. it
              	; will then be cleared for use.
              	;
ED2F: CD5FE9  	getempty: call	chkwprt		;make sure disk is not write protected.
ED32: 2A4EE7  		ld	hl,(params)	;save current parameters (fcb).
ED35: E5      		push	hl
ED36: 21B7F1  		ld	hl,emptyfcb	;use special one for empty space.
ED39: 224EE7  		ld	(params),hl
ED3C: 0E01    		ld	c,1		;search for first empty spot in directory.
ED3E: CD23EB  		call	findfst		;(* only check first byte *)
ED41: CD00EA  		call	ckfilpos	;none?
ED44: E1      		pop	hl
ED45: 224EE7  		ld	(params),hl	;restore original fcb address.
ED48: C8      		ret	z		;return if no more space.
ED49: EB      		ex	de,hl
ED4A: 210F00  		ld	hl,15		;point to number of records for this file.
ED4D: 19      		add	hl,de
ED4E: 0E11    		ld	c,17		;and clear all of this space.
ED50: AF      		xor	a
ED51: 77      	getmt1:	ld	(hl),a
ED52: 23      		inc	hl
ED53: 0D      		dec	c
ED54: C251ED  		jp	nz,getmt1
ED57: 210D00  		ld	hl,13		;clear the 's1' byte also.
ED5A: 19      		add	hl,de
ED5B: 77      		ld	(hl),a
ED5C: CD97E9  		call	chknmbr		;keep (scratch1) within bounds.
ED5F: CD08EC  		call	fcbset		;write out this fcb entry to directory.
ED62: C383E9  		jp	sets2b7		;set 's2' byte bit 7 (unmodified at present).
              	;
              	;   routine to close the current extent and open the next one
              	; for reading.
              	;
ED65: AF      	getnext:xor	a
ED66: 32DDF1  		ld	(closeflg),a	;clear close flag.
ED69: CDADEC  		call	closeit		;close this extent.
ED6C: CD00EA  		call	ckfilpos
ED6F: C8      		ret	z		;not there???
ED70: 2A4EE7  		ld	hl,(params)	;get extent byte.
ED73: 010C00  		ld	bc,12
ED76: 09      		add	hl,bc
ED77: 7E      		ld	a,(hl)		;and increment it.
ED78: 3C      		inc	a
ED79: E61F    		and	1fh		;keep within range 0-31.
ED7B: 77      		ld	(hl),a
ED7C: CA8EED  		jp	z,gtnext1	;overflow?
ED7F: 47      		ld	b,a		;mask extent byte.
ED80: 3AD0F1  		ld	a,(extmask)
ED83: A0      		and	b
ED84: 21DDF1  		ld	hl,closeflg	;check close flag (0ffh is ok).
ED87: A6      		and	(hl)
ED88: CA99ED  		jp	z,gtnext2	;if zero, we must read in next extent.
ED8B: C3B7ED  		jp	gtnext3		;else, it is already in memory.
ED8E: 010200  	gtnext1:ld	bc,2		;point to the 's2' byte.
ED91: 09      		add	hl,bc
ED92: 34      		inc	(hl)		;and bump it.
ED93: 7E      		ld	a,(hl)		;too many extents?
ED94: E60F    		and	0fh
ED96: CAC1ED  		jp	z,gtnext5	;yes, set error code.
              	;
              	;   get here to open the next extent.
              	;
ED99: 0E0F    	gtnext2:ld	c,15		;set to check first 15 bytes of fcb.
ED9B: CD23EB  		call	findfst		;find the first one.
ED9E: CD00EA  		call	ckfilpos	;none available?
EDA1: C2B7ED  		jp	nz,gtnext3
EDA4: 3ADEF1  		ld	a,(rdwrtflg)	;no extent present. can we open an empty one?
EDA7: 3C      		inc	a		;0ffh means reading (so not possible).
EDA8: CAC1ED  		jp	z,gtnext5	;or an error.
EDAB: CD2FED  		call	getempty	;we are writing, get an empty entry.
EDAE: CD00EA  		call	ckfilpos	;none?
EDB1: CAC1ED  		jp	z,gtnext5	;error if true.
EDB4: C3BAED  		jp	gtnext4		;else we are almost done.
EDB7: CD65EC  	gtnext3:call	openit1		;open this extent.
EDBA: CDC6E8  	gtnext4:call	strdata		;move in updated data (rec #, extent #, etc.)
EDBD: AF      		xor	a		;clear status and return.
EDBE: C30CE7  		jp	setstat
              	;
              	;   error in extending the file. too many extents were needed
              	; or not enough space on the disk.
              	;
EDC1: CD10E7  	gtnext5:call	ioerr1		;set error code, clear bit 7 of 's2'
EDC4: C383E9  		jp	sets2b7		;so this is not written on a close.
              	;
              	;   read a sequential file.
              	;
EDC7: 3E01    	rdseq:	ld	a,1		;set sequential access mode.
EDC9: 32E0F1  		ld	(mode),a
EDCC: 3EFF    	rdseq1:	ld	a,0ffh		;don't allow reading unwritten space.
EDCE: 32DEF1  		ld	(rdwrtflg),a
EDD1: CDC6E8  		call	strdata		;put rec# and ext# into fcb.
EDD4: 3AEEF1  		ld	a,(savnrec)	;get next record to read.
EDD7: 21ECF1  		ld	hl,savnxt	;get number of records in extent.
EDDA: BE      		cp	(hl)		;within this extent?
EDDB: DAF1ED  		jp	c,rdseq2
EDDE: FE80    		cp	128		;no. is this extent fully used?
EDE0: C206EE  		jp	nz,rdseq3	;no. end-of-file.
EDE3: CD65ED  		call	getnext		;yes, open the next one.
EDE6: AF      		xor	a		;reset next record to read.
EDE7: 32EEF1  		ld	(savnrec),a
EDEA: 3A50E7  		ld	a,(status)	;check on open, successful?
EDED: B7      		or	a
EDEE: C206EE  		jp	nz,rdseq3	;no, error.
EDF1: CD82E8  	rdseq2:	call	comblk		;ok. compute block number to read.
EDF4: CD8FE8  		call	chkblk		;check it. within bounds?
EDF7: CA06EE  		jp	z,rdseq3	;no, error.
EDFA: CD95E8  		call	logical		;convert (blknmbr) to logical sector (128 byte).
EDFD: CDDCE7  		call	trksec1		;set the track and sector for this block #.
EE00: CDBDE7  		call	doread		;and read it.
EE03: C3DDE8  		jp	setnrec		;and set the next record to be accessed.
              	;
              	;   read error occured. set status and return.
              	;
EE06: C310E7  	rdseq3:	jp	ioerr1
              	;
              	;   write the next sequential record.
              	;
EE09: 3E01    	wtseq:	ld	a,1		;set sequential access mode.
EE0B: 32E0F1  		ld	(mode),a
EE0E: 3E00    	wtseq1:	ld	a,0		;allow an addition empty extent to be opened.
EE10: 32DEF1  		ld	(rdwrtflg),a
EE13: CD5FE9  		call	chkwprt		;check write protect status.
EE16: 2A4EE7  		ld	hl,(params)
EE19: CD52E9  		call	ckrof1		;check for read only file, (hl) already set to fcb.
EE1C: CDC6E8  		call	strdata		;put updated data into fcb.
EE1F: 3AEEF1  		ld	a,(savnrec)	;get record number to write.
EE22: FE80    		cp	128		;within range?
EE24: D210E7  		jp	nc,ioerr1	;no, error(?).
EE27: CD82E8  		call	comblk		;compute block number.
EE2A: CD8FE8  		call	chkblk		;check number.
EE2D: 0E00    		ld	c,0		;is there one to write to?
EE2F: C279EE  		jp	nz,wtseq6	;yes, go do it.
EE32: CD49E8  		call	getblock	;get next block number within fcb to use.
EE35: 32E2F1  		ld	(relblock),a	;and save.
EE38: 010000  		ld	bc,0		;start looking for space from the start
EE3B: B7      		or	a		;if none allocated as yet.
EE3C: CA46EE  		jp	z,wtseq2
EE3F: 4F      		ld	c,a		;extract previous block number from fcb
EE40: 0B      		dec	bc		;so we can be closest to it.
EE41: CD69E8  		call	extblk
EE44: 44      		ld	b,h
EE45: 4D      		ld	c,l
EE46: CDC9EB  	wtseq2:	call	fndspace	;find the next empty block nearest number (bc).
EE49: 7D      		ld	a,l		;check for a zero number.
EE4A: B4      		or	h
EE4B: C253EE  		jp	nz,wtseq3
EE4E: 3E02    		ld	a,2		;no more space?
EE50: C30CE7  		jp	setstat
EE53: 22F0F1  	wtseq3:	ld	(blknmbr),hl	;save block number to access.
EE56: EB      		ex	de,hl		;put block number into (de).
EE57: 2A4EE7  		ld	hl,(params)	;now we must update the fcb for this
EE5A: 011000  		ld	bc,16		;newly allocated block.
EE5D: 09      		add	hl,bc
EE5E: 3AE8F1  		ld	a,(bigdisk)	;8 or 16 bit block numbers?
EE61: B7      		or	a
EE62: 3AE2F1  		ld	a,(relblock)	;(* update this entry *)
EE65: CA6FEE  		jp	z,wtseq4	;zero means 16 bit ones.
EE68: CD6FE9  		call	adda2hl		;(hl)=(hl)+(a)
EE6B: 73      		ld	(hl),e		;store new block number.
EE6C: C377EE  		jp	wtseq5
EE6F: 4F      	wtseq4:	ld	c,a		;compute spot in this 16 bit table.
EE70: 0600    		ld	b,0
EE72: 09      		add	hl,bc
EE73: 09      		add	hl,bc
EE74: 73      		ld	(hl),e		;stuff block number (de) there.
EE75: 23      		inc	hl
EE76: 72      		ld	(hl),d
EE77: 0E02    	wtseq5:	ld	c,2		;set (c) to indicate writing to un-used disk space.
EE79: 3A50E7  	wtseq6:	ld	a,(status)	;are we ok so far?
EE7C: B7      		or	a
EE7D: C0      		ret	nz
EE7E: C5      		push	bc		;yes, save write flag for bios (register c).
EE7F: CD95E8  		call	logical		;convert (blknmbr) over to loical sectors.
EE82: 3AE0F1  		ld	a,(mode)	;get access mode flag (1=sequential,
EE85: 3D      		dec	a		;0=random, 2=special?).
EE86: 3D      		dec	a
EE87: C2C6EE  		jp	nz,wtseq9
              	;
              	;   special random i/o from function #40. maybe for m/pm, but the
              	; current block, if it has not been written to, will be zeroed
              	; out and then written (reason?).
              	;
EE8A: C1      		pop	bc
EE8B: C5      		push	bc
EE8C: 79      		ld	a,c		;get write status flag (2=writing unused space).
EE8D: 3D      		dec	a
EE8E: 3D      		dec	a
EE8F: C2C6EE  		jp	nz,wtseq9
EE92: E5      		push	hl
EE93: 2AC4F1  		ld	hl,(dirbuf)	;zero out the directory buffer.
EE96: 57      		ld	d,a		;note that (a) is zero here.
EE97: 77      	wtseq7:	ld	(hl),a
EE98: 23      		inc	hl
EE99: 14      		inc	d		;do 128 bytes.
EE9A: F297EE  		jp	p,wtseq7
EE9D: CDEBE9  		call	dirdma		;tell the bios the dma address for directory access.
EEA0: 2AF2F1  		ld	hl,(logsect)	;get sector that starts current block.
EEA3: 0E02    		ld	c,2		;set 'writing to unused space' flag.
EEA5: 22F0F1  	wtseq8:	ld	(blknmbr),hl	;save sector to write.
EEA8: C5      		push	bc
EEA9: CDDCE7  		call	trksec1		;determine its track and sector numbers.
EEAC: C1      		pop	bc
EEAD: CDC3E7  		call	dowrite		;now write out 128 bytes of zeros.
EEB0: 2AF0F1  		ld	hl,(blknmbr)	;get sector number.
EEB3: 0E00    		ld	c,0		;set normal write flag.
EEB5: 3ACFF1  		ld	a,(blkmask)	;determine if we have written the entire
EEB8: 47      		ld	b,a		;physical block.
EEB9: A5      		and	l
EEBA: B8      		cp	b
EEBB: 23      		inc	hl		;prepare for the next one.
EEBC: C2A5EE  		jp	nz,wtseq8	;continue until (blkmask+1) sectors written.
EEBF: E1      		pop	hl		;reset next sector number.
EEC0: 22F0F1  		ld	(blknmbr),hl
EEC3: CDE5E9  		call	defdma		;and reset dma address.
              	;
              	;   normal disk write. set the desired track and sector then
              	; do the actual write.
              	;
EEC6: CDDCE7  	wtseq9:	call	trksec1		;determine track and sector for this write.
EEC9: C1      		pop	bc		;get write status flag.
EECA: C5      		push	bc
EECB: CDC3E7  		call	dowrite		;and write this out.
EECE: C1      		pop	bc
EECF: 3AEEF1  		ld	a,(savnrec)	;get number of records in file.
EED2: 21ECF1  		ld	hl,savnxt	;get last record written.
EED5: BE      		cp	(hl)
EED6: DADDEE  		jp	c,wtseq10
EED9: 77      		ld	(hl),a		;we have to update record count.
EEDA: 34      		inc	(hl)
EEDB: 0E02    		ld	c,2
              	;
              	;*   this area has been patched to correct disk update problem
              	;* when using blocking and de-blocking in the bios.
              	;
EEDD: 00      	wtseq10:nop			;was 'dcr c'
EEDE: 00      		nop			;was 'dcr c'
EEDF: 210000  		ld	hl,0		;was 'jnz wtseq99'
              	;
              	; *   end of patch.
              	;
EEE2: F5      		push	af
EEE3: CD74E9  		call	gets2		;set 'extent written to' flag.
EEE6: E67F    		and	7fh		;(* clear bit 7 *)
EEE8: 77      		ld	(hl),a
EEE9: F1      		pop	af		;get record count for this extent.
EEEA: FE7F    	wtseq99:cp	127		;is it full?
EEEC: C20BEF  		jp	nz,wtseq12
EEEF: 3AE0F1  		ld	a,(mode)	;yes, are we in sequential mode?
EEF2: FE01    		cp	1
EEF4: C20BEF  		jp	nz,wtseq12
EEF7: CDDDE8  		call	setnrec		;yes, set next record number.
EEFA: CD65ED  		call	getnext		;and get next empty space in directory.
EEFD: 2150E7  		ld	hl,status	;ok?
EF00: 7E      		ld	a,(hl)
EF01: B7      		or	a
EF02: C209EF  		jp	nz,wtseq11
EF05: 3D      		dec	a		;yes, set record count to -1.
EF06: 32EEF1  		ld	(savnrec),a
EF09: 3600    	wtseq11:ld	(hl),0		;clear status.
EF0B: C3DDE8  	wtseq12:jp	setnrec		;set next record to access.
              	;
              	;   for random i/o, set the fcb for the desired record number
              	; based on the 'r0,r1,r2' bytes. these bytes in the fcb are
              	; used as follows:
              	;
              	;       fcb+35            fcb+34            fcb+33
              	;  |     'r-2'      |      'r-1'      |      'r-0'     |
              	;  |7             0 | 7             0 | 7             0|
              	;  |0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0|
              	;  |    overflow   | | extra |  extent   |   record #  |
              	;  | ______________| |_extent|__number___|_____________|
              	;                     also 's2'
              	;
              	;   on entry, register (c) contains 0ffh if this is a read
              	; and thus we can not access unwritten disk space. otherwise,
              	; another extent will be opened (for writing) if required.
              	;
EF0E: AF      	position: xor	a		;set random i/o flag.
EF0F: 32E0F1  		ld	(mode),a
              	;
              	;   special entry (function #40). m/pm ?
              	;
EF12: C5      	positn1:push	bc		;save read/write flag.
EF13: 2A4EE7  		ld	hl,(params)	;get address of fcb.
EF16: EB      		ex	de,hl
EF17: 212100  		ld	hl,33		;now get byte 'r0'.
EF1A: 19      		add	hl,de
EF1B: 7E      		ld	a,(hl)
EF1C: E67F    		and	7fh		;keep bits 0-6 for the record number to access.
EF1E: F5      		push	af
EF1F: 7E      		ld	a,(hl)		;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
EF20: 17      		rla	
EF21: 23      		inc	hl
EF22: 7E      		ld	a,(hl)
EF23: 17      		rla	
EF24: E61F    		and	1fh		;and save this in bits 0-4 of (c).
EF26: 4F      		ld	c,a		;this is the extent byte.
EF27: 7E      		ld	a,(hl)		;now get the extra extent byte.
EF28: 1F      		rra	
EF29: 1F      		rra	
EF2A: 1F      		rra	
EF2B: 1F      		rra	
EF2C: E60F    		and	0fh
EF2E: 47      		ld	b,a		;and save it in (b).
EF2F: F1      		pop	af		;get record number back to (a).
EF30: 23      		inc	hl		;check overflow byte 'r2'.
EF31: 6E      		ld	l,(hl)
EF32: 2C      		inc	l
EF33: 2D      		dec	l
EF34: 2E06    		ld	l,6		;prepare for error.
EF36: C296EF  		jp	nz,positn5	;out of disk space error.
EF39: 212000  		ld	hl,32		;store record number into fcb.
EF3C: 19      		add	hl,de
EF3D: 77      		ld	(hl),a
EF3E: 210C00  		ld	hl,12		;and now check the extent byte.
EF41: 19      		add	hl,de
EF42: 79      		ld	a,c
EF43: 96      		sub	(hl)		;same extent as before?
EF44: C252EF  		jp	nz,positn2
EF47: 210E00  		ld	hl,14		;yes, check extra extent byte 's2' also.
EF4A: 19      		add	hl,de
EF4B: 78      		ld	a,b
EF4C: 96      		sub	(hl)
EF4D: E67F    		and	7fh
EF4F: CA8AEF  		jp	z,positn3	;same, we are almost done then.
              	;
              	;  get here when another extent is required.
              	;
EF52: C5      	positn2:push	bc
EF53: D5      		push	de
EF54: CDADEC  		call	closeit		;close current extent.
EF57: D1      		pop	de
EF58: C1      		pop	bc
EF59: 2E03    		ld	l,3		;prepare for error.
EF5B: 3A50E7  		ld	a,(status)
EF5E: 3C      		inc	a
EF5F: CA8FEF  		jp	z,positn4	;close error.
EF62: 210C00  		ld	hl,12		;put desired extent into fcb now.
EF65: 19      		add	hl,de
EF66: 71      		ld	(hl),c
EF67: 210E00  		ld	hl,14		;and store extra extent byte 's2'.
EF6A: 19      		add	hl,de
EF6B: 70      		ld	(hl),b
EF6C: CD5CEC  		call	openit		;try and get this extent.
EF6F: 3A50E7  		ld	a,(status)	;was it there?
EF72: 3C      		inc	a
EF73: C28AEF  		jp	nz,positn3
EF76: C1      		pop	bc		;no. can we create a new one (writing?).
EF77: C5      		push	bc
EF78: 2E04    		ld	l,4		;prepare for error.
EF7A: 0C      		inc	c
EF7B: CA8FEF  		jp	z,positn4	;nope, reading unwritten space error.
EF7E: CD2FED  		call	getempty	;yes we can, try to find space.
EF81: 2E05    		ld	l,5		;prepare for error.
EF83: 3A50E7  		ld	a,(status)
EF86: 3C      		inc	a
EF87: CA8FEF  		jp	z,positn4	;out of space?
              	;
              	;   normal return location. clear error code and return.
              	;
EF8A: C1      	positn3:pop	bc		;restore stack.
EF8B: AF      		xor	a		;and clear error code byte.
EF8C: C30CE7  		jp	setstat
              	;
              	;   error. set the 's2' byte to indicate this (why?).
              	;
EF8F: E5      	positn4:push	hl
EF90: CD74E9  		call	gets2
EF93: 36C0    		ld	(hl),0c0h
EF95: E1      		pop	hl
              	;
              	;   return with error code (presently in l).
              	;
EF96: C1      	positn5:pop	bc
EF97: 7D      		ld	a,l		;get error code.
EF98: 3250E7  		ld	(status),a
EF9B: C383E9  		jp	sets2b7
              	;
              	;   read a random record.
              	;
EF9E: 0EFF    	readran:ld	c,0ffh		;set 'read' status.
EFA0: CD0EEF  		call	position	;position the file to proper record.
EFA3: CCCCED  		call	z,rdseq1	;and read it as usual (if no errors).
EFA6: C9      		ret	
              	;
              	;   write to a random record.
              	;
EFA7: 0E00    	writeran: ld	c,0		;set 'writing' flag.
EFA9: CD0EEF  		call	position	;position the file to proper record.
EFAC: CC0EEE  		call	z,wtseq1	;and write as usual (if no errors).
EFAF: C9      		ret	
              	;
              	;   compute the random record number. enter with (hl) pointing
              	; to a fcb an (de) contains a relative location of a record
              	; number. on exit, (c) contains the 'r0' byte, (b) the 'r1'
              	; byte, and (a) the 'r2' byte.
              	;
              	;   on return, the zero flag is set if the record is within
              	; bounds. otherwise, an overflow occured.
              	;
EFB0: EB      	comprand: ex	de,hl		;save fcb pointer in (de).
EFB1: 19      		add	hl,de		;compute relative position of record #.
EFB2: 4E      		ld	c,(hl)		;get record number into (bc).
EFB3: 0600    		ld	b,0
EFB5: 210C00  		ld	hl,12		;now get extent.
EFB8: 19      		add	hl,de
EFB9: 7E      		ld	a,(hl)		;compute (bc)=(record #)+(extent)*128.
EFBA: 0F      		rrca			;move lower bit into bit 7.
EFBB: E680    		and	80h		;and ignore all other bits.
EFBD: 81      		add	a,c		;add to our record number.
EFBE: 4F      		ld	c,a
EFBF: 3E00    		ld	a,0		;take care of any carry.
EFC1: 88      		adc	a,b
EFC2: 47      		ld	b,a
EFC3: 7E      		ld	a,(hl)		;now get the upper bits of extent into
EFC4: 0F      		rrca			;bit positions 0-3.
EFC5: E60F    		and	0fh		;and ignore all others.
EFC7: 80      		add	a,b		;add this in to 'r1' byte.
EFC8: 47      		ld	b,a
EFC9: 210E00  		ld	hl,14		;get the 's2' byte (extra extent).
EFCC: 19      		add	hl,de
EFCD: 7E      		ld	a,(hl)
EFCE: 87      		add	a,a		;and shift it left 4 bits (bits 4-7).
EFCF: 87      		add	a,a
EFD0: 87      		add	a,a
EFD1: 87      		add	a,a
EFD2: F5      		push	af		;save carry flag (bit 0 of flag byte).
EFD3: 80      		add	a,b		;now add extra extent into 'r1'.
EFD4: 47      		ld	b,a
EFD5: F5      		push	af		;and save carry (overflow byte 'r2').
EFD6: E1      		pop	hl		;bit 0 of (l) is the overflow indicator.
EFD7: 7D      		ld	a,l
EFD8: E1      		pop	hl		;and same for first carry flag.
EFD9: B5      		or	l		;either one of these set?
EFDA: E601    		and	01h		;only check the carry flags.
EFDC: C9      		ret	
              	;
              	;   routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
              	; reflect the last record used for a random (or other) file.
              	; this reads the directory and looks at all extents computing
              	; the largerst record number for each and keeping the maximum
              	; value only. then 'r0', 'r1', and 'r2' will reflect this
              	; maximum record number. this is used to compute the space used
              	; by a random file.
              	;
EFDD: 0E0C    	ransize:ld	c,12		;look thru directory for first entry with
EFDF: CD23EB  		call	findfst		;this name.
EFE2: 2A4EE7  		ld	hl,(params)	;zero out the 'r0, r1, r2' bytes.
EFE5: 112100  		ld	de,33
EFE8: 19      		add	hl,de
EFE9: E5      		push	hl
EFEA: 72      		ld	(hl),d		;note that (d)=0.
EFEB: 23      		inc	hl
EFEC: 72      		ld	(hl),d
EFED: 23      		inc	hl
EFEE: 72      		ld	(hl),d
EFEF: CD00EA  	ransiz1:call	ckfilpos	;is there an extent to process?
EFF2: CA17F0  		jp	z,ransiz3	;no, we are done.
EFF5: CD69E9  		call	fcb2hl		;set (hl) pointing to proper fcb in dir.
EFF8: 110F00  		ld	de,15		;point to last record in extent.
EFFB: CDB0EF  		call	comprand	;and compute random parameters.
EFFE: E1      		pop	hl
EFFF: E5      		push	hl		;now check these values against those
F000: 5F      		ld	e,a		;already in fcb.
F001: 79      		ld	a,c		;the carry flag will be set if those
F002: 96      		sub	(hl)		;in the fcb represent a larger size than
F003: 23      		inc	hl		;this extent does.
F004: 78      		ld	a,b
F005: 9E      		sbc	a,(hl)
F006: 23      		inc	hl
F007: 7B      		ld	a,e
F008: 9E      		sbc	a,(hl)
F009: DA11F0  		jp	c,ransiz2
F00C: 73      		ld	(hl),e		;we found a larger (in size) extent.
F00D: 2B      		dec	hl		;stuff these values into fcb.
F00E: 70      		ld	(hl),b
F00F: 2B      		dec	hl
F010: 71      		ld	(hl),c
F011: CD38EB  	ransiz2:call	findnxt		;now get the next extent.
F014: C3EFEF  		jp	ransiz1		;continue til all done.
F017: E1      	ransiz3:pop	hl		;we are done, restore the stack and
F018: C9      		ret			;return.
              	;
              	;   function to return the random record position of a given
              	; file which has been read in sequential mode up to now.
              	;
F019: 2A4EE7  	setran:	ld	hl,(params)	;point to fcb.
F01C: 112000  		ld	de,32		;and to last used record.
F01F: CDB0EF  		call	comprand	;compute random position.
F022: 212100  		ld	hl,33		;now stuff these values into fcb.
F025: 19      		add	hl,de
F026: 71      		ld	(hl),c		;move 'r0'.
F027: 23      		inc	hl
F028: 70      		ld	(hl),b		;and 'r1'.
F029: 23      		inc	hl
F02A: 77      		ld	(hl),a		;and lastly 'r2'.
F02B: C9      		ret	
              	;
              	;   this routine select the drive specified in (active) and
              	; update the login vector and bitmap table if this drive was
              	; not already active.
              	;
F02C: 2ABAF1  	logindrv: ld	hl,(login)	;get the login vector.
F02F: 3A4DE7  		ld	a,(active)	;get the default drive.
F032: 4F      		ld	c,a
F033: CDF5E8  		call	shiftr		;position active bit for this drive
F036: E5      		push	hl		;into bit 0.
F037: EB      		ex	de,hl
F038: CD64E7  		call	select		;select this drive.
F03B: E1      		pop	hl
F03C: CC52E7  		call	z,slcterr	;valid drive?
F03F: 7D      		ld	a,l		;is this a newly activated drive?
F040: 1F      		rra	
F041: D8      		ret	c
F042: 2ABAF1  		ld	hl,(login)	;yes, update the login vector.
F045: 4D      		ld	c,l
F046: 44      		ld	b,h
F047: CD16E9  		call	setbit
F04A: 22BAF1  		ld	(login),hl	;and save.
F04D: C3AEEA  		jp	bitmap		;now update the bitmap.
              	;
              	;   function to set the active disk number.
              	;
F050: 3AE1F1  	setdsk:	ld	a,(eparam)	;get parameter passed and see if this
F053: 214DE7  		ld	hl,active	;represents a change in drives.
F056: BE      		cp	(hl)
F057: C8      		ret	z
F058: 77      		ld	(hl),a		;yes it does, log it in.
F059: C32CF0  		jp	logindrv
              	;
              	;   this is the 'auto disk select' routine. the firsst byte
              	; of the fcb is examined for a drive specification. if non
              	; zero then the drive will be selected and loged in.
              	;
F05C: 3EFF    	autosel:ld	a,0ffh		;say 'auto-select activated'.
F05E: 32E9F1  		ld	(auto),a
F061: 2A4EE7  		ld	hl,(params)	;get drive specified.
F064: 7E      		ld	a,(hl)
F065: E61F    		and	1fh		;look at lower 5 bits.
F067: 3D      		dec	a		;adjust for (1=a, 2=b) etc.
F068: 32E1F1  		ld	(eparam),a	;and save for the select routine.
F06B: FE1E    		cp	1eh		;check for 'no change' condition.
F06D: D280F0  		jp	nc,autosl1	;yes, don't change.
F070: 3A4DE7  		ld	a,(active)	;we must change, save currently active
F073: 32EAF1  		ld	(olddrv),a	;drive.
F076: 7E      		ld	a,(hl)		;and save first byte of fcb also.
F077: 32EBF1  		ld	(autoflag),a	;this must be non-zero.
F07A: E6E0    		and	0e0h		;whats this for (bits 6,7 are used for
F07C: 77      		ld	(hl),a		;something)?
F07D: CD50F0  		call	setdsk		;select and log in this drive.
F080: 3A4CE7  	autosl1:ld	a,(userno)	;move user number into fcb.
F083: 2A4EE7  		ld	hl,(params)	;(* upper half of first byte *)
F086: B6      		or	(hl)
F087: 77      		ld	(hl),a
F088: C9      		ret			;and return (all done).
              	;
              	;   function to return the current cp/m version number.
              	;
F089: 3E22    	getver:	ld	a,022h		;version 2.2
F08B: C30CE7  		jp	setstat
              	;
              	;   function to reset the disk system.
              	;
F08E: 210000  	rstdsk:	ld	hl,0		;clear write protect status and log
F091: 22B8F1  		ld	(wrtprt),hl	;in vector.
F094: 22BAF1  		ld	(login),hl
F097: AF      		xor	a		;select drive 'a'.
F098: 324DE7  		ld	(active),a
F09B: 218000  		ld	hl,tbuff	;setup default dma address.
F09E: 22BCF1  		ld	(userdma),hl
F0A1: CDE5E9  		call	defdma
F0A4: C32CF0  		jp	logindrv	;now log in drive 'a'.
              	;
              	;   function to open a specified file.
              	;
F0A7: CD7DE9  	openfil:call	clears2		;clear 's2' byte.
F0AA: CD5CF0  		call	autosel		;select proper disk.
F0AD: C35CEC  		jp	openit		;and open the file.
              	;
              	;   function to close a specified file.
              	;
F0B0: CD5CF0  	closefil: call	autosel		;select proper disk.
F0B3: C3ADEC  		jp	closeit		;and close the file.
              	;
              	;   function to return the first occurence of a specified file
              	; name. if the first byte of the fcb is '?' then the name will
              	; not be checked (get the first entry no matter what).
              	;
F0B6: 0E00    	getfst:	ld	c,0		;prepare for special search.
F0B8: EB      		ex	de,hl
F0B9: 7E      		ld	a,(hl)		;is first byte a '?'?
F0BA: FE3F    		cp	'?'
F0BC: CACDF0  		jp	z,getfst1	;yes, just get very first entry (zero length match).
F0BF: CDB1E8  		call	setext		;get the extension byte from fcb.
F0C2: 7E      		ld	a,(hl)		;is it '?'? if yes, then we want
F0C3: FE3F    		cp	'?'		;an entry with a specific 's2' byte.
F0C5: C47DE9  		call	nz,clears2	;otherwise, look for a zero 's2' byte.
F0C8: CD5CF0  		call	autosel		;select proper drive.
F0CB: 0E0F    		ld	c,15		;compare bytes 0-14 in fcb (12&13 excluded).
F0CD: CD23EB  	getfst1:call	findfst		;find an entry and then move it into
F0D0: C3F4E9  		jp	movedir		;the users dma space.
              	;
              	;   function to return the next occurence of a file name.
              	;
F0D3: 2AE4F1  	getnxt:	ld	hl,(savefcb)	;restore pointers. note that no
F0D6: 224EE7  		ld	(params),hl	;other dbos calls are allowed.
F0D9: CD5CF0  		call	autosel		;no error will be returned, but the
F0DC: CD38EB  		call	findnxt		;results will be wrong.
F0DF: C3F4E9  		jp	movedir
              	;
              	;   function to delete a file by name.
              	;
F0E2: CD5CF0  	delfile:call	autosel		;select proper drive.
F0E5: CDA7EB  		call	erafile		;erase the file.
F0E8: C30CEB  		jp	ststatus	;set status and return.
              	;
              	;   function to execute a sequential read of the specified
              	; record number.
              	;
F0EB: CD5CF0  	readseq:call	autosel		;select proper drive then read.
F0EE: C3C7ED  		jp	rdseq
              	;
              	;   function to write the net sequential record.
              	;
F0F1: CD5CF0  	wrtseq:	call	autosel		;select proper drive then write.
F0F4: C309EE  		jp	wtseq
              	;
              	;   create a file function.
              	;
F0F7: CD7DE9  	fcreate:call	clears2		;clear the 's2' byte on all creates.
F0FA: CD5CF0  		call	autosel		;select proper drive and get the next
F0FD: C32FED  		jp	getempty	;empty directory space.
              	;
              	;   function to rename a file.
              	;
F100: CD5CF0  	renfile:call	autosel		;select proper drive and then switch
F103: CD21EC  		call	chgnames	;file names.
F106: C30CEB  		jp	ststatus
              	;
              	;   function to return the login vector.
              	;
F109: 2ABAF1  	getlog:	ld	hl,(login)
F10C: C334F1  		jp	getprm1
              	;
              	;   function to return the current disk assignment.
              	;
F10F: 3A4DE7  	getcrnt:ld	a,(active)
F112: C30CE7  		jp	setstat
              	;
              	;   function to set the dma address.
              	;
F115: EB      	putdma:	ex	de,hl
F116: 22BCF1  		ld	(userdma),hl	;save in our space and then get to
F119: C3E5E9  		jp	defdma		;the bios with this also.
              	;
              	;   function to return the allocation vector.
              	;
F11C: 2ACAF1  	getaloc:ld	hl,(alocvect)
F11F: C334F1  		jp	getprm1
              	;
              	;   function to return the read-only status vector.
              	;
F122: 2AB8F1  	getrov:	ld	hl,(wrtprt)
F125: C334F1  		jp	getprm1
              	;
              	;   function to set the file attributes (read-only, system).
              	;
F128: CD5CF0  	setattr:call	autosel		;select proper drive then save attributes.
F12B: CD46EC  		call	saveattr
F12E: C30CEB  		jp	ststatus
              	;
              	;   function to return the address of the disk parameter block
              	; for the current drive.
              	;
F131: 2AC6F1  	getparm:ld	hl,(diskpb)
F134: 2250E7  	getprm1:ld	(status),hl
F137: C9      		ret	
              	;
              	;   function to get or set the user number. if (e) was (ff)
              	; then this is a request to return the current user number.
              	; else set the user number from (e).
              	;
F138: 3AE1F1  	getuser:ld	a,(eparam)	;get parameter.
F13B: FEFF    		cp	0ffh		;get user number?
F13D: C246F1  		jp	nz,setuser
F140: 3A4CE7  		ld	a,(userno)	;yes, just do it.
F143: C30CE7  		jp	setstat
F146: E61F    	setuser:and	1fh		;no, we should set it instead. keep low
F148: 324CE7  		ld	(userno),a	;bits (0-4) only.
F14B: C9      		ret	
              	;
              	;   function to read a random record from a file.
              	;
F14C: CD5CF0  	rdrandom: call	autosel		;select proper drive and read.
F14F: C39EEF  		jp	readran
              	;
              	;   function to compute the file size for random files.
              	;
F152: CD5CF0  	wtrandom: call	autosel		;select proper drive and write.
F155: C3A7EF  		jp	writeran
              	;
              	;   function to compute the size of a random file.
              	;
F158: CD5CF0  	filesize: call	autosel		;select proper drive and check file length
F15B: C3DDEF  		jp	ransize
              	;
              	;   function #37. this allows a program to log off any drives.
              	; on entry, set (de) to contain a word with bits set for those
              	; drives that are to be logged off. the log-in vector and the
              	; write protect vector will be updated. this must be a m/pm
              	; special function.
              	;
F15E: 2A4EE7  	logoff:	ld	hl,(params)	;get drives to log off.
F161: 7D      		ld	a,l		;for each bit that is set, we want
F162: 2F      		cpl			;to clear that bit in (login)
F163: 5F      		ld	e,a		;and (wrtprt).
F164: 7C      		ld	a,h
F165: 2F      		cpl	
F166: 2ABAF1  		ld	hl,(login)	;reset the login vector.
F169: A4      		and	h
F16A: 57      		ld	d,a
F16B: 7D      		ld	a,l
F16C: A3      		and	e
F16D: 5F      		ld	e,a
F16E: 2AB8F1  		ld	hl,(wrtprt)
F171: EB      		ex	de,hl
F172: 22BAF1  		ld	(login),hl	;and save.
F175: 7D      		ld	a,l		;now do the write protect vector.
F176: A3      		and	e
F177: 6F      		ld	l,a
F178: 7C      		ld	a,h
F179: A2      		and	d
F17A: 67      		ld	h,a
F17B: 22B8F1  		ld	(wrtprt),hl	;and save. all done.
F17E: C9      		ret	
              	;
              	;   get here to return to the user.
              	;
F17F: 3AE9F1  	goback:	ld	a,(auto)	;was auto select activated?
F182: B7      		or	a
F183: CA9CF1  		jp	z,goback1
F186: 2A4EE7  		ld	hl,(params)	;yes, but was a change made?
F189: 3600    		ld	(hl),0		;(* reset first byte of fcb *)
F18B: 3AEBF1  		ld	a,(autoflag)
F18E: B7      		or	a
F18F: CA9CF1  		jp	z,goback1
F192: 77      		ld	(hl),a		;yes, reset first byte properly.
F193: 3AEAF1  		ld	a,(olddrv)	;and get the old drive and select it.
F196: 32E1F1  		ld	(eparam),a
F199: CD50F0  		call	setdsk
F19C: 2A1AE7  	goback1:ld	hl,(usrstack)	;reset the users stack pointer.
F19F: F9      		ld	sp,hl
F1A0: 2A50E7  		ld	hl,(status)	;get return status.
F1A3: 7D      		ld	a,l		;force version 1.4 compatability.
F1A4: 44      		ld	b,h
F1A5: C9      		ret			;and go back to user.
              	;
              	;   function #40. this is a special entry to do random i/o.
              	; for the case where we are writing to unused disk space, this
              	; space will be zeroed out first. this must be a m/pm special
              	; purpose function, because why would any normal program even
              	; care about the previous contents of a sector about to be
              	; written over.
              	;
F1A6: CD5CF0  	wtspecl:call	autosel		;select proper drive.
F1A9: 3E02    		ld	a,2		;use special write mode.
F1AB: 32E0F1  		ld	(mode),a
F1AE: 0E00    		ld	c,0		;set write indicator.
F1B0: CD12EF  		call	positn1		;position the file.
F1B3: CC0EEE  		call	z,wtseq1	;and write (if no errors).
F1B6: C9      		ret	
              	;
              	;**************************************************************
              	;*
              	;*     bdos data storage pool.
              	;*
              	;**************************************************************
              	;
F1B7: E5      	emptyfcb: defb	0e5h		;empty directory segment indicator.
F1B8: 0000    	wrtprt:	defw	0		;write protect status for all 16 drives.
F1BA: 0000    	login:	defw	0		;drive active word (1 bit per drive).
F1BC: 8000    	userdma:defw	080h		;user's dma address (defaults to 80h).
              	;
              	;   scratch areas from parameter block.
              	;
F1BE: 0000    	scratch1: defw	0		;relative position within dir segment for file (0-3).
F1C0: 0000    	scratch2: defw	0		;last selected track number.
F1C2: 0000    	scratch3: defw	0		;last selected sector number.
              	;
              	;   disk storage areas from parameter block.
              	;
F1C4: 0000    	dirbuf:	defw	0		;address of directory buffer to use.
F1C6: 0000    	diskpb:	defw	0		;contains address of disk parameter block.
F1C8: 0000    	chkvect:defw	0		;address of check vector.
F1CA: 0000    	alocvect: defw	0		;address of allocation vector (bit map).
              	;
              	;   parameter block returned from the bios.
              	;
F1CC: 0000    	sectors:defw	0		;sectors per track from bios.
F1CE: 00      	blkshft:defb	0		;block shift.
F1CF: 00      	blkmask:defb	0		;block mask.
F1D0: 00      	extmask:defb	0		;extent mask.
F1D1: 0000    	dsksize:defw	0		;disk size from bios (number of blocks-1).
F1D3: 0000    	dirsize:defw	0		;directory size.
F1D5: 0000    	alloc0:	defw	0		;storage for first bytes of bit map (dir space used).
F1D7: 0000    	alloc1:	defw	0
F1D9: 0000    	offset:	defw	0		;first usable track number.
F1DB: 0000    	xlate:	defw	0		;sector translation table address.
              	;
              	;
F1DD: 00      	closeflg: defb	0		;close flag (=0ffh is extent written ok).
F1DE: 00      	rdwrtflg: defb	0		;read/write flag (0ffh=read, 0=write).
F1DF: 00      	fndstat:defb	0		;filename found status (0=found first entry).
F1E0: 00      	mode:	defb	0		;i/o mode select (0=random, 1=sequential, 2=special random).
F1E1: 00      	eparam:	defb	0		;storage for register (e) on entry to bdos.
F1E2: 00      	relblock: defb	0		;relative position within fcb of block number written.
F1E3: 00      	counter:defb	0		;byte counter for directory name searches.
F1E4: 00000000	savefcb:defw	0,0		;save space for address of fcb (for directory searches).
F1E8: 00      	bigdisk:defb	0		;if =0 then disk is > 256 blocks long.
F1E9: 00      	auto:	defb	0		;if non-zero, then auto select activated.
F1EA: 00      	olddrv:	defb	0		;on auto select, storage for previous drive.
F1EB: 00      	autoflag: defb	0		;if non-zero, then auto select changed drives.
F1EC: 00      	savnxt:	defb	0		;storage for next record number to access.
F1ED: 00      	savext:	defb	0		;storage for extent number of file.
F1EE: 0000    	savnrec:defw	0		;storage for number of records in file.
F1F0: 0000    	blknmbr:defw	0		;block number (physical sector) used within a file or logical sect
F1F2: 0000    	logsect:defw	0		;starting logical (128 byte) sector of block (physical sector).
F1F4: 00      	fcbpos:	defb	0		;relative position within buffer for fcb of file of interest.
F1F5: 0000    	filepos:defw	0		;files position within directory (0 to max entries -1).
              	;
              	;   disk directory buffer checksum bytes. one for each of the
              	; 16 possible drives.
              	;
F1F7: 00000000	cksumtbl: defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
F1FB: 00...   	
              	
              	;
              	;*
              	;******************   E N D   O F   C P / M   *****************
              	;*
              	
              	#include "../bios.asm"
              	;
              	;**************************************************************
              	;*
              	;*        B I O S   B O O T   R O U T I N E S
              	;*
              	;**************************************************************
              	;
              	
              	;
              	;**************************************************************
              	;*
              	;*          B I O S   J U M P   T A B L E
              	;*
              	;*    This isn't actually used by the BDOS, but
              	;*    some applications (*cough* MBASIC) use it
              	;*    to directly address BIOS calls to get around
              	;*    the BDOS.
              	;*
              	;**************************************************************
              	;
F207: C33AF2  		jp	boot
F20A: C348F2  	wbootin:jp	wboot	; Indirection to wboot, used by MBASIC
F20D: C3A2F2  		jp	const
F210: C3ADF2  		jp	conin
F213: C3B9F2  		jp	conout
F216: C3C5F2  		jp	list
F219: C3C9F2  		jp	punch
F21C: C3CDF2  		jp	reader
F21F: C3DBF2  		jp	home
F222: C3E0F2  		jp	seldsk
F225: C3FEF2  		jp	settrk
F228: C302F3  		jp	setsec
F22B: C306F3  		jp	setdma
F22E: C30CF3  		jp	read
F231: C310F3  		jp	write
F234: C314F3  		jp	prstat
F237: C317F3  		jp	sectrn
              	
              	; Cold boot entry
              	; Sets up some lower CP/M memory areas, and tells the INIT
              	; program to run on CP/M startup.
F23A: 3100DC  	boot:	ld	sp,cbase
              	
              		; Run the warm boot common code
F23D: CD5FF2  		call	wbootr
              		
              		; Special conditions for a cold boot
F240: CD5AF3  		call	cbinit
              	
              		; Jump to CP/M
F243: 0E00    		ld	c,default
F245: C300DC  		jp	cbase
              	
              	
              	; Warm boot entry
              	; Mainly just calls wbootr and manages IOBYTE
F248: 3100DC  	wboot:	ld	sp,cbase
              	
              		; Save current drive + user
F24B: 3A0400  		ld	a,(tdrive)
F24E: F5      		push	af
              	
              		; Save IOBYTE
F24F: 3A0300  		ld	a,(iobyte)
F252: F5      		push	af
              	
              		; Warm boot
F253: CD5FF2  		call	wbootr
              		
              		; Restore IOBYTE
F256: F1      		pop	af
F257: 320300  		ld	(iobyte),a
              		
              		; Restore tdrive and warm boot
F25A: F1      		pop	af
F25B: 4F      		ld	c,a
F25C: C300DC  		jp	cbase
              	
              	; Warm boot routine
              	; Sends init signal to device bus, loads CCP, and inits CP/M
              	; Does not actually jump to CP/M just yet
F25F: F3      	wbootr:	di
              		
              		; Zero out BSS
F260: AF      		xor	a
F261: 21C1FA  		ld	hl,_TEXT_end
F264: 77      		ld	(hl),a
F265: 11C2FA  		ld	de,_TEXT_end+1
F268: 017201  		ld	bc,_BSS_size
F26B: EDB0    		ldir
              	
              		; Send init signals to all devices
F26D: 0600    		ld	b,0
F26F: C5      	wboot0:	push	bc
F270: 216AF3  		ld	hl,bdevsw
F273: 78      		ld	a,b
F274: CD29F3  		call	swindir
F277: AF      		xor	a
F278: 14      		inc	d
F279: CC46F3  		call	z,callmj
F27C: C1      		pop	bc
F27D: 04      		inc	b
F27E: 3E14    		ld	a,20
F280: B8      		cp	b
F281: 20EC    		jr	nz,wboot0
              	
              		; Turn off batch mode
F283: 3E00    		ld	a,0
F285: 32E2DC  		ld	(batch),a
              	
              		; Load the CCP
F288: CD64F3  		call	resccp
              	
              		; Call config init
F28B: CD4BF3  		call	wbinit
              		
              		; Set up lower memory
F28E: 219AF2  		ld	hl,cpmlow
F291: 110000  		ld	de,0
F294: 010800  		ld	bc,8
F297: EDB0    		ldir
              	
              	
              		; Return
F299: C9      		ret
              	
              	
              	; This is not a true function, but a block of code to be copied
              	; to CP/M lower memory
F29A: C30AF2  	cpmlow:	jp	wbootin	; Call jump table version instead
F29D: 81      		defb	0x81	; Default IOBYTE
F29E: 00      		defb	0	; Default drive
F29F: C302E4  		jp	fbase-4	; 4 bytes before BDOS entry 
              	
              	
              	; Console status
              	;
              	; Returns a=0xFF if there is a character
              	; uses: all
              	; Defaults to device 0 right now
F2A2: 0600    	const:	ld	b,0
F2A4: CD1AF3  		call	cdindir
F2A7: 14      		inc	d
F2A8: C0      		ret	nz
F2A9: 3C      		inc	a
F2AA: C346F3  		jp	callmj
              		
              	; Console read
              	;
              	; Returns character in a
              	; uses: all
              	; Defaults to device 0 right now
F2AD: 0600    	conin:	ld	b,0
F2AF: CD1AF3  		call	cdindir
F2B2: 14      		inc	d
F2B3: C0      		ret	nz
F2B4: 3E02    		ld	a,2
F2B6: C346F3  		jp	callmj
              		
              	; Console write
              	; c = Character to display
              	;
              	; uses: all
              	; Defaults to device 0 right now
F2B9: 0600    	conout:	ld	b,0
F2BB: CD1AF3  	chrout:	call	cdindir
F2BE: 14      		inc	d
F2BF: C0      		ret	nz
F2C0: 3E03    		ld	a,3
F2C2: C346F3  		jp	callmj
              		
              	; Printer write
              	; c = Character to print
              	;
              	; uses: all
F2C5: 0606    	list:	ld	b,6
F2C7: 18F2    		jr	chrout
              	
              	; Punch (or auxiliary) write
              	; c = Character to punch
              	;
F2C9: 0604    	punch:	ld	b,4
F2CB: 18EE    		jr	chrout
              	
              	; Reader (or auxiliary) read
              	;
              	; Returns character in a, or a=0x1A
F2CD: 0602    	reader:	ld	b,2
F2CF: CD1AF3  		call	cdindir
F2D2: 14      		inc	d
F2D3: 3E1A    		ld	a,0x1A
F2D5: C0      		ret	nz
F2D6: 3E02    		ld	a,2
F2D8: C346F3  		jp	callmj
              		
              	; Move the current drive to track 0
              	;
              	; uses: all
F2DB: 3E01    	home:	ld	a,1
F2DD: C3F8F2  		jp	callbd
              		
              	; Selects a block device
              	; c = Device to select
              	; e = Disk logging status
              	;
              	; return hl=0 if device not valid
              	; uses: all
F2E0: 79      	seldsk:	ld	a,c
F2E1: 43      		ld	b,e
F2E2: 216AF3  		ld	hl,bdevsw
F2E5: CD29F3  		call	swindir
F2E8: 22F9F2  		ld	(callbd+1),hl
F2EB: 210000  		ld	hl,0
F2EE: 14      		inc	d
F2EF: C0      		ret	nz
F2F0: 2A47F3  		ld	hl,(callmj+1)
F2F3: 22FCF2  		ld	(callbd+4),hl
F2F6: 3E02    		ld	a,2
              		; Pass b = logging status, c = device #
              		
              	; Small stub to jump to the currently selected block device
              	; Also records hl as argument
              	;
              	; We love self-modfiying code!
F2F8: 21      	callbd:	defb	0x21
F2F9: 0000    		defw	0
F2FB: C3      		defb	0xC3
F2FC: 0000    		defw	0
              	
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	;
              	; uses: all
F2FE: 3E03    	settrk:	ld	a,3
F300: 18F6    		jr	callbd
              		
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	;
              	; uses: all
F302: 3E04    	setsec:	ld	a,4
F304: 18F2    		jr	callbd
              	
              	; Sets the DMA address of the selected block device
              	; bc = DMA address
              	;
              	; uses: all
F306: 60      	setdma:	ld	h,b
F307: 69      		ld	l,c
F308: 2249F3  		ld	(biodma),hl
F30B: C9      		ret
              		
              	; Reads the configured block from the selected block device
              	;
              	; uses: all
F30C: 3E05    	read:	ld	a,5
F30E: 18E8    		jr	callbd
              	
              	; Writes the configured block to the selected block device
              	; c = Deferred mode
              	;
              	; uses: all
F310: 3E06    	write:	ld	a,6
F312: 18E4    		jr	callbd
              		
              	; "Printer" is always read for bytes
              	; Maybe in the future we will implement this, but for now
              	; this will do.
              	;
              	; Returns a=0xFF
F314: 3EFF    	prstat:	ld	a,0xFF
F316: C9      		ret
              		
              	; Provides sector translation
              	; Returns no translation for all devices
F317: 60      	sectrn:	ld	h,b
F318: 69      		ld	l,c
F319: C9      		ret
              		
              	; Character device switch indirection
              	; Obtains device by doing IOBYTE indirection
              	; Sets hl to cdevsw and jumps to swindir
F31A: 04      	cdindir:inc	b
F31B: 3A0300  		ld	a,(iobyte)
F31E: 05      	cdindi0:dec	b
F31F: 2803    		jr	z,cdindi1
F321: 1F      		rra
F322: 18FA    		jr	cdindi0
F324: E603    	cdindi1:and	0x03
F326: 21AAF3  		ld	hl,cdevsw
              	
              	; Switch indirect helper function
              	; a = Device
              	; hl = Start of switch
              	;
              	; returns d=255 if device found, hl as argument
              	; uses: af, de, hl
F329: 110400  	swindir:ld	de,4
F32C: B7      		or	a
F32D: 2804    	swindi0:jr	z,swindi1
F32F: 19      		add	hl,de
F330: 3D      		dec	a
F331: 18FA    		jr	swindi0
F333: 7E      	swindi1:ld	a,(hl)
F334: 3247F3  		ld	(callmj+1),a
F337: 23      		inc	hl
F338: B6      		or	(hl)
F339: C8      		ret	z
F33A: 7E      		ld	a,(hl)
F33B: 3248F3  		ld	(callmj+2),a
F33E: 23      		inc	hl
F33F: 7E      		ld	a,(hl)
F340: 23      		inc	hl
F341: 66      		ld	h,(hl)
F342: 6F      		ld	l,a
F343: 16FF    		ld	d,255
F345: C9      	nulldev:ret		; Just points to a return
              	
              	; Small stub to jump to the memory jump register
F346: C3      	callmj: defb	0xC3
F347: 0000    		defw	0
              	
              	
              	
              	; Variables
F349: 0000    	biodma:	defw	0	; Block device DMA address
              	
              	;
              	;**************************************************************
              	;*
              	;*        W A R M   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function is called at the end of a warm boot
              	;*    to set up hardware-specific stuff.
              	;*
              	;**************************************************************
              	;
              	
F34B: 3E01    	wbinit:	ld	a,0x01		; Bank out ROM
F34D: D300    		out	(0x00),a
              	
              		; Turn on batch mode
F34F: 3EFF    		ld	a,0xFF
F351: 32E2DC  		ld	(batch),a
              		
              		; Also set interrupt mode 2 stuff
F354: ED47    		ld	i,a
F356: ED5E    		im	2		; Start interrupts
F358: FB      		ei
              		
F359: C9      		ret
              		
              	;
              	;**************************************************************
              	;*
              	;*        C O L D   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function will run once during the intial cold
              	;*    boot. It is the last task to run before control is
              	;*    given to the CCP. This function is run after wbinit
              	;*
              	;**************************************************************
              	;
              	
F35A: 3E06    	cbinit:	ld	a,6	; Enable INIT to run
F35C: 3204DC  		ld	(inbuff+1),a
F35F: C9      		ret
              	
              	;
              	;**************************************************************
              	;*
              	;*            I N T E R R U P T   H A N D L I N G
              	;*
              	;*     This function will be called in order to handle an
              	;*     interrupt if the need arises. Hooking drivers up to
              	;*     this code may be a little bit more involved.
              	;*
              	;**************************************************************
              	;
              	
F360: FB      	cfirq:	ei
F361: ED4D    		reti
              	
              	;
              	;**************************************************************
              	;*
              	;*              B D O S   C A L L   H O O K
              	;*
              	;*     This function is called everytime a BDOS call occurs.
              	;*     It can be used by specialized drivers to either inject
              	;*     new BDOS calls, or intercept existing ones.
              	;*
              	;*     Registers 'bc' and 'e' must be preserved if a call is
              	;*     going to be forwarded to the system. Register 'c' will
              	;*     contain BDOS call number.
              	;*       
              	;*
              	;**************************************************************
              	;
              	
F363: C9      	syshook:ret
              	
              	
              	;**************************************************************
              	;*
              	;*           B L O C K   D E V I C E   S W I T C H
              	;*
              	;*       IshkurCP/M can support up to 16 logical disks
              	;*       A single driver can be mapped to a number of
              	;*       these disks. Each logical disk is defined by a
              	;*       4-byte record. The first 2 bytes are a pointer
              	;*       to the device entry, and the last 2 are passed
              	;*       as an argument to the device. Usually this 
              	;*       takes the form of a minor number for indexing
              	;*       sub-disks on the same driver
              	;*
              	;*
              	;**************************************************************
              	;
              		
              	; One of the block devices needs to have the responsibiliy
              	; of loading the CCP into memory. Define the jump vector here
F364: C33BF8  	resccp:	jp	nd_ccp
              	
              	; Additionally, if Ishkur is using a graphical device, that
              	; device may temporarily need to access the Graphical Resource
              	; Block (GRB) to load in fonts and such. This is up to 2k in
              	; size, and goes in the location that the CCP resides
F367: C340F8  	resgrb:	jp	nd_grb
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
F36A: 79F70000	bdevsw:	defw	ndkdev,	0	; 'A'
F36E: 79F70100		defw	ndkdev,	1	; 'B'
F372: 00000000		defw	0,	0	; 'C'
F376: 00000000		defw	0,	0	; 'D'
F37A: 00000000		defw	0,	0	; 'E'
F37E: 00000000		defw	0,	0	; 'F'
F382: 00000000		defw	0,	0	; 'G'
F386: 00000000		defw	0,	0	; 'H'
F38A: 00000000		defw	0,	0	; 'I'
F38E: 00000000		defw	0,	0	; 'J'
F392: 00000000		defw	0,	0	; 'K'
F396: 00000000		defw	0,	0	; 'L'
F39A: 00000000		defw	0,	0	; 'M'
F39E: 00000000		defw	0,	0	; 'N'
F3A2: 00000000		defw	0,	0	; 'O'
F3A6: 00000000		defw	0,	0	; 'P'
              	
              	;
              	; Character device switch MUST come directly after in memory!
              	;
              	;**************************************************************
              	;*
              	;*        C H A R A C T E R   D E V I C E   S W I T C H
              	;*
              	;*      Currently, 4 character devices are supported. These
              	;*      devices are the console, the printer, and two "punches"
              	;*      (can be thought of as an auxillary serial device).
              	;*      All character devices use the same interface, which
              	;*      allows for easy indireciton. 
              	;*
              	;*	Device switch logic works about the same of the block
              	;*	devices.
              	;*
              	;**************************************************************
              	;
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
F3AA: 33FA0000	cdevsw:	defw	siodev,	0	; TTY device
F3AE: BAF30000		defw	vdpdev,	0	; Console device
F3B2: 09FA0000		defw	prtdev,	0	; Aux I/O device #1 (LPT)
F3B6: 00000000		defw	0,	0	; Aux I/O device #2 (GEN)
              	
              	;
              	;**************************************************************
              	;*
              	;*        D E V I C E   D R I V E R   I N C L U D E S
              	;*
              	;**************************************************************
              	;
              	
              	#include "../dev/nabu_vdp.asm"
              	;
              	;**************************************************************
              	;*
              	;*      T M S 9 9 1 8   C H A R A C T E R   D E V I C E
              	;*
              	;*      This device emulated a VT52 terminal using the
              	;*      TMS9918A graphics chip. The 2kb font record is
              	;*      not resident is memory, and must be provided by
              	;*      a compatable block I/O device.
              	;*
              	;*      F18A style 80 column mode is supported
              	;*
              	;*      This specific version uses the NABU keyboard as
              	;*      an input to the emulated termina 
              	;*
              	;*      Device requires 48 bytes of bss space (tm_bss)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
FAC1: 00      	tm_outc:defs	1	; Output character
FAC2: 00      	tm_scro:defs	1	; Scroll width
FAC3: 00      	tm_escs:defs	1	; Escape state
FAC4: 00      	tm_last:defs	1	; Last character read
FAC5: 00000000	tm_cbuf:defs	40	; 40 byte character buffer
FAC9: 00...   	
              	.area	_TEXT
              	
              	; TMS9918 Configuration
00A0:         	tm_data	equ	0xA0	; TMS9918 data register (mode=0)
00A1:         	tm_latc	equ	0xA1	; TMS9918 latch register (mode=1)
              	
0090:         	tm_keyd	equ	0x90	; Keyboard data register
0091:         	tm_keys	equ	0x91	; Keyboard status register
              	
0040:         	tm_ayda	equ	0x40	; AY-3-8910 data port
0041:         	tm_atla	equ	0x41	; AY-3-8910 latch port
              	
              	; --- VRAM MAP ---
              	; 0x0000 - 0x07FF: Font
              	; 0x0800 - 0x0BFF: 40 column screen buffer
              	; 0x0C00 - 0x0FFF: Unused
              	; 0x1000 - 0x17FF: 80 column screen buffer
              	;
              	; Serial #
              	; 0x17FE: 0xE5
              	; 0x17FF: 0x81
              	
              	
              	; Driver jump table
F3BA: B7      	vdpdev:	or	a
F3BB: 2845    		jr	z,tm_init
F3BD: 3D      		dec	a
F3BE: 2819    		jr	z,tm_stat
F3C0: 3D      		dec	a
F3C1: CAA4F4  		jp	z,tm_read
F3C4: C302F5  		jp	tm_writ
              	
              	; A slower version of the OTIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
F3C7: F5      	tm_otir:push	af
F3C8: 7E      	tm_oti0:ld	a,(hl)
F3C9: ED79    		out	(c),a
F3CB: 23      		inc	hl
F3CC: 10FA    		djnz	tm_oti0
F3CE: F1      		pop	af
F3CF: C9      		ret
              		
              	; A slower version of the INIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
F3D0: F5      	tm_inir:push	af
F3D1: ED78    	tm_inr0:in	a,(c)
F3D3: 77      		ld	(hl),a
F3D4: 23      		inc	hl
F3D5: 10FA    		djnz	tm_inr0
F3D7: F1      		pop	af
F3D8: C9      		ret
              	
              	
              	; Gets the status of the keyboard
              	;
              	; Returns a=0xFF if there is a key to read 
              	; uses: af, bc, de, hl
F3D9: CD27F7  	tm_stat:call	tm_dint
F3DC: CDE5F3  		call	tm_sta0
F3DF: F5      		push	af
F3E0: CD37F7  		call	tm_eint
F3E3: F1      		pop	af
F3E4: C9      		ret 
F3E5: 3AC4FA  	tm_sta0:ld	a,(tm_last)
F3E8: FEE4    		cp	0xE4
F3EA: 2871    		jr	z,tm_scri
F3EC: FEE5    		cp	0xE5
F3EE: 287F    		jr	z,tm_sclf
F3F0: 3AC1FA  	tm_sta1:ld	a,(tm_outc)
F3F3: 3C      		inc	a
F3F4: 3EFF    		ld	a,0xFF
F3F6: C0      		ret	nz
F3F7: CD36F6  		call	tm_getc
F3FA: 32C1FA  		ld	(tm_outc),a
F3FD: 3C      		inc	a
F3FE: C8      		ret	z
F3FF: 3EFF    		ld	a,0xFF
F401: C9      		ret
              	
              	; TMS9918 init
              	; Load font record, set up terminal
F402: CD67F3  	tm_init:call	resgrb
              	
              		; Set up registers
F405: CD79F4  		call	tm_setp
              		
              		; Set up interrupt vectors (if needed)
F408: 2121F7  		ld	hl,tm_virq
F40B: 2206FF  		ld	(intvec+6),hl
F40E: 2154F6  		ld	hl,tm_kirq
F411: 2204FF  		ld	(intvec+4),hl
              		
              		; Set TMS pattern generator block to 0
F414: DBA1    		in	a,(tm_latc)
F416: AF      		xor	a
F417: D3A1    		out	(tm_latc),a
F419: 3E84    		ld	a,0x84
F41B: D3A1    		out	(tm_latc),a
              		
              		; Write the GRB
F41D: 010040  		ld	bc,0x4000
F420: CD16F7  		call	tm_addr
F423: 2100DC  		ld	hl,cbase
F426: 0EA0    		ld	c,tm_data
F428: 3E08    		ld	a,8	; Transfer 8*256 = 2048
F42A: 0600    	tm_ini0:ld	b,0
F42C: CDC7F3  		call	tm_otir
F42F: 3D      		dec	a
F430: 20F8    		jr	nz,tm_ini0
              		
              		; Cold boot?
F432: 3A49F7  		ld	a,(tm_cold)
F435: B7      		or	a
F436: 2012    		jr	nz,tm_ini1
              		
              		; Check serial #
F438: 01FE17  		ld	bc,0x17FE
F43B: CD16F7  		call	tm_addr
F43E: ED78    		in	a,(c)
F440: FEE5    		cp	0xE5
F442: 2006    		jr	nz,tm_ini1
F444: ED78    		in	a,(c)
F446: FE81    		cp	0x81
F448: 280D    		jr	z,tm_cloc
              		
              		; Reset the terminal
F44A: CDF9F6  	tm_ini1:call	tm_cls
F44D: AF      		xor	a
F44E: 3247F7  		ld	(tm_curx),a
F451: 3248F7  		ld	(tm_cury),a
F454: 3249F7  		ld	(tm_cold),a
              		
              		; Fall to tm_cloc
              		
              	; Clear the output character
              	;
              	; uses: af
F457: 3EFF    	tm_cloc:ld	a,0xFF
F459: 32C1FA  		ld	(tm_outc),a
              	
F45C: C9      		ret
              		
              	; Scroll left / scroll right
              	;
              	; uses: af, bc, de, hl
F45D: 3AC2FA  	tm_scri:ld	a,(tm_scro)
F460: B7      		or	a
F461: FE28    		cp	40
F463: 2808    		jr	z,tm_scr1
F465: C604    		add	a,4
F467: 32C2FA  	tm_scr0:ld	(tm_scro),a
F46A: CDD6F6  		call	tm_usco
F46D: 1881    	tm_scr1:jr	tm_sta1
F46F: 3AC2FA  	tm_sclf:ld	a,(tm_scro)
F472: B7      		or	a
F473: 28F8    		jr	z,tm_scr1
F475: D604    		sub	4
F477: 18EE    		jr	tm_scr0
              	
              	; Sets up registers depending on mode
              	; used to change between 40-col and 80-col
              	;
              	; uses: af, hl
F479: 2A42F7  	tm_setp:ld	hl,(tm_mode)
              	
              		; Set TMS to text mode
F47C: DBA1    		in	a,(tm_latc)
F47E: 7C      		ld	a,h
F47F: D3A1    		out	(tm_latc),a
F481: 3E80    		ld	a,0x80
F483: D3A1    		out	(tm_latc),a
F485: DBA1    		in	a,(tm_latc)
F487: 3EF0    		ld	a,0xF0
F489: D3A1    		out	(tm_latc),a
F48B: 3E81    		ld	a,0x81
F48D: D3A1    		out	(tm_latc),a
              		
              		; Set TMS color
F48F: DBA1    		in	a,(tm_latc)
F491: 3A44F7  		ld	a,(tm_colr)
F494: D3A1    		out	(tm_latc),a
F496: 3E87    		ld	a,0x87
F498: D3A1    		out	(tm_latc),a
              		
              		; Set TMS name table to 0x0800
F49A: DBA1    		in	a,(tm_latc)
F49C: 7D      		ld	a,l
F49D: D3A1    		out	(tm_latc),a
F49F: 3E82    		ld	a,0x82
F4A1: D3A1    		out	(tm_latc),a
F4A3: C9      		ret
              	
              	; Waits for the user to press a key, and returns it
              	;
              	; Returns ASCII key in A
              	; uses: af, bc, de, hl
F4A4: CD27F7  	tm_read:call	tm_dint
F4A7: CDB0F4  		call	tm_rea0
F4AA: F5      		push	af
F4AB: CD37F7  		call	tm_eint
F4AE: F1      		pop	af
F4AF: C9      		ret 
F4B0: 3A47F7  	tm_rea0:ld	a,(tm_curx)
F4B3: 4F      		ld	c,a
F4B4: 3A48F7  		ld	a,(tm_cury)
F4B7: 57      		ld	d,a
F4B8: 210010  		ld	hl,0x1000
F4BB: 3E50    		ld	a,80
F4BD: CDB2F6  		call	tm_chat
F4C0: DBA0    		in	a,(tm_data)	; char is in A
F4C2: 57      		ld	d,a		; char key
F4C3: 5F      		ld	e,a		; blinking char
F4C4: 0601    		ld	b,1
              		
F4C6: D5      	tm_rea1:push	de
F4C7: CDE5F3  		call	tm_sta0		; No interrupts!
F4CA: D1      		pop	de
F4CB: 3C      		inc	a
F4CC: 200D    		jr	nz,tm_rea2
F4CE: 5A      		ld	e,d
F4CF: CDEBF4  		call	tm_rea3
F4D2: 3AC1FA  		ld	a,(tm_outc)
F4D5: 47      		ld	b,a
F4D6: CD57F4  		call	tm_cloc
F4D9: 78      		ld	a,b
F4DA: C9      		ret
              		
F4DB: CDF9F4  	tm_rea2:call	tm_stal
F4DE: 10E6    		djnz	tm_rea1
F4E0: 3E80    		ld	a,0x80
F4E2: AB      		xor	e
F4E3: 5F      		ld	e,a
F4E4: CDEBF4  		call	tm_rea3
F4E7: 06BE    		ld	b,190
F4E9: 18DB    		jr	tm_rea1
              	
              	
F4EB: D5      	tm_rea3:push	de
F4EC: 3A47F7  		ld	a,(tm_curx)
F4EF: 4F      		ld	c,a
F4F0: 3A48F7  		ld	a,(tm_cury)
F4F3: 57      		ld	d,a
F4F4: CD8EF6  		call	tm_putc
F4F7: D1      		pop	de
F4F8: C9      		ret
              	
              	; Stalls out for a little bit
              	;
              	; uses: none
F4F9: C5      	tm_stal:push	bc
F4FA: 06FF    		ld	b,255
F4FC: C5      	tm_sta2:push	bc
F4FD: C1      		pop	bc
F4FE: 10FC    		djnz	tm_sta2
F500: C1      		pop	bc
F501: C9      		ret
              	
              	
              	; Writes a character to the screen
              	; c = Character to write
              	;
              	; Returns c,b as next position 
              	; uses: af, bc, de, hl
F502: CD27F7  	tm_writ:call	tm_dint
F505: 59      		ld	e,c
F506: 3A47F7  		ld	a,(tm_curx)
F509: 4F      		ld	c,a
F50A: 3A48F7  		ld	a,(tm_cury)
F50D: 57      		ld	d,a
F50E: CD1DF5  		call	tm_wri0
F511: 78      		ld	a,b
F512: 3248F7  		ld	(tm_cury),a
F515: 79      		ld	a,c
F516: 3247F7  		ld	(tm_curx),a
F519: CD37F7  		call	tm_eint
F51C: C9      		ret
              		
              	; Write helper routine
              	; c = X position
              	; d = Y position
              	; e = Character
              	;
              	; Returns c,b as next position
F51D: 42      	tm_wri0:ld	b,d		; c = X, b = Y
F51E: 3AC3FA  		ld	a,(tm_escs)
F521: B7      		or	a		; Process escape code
F522: C28AF5  		jp	nz,tm_esc
F525: 3E1F    		ld	a,0x1F
F527: BB      		cp	e
F528: D25CF5  		jp	nc,tm_wri1	; Process control code
F52B: C5      		push	bc
F52C: CD8EF6  		call	tm_putc		; Write character
F52F: C1      		pop	bc
              		
              		; Increment character
F530: 0C      	tm_ri	inc	c
F531: 3E50    		ld	a,80
F533: B9      		cp	c
F534: C0      		ret	nz
F535: AF      		xor	a
F536: 4F      		ld	c,a
F537: 04      	tm_lf:  inc	b	; Line feed
F538: 3E18    		ld	a,24
F53A: B8      		cp	b
F53B: C0      		ret	nz
F53C: C5      		push	bc
F53D: CD10F6  		call	tm_dsco
F540: C1      		pop	bc
F541: 05      		dec	b
F542: C9      		ret
F543: AF      	tm_cr:	xor	a	; Carriage return
F544: 4F      		ld	c,a
F545: C9      		ret
F546: 0D      	tm_bs:	dec	c	; Backspace 
F547: F0      		ret	p
F548: 0E4F    		ld	c,79
F54A: 05      		dec	b
F54B: F0      		ret	p
F54C: AF      		xor	a
F54D: 47      		ld	b,a
F54E: 4F      		ld	c,a
F54F: C9      		ret
F550: AF      	tm_up:	xor	a	; Move up
F551: B8      		cp	b
F552: C8      		ret	z
F553: 05      		dec	b
F554: C9      		ret
F555: CDF9F6  	tm_cshm:call	tm_cls
F558: AF      	tm_home:xor	a
F559: 47      		ld	b,a
F55A: 4F      		ld	c,a
F55B: C9      		ret
              	
F55C: 7B      	tm_wri1:ld	a,e
F55D: FE08    		cp	0x08	; '\b' (Cursor left)
F55F: 28E5    		jr	z,tm_bs
F561: FE12    		cp	0x12	; Cursor right
F563: 28CB    		jr	z,tm_ri
F565: FE0A    		cp	0x0A	; '\n' (Cursor down)
F567: 28CE    		jr	z,tm_lf
F569: FE0B    		cp	0x0B	; Cursor up
F56B: 28E3    		jr	z,tm_up
F56D: FE0D    		cp	0x0D	; '\r' 
F56F: 28D2    		jr	z,tm_cr
F571: FE17    		cp	0x17	; Clear end of screen
F573: 2856    		jr	z,tm_cles
F575: FE18    		cp	0x18	; Clear end of line
F577: 2854    		jr	z,tm_clea
F579: FE1A    		cp	0x1A	; Clear screen, home cursor
F57B: 28D8    		jr	z,tm_cshm
F57D: FE1E    		cp	0x1E	; Home cursor
F57F: 28D7    		jr	z,tm_home
F581: FE1B    		cp	0x1B	; Escape
F583: C0      		ret	nz
F584: 3E01    		ld	a,1
F586: 32C3FA  		ld	(tm_escs),a
F589: C9      		ret
              		
              		; Handle escape sequence
F58A: 3D      	tm_esc:	dec	a
F58B: 280E    		jr	z,tm_esc0
F58D: 3D      		dec	a
F58E: 2825    		jr	z,tm_esc1
F590: 3D      		dec	a
F591: 282D    		jr	z,tm_esc2
F593: 3D      		dec	a
F594: 2871    		jr	z,tm_updc
F596: AF      	tm_escd:xor	a	; Escape done
F597: 32C3FA  	tm_escr:ld	(tm_escs),a
F59A: C9      		ret
F59B: 3EFF    	tm_esc0:ld	a,0xFF	; Do 40-col
F59D: BB      		cp	e
F59E: 2850    		jr	z,tm_40c
F5A0: 3EFE    		ld	a,0xFE	; Do 80-col
F5A2: BB      		cp	e
F5A3: 2858    		jr	z,tm_80c
F5A5: 3EFD    		ld	a,0xFD	; Set color
F5A7: BB      		cp	e
F5A8: 2859    		jr	z,tm_scol
F5AA: 3E3D    		ld	a,0x3D	; '='
F5AC: BB      		cp	e
F5AD: 20E7    		jr	nz,tm_escd
F5AF: 3AC3FA  	tm_esci:ld	a,(tm_escs)
F5B2: 3C      		inc	a
F5B3: 18E2    		jr	tm_escr
F5B5: 7B      	tm_esc1:ld	a,e
F5B6: 1E20    		ld	e,0x20
F5B8: 93      		sub	e
F5B9: FE18    		cp	24
F5BB: 30D9    		jr	nc,tm_escd
F5BD: 47      		ld	b,a
F5BE: 18EF    		jr	tm_esci
F5C0: 7B      	tm_esc2:ld	a,e
F5C1: 1E20    		ld	e,0x20
F5C3: 93      		sub	e
F5C4: FE50    		cp	80
F5C6: 30CE    		jr	nc,tm_escd
F5C8: 4F      		ld	c,a
F5C9: 18CB    		jr	tm_escd
              		
              		; Clear segment
              		; B = ending line
F5CB: 0617    	tm_cles:ld	b,23
F5CD: 04      	tm_clea:inc	b
F5CE: 1E00    		ld	e,0
F5D0: C5      		push	bc
F5D1: D5      		push	de
F5D2: 3E50    		ld	a,80
F5D4: 210050  		ld	hl,0x5000
F5D7: CDB2F6  		call	tm_chat
F5DA: D1      		pop	de
F5DB: C1      		pop	bc
F5DC: AF      	tm_cle0:xor	a
F5DD: D3A0    		out	(tm_data),a
F5DF: 0C      		inc	c
F5E0: 3E50    		ld	a,80
F5E2: B9      		cp	c
F5E3: 20F7    		jr	nz,tm_cle0
F5E5: 14      		inc	d
F5E6: AF      		xor	a
F5E7: 4F      		ld	c,a
F5E8: 7A      		ld	a,d
F5E9: B8      		cp	b
F5EA: 20F0    		jr	nz,tm_cle0
F5EC: D1      		pop	de	; Do not update character
F5ED: C3D6F6  		jp	tm_usco
              		
F5F0: E5      	tm_40c:	push	hl
F5F1: 210200  		ld	hl,0x0002
F5F4: 2242F7  	tm_cupd:ld	(tm_mode),hl
F5F7: CD79F4  		call	tm_setp
F5FA: E1      		pop	hl
F5FB: 1899    		jr	tm_escd
              		
F5FD: E5      	tm_80c:	push	hl
F5FE: 210704  		ld	hl,0x0407
F601: 18F1    		jr	tm_cupd
              		
              		; Set color command
F603: 3E04    	tm_scol:ld	a,4
F605: 1890    		jr	tm_escr
              		
              		; Update color here
F607: 7B      	tm_updc:ld	a,e
F608: 3244F7  		ld	(tm_colr),a
F60B: CD79F4  		call	tm_setp
F60E: 1886    		jr	tm_escd
              		
              		
              		
              	; Scroll both frame buffers down one
              	;
              	; uses: af, bc, de, hl
F610: 212808  	tm_dsco:ld	hl,0x0800+40
F613: 110048  		ld	de,0x4800
F616: 0618    		ld	b,24
F618: CD23F6  		call	tm_dsc0
F61B: 215010  		ld	hl,0x1000+80
F61E: 110050  		ld	de,0x5000
F621: 0630    		ld	b,48
F623: C5      	tm_dsc0:push	bc
F624: D5      		push	de
F625: E5      		push	hl
F626: CDBEF6  		call	tm_vcpy
F629: E1      		pop	hl
F62A: D1      		pop	de
F62B: 012800  		ld	bc,40
F62E: 09      		add	hl,bc
F62F: EB      		ex	de,hl
F630: 09      		add	hl,bc
F631: EB      		ex	de,hl
F632: C1      		pop	bc
F633: 10EE    		djnz	tm_dsc0
F635: C9      		ret
              		
              	
              	; Grabs the latest key pressed by the keyboard
              	; Discard keyboard errors
              	; Returns key in A, or 0xFF if none
              	;
              	; uses: af, bc, de, hl
F636: 3A46F7  	tm_getc:ld	a,(tm_inf)
F639: B7      		or	a
F63A: 3E00    		ld	a,0
F63C: 3246F7  		ld	(tm_inf),a
F63F: 3A45F7  		ld	a,(tm_inb)
F642: 2008    		jr	nz,tm_get0
              	
F644: DB91    		in	a,(tm_keys)
F646: E602    		and	2
F648: 3D      		dec	a
F649: F8      		ret	m
              		
              		; Grab the key
F64A: DB90    		in	a,(tm_keyd)
F64C: 32C4FA  	tm_get0:ld	(tm_last),a
F64F: CD62F6  		call	tm_map
F652: 79      		ld	a,c
F653: C9      		ret
              		
              	; Handles a keyboard interrupt for the VDP terminal driver
              	; Keypress stored in tm_inb and tm_inf flag is set
              	; 
              	; uses: none
F654: F5      	tm_kirq:push	af
F655: DB90    		in	a,(tm_keyd)
F657: 3245F7  		ld	(tm_inb),a
F65A: 3E01    		ld	a,1
F65C: 3246F7  		ld	(tm_inf),a
F65F: F1      		pop	af
F660: FB      		ei
F661: C9      		ret
              		
              		
              	; Maps keyboard input to ASCII
              	; a = Key to map
              	;
              	; Returns mapped key in c
              	; uses: af, c
F662: 4F      	tm_map:	ld	c,a
              		
              		; Mapping function
F663: 2179F6  		ld	hl,tm_mapt
F666: 7E      	tm_map0:ld	a,(hl)
F667: B7      		or	a
F668: 2808    		jr	z,tm_map2
F66A: B9      		cp	c
F66B: 23      		inc	hl
F66C: 7E      		ld	a,(hl)
F66D: 23      		inc	hl
F66E: 20F6    		jr	nz,tm_map0
F670: 4F      		ld	c,a
F671: C9      		ret
              		
              		
              		; Filter non-ASCII
F672: 79      	tm_map2:ld	a,c
F673: E680    		and	0x80	
F675: C8      		ret	z
F676: 0EFF    		ld	c,0xFF
F678: C9      		ret
              		
              	; Map table
F679: 7F08    	tm_mapt:defb	0x7F,0x08	; DEL -> BS
F67B: E108    		defb	0xE1,0x08	; '<-' -> BS
F67D: EA7F    		defb	0xEA,0x7F	; TV -> DEL
F67F: E00C    		defb	0xE0,0x0C	; '->' -> Right
F681: E20B    		defb	0xE2,0x0B	; '/\' -> Up
F683: E30A    		defb	0xE3,0x0A	; '\/' -> Linefeed 
F685: E95C    		defb	0xE9,0x5C	; PAUSE -> '\'
F687: E860    		defb	0xE8,0x60	; SYM -> '@'
F689: E67C    		defb	0xE6,0x7C	; NO -> '|'
F68B: E77E    		defb	0xE7,0x7E	; YES -> '~'
F68D: 00      		defb	0
              	
              	; Puts a character on the screen
              	; c = X position
              	; d = Y position
              	; e = Character to put
              	;
              	; uses: af, bc, de, hl
F68E: 210050  	tm_putc:ld	hl,0x5000
F691: 3E50    		ld	a,80
F693: C5      		push	bc
F694: D5      		push	de
F695: CDB2F6  		call	tm_chat	; Place it in the 80 col buffer
F698: ED59    		out	(c),e
F69A: D1      		pop	de
F69B: C1      		pop	bc
F69C: 3AC2FA  	tm_putf:ld	a,(tm_scro)	; Place into frame buffer
F69F: 47      		ld	b,a
F6A0: 79      		ld	a,c
F6A1: 90      		sub	b	; If character is less than scroll...
F6A2: 4F      		ld	c,a
F6A3: F8      		ret	m
F6A4: FE28    		cp	40	; If desired position is 40 or more
F6A6: D0      		ret	nc
F6A7: 210048  		ld	hl,0x4800
F6AA: 3E28    		ld	a,40
F6AC: CDB2F6  		call	tm_chat	; Place it in the 40 col screen buffer
F6AF: ED59    		out	(c),e
F6B1: C9      		ret
              	
              	; Sets the TMS address to a character at x,y
              	; a = Line width
              	; c = X position
              	; d = Y position
              	; hl = Buffer address
              	;
              	; uses: af, bc, d, hl
F6B2: 0600    	tm_chat:ld	b,0
F6B4: 09      		add	hl,bc
F6B5: 4F      		ld	c,a
F6B6: AF      		xor	a
F6B7: BA      		cp	d
F6B8: 285A    	tm_cha0:jr	z,tm_addh
F6BA: 09      		add	hl,bc
F6BB: 15      		dec	d
F6BC: 18FA    		jr	tm_cha0
              	
              	; Copies VRAM from one location to another
              	; Transfers occur in blocks of 40 bytes
              	; de = destination address
              	; hl = source location
              	;
              	; b = 0 on return
              	; uses: af, bc, de, hl
F6BE: CD14F7  	tm_vcpy:call	tm_addh
F6C1: 0628    		ld	b,40
F6C3: 21C5FA  		ld	hl,tm_cbuf
F6C6: CDD0F3  		call	tm_inir
F6C9: EB      		ex	de,hl
F6CA: CD14F7  		call	tm_addh
F6CD: 0628    		ld	b,40
F6CF: 21C5FA  		ld	hl,tm_cbuf
F6D2: CDC7F3  		call	tm_otir
F6D5: C9      		ret
              		
              	; Updates the frame buffer based on the scroll position
              	;
              	; uses: af, bc, de, hl
F6D6: 210010  	tm_usco:ld	hl,0x1000
F6D9: 110048  		ld	de,0x4800
F6DC: 3AC2FA  		ld	a,(tm_scro)
F6DF: 0600    		ld	b,0
F6E1: 4F      		ld	c,a
F6E2: 09      		add	hl,bc
F6E3: 0618    		ld	b,24
F6E5: C5      	tm_usc0:push	bc
F6E6: D5      		push	de
F6E7: E5      		push	hl
F6E8: CDBEF6  		call	tm_vcpy
F6EB: E1      		pop	hl
F6EC: D1      		pop	de
F6ED: 0E50    		ld	c,80
F6EF: 09      		add	hl,bc
F6F0: EB      		ex	de,hl
F6F1: 0E28    		ld	c,40
F6F3: 09      		add	hl,bc
F6F4: EB      		ex	de,hl
F6F5: C1      		pop	bc
F6F6: 10ED    		djnz	tm_usc0
F6F8: C9      		ret
              		
              	
              	; Clears out screen buffer and offscreen buffer
              	; Also includes clear limited function
              	;
              	; uses: af, bc, de
F6F9: 010048  	tm_cls:	ld	bc,0x4800
F6FC: 11FE0F  		ld	de,0x1000-2
F6FF: CD16F7  		call	tm_addr
F702: ED71    	tm_cls0:out	(c),0
F704: 1B      		dec	de
F705: 7A      		ld	a,d
F706: B3      		or	e
F707: 20F9    		jr	nz,tm_cls0
              		
              		; Write super special serial #
F709: 3EE5    		ld	a,0xE5
F70B: ED79    		out	(c),a
F70D: F5      		push	af
F70E: F1      		pop	af
F70F: 3E81    		ld	a,0x81
F711: ED79    		out	(c),a
F713: C9      		ret
              	
              	; Sets the TMS address for either reading or writing
              	; bc = Address 
              	;
              	; Returns tm_data in c
              	; uses: af, bc
F714: 44      	tm_addh:ld	b,h		; Does HL instead of BC
F715: 4D      		ld	c,l
F716: DBA1    	tm_addr:in	a,(tm_latc)
F718: 79      		ld	a,c
F719: D3A1    		out	(tm_latc),a
F71B: 78      		ld	a,b
F71C: D3A1    		out	(tm_latc),a
F71E: 0EA0    		ld	c,tm_data
F720: C9      		ret
              		
              	; Handles a TMS9918 irq
F721: F5      	tm_virq:push	af
F722: DBA1    		in	a,(tm_latc)
F724: F1      		pop	af
F725: FB      		ei
F726: C9      		ret
              		
              		
              	; Disables all interrupts while VDP operations occur
              	;
              	; uses: a
F727: 3EC9    	tm_dint:ld	a,0xC9
F729: 323800  		ld	(0x38),a
F72C: ED56    		im	1
F72E: 3E0E    		ld	a,0x0E
F730: D341    		out	(tm_atla),a	; AY register = 14
F732: 3E00    		ld	a,0x00
F734: D340    		out	(tm_ayda),a	
F736: C9      		ret
              		
              	; Enables interrupts again
              	;
              	; uses: a
F737: 3E0E    	tm_eint:ld	a,0x0E
F739: D341    		out	(tm_atla),a	; AY register = 14
F73B: 3EB0    		ld	a,0xB0
F73D: D340    		out	(tm_ayda),a
F73F: ED5E    		im	2
F741: C9      		ret
              		
              	; Variables
F742: 0200    	tm_mode:defw	0x0002
F744: E1      	tm_colr:defb	0xE1
F745: 00      	tm_inb:	defb	0
F746: 00      	tm_inf:	defb	0
F747: 00      	tm_curx:defb	0
F748: 00      	tm_cury:defb	0
F749: 01      	tm_cold:defb	1
              	#include "../dev/nabu_ndsk.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   N H A C P   V I R T U A L   D I S K
              	;*
              	;*     This driver allows for IshkurCP/M to access a virtual
              	;*     disk using the NHACP protocol. Indiviual files are 
              	;*     mounted as file systems and accessed like a disk
              	;*     normally would.
              	;*
              	;*     This particular driver uses the Nabu HCCA port to 
              	;*     facilitate communication between it and an adapter
              	;*
              	;*     In order to service CCP and GRB requests, the 
              	;*     following special files must exist:
              	;*
              	;*     '${STORAGE}/CPM22.SYS' <- For CP/M system components
              	;*     '${STORAGE}/FONT.GRB' <- For graphical driver components
              	;*
              	;*
              	;*
              	;*
              	;*     Device requires 384 bytes of bss space (nd_bss)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
FAED: 00      	nd_tran:defs	1	; Transfer count
FAEE: 00      	nd_csec:defs	1	; Current sector (1b)
FAEF: 0000    	nd_ctrk:defs	2	; Current track (2b)
FAF1: 00000000	nd_buff:defs	64	; Buffer (64b)
FAF5: 00...   	
FB31: 00000000	nd_asva:defs	129	; ASV #1 (129b)
FB35: 00...   	
FBB2: 00000000	nd_asvb:defs	129	; ASV #1 (129b)
FBB6: 00...   	
              	.area	_TEXT
              	
0040:         	nd_ayda	equ	0x40		; AY-3-8910 data port
0041:         	nd_atla	equ	0x41		; AY-3-8910 latch port
0080:         	nd_hcca	equ	0x80		; Modem data port
0000:         	nd_nctl	equ	0x00		; NABU control port
              	
0080:         	nd_fild	equ	0x80		; Default file access desc
              	
              	
              	;
              	;**************************************************************
              	;*
              	;*         D I S K   D R I V E   G E O M E T R Y
              	;* 
              	;**************************************************************
              	;
              	
              	; Disk A DPH
F74A: 00000000	nd_dpha:defw	0,0,0,0
F74E: 00000000	
F752: 10FF    		defw	dircbuf	; DIRBUF
F754: 6AF7    		defw	nd_dpb	; DPB
F756: 0000    		defw	0	; CSV
F758: 31FB    		defw	nd_asva	; ALV (129 bytes)
              		
              	; Disk B DPH
F75A: 00000000	nd_dphb:defw	0,0,0,0
F75E: 00000000	
F762: 10FF    		defw	dircbuf	; DIRBUF
F764: 6AF7    		defw	nd_dpb	; DPB
F766: 0000    		defw	0	; CSV
F768: B2FB    		defw	nd_asvb	; ALV (129 bytes)
              		
              	; NSHD8 format
F76A: 4000    	nd_dpb:	defw	64	; # sectors per track
F76C: 06      		defb	6	; BSH
F76D: 3F      		defb	63	; BLM
F76E: 03      		defb	3	; EXM
F76F: FF03    		defw	1023	; DSM
F771: FF00    		defw	255	; DRM
F773: 80      		defb	0x80	; AL0
F774: 00      		defb	0	; AL1
F775: 0000    		defw	0	; Size of directory check vector
F777: 0000    		defw	0	; Number of reserved tracks at the beginning of disk
              	
              	; Driver entry point
              	; a = Command #
              	;
              	; uses: all
F779: B7      	ndkdev:	or	a
F77A: 2815    		jr	z,nd_init
F77C: 3D      		dec	a
F77D: 2813    		jr	z,nd_home
F77F: 3D      		dec	a
F780: 2817    		jr	z,nd_sel
F782: 3D      		dec	a
F783: CAC3F7  		jp	z,nd_strk
F786: 3D      		dec	a
F787: CAC9F7  		jp	z,nd_ssec
F78A: 3D      		dec	a
F78B: CACEF7  		jp	z,nd_read
F78E: C3DFF7  		jp	nd_writ
              		
              	; Inits the device
              	; Not really needed atm
              	; hl = Call argument
              	;
              	; uses: none
F791: C9      	nd_init:ret
              	
              	; Sets "track" back to zero
              	;
              	; uses: none
F792: 210000  	nd_home:ld	hl,0
F795: 22EFFA  		ld	(nd_ctrk),hl
F798: C9      		ret
              	
              	; Selects the drive
              	; c = Logging status
              	; hl = Call argument
              	;
              	; uses: hl
F799: E5      	nd_sel:	push	hl
F79A: CD00F8  		call	nd_hini
F79D: E1      		pop	hl
F79E: E5      		push	hl
F79F: 7D      		ld	a,l
F7A0: C641    		add	a,0x41		; Convert to ASCII
F7A2: 32CBF9  		ld	(nd_p2im),a
F7A5: 21C6F9  		ld	hl,nd_p2
F7A8: 11DAF9  		ld	de,nd_m0na
F7AB: 010B00  		ld	bc,11
F7AE: EDB0    		ldir
F7B0: CD64F8  		call	nd_open		; Open the file
F7B3: E1      		pop	hl		; Select DPH
F7B4: 7D      		ld	a,l
F7B5: B7      		or	a
F7B6: 214AF7  		ld	hl,nd_dpha
F7B9: C8      		ret	z
F7BA: 3D      		dec	a
F7BB: 215AF7  		ld	hl,nd_dphb
F7BE: C8      		ret	z
F7BF: 210000  		ld	hl,0
F7C2: C9      		ret
              		
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	; hl = Call argument
              	;
              	; uses: nonoe
F7C3: 60      	nd_strk:ld	h,b
F7C4: 69      		ld	l,c
F7C5: 22EFFA  		ld	(nd_ctrk),hl
F7C8: C9      		ret
              	
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	; hl = Call argument
              	;
              	; uses: none
F7C9: 79      	nd_ssec:ld	a,c
F7CA: 32EEFA  		ld	(nd_csec),a
F7CD: C9      		ret
              	
              	; Reads a sector and DMA transfers it to memory
              	;
              	; uses: af
F7CE: CD00F8  	nd_read:call	nd_hini
F7D1: CDF0F7  		call	nd_gbno
F7D4: 2A49F3  		ld	hl,(biodma)
F7D7: CD81F8  		call	nd_getb
F7DA: 3E01    		ld	a,1
F7DC: D8      		ret	c
F7DD: AF      		xor	a
F7DE: C9      		ret
              		
              	; Write a sector from DMA
              	;
              	; uses: af
F7DF: CD00F8  	nd_writ:call	nd_hini
F7E2: CDF0F7  		call	nd_gbno
F7E5: 2A49F3  		ld	hl,(biodma)
F7E8: CDC2F8  		call	nd_putb
F7EB: 3E01    		ld	a,1
F7ED: D8      		ret	c
F7EE: AF      		xor	a
F7EF: C9      		ret
              		
              		
              	; Gets the block # for read / write operations
              	;
              	; Returns block # in de
              	; uses: af, de, hl 
F7F0: 2AEFFA  	nd_gbno:ld	hl,(nd_ctrk)
F7F3: 29      		add	hl,hl
F7F4: 29      		add	hl,hl
F7F5: 29      		add	hl,hl
F7F6: 29      		add	hl,hl
F7F7: 29      		add	hl,hl
F7F8: 29      		add	hl,hl
F7F9: 3AEEFA  		ld	a,(nd_csec)
F7FC: B5      		or	l
F7FD: 6F      		ld	l,a
F7FE: EB      		ex	de,hl
F7FF: C9      		ret
              		
              	
              	; Set up the HCCA modem connection
              	; Configures the AY-3-8910 to monitor correct interrupts
              	; and leaves it in a state where the interrupt port is
              	; exposed
              	;
              	; uses: a, b
F800: 3E07    	nd_hini:ld	a,0x07
F802: D341    		out	(nd_atla),a	; AY register = 7
F804: DB40    		in	a,(nd_ayda)
F806: E63F    		and	0x3F
F808: F640    		or	0x40
F80A: D340    		out	(nd_ayda),a	; Configure AY port I/O
              		
              		; Claim interrupt vectors
F80C: E5      		push	hl
F80D: 2156F9  		ld	hl,nd_rirq
F810: 2200FF  		ld	(intvec),hl
F813: 219DF9  		ld	hl,nd_wirq
F816: 2202FF  		ld	(intvec+2),hl
F819: E1      		pop	hl
              		
              	; Set interrupts to their default state
              	;
              	; uses: a
F81A: 3E0E    	nd_dflt:ld	a,0x0E
F81C: D341    		out	(nd_atla),a	; AY register = 14
F81E: 3EB0    		ld	a,0xB0
F820: D340    		out	(nd_ayda),a	; Enable HCCA receive and but not send, plus key and VDP
              		
F822: 3E0F    	nd_dfl0:ld	a,0x0F		
F824: D341    		out	(nd_atla),a	; AY register = 15
              		
F826: C9      		ret
              	
              	; Set receive and send interrupts
              	;
              	; uses: a
F827: 3E0E    	nd_esnd:ld	a,0x0E
F829: D341    		out	(nd_atla),a	; AY register = 14
F82B: 3EC0    		ld	a,0xC0
F82D: D340    		out	(nd_ayda),a	; Enable HCCA receive and send
F82F: 18F1    		jr	nd_dfl0
              		
              	; Set receive but not send interrupt
              	;
              	; uses: a
F831: 3E0E    	nd_dsnd:ld	a,0x0E
F833: D341    		out	(nd_atla),a	; AY register = 14
F835: 3E80    		ld	a,0x80
F837: D340    		out	(nd_ayda),a	; Enable HCCA receive and but not send
F839: 18E7    		jr	nd_dfl0
              	
              	
              	; Loads the CCP into the CCP space
F83B: 21B2F9  	nd_ccp:	ld	hl,nd_p0
F83E: 1803    		jr	nd_grb0
              		
              	; Loads the GRB into the CCP space
F840: 21BCF9  	nd_grb:	ld	hl,nd_p1
F843: 11DAF9  	nd_grb0:ld	de,nd_m0na
F846: 010A00  		ld	bc,10
F849: EDB0    		ldir			; Copy name to file open
F84B: CD00F8  		call	nd_hini		; Go to HCCA mode
F84E: 210000  		ld	hl,0x0000	; O_RDONLY
F851: CD67F8  		call	nd_opef		; Open the file
F854: 110000  		ld	de,0
F857: 2100DC  		ld	hl,cbase
F85A: CD81F8  	nd_grb1:call	nd_getb
F85D: 1C      		inc	e
F85E: 3E10    		ld	a,16
F860: BB      		cp	e
F861: 20F7    		jr	nz,nd_grb1
F863: C9      		ret
              		
              	
              	; Open the prepared file
              	; Closes the existing file too
              	;
              	; uses: af, b, hl
F864: 210100  	nd_open:ld	hl,0x0001	; O_RDWR
F867: 22D7F9  	nd_opef:ld	(nd_m0fl),hl
F86A: 21E9F9  		ld	hl,nd_m1
F86D: 0606    		ld	b,6
F86F: CD0EF9  		call	nd_send
F872: 21D1F9  		ld	hl,nd_m0
F875: 0617    		ld	b,23
F877: CD0EF9  		call	nd_send
F87A: 21F1FA  		ld	hl,nd_buff
F87D: CDF0F8  		call	nd_rece
F880: C9      		ret
              		
              	; Gets a block from the currently open file
              	; and places it in (hl)
              	; de = Block to read
              	; hl = Destination for information
              	;
              	; Returns location directly after in hl
              	; Carry flag set on error
              	; uses: af, b, hl
F881: CD87F8  	nd_getb:call	nd_get0
F884: C31AF8  		jp	nd_dflt
F887: EB      	nd_get0:ex	de,hl
F888: 22F7F9  		ld	(nd_m2bn),hl
F88B: EB      		ex	de,hl
F88C: E5      		push	hl
F88D: 21F1F9  		ld	hl,nd_m2
F890: 060C    		ld	b,12
F892: CD0EF9  		call	nd_send
F895: E1      		pop	hl
F896: D8      		ret	c
F897: CD17F9  		call	nd_hcrd
F89A: CD1AF9  		call	nd_hcre
F89D: D8      		ret	c
F89E: FE84    		cp	0x84
F8A0: 37      		scf
F8A1: 2017    		jr	nz,nd_get2
F8A3: CD1AF9  		call	nd_hcre
F8A6: 32EDFA  		ld	(nd_tran),a
F8A9: 47      		ld	b,a
F8AA: CD1AF9  		call	nd_hcre
F8AD: 78      		ld	a,b
F8AE: B7      		or	a
F8AF: C8      		ret	z
F8B0: CD1AF9  	nd_get1:call	nd_hcre
F8B3: D8      		ret	c
F8B4: 77      		ld	(hl),a
F8B5: 23      		inc	hl
F8B6: 10F8    		djnz	nd_get1
F8B8: B7      		or	a
F8B9: C9      		ret
F8BA: CD17F9  	nd_get2:call	nd_hcrd	; Read the error message and exit
F8BD: CD1AF9  		call	nd_hcre
F8C0: 37      		scf
F8C1: C9      		ret
              		
              	; Puts a block into the currently open file
              	; from that location (hl)
              	; de = Block to write
              	; hl = Source of information
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F8C2: CDC8F8  	nd_putb:call	nd_put0
F8C5: C31AF8  		jp	nd_dflt
F8C8: EB      	nd_put0:ex	de,hl
F8C9: 2203FA  		ld	(nd_m3bn),hl
F8CC: EB      		ex	de,hl
F8CD: E5      		push	hl
F8CE: 21FDF9  		ld	hl,nd_m3
F8D1: 060C    		ld	b,12
F8D3: CD0EF9  		call	nd_send		; Send message precursor
F8D6: E1      		pop	hl
F8D7: D8      		ret	c
F8D8: 0680    		ld	b,128
F8DA: 7E      	nd_put1:ld	a,(hl)		; Send the block
F8DB: CD64F9  		call	nd_hcwr
F8DE: D8      		ret	c
F8DF: 23      		inc	hl
F8E0: 10F8    		djnz	nd_put1
F8E2: 21F1FA  		ld	hl,nd_buff
F8E5: CDF0F8  		call	nd_rece
F8E8: 3AF1FA  		ld	a,(nd_buff)
F8EB: FE81    		cp	0x81
F8ED: C8      		ret	z
F8EE: 37      		scf
F8EF: C9      		ret
              		
              	; Receives a general response from the NHACP server
              	; hl = Destination of message
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F8F0: CD31F8  	nd_rece:call	nd_dsnd
F8F3: CDF9F8  		call	nd_rec0
F8F6: C31AF8  		jp	nd_dflt
F8F9: CD1AF9  	nd_rec0:call	nd_hcre
F8FC: D8      		ret	c		; Existing error
F8FD: 47      		ld	b,a
F8FE: CD1AF9  		call	nd_hcre
F901: D8      		ret	c		; Existing error
F902: 37      		scf
F903: C0      		ret	nz		; Message too big!
F904: CD1AF9  	nd_rec1:call	nd_hcre
F907: D8      		ret	c		; Error!
F908: 77      		ld	(hl),a
F909: 23      		inc	hl
F90A: 10F8    		djnz	nd_rec1
F90C: B7      		or	a
F90D: C9      		ret
              		
              	; Write a number of bytes to the HCCA port
              	; b = Bytes to write
              	; hl = Start of message
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F90E: 7E      	nd_send:ld	a,(hl)
F90F: 23      		inc	hl
F910: CD64F9  		call	nd_hcwr
F913: D8      		ret	c		; Error!
F914: 10F8    		djnz	nd_send
F916: C9      		ret
              		
              	; Read from the HCCA port
              	; Assumes AY is set to reg 15
              	; Will panic on timeout
              	;
              	; Returns result in a
              	; Carry flag set on error
              	; Uses: af
F917: CD1AF9  	nd_hcrd:call	nd_hcre
F91A: AF      	nd_hcre:xor	a
F91B: 32B1F9  		ld	(nd_inf),a
F91E: D5      		push	de
F91F: 3E09    		ld	a,0x09
F921: D300    		out	(nd_nctl),a	; Turn on recv light
F923: 11FFFF  		ld	de,0xFFFF
F926: 3AB1F9  	nd_hcr0:ld	a,(nd_inf)
F929: B7      		or	a
F92A: 201D    		jr	nz,nd_hcr2
F92C: DB40    		in	a,(nd_ayda)
              		;bit	0,a
              		;jr	z,nd_hcr0	; Await an interrupt
              		;bit	1,a
              		;jr	z,nd_hcr1
F92E: E60F    		and	0x0F
F930: EE01    		xor	0b00000001
F932: 280C    		jr	z,nd_hcr1
F934: 1B      		dec	de
F935: 7B      		ld	a,e
F936: B2      		or	d
F937: 20ED    		jr	nz,nd_hcr0
F939: 3E01    	nd_hcer:ld	a,0x01
F93B: D300    		out	(nd_nctl),a	; Turn off recv light
F93D: 37      		scf
F93E: D1      		pop	de
F93F: C9      		ret			; Timed out waiting
F940: 3E01    	nd_hcr1:ld	a,0x01
F942: D300    		out	(nd_nctl),a	; Turn off recv light
F944: DB80    		in	a,(nd_hcca)
F946: D1      		pop	de
F947: B7      		or	a
F948: C9      		ret
F949: 3E01    	nd_hcr2:ld	a,0x01
F94B: D300    		out	(nd_nctl),a	; Turn off recv light
F94D: AF      		xor	a
F94E: 32B1F9  		ld	(nd_inf),a
F951: 3AB0F9  		ld	a,(nd_inb)
F954: D1      		pop	de
F955: C9      		ret
              		
              	; HCCA read interrupt
              	; Reads from the HCCA, buffers it, and then sets the flag
              	;
              	; uses: none
F956: F5      	nd_rirq:push	af
F957: DB80    		in	a,(nd_hcca)
F959: 32B0F9  		ld	(nd_inb),a
F95C: 3E01    		ld	a,1
F95E: 32B1F9  		ld	(nd_inf),a
F961: F1      		pop	af
F962: FB      		ei
F963: C9      		ret
              		
              		
              	; Write to the HCCA port
              	; Assumes AY is set to reg 15
              	; Will panic on timeout
              	; a = Character to write
              	;
              	; Carry flag set on error
              	; Uses: f
F964: D5      	nd_hcwr:push	de
F965: 32AEF9  		ld	(nd_outb),a
F968: AF      		xor	a
F969: 32AFF9  		ld	(nd_outf),a
F96C: CD27F8  		call	nd_esnd
F96F: 11FFFF  		ld	de,0xFFFF
F972: 3E21    		ld	a,0x21
F974: D300    		out	(nd_nctl),a	; Turn on send light
F976: 3AAFF9  	nd_hcw0:ld	a,(nd_outf)
F979: B7      		or	a
F97A: 2017    		jr	nz,nd_hcw2
F97C: DB40    		in	a,(nd_ayda)
              		;bit	0,a
              		;jr	z,nd_hcw0	; Await an interrupt
              		;bit	1,a
              		;jr	nz,nd_hcw1
F97E: E60F    		and	0x0F
F980: EE03    		xor	0b00000011
F982: 280A    		jr	z,nd_hcw1
F984: 1B      		dec	de
F985: 7B      		ld	a,e
F986: B2      		or	d
F987: 20ED    		jr	nz,nd_hcw0
F989: CD31F8  		call	nd_dsnd
F98C: 18AB    		jr	nd_hcer		; Timed out waiting
F98E: 3AAEF9  	nd_hcw1:ld	a,(nd_outb)
F991: D380    		out	(nd_hcca),a
F993: D1      	nd_hcw2:pop	de
F994: 3E01    		ld	a,0x01
F996: D300    		out	(nd_nctl),a	; Turn off send light
F998: CD31F8  		call	nd_dsnd
F99B: B7      		or	a
F99C: C9      		ret
              		
              	; HCCA write interrupt
              	; Writes to the HCCA from the buffer, and 
F99D: F5      	nd_wirq:push	af
F99E: 3AAEF9  		ld	a,(nd_outb)
F9A1: D380    		out	(nd_hcca),a
F9A3: 3E01    		ld	a,1
F9A5: 32AFF9  		ld	(nd_outf),a
F9A8: CD31F8  		call	nd_dsnd		; Y'all can't behave, turning off
F9AB: F1      		pop	af
F9AC: FB      		ei
F9AD: C9      		ret
              		
              	; Byte to send out of HCCA
F9AE: 00      	nd_outb:defb	0
              	
              	; HCCA output flag
F9AF: 00      	nd_outf:defb	0
              	
              	; Byte received from HCCA
F9B0: 00      	nd_inb:	defb	0
              	
              	; HCCA input flag
F9B1: 00      	nd_inf: defb	0
              		
              	; Path to CP/M image
              	; Total length: 10 bytes
F9B2: 43504D32	nd_p0:	defb	'CPM22.SYS',0
F9B6: 322E5359	
F9BA: 5300    	
              	
              	; Path to GRB image
              	; Total length: 10 bytes
F9BC: 464F4E54	nd_p1:	defb	'FONT.GRB',0,0
F9C0: 2E475242	
F9C4: 0000    	
              	
              	; Path to a generic disk image
              	; Total length: 11
F9C6: 4E44534B	nd_p2:	defb	'NDSK_'
F9CA: 5F      	
F9CB: 3F      	nd_p2im:defb	'?'		; Disk image name
F9CC: 2E494D47		defb	'.IMG',0
F9D0: 00      	
              	
              	; Message prototype to open a file
              	; Total length: 23 bytes
F9D1: 8F00    	nd_m0:	defb	0x8F,0x00
F9D3: 1300    		defw	19		; Message length
F9D5: 01      		defb	0x01		; Cmd: STORAGE-OPEN
F9D6: 80      		defb	nd_fild		; Default file descriptor
F9D7: 0100    	nd_m0fl:defw	0x01		; Read/Write flags
F9D9: 0E      		defb	0x0E		; Message length
F9DA: 58585858	nd_m0na:defb	'XXXXXXXXXXXXXX'; File name field
F9DE: 58...   	
F9E8: 00      		defb	0x00		; Padding
              		
              	; Message prototype to close a file
              	; Total length: 6 bytes
F9E9: 8F00    	nd_m1:	defb	0x8F,0x00
F9EB: 0200    		defw	2		; Message length
F9ED: 05      		defb	0x05		; Cmd: FILE-CLOSE
F9EE: 80      		defb	nd_fild		; Default file descriptor
F9EF: 0000    		defw	0x00		; Magic bytes
              		
              	; Message prototype to read a block
              	; Total length: 12 bytes
F9F1: 8F00    	nd_m2:	defb	0x8F,0x00
F9F3: 0800    		defw	8		; Message length
F9F5: 07      		defb	0x07		; Cmd: STORAGE-GET-BLOCK
F9F6: 80      		defb	nd_fild		; Default file descritor
F9F7: 00000000	nd_m2bn:defw	0x00,0x00	; Block number
F9FB: 8000    		defw	128		; Block length
              		
              	; Message prototype to write a block
              	; Total length: 12 bytes
F9FD: 8F00    	nd_m3:	defb	0x8F,0x00
F9FF: 8800    		defw	136		; Message length
FA01: 08      		defb	0x08		; Cmd: STORAGE-PUT-BLOCK
FA02: 80      		defb	nd_fild		; Default file descritor
FA03: 00000000	nd_m3bn:defw	0x00,0x00	; Block number
FA07: 8000    		defw	128		; Block length
              	#include "../dev/nabu_prt.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   P A R A L L E L   O U T P U T
              	;*
              	;*      A simple output-only device driver for the NABU
              	;*      parellel printer port. 
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
0040:         	pr_ayda	equ	0x40		; AY-3-8910 data port
0041:         	pr_atla	equ	0x41		; AY-3-8910 latch port
00B0:         	pr_prnt	equ	0xB0		; Parallel output
0000:         	pr_ctrl	equ	0x00		; Device control register
              	
              	; Driver jump table 
FA09: B7      	prtdev:	or	a
FA0A: 2808    		jr	z,pr_init
FA0C: 3D      		dec	a
FA0D: 2806    		jr	z,pr_stat
FA0F: 3D      		dec	a
FA10: 2805    		jr	z,pr_read
FA12: 1805    		jr	pr_writ
              		
              	; Device init
              	; Does nothing
              	;
              	; uses: none
FA14: C9      	pr_init:ret
              	
              	; Device status 
              	; There are never any characters to read
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
FA15: AF      	pr_stat:xor	a
FA16: C9      		ret
              		
              	; Waits for a character to come in and returns it
              	; No characters to read, returns 0
              	;
              	; Returns ASCII key in A
              	; uses: af
FA17: AF      	pr_read:xor	a
FA18: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	;
              	; uses: af, bc
FA19: 3E0F    	pr_writ:ld	a,0x0F
FA1B: D341    		out	(pr_atla),a	; AY register = 15
              		
FA1D: DB40    	pr_wri0:in	a,(pr_ayda)	; Wait for not busy
FA1F: E610    		and	0x10
FA21: 20FA    		jr	nz,pr_wri0
              		
FA23: 79      		ld	a,c
FA24: D3B0    		out	(pr_prnt),a	; Write data
              		
FA26: 3E05    		ld	a,0x05		; Strobe
FA28: D300    		out	(pr_ctrl),a
              		
FA2A: 0620    		ld	b,32		
FA2C: 10FE    	pr_wri1:djnz	pr_wri1		; Wait a few cycles
              		
FA2E: 3E01    		ld	a,0x01		; Strobe off
FA30: D300    		out	(pr_ctrl),a
              		
FA32: C9      		ret
              		
              	#include "../dev/nabu_sio.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   S E R I A L   O P T I O N   C A R D
              	;*
              	;*      This driver allows the NABU serial option card to be
              	;*      used as a bidirectional Ishkur serial device. It will
              	;*      automatically search for a serial card on init. Serial
              	;*      cards are numbered by order. The first serial card gets
              	;*      a minor # of 0, the second card gets a minor number of
              	;*      1, etc... Up to 4 serial cards are supported.
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
              	
              	
              	; Driver jump table 
FA33: B7      	siodev:	or	a
FA34: 2808    		jr	z,so_init
FA36: 3D      		dec	a
FA37: 2833    		jr	z,so_stat
FA39: 3D      		dec	a
FA3A: 2841    		jr	z,so_read
FA3C: 1851    		jr	so_writ
              		
              	; Device init
              	; Tries to find the option card if it is installed
              	; hl = Device options
              	;
              	; uses: none
FA3E: 11A3FA  	so_init:ld	de,so_atab
FA41: 45      		ld	b,l
FA42: 04      		inc	b		; Slot 1,2,3,...
FA43: 19      		add	hl,de 		; Get address table entry
FA44: 0ECF    		ld	c,0xCF		; First slot
              		
FA46: ED78    	so_ini0:in	a,(c)
FA48: FE08    		cp	0x08
FA4A: 2807    		jr	z,so_ini2
              		
FA4C: 3E10    	so_ini1:ld	a,0x10
FA4E: 81      		add	c
FA4F: F0      		ret	p		; Can't find, failure
FA50: 4F      		ld	c,a
FA51: 18F3    		jr	so_ini0
              		
FA53: 10F7    	so_ini2:djnz	so_ini1		; Repeat if looking for next card
FA55: 79      		ld	a,c
FA56: D60F    		sub	0x0F
FA58: 4F      		ld	c,a
FA59: 71      		ld	(hl),c
FA5A: 11A7FA  		ld	de,so_conf
FA5D: 060D    		ld	b,13
              		
              		; Lets set up the serial card for 9600 8N1
              		; First we set up the 8253, then the 8251
FA5F: 1A      	so_ini3:ld	a,(de)
FA60: 13      		inc	de
FA61: 86      		add	a,(hl)
FA62: 4F      		ld	c,a
FA63: 1A      		ld	a,(de)
FA64: 13      		inc	de
FA65: ED79    		out	(c),a
FA67: E5      		push	hl
FA68: E1      		pop	hl	; Small delay
FA69: 10F4    		djnz	so_ini3
FA6B: C9      		ret
              	
              	; Device status 
              	; hl = Device options
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
FA6C: 11A3FA  	so_stat:ld	de,so_atab
FA6F: 19      		add	hl,de
FA70: AF      		xor	a
FA71: BE      		cp	(hl)
FA72: C8      		ret	z	; No device, return 0
FA73: 4E      		ld	c,(hl)
FA74: 0C      		inc	c
FA75: ED78    	so_sta0:in	a,(c)	; Check status register
FA77: E602    		and	0x02
FA79: C8      		ret	z
FA7A: 3EFF    		ld	a,0xFF
FA7C: C9      		ret
              		
              		
              	; Waits for a character to come in and returns it
              	; hl = Device options
              	;
              	; Returns ASCII key in A
              	; uses: af
FA7D: 11A3FA  	so_read:ld	de,so_atab
FA80: 19      		add	hl,de
FA81: AF      		xor	a
FA82: BE      		cp	(hl)
FA83: C8      		ret	z	; No device, return 0
FA84: 4E      		ld	c,(hl)
FA85: 0C      		inc	c
FA86: CD75FA  	so_rea0:call	so_sta0	; Wait for a character
FA89: 28FB    		jr	z,so_rea0
FA8B: 0D      		dec	c
FA8C: ED78    		in	a,(c)
FA8E: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	; hl = Device options
              	;
              	; uses: af, bc
FA8F: 41      	so_writ:ld	b,c
FA90: 11A3FA  		ld	de,so_atab
FA93: 19      		add	hl,de
FA94: AF      		xor	a
FA95: BE      		cp	(hl)
FA96: C8      		ret	z	; No device, return 0
FA97: 4E      		ld	c,(hl)
FA98: 0C      		inc	c
FA99: ED78    	so_wri0:in	a,(c)
FA9B: E601    		and	0x01
FA9D: 28FA    		jr	z,so_wri0
FA9F: 0D      		dec	c
FAA0: ED41    		out	(c),b
FAA2: C9      		ret
              		
              		
              	; Variables
              	; 4 possible slots
FAA3: 00000000	so_atab:defb	0x00,0x00,0x00,0x00
              	
              	; Configuration string
              	; Sets up counters 1 and 2 on the 8523 timer
FAA7: 0737    	so_conf:defb	0x07,0x37	; Counter 1 setup
FAA9: 0412    		defb	0x04,0x12
FAAB: 0400    		defb	0x04,0x00
FAAD: 0777    		defb	0x07,0x77	; Counter 2 setup
FAAF: 0512    		defb	0x05,0x12
FAB1: 0500    		defb	0x05,0x00
              		
FAB3: 0100    		defb	0x01,0x00	; 8251 setup
FAB5: 0100    		defb	0x01,0x00
FAB7: 0100    		defb	0x01,0x00
FAB9: 0100    		defb	0x01,0x00
FABB: 0140    		defb	0x01,0x40
FABD: 014E    		defb	0x01,0x4E
FABF: 0137    		defb	0x01,0x37


; +++ segments +++

#CODE _TEXT        = $DC00 = 56320,  size = $1EC1 =  7873
#DATA _BSS         = $FAC1 = 64193,  size = $0172 =   370
#DATA _JUMP_TABLE  = $FF00 = 65280,  size = $0090 =   144

; +++ global symbols +++

ADDAH            = $DF5E = 57182  _TEXT       zcpr1_ccp.asm:1321
ADVAN            = $DF51 = 57169  _TEXT       zcpr1_ccp.asm:1304
BDOS             = $0005 =     5  _TEXT       zcpr1_ccp.asm:13
BDOSB            = $DE03 = 56835  _TEXT       zcpr1_ccp.asm:985
BDOSJP           = $DE2F = 56879  _TEXT       zcpr1_ccp.asm:1040
BEL              = $0007 =     7  _TEXT       zcpr1_ccp.asm:475
BREAK            = $DF06 = 57094  _TEXT       zcpr1_ccp.asm:1234
BRKBK            = $DF0F = 57103  _TEXT       zcpr1_ccp.asm:1239 (unused)
BUFLEN           = $0050 =    80  _TEXT       zcpr1_ccp.asm:555
CALLPROG         = $E336 = 58166  _TEXT       zcpr1_ccp.asm:2229
CB1              = $DEF5 = 57077  _TEXT       zcpr1_ccp.asm:1220
CB2              = $DEFD = 57085  _TEXT       zcpr1_ccp.asm:1226 (unused)
CBUFF            = $DC04 = 56324  _TEXT       zcpr1_ccp.asm:558
CHRCNT           = $DCBA = 56506  _TEXT       zcpr1_ccp.asm:635
CIBPTR           = $DC56 = 56406  _TEXT       zcpr1_ccp.asm:577
CIBUF            = $DC3B = 56379  _TEXT       zcpr1_ccp.asm:571
CIBUFF           = $DC05 = 56325  _TEXT       zcpr1_ccp.asm:561
CIPTR            = $DC58 = 56408  _TEXT       zcpr1_ccp.asm:579
CLEVEL3          = $00FF =   255  _TEXT       zcpr1_ccp.asm:442
CLOSE            = $DE45 = 56901  _TEXT       zcpr1_ccp.asm:1068
CMDSER           = $E087 = 57479  _TEXT       zcpr1_ccp.asm:1605
CMDTBL           = $DD5F = 56671  _TEXT       zcpr1_ccp.asm:817
CMS1             = $E08C = 57484  _TEXT       zcpr1_ccp.asm:1616
CMS2             = $E091 = 57489  _TEXT       zcpr1_ccp.asm:1619
CMS3             = $E09F = 57503  _TEXT       zcpr1_ccp.asm:1630
CMS4             = $E0A2 = 57506  _TEXT       zcpr1_ccp.asm:1633
CNVBUF           = $DEF0 = 57072  _TEXT       zcpr1_ccp.asm:1216
COM              = $E2F7 = 58103  _TEXT       zcpr1_ccp.asm:2190
COM1             = $E31B = 58139  _TEXT       zcpr1_ccp.asm:2211
COM4             = $E364 = 58212  _TEXT       zcpr1_ccp.asm:2249
COM5             = $E36D = 58221  _TEXT       zcpr1_ccp.asm:2259
COM6             = $E373 = 58227  _TEXT       zcpr1_ccp.asm:2263
COM7             = $E37B = 58235  _TEXT       zcpr1_ccp.asm:2274 (unused)
COMLOG           = $DFFE = 57342  _TEXT       zcpr1_ccp.asm:1472
COMMSG           = $DC74 = 56436  _TEXT       zcpr1_ccp.asm:588
CONIN            = $DDB5 = 56757  _TEXT       zcpr1_ccp.asm:899
CONOUT           = $DDA8 = 56744  _TEXT       zcpr1_ccp.asm:886
CPR              = $DCC0 = 56512  _TEXT       zcpr1_ccp.asm:684
CPR1             = $DCBC = 56508  _TEXT       zcpr1_ccp.asm:669 (unused)
CPRDIR           = $00FF =   255  _TEXT       zcpr1_ccp.asm:356
CPRLST           = $00FF =   255  _TEXT       zcpr1_ccp.asm:355
CPRMPT           = $003E =    62  _TEXT       zcpr1_ccp.asm:462
CPRTYP           = $00FF =   255  _TEXT       zcpr1_ccp.asm:352
CR               = $000D =    13  _TEXT       zcpr1_ccp.asm:471
CRLF             = $DDA1 = 56737  _TEXT       zcpr1_ccp.asm:881
DEFDMA           = $DE26 = 56870  _TEXT       zcpr1_ccp.asm:1032
DEFUSR           = $0000 =     0  _TEXT       zcpr1_ccp.asm:337
DELETE           = $DE5F = 56927  _TEXT       zcpr1_ccp.asm:1092
DFU              = $E2E5 = 58085  _TEXT       zcpr1_ccp.asm:2143
DFUSR            = $E3B7 = 58295  _TEXT       zcpr1_ccp.asm:2369
DIR              = $E0A9 = 57513  _TEXT       zcpr1_ccp.asm:1655
DIR10            = $E146 = 57670  _TEXT       zcpr1_ccp.asm:1783
DIR11            = $E150 = 57680  _TEXT       zcpr1_ccp.asm:1788
DIR2             = $E0D8 = 57560  _TEXT       zcpr1_ccp.asm:1680
DIR2A            = $E0D9 = 57561  _TEXT       zcpr1_ccp.asm:1682 (unused)
DIR3             = $E0E7 = 57575  _TEXT       zcpr1_ccp.asm:1701
DIR4             = $E10A = 57610  _TEXT       zcpr1_ccp.asm:1736
DIR5             = $E112 = 57618  _TEXT       zcpr1_ccp.asm:1751
DIR6             = $E114 = 57620  _TEXT       zcpr1_ccp.asm:1753
DIR7             = $E12F = 57647  _TEXT       zcpr1_ccp.asm:1768
DIR8             = $E131 = 57649  _TEXT       zcpr1_ccp.asm:1770
DIR9             = $E145 = 57669  _TEXT       zcpr1_ccp.asm:1781
DIRPR            = $E0D9 = 57561  _TEXT       zcpr1_ccp.asm:1690
DIRPTR           = $DFE1 = 57313  _TEXT       zcpr1_ccp.asm:1445
DLOG5            = $DFFB = 57339  _TEXT       zcpr1_ccp.asm:1468
DLOGIN           = $DFF4 = 57332  _TEXT       zcpr1_ccp.asm:1463
DMASET           = $DE29 = 56873  _TEXT       zcpr1_ccp.asm:1034
DRUSER           = $00FF =   255  _TEXT       zcpr1_ccp.asm:348
ENTRY            = $DC00 = 56320  _TEXT       zcpr1_ccp.asm:516
EPRMPT           = $0000 =     0  _TEXT       zcpr1_ccp.asm:350
ERA              = $E15A = 57690  _TEXT       zcpr1_ccp.asm:1811
ERA1             = $E173 = 57715  _TEXT       zcpr1_ccp.asm:1823
ERARJ            = $E16D = 57709  _TEXT       zcpr1_ccp.asm:1820 (unused)
ERR1             = $DF2A = 57130  _TEXT       zcpr1_ccp.asm:1272
ERR2             = $DF1D = 57117  _TEXT       zcpr1_ccp.asm:1263
ERRLOG           = $E3FA = 58362  _TEXT       zcpr1_ccp.asm:2435
ERROR            = $DF17 = 57111  _TEXT       zcpr1_ccp.asm:1260
EXECADR          = $E389 = 58249  _TEXT       zcpr1_ccp.asm:2283
EXTEST           = $E268 = 57960  _TEXT       zcpr1_ccp.asm:2042
FALSE            = $0000 =     0  _TEXT       zcpr1_ccp.asm:146
FCBCR            = $DCB8 = 56504  _TEXT       zcpr1_ccp.asm:628
FCBDM            = $DCA8 = 56488  _TEXT       zcpr1_ccp.asm:626
FCBDN            = $DC98 = 56472  _TEXT       zcpr1_ccp.asm:617
FCBFN            = $DC99 = 56473  _TEXT       zcpr1_ccp.asm:619
FCBFT            = $DCA1 = 56481  _TEXT       zcpr1_ccp.asm:621
FENCE            = $007C =   124  _TEXT       zcpr1_ccp.asm:449
FFEED            = $000C =    12  _TEXT       zcpr1_ccp.asm:474
FILLQ            = $E152 = 57682  _TEXT       zcpr1_ccp.asm:1794
FQLP             = $E154 = 57684  _TEXT       zcpr1_ccp.asm:1796
GET              = $E397 = 58263  _TEXT       zcpr1_ccp.asm:2301
GETDRV           = $DE22 = 56866  _TEXT       zcpr1_ccp.asm:1026
GETUSR           = $DE68 = 56936  _TEXT       zcpr1_ccp.asm:1103
GO               = $E2F2 = 58098  _TEXT       zcpr1_ccp.asm:2179
GOTSYS           = $E0CC = 57548  _TEXT       zcpr1_ccp.asm:1672
GRBDOS           = $DE40 = 56896  _TEXT       zcpr1_ccp.asm:1063
HEXNUM           = $DFA1 = 57249  _TEXT       zcpr1_ccp.asm:1391
HNUM0            = $DFA4 = 57252  _TEXT       zcpr1_ccp.asm:1393
HNUM1            = $DFAC = 57260  _TEXT       zcpr1_ccp.asm:1397
HNUM2            = $DFC3 = 57283  _TEXT       zcpr1_ccp.asm:1410
HNUM3            = $DFDE = 57310  _TEXT       zcpr1_ccp.asm:1438
INPASS           = $0000 =     0  _TEXT       zcpr1_ccp.asm:346
JUMP             = $E2ED = 58093  _TEXT       zcpr1_ccp.asm:2159
LC1              = $DDDC = 56796  _TEXT       zcpr1_ccp.asm:941
LCOUT            = $DDD0 = 56784  _TEXT       zcpr1_ccp.asm:924
LF               = $000A =    10  _TEXT       zcpr1_ccp.asm:472
LIST             = $E181 = 57729  _TEXT       zcpr1_ccp.asm:1856
LOADADR          = $E3D5 = 58325  _TEXT       zcpr1_ccp.asm:2401
LOGIN            = $DE32 = 56882  _TEXT       zcpr1_ccp.asm:1043
LSTOUT           = $DDD7 = 56791  _TEXT       zcpr1_ccp.asm:937 (unused)
LTAB             = $E1F0 = 57840  _TEXT       zcpr1_ccp.asm:1941
MAXDR            = $0001 =     1  _TEXT       zcpr1_ccp.asm:333 (unused)
MAXDRIV          = $0000 =     0  _TEXT       zcpr1_ccp.asm:330
MAXUSR           = $0013 =    19  _TEXT       zcpr1_ccp.asm:326
MBUFF            = $DC03 = 56323  _TEXT       zcpr1_ccp.asm:556
MEMLOAD          = $E3A2 = 58274  _TEXT       zcpr1_ccp.asm:2318
ML2              = $E3D7 = 58327  _TEXT       zcpr1_ccp.asm:2403
ML3              = $E3F0 = 58352  _TEXT       zcpr1_ccp.asm:2418
ML4              = $E3F4 = 58356  _TEXT       zcpr1_ccp.asm:2425
MLA              = $E3AE = 58286  _TEXT       zcpr1_ccp.asm:2328
MLA0             = $E3C5 = 58309  _TEXT       zcpr1_ccp.asm:2384
MLA1             = $E3D4 = 58324  _TEXT       zcpr1_ccp.asm:2400
MLERR            = $E3F7 = 58359  _TEXT       zcpr1_ccp.asm:2429
NCHARS           = $0004 =     4  _TEXT       zcpr1_ccp.asm:812
NCMNDS           = $000B =    11  _TEXT       zcpr1_ccp.asm:871
NLINES           = $0018 =    24  _TEXT       zcpr1_ccp.asm:447
NOBOP            = $E200 = 57856  _TEXT       zcpr1_ccp.asm:1953
NOECHO           = $DDC3 = 56771  _TEXT       zcpr1_ccp.asm:913
NOHYPH           = $E1D8 = 57816  _TEXT       zcpr1_ccp.asm:1926
NOLOG            = $DCDE = 56542  _TEXT       zcpr1_ccp.asm:711
NOSLAS           = $E19C = 57756  _TEXT       zcpr1_ccp.asm:1890
NRCMDS           = $0003 =     3  _TEXT       zcpr1_ccp.asm:839 (unused)
NUM0             = $DF79 = 57209  _TEXT       zcpr1_ccp.asm:1351
NUM1             = $DF7F = 57215  _TEXT       zcpr1_ccp.asm:1355
NUM2             = $DF9C = 57244  _TEXT       zcpr1_ccp.asm:1379
NUMBASE          = $0048 =    72  _TEXT       zcpr1_ccp.asm:464
NUMBER           = $DF63 = 57187  _TEXT       zcpr1_ccp.asm:1331
NUMERR           = $DF9E = 57246  _TEXT       zcpr1_ccp.asm:1385
NUMS             = $DF6B = 57195  _TEXT       zcpr1_ccp.asm:1338
NUMS1            = $DF75 = 57205  _TEXT       zcpr1_ccp.asm:1345
OPEN             = $DE3E = 56894  _TEXT       zcpr1_ccp.asm:1060
OPENF            = $DE37 = 56887  _TEXT       zcpr1_ccp.asm:1055
OUTPUT           = $DDAB = 56747  _TEXT       zcpr1_ccp.asm:889
PAGCNT           = $DCB9 = 56505  _TEXT       zcpr1_ccp.asm:633
PGBAK            = $DDFC = 56828  _TEXT       zcpr1_ccp.asm:973
PGDFLG           = $0050 =    80  _TEXT       zcpr1_ccp.asm:452
PGDFLT           = $0000 =     0  _TEXT       zcpr1_ccp.asm:451
PGFLG            = $DDEF = 56815  _TEXT       zcpr1_ccp.asm:960
PRFLG            = $DDD2 = 56786  _TEXT       zcpr1_ccp.asm:929
PRIN1            = $DE17 = 56855  _TEXT       zcpr1_ccp.asm:1011
PRINT            = $DE0F = 56847  _TEXT       zcpr1_ccp.asm:1000
PRINTC           = $DE0A = 56842  _TEXT       zcpr1_ccp.asm:995
PRNLE            = $E25E = 57950  _TEXT       zcpr1_ccp.asm:2032
PRNNF            = $DD54 = 56660  _TEXT       zcpr1_ccp.asm:804
PRT              = $E1FF = 57855  _TEXT       zcpr1_ccp.asm:1952
QMCNT            = $DCBB = 56507  _TEXT       zcpr1_ccp.asm:637
RAS              = $0000 =     0  _TEXT       zcpr1_ccp.asm:315
RB1              = $DEDA = 57050  _TEXT       zcpr1_ccp.asm:1195
RCPRNL           = $DD43 = 56643  _TEXT       zcpr1_ccp.asm:793
READ             = $DE01 = 56833  _TEXT       zcpr1_ccp.asm:980
READF            = $DDFE = 56830  _TEXT       zcpr1_ccp.asm:978
REDBUF           = $DE83 = 56963  _TEXT       zcpr1_ccp.asm:1140
REDBUF0          = $DE94 = 56980  _TEXT       zcpr1_ccp.asm:1148
REN              = $E297 = 58007  _TEXT       zcpr1_ccp.asm:2073
REN0             = $E29E = 58014  _TEXT       zcpr1_ccp.asm:2078 (unused)
REN1             = $E2B0 = 58032  _TEXT       zcpr1_ccp.asm:2086 (unused)
REN2             = $E2C7 = 58055  _TEXT       zcpr1_ccp.asm:2101
REN3             = $E2D5 = 58069  _TEXT       zcpr1_ccp.asm:2109 (unused)
REN4             = $E2D8 = 58072  _TEXT       zcpr1_ccp.asm:2111
RESET            = $DE2D = 56877  _TEXT       zcpr1_ccp.asm:1038
RESETUSR         = $DE63 = 56931  _TEXT       zcpr1_ccp.asm:1098
RESTRT           = $DCF2 = 56562  _TEXT       zcpr1_ccp.asm:727
RESTTMP          = $DF31 = 57137  _TEXT       zcpr1_ccp.asm:1276
RNGSUB           = $DCE2 = 56546  _TEXT       zcpr1_ccp.asm:714
RS00             = $DD10 = 56592  _TEXT       zcpr1_ccp.asm:750
RS000            = $DD15 = 56597  _TEXT       zcpr1_ccp.asm:756 (unused)
RS1              = $DD18 = 56600  _TEXT       zcpr1_ccp.asm:761
RSTCPR           = $DD40 = 56640  _TEXT       zcpr1_ccp.asm:788
RSTJP            = $E2E2 = 58082  _TEXT       zcpr1_ccp.asm:2128
SAVE             = $E212 = 57874  _TEXT       zcpr1_ccp.asm:1986
SAVE0            = $E232 = 57906  _TEXT       zcpr1_ccp.asm:2004
SAVE1            = $E239 = 57913  _TEXT       zcpr1_ccp.asm:2007
SAVE2            = $E255 = 57941  _TEXT       zcpr1_ccp.asm:2024
SAVE3            = $E265 = 57957  _TEXT       zcpr1_ccp.asm:2036
SBLANK           = $DF55 = 57173  _TEXT       zcpr1_ccp.asm:1310
SCAN15           = $E045 = 57413  _TEXT       zcpr1_ccp.asm:1535
SCAN16           = $E048 = 57416  _TEXT       zcpr1_ccp.asm:1540
SCAN17           = $E04A = 57418  _TEXT       zcpr1_ccp.asm:1542
SCAN2            = $E024 = 57380  _TEXT       zcpr1_ccp.asm:1509
SCAN3            = $E02A = 57386  _TEXT       zcpr1_ccp.asm:1513
SCAN4            = $E030 = 57392  _TEXT       zcpr1_ccp.asm:1521
SCANER           = $E008 = 57352  _TEXT       zcpr1_ccp.asm:1492
SCANF            = $E058 = 57432  _TEXT       zcpr1_ccp.asm:1561
SCANF1           = $E069 = 57449  _TEXT       zcpr1_ccp.asm:1570
SCANF2           = $E070 = 57456  _TEXT       zcpr1_ccp.asm:1575
SCANF3           = $E072 = 57458  _TEXT       zcpr1_ccp.asm:1577
SCANF4           = $E079 = 57465  _TEXT       zcpr1_ccp.asm:1585
SCANX            = $E00B = 57355  _TEXT       zcpr1_ccp.asm:1494
SCQ              = $E07F = 57471  _TEXT       zcpr1_ccp.asm:1595
SDELM            = $DF34 = 57140  _TEXT       zcpr1_ccp.asm:1280
SEAR1            = $DE4C = 56908  _TEXT       zcpr1_ccp.asm:1074
SEARF            = $DE49 = 56905  _TEXT       zcpr1_ccp.asm:1072
SEARN            = $DE50 = 56912  _TEXT       zcpr1_ccp.asm:1078
SECTFLG          = $0053 =    83  _TEXT       zcpr1_ccp.asm:467
SECURE           = $0000 =     0  _TEXT       zcpr1_ccp.asm:335
SETTSE           = $E3BC = 58300  _TEXT       zcpr1_ccp.asm:2376
SETU0D           = $DE7D = 56957  _TEXT       zcpr1_ccp.asm:1130
SETUD            = $DE6E = 56942  _TEXT       zcpr1_ccp.asm:1117
SETUSR           = $DE6A = 56938  _TEXT       zcpr1_ccp.asm:1105
SLOGIN           = $DFEA = 57322  _TEXT       zcpr1_ccp.asm:1454
SOFLG            = $0053 =    83  _TEXT       zcpr1_ccp.asm:457
SPRMPT           = $0024 =    36  _TEXT       zcpr1_ccp.asm:461
STACK            = $DC74 = 56436  _TEXT       zcpr1_ccp.asm:584
SUBA             = $00FF =   255  _TEXT       zcpr1_ccp.asm:421
SUBFCB           = $DC77 = 56439  _TEXT       zcpr1_ccp.asm:593
SUBFCR           = $DC97 = 56471  _TEXT       zcpr1_ccp.asm:613
SUBFRC           = $DC86 = 56454  _TEXT       zcpr1_ccp.asm:610
SUBFS2           = $DC85 = 56453  _TEXT       zcpr1_ccp.asm:608 (unused)
SUBKIL           = $DE54 = 56916  _TEXT       zcpr1_ccp.asm:1084
SUPRES           = $0000 =     0  _TEXT       zcpr1_ccp.asm:459
SUSER            = $E2DF = 58079  _TEXT       zcpr1_ccp.asm:2126
SYSFLG           = $0041 =    65  _TEXT       zcpr1_ccp.asm:455
SYSTST           = $E0F9 = 57593  _TEXT       zcpr1_ccp.asm:1714
TAB              = $0009 =     9  _TEXT       zcpr1_ccp.asm:473
TBUFF            = $0080 =   128  _TEXT       zcpr1_ccp.asm:16
TDRIVE           = $DE7E = 56958  _TEXT       zcpr1_ccp.asm:1131
TEMPDR           = $DFFF = 57343  _TEXT       zcpr1_ccp.asm:1473
TFCB             = $005C =    92  _TEXT       zcpr1_ccp.asm:15
TMPUSR           = $DE64 = 56932  _TEXT       zcpr1_ccp.asm:1099
TPA              = $0100 =   256  _TEXT       zcpr1_ccp.asm:484
TRUE             = $00FF =   255  _TEXT       zcpr1_ccp.asm:147
TSELUSR          = $E3B9 = 58297  _TEXT       zcpr1_ccp.asm:2371
TWOCOL           = $0000 =     0  _TEXT       zcpr1_ccp.asm:377
TWOPOK           = $E101 = 57601  _TEXT       zcpr1_ccp.asm:1728 (unused)
TYPE             = $E185 = 57733  _TEXT       zcpr1_ccp.asm:1869
TYPE0            = $E186 = 57734  _TEXT       zcpr1_ccp.asm:1877
TYPE1            = $E1B4 = 57780  _TEXT       zcpr1_ccp.asm:1900
TYPE2            = $E1C5 = 57797  _TEXT       zcpr1_ccp.asm:1911
TYPE2L           = $E203 = 57859  _TEXT       zcpr1_ccp.asm:1958
TYPE3            = $E20D = 57869  _TEXT       zcpr1_ccp.asm:1964
TYPE4            = $E20F = 57871  _TEXT       zcpr1_ccp.asm:1967
UCASE            = $DDBA = 56762  _TEXT       zcpr1_ccp.asm:905
UDFLAG           = $0004 =     4  _TEXT       zcpr1_ccp.asm:11
USER             = $E2DB = 58075  _TEXT       zcpr1_ccp.asm:2123
USRMAX           = $0000 =     0  _TEXT       zcpr1_ccp.asm:319
USRNUM           = $DF11 = 57105  _TEXT       zcpr1_ccp.asm:1245
WIDE             = $00FF =   255  _TEXT       zcpr1_ccp.asm:448
WSTYPE           = $00FF =   255  _TEXT       zcpr1_ccp.asm:353
YESCR            = $E1FD = 57853  _TEXT       zcpr1_ccp.asm:1950
_BSS             = $FAC1 = 64193  _BSS        config_ndsk.asm:44 (unused)
_BSS_end         = $FC33 = 64563  _BSS        config_ndsk.asm:44 (unused)
_BSS_size        = $0172 =   370  _BSS        config_ndsk.asm:44
_JUMP_TABLE      = $FF00 = 65280  _JUMP_TABLE config_ndsk.asm:45 (unused)
_JUMP_TABLE_end  = $FF90 = 65424  _JUMP_TABLE config_ndsk.asm:45 (unused)
_JUMP_TABLE_size = $0090 =   144  _JUMP_TABLE config_ndsk.asm:45 (unused)
_TEXT            = $DC00 = 56320  _TEXT       config_ndsk.asm:43 (unused)
_TEXT_end        = $FAC1 = 64193  _TEXT       config_ndsk.asm:43
_TEXT_size       = $1EC1 =  7873  _TEXT       config_ndsk.asm:43 (unused)
active           = $E74D = 59213  _TEXT       bdos.asm:493
adda2hl          = $E96F = 59759  _TEXT       bdos.asm:922
alloc0           = $F1D5 = 61909  _TEXT       bdos.asm:2470
alloc1           = $F1D7 = 61911  _TEXT       bdos.asm:2471
alocvect         = $F1CA = 61898  _TEXT       bdos.asm:2460
auto             = $F1E9 = 61929  _TEXT       bdos.asm:2485
autoflag         = $F1EB = 61931  _TEXT       bdos.asm:2487
autosel          = $F05C = 61532  _TEXT       bdos.asm:2200
autosl1          = $F080 = 61568  _TEXT       bdos.asm:2216
backup           = $E5AF = 58799  _TEXT       bdos.asm:253
backup1          = $E5B7 = 58807  _TEXT       bdos.asm:256
badsctr          = $E40C = 58380  _TEXT       bdos.asm:34
badsec           = $E4D5 = 58581  _TEXT       bdos.asm:108
badsel           = $E4E0 = 58592  _TEXT       bdos.asm:109
badslct          = $E40E = 58382  _TEXT       bdos.asm:35
batch            = $DCE2 = 56546  _TEXT       zcpr1_ccp.asm:713
bdevsw           = $F36A = 62314  _TEXT       config_ndsk.asm:161
bdosdrv          = $E4D1 = 58577  _TEXT       bdos.asm:107
bdoserr          = $E4C5 = 58565  _TEXT       bdos.asm:106
bigdisk          = $F1E8 = 61928  _TEXT       bdos.asm:2484
biodma           = $F349 = 62281  _TEXT       bios.asm:326
bitmap           = $EAAE = 60078  _TEXT       bdos.asm:1215
bitmap1          = $EABC = 60092  _TEXT       bdos.asm:1230
bitmap2          = $EADD = 60125  _TEXT       bdos.asm:1251
bitmap3          = $EB01 = 60161  _TEXT       bdos.asm:1268
blkmask          = $F1CF = 61903  _TEXT       bdos.asm:2466
blknmbr          = $F1F0 = 61936  _TEXT       bdos.asm:2491
blkshft          = $F1CE = 61902  _TEXT       bdos.asm:2465
boot             = $F23A = 62010  _TEXT       bios.asm:42
bs               = $0008 =     8  _TEXT       zcpr1_ccp.asm:24
callbd           = $F2F8 = 62200  _TEXT       bios.asm:225
callmj           = $F346 = 62278  _TEXT       bios.asm:320
cbase            = $DC00 = 56320  _TEXT       zcpr1_ccp.asm:515
cbinit           = $F35A = 62298  _TEXT       config_ndsk.asm:92
cdevsw           = $F3AA = 62378  _TEXT       config_ndsk.asm:200
cdindi0          = $F31E = 62238  _TEXT       bios.asm:285
cdindi1          = $F324 = 62244  _TEXT       bios.asm:289
cdindir          = $F31A = 62234  _TEXT       bios.asm:283
cfirq            = $F360 = 62304  _TEXT       config_ndsk.asm:108 (unused)
charbuf          = $E719 = 59161  _TEXT       bdos.asm:482
checkdir         = $E9A9 = 59817  _TEXT       bdos.asm:995
checksum         = $E902 = 59650  _TEXT       bdos.asm:834
chgnam1          = $EC32 = 60466  _TEXT       bdos.asm:1507
chgnames         = $EC21 = 60449  _TEXT       bdos.asm:1499
chkblk           = $E88F = 59535  _TEXT       bdos.asm:741
chkchar          = $E51F = 58655  _TEXT       bdos.asm:150
chkdir1          = $E9CF = 59855  _TEXT       bdos.asm:1015
chknmbr          = $E997 = 59799  _TEXT       bdos.asm:968
chkrofl          = $E94F = 59727  _TEXT       bdos.asm:898
chksum1          = $E908 = 59656  _TEXT       bdos.asm:837
chkvect          = $F1C8 = 61896  _TEXT       bdos.asm:2459
chkwprt          = $E95F = 59743  _TEXT       bdos.asm:909
chrout           = $F2BB = 62139  _TEXT       bios.asm:166
ckbitmap         = $EA40 = 59968  _TEXT       bdos.asm:1109
ckbmap1          = $EA61 = 60001  _TEXT       bdos.asm:1144
ckcon1           = $E54D = 58701  _TEXT       bdos.asm:180
ckcon2           = $E550 = 58704  _TEXT       bdos.asm:181
ckconsol         = $E52E = 58670  _TEXT       bdos.asm:166
ckfilpos         = $EA00 = 59904  _TEXT       bdos.asm:1058
ckrof1           = $E952 = 59730  _TEXT       bdos.asm:899
cksumtbl         = $F1F7 = 61943  _TEXT       bdos.asm:2499
clears2          = $E97D = 59773  _TEXT       bdos.asm:939
closefil         = $F0B0 = 61616  _TEXT       bdos.asm:2247
closeflg         = $F1DD = 61917  _TEXT       bdos.asm:2476
closeit          = $ECAD = 60589  _TEXT       bdos.asm:1593
closeit1         = $ECD8 = 60632  _TEXT       bdos.asm:1613
closeit2         = $ECE6 = 60646  _TEXT       bdos.asm:1621
closeit3         = $ECEC = 60652  _TEXT       bdos.asm:1625
closeit4         = $ECF3 = 60659  _TEXT       bdos.asm:1628
closeit5         = $ED08 = 60680  _TEXT       bdos.asm:1641
closeit6         = $ED22 = 60706  _TEXT       bdos.asm:1659
closeit7         = $ED2A = 60714  _TEXT       bdos.asm:1662
cntrlc           = $0003 =     3  _TEXT       zcpr1_ccp.asm:22
cntrle           = $0005 =     5  _TEXT       zcpr1_ccp.asm:23
cntrlp           = $0010 =    16  _TEXT       zcpr1_ccp.asm:29
cntrlr           = $0012 =    18  _TEXT       zcpr1_ccp.asm:30
cntrls           = $0013 =    19  _TEXT       zcpr1_ccp.asm:31
cntrlu           = $0015 =    21  _TEXT       zcpr1_ccp.asm:32
cntrlx           = $0018 =    24  _TEXT       zcpr1_ccp.asm:33
cntrlz           = $001A =    26  _TEXT       zcpr1_ccp.asm:34 (unused)
comblk           = $E882 = 59522  _TEXT       bdos.asm:732
comprand         = $EFB0 = 61360  _TEXT       bdos.asm:2066
conin            = $F2AD = 62125  _TEXT       bios.asm:153
conout           = $F2B9 = 62137  _TEXT       bios.asm:165
const            = $F2A2 = 62114  _TEXT       bios.asm:141
counter          = $F1E3 = 61923  _TEXT       bdos.asm:2482
cpmlow           = $F29A = 62106  _TEXT       bios.asm:130
cr               = $000D =    13  _TEXT       zcpr1_ccp.asm:28
curpos           = $E717 = 59159  _TEXT       bdos.asm:480
de2hl            = $E75A = 59226  _TEXT       bdos.asm:511
de2hl1           = $E75B = 59227  _TEXT       bdos.asm:512
default          = $0000 =     0              config_ndsk.asm:19
defdma           = $E9E5 = 59877  _TEXT       bdos.asm:1033
del              = $007F =   127  _TEXT       zcpr1_ccp.asm:35
delfile          = $F0E2 = 61666  _TEXT       bdos.asm:2278
dirbuf           = $F1C4 = 61892  _TEXT       bdos.asm:2457
dirc1            = $E6EB = 59115  _TEXT       bdos.asm:438
dircbuf          = $FF10 = 65296  _JUMP_TABLE config_ndsk.asm:47
dircio           = $E6DF = 59103  _TEXT       bdos.asm:432
dirdma           = $E9EB = 59883  _TEXT       bdos.asm:1038
dirdma1          = $E9EE = 59886  _TEXT       bdos.asm:1043
dirread          = $E9DF = 59871  _TEXT       bdos.asm:1028
dirsize          = $F1D3 = 61907  _TEXT       bdos.asm:2469
dirwrite         = $E9D1 = 59857  _TEXT       bdos.asm:1020
diskpb           = $F1C6 = 61894  _TEXT       bdos.asm:2458
diskro           = $E4EC = 58604  _TEXT       bdos.asm:111
doread           = $E7BD = 59325  _TEXT       bdos.asm:582
dowrite          = $E7C3 = 59331  _TEXT       bdos.asm:587
dsksize          = $F1D1 = 61905  _TEXT       bdos.asm:2468
emptyfcb         = $F1B7 = 61879  _TEXT       bdos.asm:2444
entry            = $0005 =     5  _TEXT       zcpr1_ccp.asm:12 (unused)
eparam           = $F1E1 = 61921  _TEXT       bdos.asm:2480
erafil1          = $EBAF = 60335  _TEXT       bdos.asm:1385
erafile          = $EBA7 = 60327  _TEXT       bdos.asm:1382
error1           = $E49F = 58527  _TEXT       bdos.asm:87
error2           = $E4AB = 58539  _TEXT       bdos.asm:93
error3           = $E4B1 = 58545  _TEXT       bdos.asm:96
error4           = $E4B7 = 58551  _TEXT       bdos.asm:99
error5           = $E4BA = 58554  _TEXT       bdos.asm:101
extblk           = $E869 = 59497  _TEXT       bdos.asm:713
extblk1          = $E87C = 59516  _TEXT       bdos.asm:723
extmask          = $F1D0 = 61904  _TEXT       bdos.asm:2467
fbase            = $E406 = 58374  _TEXT       bdos.asm:29
fbase1           = $E414 = 58388  _TEXT       bdos.asm:42
fcb2hl           = $E969 = 59753  _TEXT       bdos.asm:917
fcbpos           = $F1F4 = 61940  _TEXT       bdos.asm:2493
fcbset           = $EC08 = 60424  _TEXT       bdos.asm:1477
fcreate          = $F0F7 = 61687  _TEXT       bdos.asm:2295
ff               = $000C =    12  _TEXT       zcpr1_ccp.asm:27 (unused)
filepos          = $F1F5 = 61941  _TEXT       bdos.asm:2494
filero           = $E4E7 = 58599  _TEXT       bdos.asm:110
filesize         = $F158 = 61784  _TEXT       bdos.asm:2369
findfst          = $EB23 = 60195  _TEXT       bdos.asm:1302
findnxt          = $EB38 = 60216  _TEXT       bdos.asm:1315
fndnxt1          = $EB55 = 60245  _TEXT       bdos.asm:1328
fndnxt2          = $EB5E = 60254  _TEXT       bdos.asm:1332
fndnxt3          = $EB7E = 60286  _TEXT       bdos.asm:1348
fndnxt4          = $EB87 = 60295  _TEXT       bdos.asm:1357
fndnxt5          = $EB8E = 60302  _TEXT       bdos.asm:1362
fndnxt6          = $EB9F = 60319  _TEXT       bdos.asm:1375
fndspa1          = $EBCB = 60363  _TEXT       bdos.asm:1415
fndspa2          = $EBDC = 60380  _TEXT       bdos.asm:1438
fndspa3          = $EBF7 = 60407  _TEXT       bdos.asm:1459
fndspa4          = $EBFF = 60415  _TEXT       bdos.asm:1469
fndspace         = $EBC9 = 60361  _TEXT       bdos.asm:1409
fndstat          = $F1DF = 61919  _TEXT       bdos.asm:2478
functns          = $E44D = 58445  _TEXT       bdos.asm:78
getaloc          = $F11C = 61724  _TEXT       bdos.asm:2323
getblk1          = $E850 = 59472  _TEXT       bdos.asm:691
getblk2          = $E85E = 59486  _TEXT       bdos.asm:700
getblk3          = $E867 = 59495  _TEXT       bdos.asm:705
getblock         = $E849 = 59465  _TEXT       bdos.asm:688
getchar          = $E506 = 58630  _TEXT       bdos.asm:128
getcon           = $E6D3 = 59091  _TEXT       bdos.asm:420
getcrnt          = $F10F = 61711  _TEXT       bdos.asm:2312
getcsts          = $E709 = 59145  _TEXT       bdos.asm:465
getecho          = $E511 = 58641  _TEXT       bdos.asm:137
getempty         = $ED2F = 60719  _TEXT       bdos.asm:1669
getfst           = $F0B6 = 61622  _TEXT       bdos.asm:2254
getfst1          = $F0CD = 61645  _TEXT       bdos.asm:2265
getiob           = $E6F8 = 59128  _TEXT       bdos.asm:446
getlog           = $F109 = 61705  _TEXT       bdos.asm:2307
getmt1           = $ED51 = 60753  _TEXT       bdos.asm:1685
getnext          = $ED65 = 60773  _TEXT       bdos.asm:1699
getnxt           = $F0D3 = 61651  _TEXT       bdos.asm:2270
getparm          = $F131 = 61745  _TEXT       bdos.asm:2340
getprm1          = $F134 = 61748  _TEXT       bdos.asm:2341
getrdr           = $E6D9 = 59097  _TEXT       bdos.asm:425
getrov           = $F122 = 61730  _TEXT       bdos.asm:2328
gets2            = $E974 = 59764  _TEXT       bdos.asm:931
getuser          = $F138 = 61752  _TEXT       bdos.asm:2348
getver           = $F089 = 61577  _TEXT       bdos.asm:2224
getwprt          = $E929 = 59689  _TEXT       bdos.asm:871
goback           = $F17F = 61823  _TEXT       bdos.asm:2404
goback1          = $F19C = 61852  _TEXT       bdos.asm:2416
gtnext1          = $ED8E = 60814  _TEXT       bdos.asm:1719
gtnext2          = $ED99 = 60825  _TEXT       bdos.asm:1728
gtnext3          = $EDB7 = 60855  _TEXT       bdos.asm:1739
gtnext4          = $EDBA = 60858  _TEXT       bdos.asm:1740
gtnext5          = $EDC1 = 60865  _TEXT       bdos.asm:1747
home             = $F2DB = 62171  _TEXT       bios.asm:199
homedrv          = $E7AC = 59308  _TEXT       bdos.asm:568
inbuff           = $DC03 = 56323  _TEXT       zcpr1_ccp.asm:554
intvec           = $FF00 = 65280  _JUMP_TABLE config_ndsk.asm:46
iobyte           = $0003 =     3  _TEXT       zcpr1_ccp.asm:9
ioerr1           = $E710 = 59152  _TEXT       bdos.asm:475
ioret            = $E7C6 = 59334  _TEXT       bdos.asm:588
jumphl           = $E755 = 59221  _TEXT       bdos.asm:503
lf               = $000A =    10  _TEXT       zcpr1_ccp.asm:26
list             = $F2C5 = 62149  _TEXT       bios.asm:176
logical          = $E895 = 59541  _TEXT       bdos.asm:752
logicl1          = $E89B = 59547  _TEXT       bdos.asm:754
login            = $F1BA = 61882  _TEXT       bdos.asm:2446
logindrv         = $F02C = 61484  _TEXT       bdos.asm:2168
logoff           = $F15E = 61790  _TEXT       bdos.asm:2378
logsect          = $F1F2 = 61938  _TEXT       bdos.asm:2492
mem              = $0037 =    55              config_ndsk.asm:38
mode             = $F1E0 = 61920  _TEXT       bdos.asm:2479
morefls          = $E98A = 59786  _TEXT       bdos.asm:955
movedir          = $E9F4 = 59892  _TEXT       bdos.asm:1050
moveword         = $EC9F = 60575  _TEXT       bdos.asm:1576
nd_asva          = $FB31 = 64305  _BSS        nabu_ndsk.asm:33
nd_asvb          = $FBB2 = 64434  _BSS        nabu_ndsk.asm:34
nd_atla          = $0041 =    65  _TEXT       nabu_ndsk.asm:38
nd_ayda          = $0040 =    64  _TEXT       nabu_ndsk.asm:37
nd_buff          = $FAF1 = 64241  _BSS        nabu_ndsk.asm:32
nd_ccp           = $F83B = 63547  _TEXT       nabu_ndsk.asm:255
nd_csec          = $FAEE = 64238  _BSS        nabu_ndsk.asm:30
nd_ctrk          = $FAEF = 64239  _BSS        nabu_ndsk.asm:31
nd_dfl0          = $F822 = 63522  _TEXT       nabu_ndsk.asm:230
nd_dflt          = $F81A = 63514  _TEXT       nabu_ndsk.asm:225
nd_dpb           = $F76A = 63338  _TEXT       nabu_ndsk.asm:68
nd_dpha          = $F74A = 63306  _TEXT       nabu_ndsk.asm:54
nd_dphb          = $F75A = 63322  _TEXT       nabu_ndsk.asm:61
nd_dsnd          = $F831 = 63537  _TEXT       nabu_ndsk.asm:247
nd_esnd          = $F827 = 63527  _TEXT       nabu_ndsk.asm:238
nd_fild          = $0080 =   128  _TEXT       nabu_ndsk.asm:42
nd_gbno          = $F7F0 = 63472  _TEXT       nabu_ndsk.asm:187
nd_get0          = $F887 = 63623  _TEXT       nabu_ndsk.asm:302
nd_get1          = $F8B0 = 63664  _TEXT       nabu_ndsk.asm:324
nd_get2          = $F8BA = 63674  _TEXT       nabu_ndsk.asm:331
nd_getb          = $F881 = 63617  _TEXT       nabu_ndsk.asm:300
nd_grb           = $F840 = 63552  _TEXT       nabu_ndsk.asm:259
nd_grb0          = $F843 = 63555  _TEXT       nabu_ndsk.asm:260
nd_grb1          = $F85A = 63578  _TEXT       nabu_ndsk.asm:268
nd_hcca          = $0080 =   128  _TEXT       nabu_ndsk.asm:39
nd_hcer          = $F939 = 63801  _TEXT       nabu_ndsk.asm:433
nd_hcr0          = $F926 = 63782  _TEXT       nabu_ndsk.asm:418
nd_hcr1          = $F940 = 63808  _TEXT       nabu_ndsk.asm:438
nd_hcr2          = $F949 = 63817  _TEXT       nabu_ndsk.asm:444
nd_hcrd          = $F917 = 63767  _TEXT       nabu_ndsk.asm:411
nd_hcre          = $F91A = 63770  _TEXT       nabu_ndsk.asm:412
nd_hcw0          = $F976 = 63862  _TEXT       nabu_ndsk.asm:481
nd_hcw1          = $F98E = 63886  _TEXT       nabu_ndsk.asm:498
nd_hcw2          = $F993 = 63891  _TEXT       nabu_ndsk.asm:500
nd_hcwr          = $F964 = 63844  _TEXT       nabu_ndsk.asm:473
nd_hini          = $F800 = 63488  _TEXT       nabu_ndsk.asm:207
nd_home          = $F792 = 63378  _TEXT       nabu_ndsk.asm:107
nd_inb           = $F9B0 = 63920  _TEXT       nabu_ndsk.asm:526
nd_inf           = $F9B1 = 63921  _TEXT       nabu_ndsk.asm:529
nd_init          = $F791 = 63377  _TEXT       nabu_ndsk.asm:102
nd_m0            = $F9D1 = 63953  _TEXT       nabu_ndsk.asm:547
nd_m0fl          = $F9D7 = 63959  _TEXT       nabu_ndsk.asm:551
nd_m0na          = $F9DA = 63962  _TEXT       nabu_ndsk.asm:553
nd_m1            = $F9E9 = 63977  _TEXT       nabu_ndsk.asm:558
nd_m2            = $F9F1 = 63985  _TEXT       nabu_ndsk.asm:566
nd_m2bn          = $F9F7 = 63991  _TEXT       nabu_ndsk.asm:570
nd_m3            = $F9FD = 63997  _TEXT       nabu_ndsk.asm:575
nd_m3bn          = $FA03 = 64003  _TEXT       nabu_ndsk.asm:579
nd_nctl          = $0000 =     0  _TEXT       nabu_ndsk.asm:40
nd_opef          = $F867 = 63591  _TEXT       nabu_ndsk.asm:281
nd_open          = $F864 = 63588  _TEXT       nabu_ndsk.asm:280
nd_outb          = $F9AE = 63918  _TEXT       nabu_ndsk.asm:520
nd_outf          = $F9AF = 63919  _TEXT       nabu_ndsk.asm:523
nd_p0            = $F9B2 = 63922  _TEXT       nabu_ndsk.asm:533
nd_p1            = $F9BC = 63932  _TEXT       nabu_ndsk.asm:537
nd_p2            = $F9C6 = 63942  _TEXT       nabu_ndsk.asm:541
nd_p2im          = $F9CB = 63947  _TEXT       nabu_ndsk.asm:542
nd_put0          = $F8C8 = 63688  _TEXT       nabu_ndsk.asm:345
nd_put1          = $F8DA = 63706  _TEXT       nabu_ndsk.asm:355
nd_putb          = $F8C2 = 63682  _TEXT       nabu_ndsk.asm:343
nd_read          = $F7CE = 63438  _TEXT       nabu_ndsk.asm:161
nd_rec0          = $F8F9 = 63737  _TEXT       nabu_ndsk.asm:376
nd_rec1          = $F904 = 63748  _TEXT       nabu_ndsk.asm:383
nd_rece          = $F8F0 = 63728  _TEXT       nabu_ndsk.asm:373
nd_rirq          = $F956 = 63830  _TEXT       nabu_ndsk.asm:456
nd_sel           = $F799 = 63385  _TEXT       nabu_ndsk.asm:116
nd_send          = $F90E = 63758  _TEXT       nabu_ndsk.asm:397
nd_ssec          = $F7C9 = 63433  _TEXT       nabu_ndsk.asm:154
nd_strk          = $F7C3 = 63427  _TEXT       nabu_ndsk.asm:144
nd_tran          = $FAED = 64237  _BSS        nabu_ndsk.asm:29
nd_wirq          = $F99D = 63901  _TEXT       nabu_ndsk.asm:509
nd_writ          = $F7DF = 63455  _TEXT       nabu_ndsk.asm:173
ndkdev           = $F779 = 63353  _TEXT       nabu_ndsk.asm:83
newline          = $E5BC = 58812  _TEXT       bdos.asm:262
newln1           = $E5C4 = 58820  _TEXT       bdos.asm:265
nfuncts          = $0029 =    41  _TEXT       bdos.asm:76
nulldev          = $F345 = 62277  _TEXT       bios.asm:317 (unused)
nxent1           = $EA24 = 59940  _TEXT       bdos.asm:1088
nxent2           = $EA2B = 59947  _TEXT       bdos.asm:1091
nxentry          = $EA10 = 59920  _TEXT       bdos.asm:1080
offset           = $F1D9 = 61913  _TEXT       bdos.asm:2472
olddrv           = $F1EA = 61930  _TEXT       bdos.asm:2486
openfil          = $F0A7 = 61607  _TEXT       bdos.asm:2241
openit           = $EC5C = 60508  _TEXT       bdos.asm:1533
openit1          = $EC65 = 60517  _TEXT       bdos.asm:1537
openit2          = $EC96 = 60566  _TEXT       bdos.asm:1565
outchar          = $E553 = 58707  _TEXT       bdos.asm:188
outchr1          = $E56D = 58733  _TEXT       bdos.asm:202
outchr2          = $E584 = 58756  _TEXT       bdos.asm:218
outcon           = $E59B = 58779  _TEXT       bdos.asm:239
outcon1          = $E5A1 = 58785  _TEXT       bdos.asm:242
outcrlf          = $E5D4 = 58836  _TEXT       bdos.asm:275
outflag          = $E715 = 59157  _TEXT       bdos.asm:478
params           = $E74E = 59214  _TEXT       bdos.asm:494
pattrn2          = $E400 = 58368  _TEXT       bdos.asm:21 (unused)
position         = $EF0E = 61198  _TEXT       bdos.asm:1943
positn1          = $EF12 = 61202  _TEXT       bdos.asm:1948
positn2          = $EF52 = 61266  _TEXT       bdos.asm:1994
positn3          = $EF8A = 61322  _TEXT       bdos.asm:2026
positn4          = $EF8F = 61327  _TEXT       bdos.asm:2032
positn5          = $EF96 = 61334  _TEXT       bdos.asm:2039
pr_atla          = $0041 =    65  _TEXT       nabu_prt.asm:14
pr_ayda          = $0040 =    64  _TEXT       nabu_prt.asm:13
pr_ctrl          = $0000 =     0  _TEXT       nabu_prt.asm:16
pr_init          = $FA14 = 64020  _TEXT       nabu_prt.asm:31
pr_prnt          = $00B0 =   176  _TEXT       nabu_prt.asm:15
pr_read          = $FA17 = 64023  _TEXT       nabu_prt.asm:46
pr_stat          = $FA15 = 64021  _TEXT       nabu_prt.asm:38
pr_wri0          = $FA1D = 64029  _TEXT       nabu_prt.asm:56
pr_wri1          = $FA2C = 64044  _TEXT       nabu_prt.asm:67
pr_writ          = $FA19 = 64025  _TEXT       nabu_prt.asm:53
prstat           = $F314 = 62228  _TEXT       bios.asm:271
prtdev           = $FA09 = 64009  _TEXT       nabu_prt.asm:19
prterr           = $E4F0 = 58608  _TEXT       bdos.asm:115
prtflag          = $E718 = 59160  _TEXT       bdos.asm:481
prtmesg          = $E5DE = 58846  _TEXT       bdos.asm:282
prtstr           = $E703 = 59139  _TEXT       bdos.asm:458
punch            = $F2C9 = 62153  _TEXT       bios.asm:182
putdma           = $F115 = 61717  _TEXT       bdos.asm:2317
ransiz1          = $EFEF = 61423  _TEXT       bdos.asm:2122
ransiz2          = $F011 = 61457  _TEXT       bdos.asm:2144
ransiz3          = $F017 = 61463  _TEXT       bdos.asm:2146
ransize          = $EFDD = 61405  _TEXT       bdos.asm:2111
rdbuf1           = $E5FA = 58874  _TEXT       bdos.asm:301
rdbuf10          = $E67B = 59003  _TEXT       bdos.asm:363
rdbuf11          = $E683 = 59011  _TEXT       bdos.asm:369
rdbuf12          = $E695 = 59029  _TEXT       bdos.asm:381
rdbuf13          = $E6A4 = 59044  _TEXT       bdos.asm:388
rdbuf14          = $E6B1 = 59057  _TEXT       bdos.asm:396
rdbuf15          = $E6B4 = 59060  _TEXT       bdos.asm:399
rdbuf16          = $E6C8 = 59080  _TEXT       bdos.asm:411
rdbuf17          = $E6CC = 59084  _TEXT       bdos.asm:413
rdbuf2           = $E5FC = 58876  _TEXT       bdos.asm:303
rdbuf3           = $E621 = 58913  _TEXT       bdos.asm:320
rdbuf4           = $E631 = 58929  _TEXT       bdos.asm:329
rdbuf5           = $E642 = 58946  _TEXT       bdos.asm:337
rdbuf6           = $E653 = 58963  _TEXT       bdos.asm:346
rdbuf7           = $E659 = 58969  _TEXT       bdos.asm:349
rdbuf8           = $E66A = 58986  _TEXT       bdos.asm:356
rdbuf9           = $E676 = 58998  _TEXT       bdos.asm:361
rdbuff           = $E5EC = 58860  _TEXT       bdos.asm:294
rdrandom         = $F14C = 61772  _TEXT       bdos.asm:2359
rdseq            = $EDC7 = 60871  _TEXT       bdos.asm:1752
rdseq1           = $EDCC = 60876  _TEXT       bdos.asm:1754
rdseq2           = $EDF1 = 60913  _TEXT       bdos.asm:1769
rdseq3           = $EE06 = 60934  _TEXT       bdos.asm:1779
rdwrtflg         = $F1DE = 61918  _TEXT       bdos.asm:2477
read             = $F30C = 62220  _TEXT       bios.asm:256
reader           = $F2CD = 62157  _TEXT       bios.asm:188
readran          = $EF9E = 61342  _TEXT       bdos.asm:2046
readseq          = $F0EB = 61675  _TEXT       bdos.asm:2285
relblock         = $F1E2 = 61922  _TEXT       bdos.asm:2481
renfile          = $F100 = 61696  _TEXT       bdos.asm:2301
resccp           = $F364 = 62308  _TEXT       config_ndsk.asm:150
resgrb           = $F367 = 62311  _TEXT       config_ndsk.asm:156
rodisk           = $E410 = 58384  _TEXT       bdos.asm:36
rofile           = $E412 = 58386  _TEXT       bdos.asm:37
rstdsk           = $F08E = 61582  _TEXT       bdos.asm:2229
rtn              = $E70F = 59151  _TEXT       bdos.asm:471
samext           = $EB12 = 60178  _TEXT       bdos.asm:1283
savatr1          = $EC4B = 60491  _TEXT       bdos.asm:1523
saveattr         = $EC46 = 60486  _TEXT       bdos.asm:1521
savefcb          = $F1E4 = 61924  _TEXT       bdos.asm:2483
savext           = $F1ED = 61933  _TEXT       bdos.asm:2489
savnrec          = $F1EE = 61934  _TEXT       bdos.asm:2490
savnxt           = $F1EC = 61932  _TEXT       bdos.asm:2488
scratch1         = $F1BE = 61886  _TEXT       bdos.asm:2451
scratch2         = $F1C0 = 61888  _TEXT       bdos.asm:2452
scratch3         = $F1C2 = 61890  _TEXT       bdos.asm:2453
sectors          = $F1CC = 61900  _TEXT       bdos.asm:2464
sectrn           = $F317 = 62231  _TEXT       bios.asm:276
seldsk           = $F2E0 = 62176  _TEXT       bios.asm:208
select           = $E764 = 59236  _TEXT       bdos.asm:522
select1          = $E7A8 = 59304  _TEXT       bdos.asm:562
setattr          = $F128 = 61736  _TEXT       bdos.asm:2333
setbit           = $E916 = 59670  _TEXT       bdos.asm:854
setdir           = $E9A7 = 59815  _TEXT       bdos.asm:988
setdma           = $F306 = 62214  _TEXT       bios.asm:248
setdsk           = $F050 = 61520  _TEXT       bdos.asm:2189
setext           = $E8B1 = 59569  _TEXT       bdos.asm:769
setfile          = $EA76 = 60022  _TEXT       bdos.asm:1173
setfl1           = $EA80 = 60032  _TEXT       bdos.asm:1178
setfl2           = $EA93 = 60051  _TEXT       bdos.asm:1190
setfl3           = $EA99 = 60057  _TEXT       bdos.asm:1196
setfl4           = $EAA8 = 60072  _TEXT       bdos.asm:1205
sethlde          = $E8B9 = 59577  _TEXT       bdos.asm:777
setiob           = $E6FE = 59134  _TEXT       bdos.asm:451
setnrec          = $E8DD = 59613  _TEXT       bdos.asm:803
setran           = $F019 = 61465  _TEXT       bdos.asm:2152
sets2b7          = $E983 = 59779  _TEXT       bdos.asm:945
setsec           = $F302 = 62210  _TEXT       bios.asm:241
setstat          = $E70C = 59148  _TEXT       bdos.asm:470
settrk           = $F2FE = 62206  _TEXT       bios.asm:234
setuser          = $F146 = 61766  _TEXT       bdos.asm:2353
shiftl           = $E90F = 59663  _TEXT       bdos.asm:845
shiftl1          = $E910 = 59664  _TEXT       bdos.asm:846
shiftr           = $E8F5 = 59637  _TEXT       bdos.asm:819
shiftr1          = $E8F6 = 59638  _TEXT       bdos.asm:820
showit           = $E58A = 58762  _TEXT       bdos.asm:226
siodev           = $FA33 = 64051  _TEXT       nabu_sio.asm:20
slcterr          = $E752 = 59218  _TEXT       bdos.asm:499
so_atab          = $FAA3 = 64163  _TEXT       nabu_sio.asm:131
so_conf          = $FAA7 = 64167  _TEXT       nabu_sio.asm:135
so_ini0          = $FA46 = 64070  _TEXT       nabu_sio.asm:39
so_ini1          = $FA4C = 64076  _TEXT       nabu_sio.asm:43
so_ini2          = $FA53 = 64083  _TEXT       nabu_sio.asm:49
so_ini3          = $FA5F = 64095  _TEXT       nabu_sio.asm:59
so_init          = $FA3E = 64062  _TEXT       nabu_sio.asm:33
so_rea0          = $FA86 = 64134  _TEXT       nabu_sio.asm:102
so_read          = $FA7D = 64125  _TEXT       nabu_sio.asm:95
so_sta0          = $FA75 = 64117  _TEXT       nabu_sio.asm:83
so_stat          = $FA6C = 64108  _TEXT       nabu_sio.asm:76
so_wri0          = $FA99 = 64153  _TEXT       nabu_sio.asm:121
so_writ          = $FA8F = 64143  _TEXT       nabu_sio.asm:113
starting         = $E716 = 59158  _TEXT       bdos.asm:479
status           = $E750 = 59216  _TEXT       bdos.asm:495
stbitmap         = $EA67 = 60007  _TEXT       bdos.asm:1153
stbmap1          = $EA6F = 60015  _TEXT       bdos.asm:1164
stfilpos         = $EA09 = 59913  _TEXT       bdos.asm:1068
stkarea          = $E74C = 59212  _TEXT       bdos.asm:490
stnrec1          = $E8E9 = 59625  _TEXT       bdos.asm:808
strdata          = $E8C6 = 59590  _TEXT       bdos.asm:787
ststatus         = $EB0C = 60172  _TEXT       bdos.asm:1275
subhl            = $E9A0 = 59808  _TEXT       bdos.asm:978
swindi0          = $F32D = 62253  _TEXT       bios.asm:300
swindi1          = $F333 = 62259  _TEXT       bios.asm:304
swindir          = $F329 = 62249  _TEXT       bios.asm:298
syshook          = $F363 = 62307  _TEXT       config_ndsk.asm:128
tab              = $0009 =     9  _TEXT       zcpr1_ccp.asm:25
tbase            = $0100 =   256  _TEXT       zcpr1_ccp.asm:18 (unused)
tbuff            = $0080 =   128  _TEXT       zcpr1_ccp.asm:17
tdrive           = $0004 =     4  _TEXT       zcpr1_ccp.asm:10
tfcb             = $005C =    92  _TEXT       zcpr1_ccp.asm:14 (unused)
tm_40c           = $F5F0 = 62960  _TEXT       nabu_vdp.asm:462
tm_80c           = $F5FD = 62973  _TEXT       nabu_vdp.asm:469
tm_addh          = $F714 = 63252  _TEXT       nabu_vdp.asm:707
tm_addr          = $F716 = 63254  _TEXT       nabu_vdp.asm:709
tm_atla          = $0041 =    65  _TEXT       nabu_vdp.asm:37
tm_ayda          = $0040 =    64  _TEXT       nabu_vdp.asm:36
tm_bs            = $F546 = 62790  _TEXT       nabu_vdp.asm:348
tm_cbuf          = $FAC5 = 64197  _BSS        nabu_vdp.asm:26
tm_cha0          = $F6B8 = 63160  _TEXT       nabu_vdp.asm:630
tm_chat          = $F6B2 = 63154  _TEXT       nabu_vdp.asm:625
tm_cle0          = $F5DC = 62940  _TEXT       nabu_vdp.asm:447
tm_clea          = $F5CD = 62925  _TEXT       nabu_vdp.asm:438
tm_cles          = $F5CB = 62923  _TEXT       nabu_vdp.asm:437
tm_cloc          = $F457 = 62551  _TEXT       nabu_vdp.asm:172
tm_cls           = $F6F9 = 63225  _TEXT       nabu_vdp.asm:684
tm_cls0          = $F702 = 63234  _TEXT       nabu_vdp.asm:687
tm_cold          = $F749 = 63305  _TEXT       nabu_vdp.asm:754
tm_colr          = $F744 = 63300  _TEXT       nabu_vdp.asm:749
tm_cr            = $F543 = 62787  _TEXT       nabu_vdp.asm:345
tm_cshm          = $F555 = 62805  _TEXT       nabu_vdp.asm:362
tm_cupd          = $F5F4 = 62964  _TEXT       nabu_vdp.asm:464
tm_curx          = $F747 = 63303  _TEXT       nabu_vdp.asm:752
tm_cury          = $F748 = 63304  _TEXT       nabu_vdp.asm:753
tm_data          = $00A0 =   160  _TEXT       nabu_vdp.asm:30
tm_dint          = $F727 = 63271  _TEXT       nabu_vdp.asm:728
tm_dsc0          = $F623 = 63011  _TEXT       nabu_vdp.asm:495
tm_dsco          = $F610 = 62992  _TEXT       nabu_vdp.asm:488
tm_eint          = $F737 = 63287  _TEXT       nabu_vdp.asm:740
tm_esc           = $F58A = 62858  _TEXT       nabu_vdp.asm:394
tm_esc0          = $F59B = 62875  _TEXT       nabu_vdp.asm:405
tm_esc1          = $F5B5 = 62901  _TEXT       nabu_vdp.asm:420
tm_esc2          = $F5C0 = 62912  _TEXT       nabu_vdp.asm:427
tm_escd          = $F596 = 62870  _TEXT       nabu_vdp.asm:402
tm_esci          = $F5AF = 62895  _TEXT       nabu_vdp.asm:417
tm_escr          = $F597 = 62871  _TEXT       nabu_vdp.asm:403
tm_escs          = $FAC3 = 64195  _BSS        nabu_vdp.asm:24
tm_get0          = $F64C = 63052  _TEXT       nabu_vdp.asm:530
tm_getc          = $F636 = 63030  _TEXT       nabu_vdp.asm:516
tm_home          = $F558 = 62808  _TEXT       nabu_vdp.asm:363
tm_inb           = $F745 = 63301  _TEXT       nabu_vdp.asm:750
tm_inf           = $F746 = 63302  _TEXT       nabu_vdp.asm:751
tm_ini0          = $F42A = 62506  _TEXT       nabu_vdp.asm:140
tm_ini1          = $F44A = 62538  _TEXT       nabu_vdp.asm:161
tm_inir          = $F3D0 = 62416  _TEXT       nabu_vdp.asm:79
tm_init          = $F402 = 62466  _TEXT       nabu_vdp.asm:116
tm_inr0          = $F3D1 = 62417  _TEXT       nabu_vdp.asm:80
tm_keyd          = $0090 =   144  _TEXT       nabu_vdp.asm:33
tm_keys          = $0091 =   145  _TEXT       nabu_vdp.asm:34
tm_kirq          = $F654 = 63060  _TEXT       nabu_vdp.asm:539
tm_last          = $FAC4 = 64196  _BSS        nabu_vdp.asm:25
tm_latc          = $00A1 =   161  _TEXT       nabu_vdp.asm:31
tm_lf            = $F537 = 62775  _TEXT       nabu_vdp.asm:336
tm_map           = $F662 = 63074  _TEXT       nabu_vdp.asm:554
tm_map0          = $F666 = 63078  _TEXT       nabu_vdp.asm:558
tm_map2          = $F672 = 63090  _TEXT       nabu_vdp.asm:571
tm_mapt          = $F679 = 63097  _TEXT       nabu_vdp.asm:578
tm_mode          = $F742 = 63298  _TEXT       nabu_vdp.asm:748
tm_oti0          = $F3C8 = 62408  _TEXT       nabu_vdp.asm:66
tm_otir          = $F3C7 = 62407  _TEXT       nabu_vdp.asm:65
tm_outc          = $FAC1 = 64193  _BSS        nabu_vdp.asm:22
tm_putc          = $F68E = 63118  _TEXT       nabu_vdp.asm:596
tm_putf          = $F69C = 63132  _TEXT       nabu_vdp.asm:604 (unused)
tm_rea0          = $F4B0 = 62640  _TEXT       nabu_vdp.asm:237
tm_rea1          = $F4C6 = 62662  _TEXT       nabu_vdp.asm:249
tm_rea2          = $F4DB = 62683  _TEXT       nabu_vdp.asm:262
tm_rea3          = $F4EB = 62699  _TEXT       nabu_vdp.asm:272
tm_read          = $F4A4 = 62628  _TEXT       nabu_vdp.asm:231
tm_ri            = $F530 = 62768  _TEXT       nabu_vdp.asm:330
tm_sclf          = $F46F = 62575  _TEXT       nabu_vdp.asm:188
tm_scol          = $F603 = 62979  _TEXT       nabu_vdp.asm:474
tm_scr0          = $F467 = 62567  _TEXT       nabu_vdp.asm:185
tm_scr1          = $F46D = 62573  _TEXT       nabu_vdp.asm:187
tm_scri          = $F45D = 62557  _TEXT       nabu_vdp.asm:180
tm_scro          = $FAC2 = 64194  _BSS        nabu_vdp.asm:23
tm_setp          = $F479 = 62585  _TEXT       nabu_vdp.asm:198
tm_sta0          = $F3E5 = 62437  _TEXT       nabu_vdp.asm:98
tm_sta1          = $F3F0 = 62448  _TEXT       nabu_vdp.asm:103
tm_sta2          = $F4FC = 62716  _TEXT       nabu_vdp.asm:286
tm_stal          = $F4F9 = 62713  _TEXT       nabu_vdp.asm:284
tm_stat          = $F3D9 = 62425  _TEXT       nabu_vdp.asm:92
tm_up            = $F550 = 62800  _TEXT       nabu_vdp.asm:357
tm_updc          = $F607 = 62983  _TEXT       nabu_vdp.asm:478
tm_usc0          = $F6E5 = 63205  _TEXT       nabu_vdp.asm:663
tm_usco          = $F6D6 = 63190  _TEXT       nabu_vdp.asm:656
tm_vcpy          = $F6BE = 63166  _TEXT       nabu_vdp.asm:642
tm_virq          = $F721 = 63265  _TEXT       nabu_vdp.asm:718
tm_wri0          = $F51D = 62749  _TEXT       nabu_vdp.asm:318
tm_wri1          = $F55C = 62812  _TEXT       nabu_vdp.asm:368
tm_writ          = $F502 = 62722  _TEXT       nabu_vdp.asm:298
trksec           = $E7CE = 59342  _TEXT       bdos.asm:596
trksec1          = $E7DC = 59356  _TEXT       bdos.asm:605
trksec2          = $E7EF = 59375  _TEXT       bdos.asm:618
trksec3          = $E805 = 59397  _TEXT       bdos.asm:634
trksec4          = $E81A = 59418  _TEXT       bdos.asm:651
update           = $EC0C = 60428  _TEXT       bdos.asm:1484
update1          = $EC1B = 60443  _TEXT       bdos.asm:1492
userdma          = $F1BC = 61884  _TEXT       bdos.asm:2447
userno           = $E74C = 59212  _TEXT       bdos.asm:492
usrstack         = $E71A = 59162  _TEXT       bdos.asm:486
vdpdev           = $F3BA = 62394  _TEXT       nabu_vdp.asm:51
wbinit           = $F34B = 62283  _TEXT       config_ndsk.asm:66
wboot            = $F248 = 62024  _TEXT       bios.asm:57
wboot0           = $F26F = 62063  _TEXT       bios.asm:94
wbootin          = $F20A = 61962  _TEXT       bios.asm:22
wbootr           = $F25F = 62047  _TEXT       bios.asm:82
write            = $F310 = 62224  _TEXT       bios.asm:263
writeran         = $EFA7 = 61351  _TEXT       bdos.asm:2053
wrtprt           = $F1B8 = 61880  _TEXT       bdos.asm:2445
wrtprtd          = $E937 = 59703  _TEXT       bdos.asm:881
wrtseq           = $F0F1 = 61681  _TEXT       bdos.asm:2290
wtrandom         = $F152 = 61778  _TEXT       bdos.asm:2364
wtseq            = $EE09 = 60937  _TEXT       bdos.asm:1783
wtseq1           = $EE0E = 60942  _TEXT       bdos.asm:1785
wtseq10          = $EEDD = 61149  _TEXT       bdos.asm:1900
wtseq11          = $EF09 = 61193  _TEXT       bdos.asm:1924
wtseq12          = $EF0B = 61195  _TEXT       bdos.asm:1925
wtseq2           = $EE46 = 60998  _TEXT       bdos.asm:1808
wtseq3           = $EE53 = 61011  _TEXT       bdos.asm:1814
wtseq4           = $EE6F = 61039  _TEXT       bdos.asm:1826
wtseq5           = $EE77 = 61047  _TEXT       bdos.asm:1833
wtseq6           = $EE79 = 61049  _TEXT       bdos.asm:1834
wtseq7           = $EE97 = 61079  _TEXT       bdos.asm:1857
wtseq8           = $EEA5 = 61093  _TEXT       bdos.asm:1864
wtseq9           = $EEC6 = 61126  _TEXT       bdos.asm:1884
wtseq99          = $EEEA = 61162  _TEXT       bdos.asm:1911 (unused)
wtspecl          = $F1A6 = 61862  _TEXT       bdos.asm:2430
xlate            = $F1DB = 61915  _TEXT       bdos.asm:2473


total time: 0.0770 sec.
no errors
