              	; --------------------------------------
              	; zasm: assemble "idegen.asm"
              	; date: 2023-07-04 17:01:36
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*       N A B U   I D E   S Y S T E M   G E N E R A T E
              	;*
              	;*     This utility is used to format and prepare an attached
              	;*     IDE drive to be booted off of. The user can format the
              	;*     drive, and then write a bootsector, font GRB, and
              	;*     image onto the disk.
              	;*
              	;**************************************************************
              	;
              	
              	; Equates
0005:         	bdos	equ	0x0005
005C:         	fcb	equ	0x005C
              	
0001:         	b_coin	equ	0x01
0002:         	b_cout	equ	0x02
0009:         	b_print	equ	0x09
000F:         	b_open	equ	0x0F
0010:         	b_close	equ	0x10
0014:         	b_read	equ	0x14
0015:         	b_write	equ	0x15
0016:         	b_make	equ	0x16
001A:         	b_dma	equ	0x1A
              	
00C0:         	id_base	equ	0xC0
              	
              	; Program start
0100:         		org	0x0100
              		
              		
              		; Print banner
0100: F3      	start:	di	
0101: 0E09    		ld	c,b_print
0103: 11BF02  		ld	de,splash
0106: CD0500  		call	bdos
              	
              		; Get system image
0109: 0E09    	getsys: ld	c,b_print
010B: 11F302  		ld	de,cfgmsg
010E: CD0500  		call	bdos
0111: CD6902  		call	getopt
              		
              		; Exit option
0114: FE39    		cp	'9'
0116: C8      		ret	z
              		
              		; System Option #1
0117: 21430C  		ld	hl,sys_ide_nfs	; pointer to image
011A: FE31    		cp	'1'
011C: 2802    		jr	z,setsys
              	
              	
              		; Invalid, reprompt
011E: 18E9    		jr	getsys
              		
              		; Set system image
0120: 22BB02  	setsys:	ld	(sysimg),hl
              	
              		; Now lets get the logical drive #
0123: 0E09    	getcurd:ld	c,b_print
0125: 114203  		ld	de,drvmsg
0128: CD0500  		call	bdos
012B: CD6902  		call	getopt
              		
012E: 06E0    		ld	b,0xE0
0130: FE30    		cp	'0'
0132: 2808    		jr	z,setcurd
0134: 06F0    		ld	b,0xF0
0136: FE31    		cp	'1'
0138: 2802    		jr	z,setcurd
013A: 18E7    		jr	getcurd
              		
013C: 78      	setcurd:ld	a,b
013D: 32BD02  		ld	(curdrv),a
              	
              		; Format option
0140: 0E09    		ld	c,b_print
0142: 115C03  		ld	de,formmsg
0145: CD0500  		call	bdos
0148: CD6902  		call	getopt
014B: 32BE02  		ld	(doform),a
              		
              		; Ready to begin?
014E: 0E09    		ld	c,b_print
0150: 117303  		ld	de,readymsg
0153: CD0500  		call	bdos
0156: CD6902  		call	getopt
0159: FE59    		cp	'Y'
015B: C20901  		jp	nz,getsys
              		
              		; Begin operation, check to made sure drive is present
015E: 3ABD02  		ld	a,(curdrv)
0161: D3CC    		out	(id_base+0xC),a
0163: 06FF    		ld	b,255
0165: CDB602  		call	stall
0168: DBCC    		in	a,(id_base+0xC)
016A: 3C      		inc	a
016B: 200E    		jr	nz,format
              		
              		; Error!
016D: 0E09    		ld	c,b_print
016F: 11ED03  		ld	de,nodmsg
0172: CD0500  		call	bdos
0175: AF      		xor	a
0176: D3CC    		out	(id_base+0xC),a
0178: C30000  		jp	0
              		
              		; Do a format?
017B: CD5C02  	format:	call	id_busy
017E: 3ABE02  		ld	a,(doform)
0181: FE59    		cp	'Y'
0183: C2DA01  		jp	nz,sysgen
              		
0186: 0E09    		ld	c,b_print
0188: 118D03  		ld	de,fnowmsg
018B: CD0500  		call	bdos
              		
              		; Fill top of memory with 0xE5
018E: 21EA30  		ld	hl,top
0191: 0600    		ld	b,0
0193: 3EE5    		ld	a,0xE5
0195: 77      	format0:ld	(hl),a
0196: 23      		inc	hl
0197: 77      		ld	(hl),a
0198: 23      		inc	hl
0199: 10FA    		djnz	format0
              		
              		; Write 65536 sectors
019B: 010000  		ld	bc,0
019E: 1608    		ld	d,8
              	
              		; Set transfer registers
01A0: 79      	format1:ld	a,c
01A1: D3C6    		out	(id_base+0x6),a
01A3: 78      		ld	a,b
01A4: D3C8    		out	(id_base+0x8),a
01A6: AF      		xor	a
01A7: D3CA    		out	(id_base+0xA),a
              		
              		; Perform the write
01A9: C5      		push	bc
01AA: 21EA30  		ld	hl,top
01AD: CD2D02  		call	write
01B0: F5      		push	af
01B1: 3EE7    		ld	a,0xE7
01B3: CD5402  		call	id_comm
01B6: F1      		pop	af
01B7: C1      		pop	bc
01B8: C20E02  		jp	nz,ioerror
              	
              		; Increment counter
01BB: 03      		inc	bc
01BC: AF      		xor	a
01BD: B1      		or	c
01BE: 20E0    		jr	nz,format1
              	
01C0: 15      		dec	d
01C1: 200B    		jr	nz,format2
01C3: C5      		push	bc
01C4: 0E02    		ld	c,b_cout
01C6: 1E2E    		ld	e,'.'
01C8: CD0500  		call	bdos
01CB: C1      		pop	bc
01CC: 1608    		ld	d,8
              	
01CE: 78      	format2:ld	a,b
01CF: B1      		or	c
01D0: 20CE    		jr	nz,format1
              		
              		; Drop down to sysgen
01D2: 0E09    		ld	c,b_print
01D4: 11A903  		ld	de,fdonemsg
01D7: CD0500  		call	bdos
              		
              		; Generate system onto disk
01DA: 0E09    	sysgen:	ld	c,b_print
01DC: 11BB03  		ld	de,gnowmsg
01DF: CD0500  		call	bdos
              		
              		; Write GRB (Sectors 1-4)
01E2: 0604    		ld	b,4
01E4: 0E01    		ld	c,1
01E6: 214304  		ld	hl,fontgrb
01E9: CD1902  		call	trans
              		
              		; Write boot block (TODO) (Sector 0)
01EC: 2ABB02  		ld	hl,(sysimg)	
              		
              		; Write system (Sectors 5+)
01EF: 2ABB02  		ld	hl,(sysimg)
01F2: 23      		inc	hl
01F3: 23      		inc	hl
01F4: 46      		ld	b,(hl)
01F5: 0E05    		ld	c,5
01F7: 23      		inc	hl
01F8: CD1902  		call	trans
              		
              		; All done
01FB: 0E09    		ld	c,b_print
01FD: 11D603  		ld	de,gdonemsg
0200: CD0500  		call	bdos
              		
0203: 0E09    		ld	c,b_print
0205: 112904  		ld	de,donemsg
0208: CD0500  		call	bdos
              		
020B: C30000  		jp	0
              		
              		; Handle an IO error
020E: 0E09    	ioerror:ld	c,b_print 
0210: 110804  		ld	de,iomsg
0213: CD0500  		call	bdos
              	
0216: C30000  		jp	0
              	
              	; Transfers a number of blocks onto the IDE device
              	; b = Number of blocks to transfer
              	; c = Inital block
              	; hl = Source of data
0219: AF      	trans:	xor	a
021A: D3C8    		out	(id_base+0x8),a
021C: D3CA    		out	(id_base+0xA),a
              		
021E: 79      	trans0:	ld	a,c
021F: D3C6    		out	(id_base+0x6),a
0221: C5      		push	bc
0222: CD2D02  		call	write
0225: C1      		pop	bc
0226: C20E02  		jp	nz,ioerror
0229: 0C      		inc	c
022A: 10F2    		djnz	trans0
022C: C9      		ret
              	
              	; Executes a write command, data written from buffer
              	; hl = Source of data
              	;
              	; Returns hl += 512
              	; uses: af, bc, hl
022D: 3E01    	write:	ld	a,1
022F: D3C4    		out	(id_base+0x4),a
0231: CD5C02  		call	id_busy
0234: 3E30    		ld	a,0x30
0236: CD5402  		call	id_comm
0239: CD4D02  		call	id_wdrq
023C: 0600    		ld	b,0
023E: 4E      	write0:	ld	c,(hl)
023F: 23      		inc	hl
0240: 7E      		ld	a,(hl)
0241: D3C1    		out	(id_base+1),a
0243: 23      		inc	hl
0244: 79      		ld	a,c
0245: D3C0    		out	(id_base),a
0247: 10F5    		djnz	write0
0249: CD5C02  		call	id_busy
024C: C9      		ret
              		
              	; Waits for a DRQ (Data Request)
              	;
              	; uses: af
024D: DBCE    	id_wdrq:in	a,(id_base+0xE)
024F: CB5F    		bit	3,a
0251: 28FA    		jr	z,id_wdrq
0253: C9      		ret
              		
              	; Issues an IDE command
              	; a = Command to issue
              	;
              	; uses: af
0254: F5      	id_comm:push	af
0255: CD5C02  		call	id_busy
0258: F1      		pop	af
0259: D3CE    		out	(id_base+0xE),a
025B: C9      		ret
              		
              		
              	; Waits for the IDE drive to no longer be busy
              	;
              	; Resets flag z on error
025C: DBCE    	id_busy:in	a,(id_base+0xE)
025E: CB77    		bit	6,a
0260: 28FA    		jr	z,id_busy
0262: CB7F    		bit	7,a
0264: 20F6    		jr	nz,id_busy
0266: CB47    		bit	0,a
0268: C9      		ret
              		
              	; Gets a single character option from the user
              	; Letters will be converted to upper case
              	;
              	; Returns character in A
              	; uses: all
0269: 0E0A    	getopt:	ld	c,0x0A
026B: 113F04  		ld	de,inpbuf
026E: CD0500  		call	bdos
0271: 3A4104  		ld	a,(inpbuf+2)
              		
              	; Converts lowercase to uppercase
              	; a = Character to convert
              	;
              	; Returns uppercase in A
              	; uses: af
0274: E67F    	ltou:	and	0x7F
0276: FE61    		cp	0x61		; 'a'
0278: D8      		ret	c
0279: FE7B    		cp	0x7B		; '{'
027B: D0      		ret	nc
027C: D620    		sub	0x20
027E: C9      		ret
              		
              	; Print decimal
              	; hl = value to print
              	;
              	; uses: all
027F: 1630    	putd:	ld	d,'0'
0281: 01F0D8  		ld	bc,0-10000
0284: CD9D02  		call	putd0
0287: 0118FC  		ld	bc,0-1000
028A: CD9D02  		call	putd0
028D: 019CFF  		ld	bc,0-100
0290: CD9D02  		call	putd0
0293: 01F6FF  		ld	bc,0-10
0296: CD9D02  		call	putd0
0299: 01FFFF  		ld	bc,0-1
029C: 15      		dec	d
029D: 3E2F    	putd0:	ld	a,'0'-1		; get character
029F: 3C      	putd1:	inc	a
02A0: 09      		add	hl,bc
02A1: 38FC    		jr	c,putd1
02A3: ED42    		sbc	hl,bc
02A5: 47      		ld	b,a
02A6: BA      		cp	d		; check for leading zeros
02A7: C8      		ret	z
02A8: 15      		dec	d
              		
              		; Actually print character out
02A9: C5      		push	bc
02AA: D5      		push	de
02AB: E5      		push	hl
02AC: 58      		ld	e,b
02AD: 0E02    		ld	c,b_cout
02AF: CD0500  		call	bdos
02B2: E1      		pop	hl
02B3: D1      		pop	de
02B4: C1      		pop	bc
02B5: C9      		ret
              		
              	; Waits a little bit
              	; b = Number of cycles to stall for
              	;
              	; uses: b
02B6: C5      	stall:  push	bc
02B7: C1      		pop	bc
02B8: 10FC    		djnz	stall
02BA: C9      		ret
              		
              	; Variables
              		
02BB:         	sysimg:
02BB: 0000    		defw	0
              		
02BD:         	curdrv:
02BD: 00      		defb	0
              	
02BE:         	doform:
02BE: 00      		defb	0
              	
              	; Strings
              		
02BF:         	splash:
02BF: 4E414255		defb	'NABU IDE SysGen Utility',0x0A,0x0D
02C3: 20494445	
02C7: 20537973	
02CB: 47656E20	
02CF: 5574696C	
02D3: 6974790A	
02D7: 0D      	
02D8: 52657620		defb	'Rev 1a, tergav17 (Gavin)',0x0A,0x0D,'$'
02DC: 31612C20	
02E0: 74657267	
02E4: 61763137	
02E8: 20284761	
02EC: 76696E29	
02F0: 0A0D24  	
              	
02F3:         	cfgmsg:
02F3: 0A0D5365		defb	0x0A,0x0D,'Select a System Image:',0x0A,0x0A,0x0D
02F7: 6C656374	
02FB: 20612053	
02FF: 79737465	
0303: 6D20496D	
0307: 6167653A	
030B: 0A0A0D  	
              		
030E: 20202020		defb	'    1: IshkurCP/M IDE + NFS',0x0A,0x0D
0312: 313A2049	
0316: 73686B75	
031A: 7243502F	
031E: 4D204944	
0322: 45202B20	
0326: 4E46530A	
032A: 0D      	
032B: 20202020		defb	'    9: Exit',0x0A,0x0A,0x0D
032F: 393A2045	
0333: 7869740A	
0337: 0A0D    	
0339: 4F707469		defb	'Option: $'
033D: 6F6E3A20	
0341: 24      	
              		
              		
0342:         	drvmsg:	
0342: 0A0D4C6F		defb	0x0A,0x0D,'Logical Drive # (0,1): $'
0346: 67696361	
034A: 6C204472	
034E: 69766520	
0352: 23202830	
0356: 2C31293A	
035A: 2024    	
              	
035C:         	formmsg:	
035C: 0A0D466F		defb	0x0A,0x0D,'Format Disk? (Y,N): $'
0360: 726D6174	
0364: 20446973	
0368: 6B3F2028	
036C: 592C4E29	
0370: 3A2024  	
              		
0373:         	readymsg:	
0373: 0A0D5265		defb	0x0A,0x0D,'Ready to begin? (Y,N): $'
0377: 61647920	
037B: 746F2062	
037F: 6567696E	
0383: 3F202859	
0387: 2C4E293A	
038B: 2024    	
              	
038D:         	fnowmsg:	
038D: 0A0D466F		defb	0x0A,0x0D,'Formatting Drive Now...',0x0A,0x0D,'$'
0391: 726D6174	
0395: 74696E67	
0399: 20447269	
039D: 7665204E	
03A1: 6F772E2E	
03A5: 2E0A0D24	
              		
03A9:         	fdonemsg:	
03A9: 0A0D466F		defb	0x0A,0x0D,'Format Complete$'
03AD: 726D6174	
03B1: 20436F6D	
03B5: 706C6574	
03B9: 6524    	
              		
03BB:         	gnowmsg:
03BB: 0A0D4765		defb	0x0A,0x0D,'Generating System Now...$'
03BF: 6E657261	
03C3: 74696E67	
03C7: 20537973	
03CB: 74656D20	
03CF: 4E6F772E	
03D3: 2E2E24  	
              		
03D6:         	gdonemsg:
03D6: 0A0D5379		defb	0x0A,0x0D,'System Generate Done$'
03DA: 7374656D	
03DE: 2047656E	
03E2: 65726174	
03E6: 6520446F	
03EA: 6E6524  	
              	
03ED:         	nodmsg:	
03ED: 0A0D4572		defb	0x0A,0x0D,'Error: No Disk Detected!$'
03F1: 726F723A	
03F5: 204E6F20	
03F9: 4469736B	
03FD: 20446574	
0401: 65637465	
0405: 642124  	
              		
0408:         	iomsg:	
0408: 0A0D4572		defb	0x0A,0x0D,'Error: Sector Transfer Failed!$'	
040C: 726F723A	
0410: 20536563	
0414: 746F7220	
0418: 5472616E	
041C: 73666572	
0420: 20466169	
0424: 6C656421	
0428: 24      	
              		
0429:         	donemsg:	
0429: 0A0D4F70		defb	0x0A,0x0D,'Operation Complete!$'
042D: 65726174	
0431: 696F6E20	
0435: 436F6D70	
0439: 6C657465	
043D: 2124    	
              	
              	; Input buffer
043F: 02000000	inpbuf:	defb	0x02, 0x00, 0x00, 0x00
              		
              	; Font GRB, load into sectors 1-4
0443:         	fontgrb:
              	#insert	"font.bin"
              	
0C43:         	sys_ide_nfs:
0C43: 00D4    		defw	0xD400		; Load in address
0C45: 13      		defb	19		; Sectors to write
              	#insert "../../../Output/Nabu_IDE/ide_nfs_cpm22.bin"
              		
              	; Top of program, use it to store stuff
30EA:         	top:


; +++ segments +++

#CODE          = $0100 =   256,  size = $2FEA = 12266

; +++ global symbols +++

_end        = $30EA = 12522          idegen.asm:31 (unused)
_size       = $2FEA = 12266          idegen.asm:31 (unused)
b_close     = $0010 =    16          idegen.asm:22 (unused)
b_coin      = $0001 =     1          idegen.asm:18 (unused)
b_cout      = $0002 =     2          idegen.asm:19
b_dma       = $001A =    26          idegen.asm:26 (unused)
b_make      = $0016 =    22          idegen.asm:25 (unused)
b_open      = $000F =    15          idegen.asm:21 (unused)
b_print     = $0009 =     9          idegen.asm:20
b_read      = $0014 =    20          idegen.asm:23 (unused)
b_write     = $0015 =    21          idegen.asm:24 (unused)
bdos        = $0005 =     5          idegen.asm:15
cfgmsg      = $02F3 =   755          idegen.asm:376
curdrv      = $02BD =   701          idegen.asm:364
doform      = $02BE =   702          idegen.asm:367
donemsg     = $0429 =  1065          idegen.asm:411
drvmsg      = $0342 =   834          idegen.asm:384
fcb         = $005C =    92          idegen.asm:16 (unused)
fdonemsg    = $03A9 =   937          idegen.asm:396
fnowmsg     = $038D =   909          idegen.asm:393
fontgrb     = $0443 =  1091          idegen.asm:418
format      = $017B =   379          idegen.asm:112
format0     = $0195 =   405          idegen.asm:125
format1     = $01A0 =   416          idegen.asm:136
format2     = $01CE =   462          idegen.asm:169
formmsg     = $035C =   860          idegen.asm:387
gdonemsg    = $03D6 =   982          idegen.asm:402
getcurd     = $0123 =   291          idegen.asm:63
getopt      = $0269 =   617          idegen.asm:295
getsys      = $0109 =   265          idegen.asm:41
gnowmsg     = $03BB =   955          idegen.asm:399
id_base     = $00C0 =   192          idegen.asm:28
id_busy     = $025C =   604          idegen.asm:282
id_comm     = $0254 =   596          idegen.asm:272
id_wdrq     = $024D =   589          idegen.asm:263
inpbuf      = $043F =  1087          idegen.asm:415
ioerror     = $020E =   526          idegen.asm:213
iomsg       = $0408 =  1032          idegen.asm:408
ltou        = $0274 =   628          idegen.asm:305 (unused)
nodmsg      = $03ED =  1005          idegen.asm:405
putd        = $027F =   639          idegen.asm:317 (unused)
putd0       = $029D =   669          idegen.asm:328
putd1       = $029F =   671          idegen.asm:329
readymsg    = $0373 =   883          idegen.asm:390
setcurd     = $013C =   316          idegen.asm:76
setsys      = $0120 =   288          idegen.asm:60
splash      = $02BF =   703          idegen.asm:372
stall       = $02B6 =   694          idegen.asm:354
start       = $0100 =   256          idegen.asm:35 (unused)
sys_ide_nfs = $0C43 =  3139          idegen.asm:421
sysgen      = $01DA =   474          idegen.asm:179
sysimg      = $02BB =   699          idegen.asm:361
top         = $30EA = 12522          idegen.asm:427
trans       = $0219 =   537          idegen.asm:223
trans0      = $021E =   542          idegen.asm:227
write       = $022D =   557          idegen.asm:242
write0      = $023E =   574          idegen.asm:249


total time: 0.0032 sec.
no errors
