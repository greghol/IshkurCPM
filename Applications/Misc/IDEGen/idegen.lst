              	; --------------------------------------
              	; zasm: assemble "idegen.asm"
              	; date: 2023-07-04 23:33:13
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*       N A B U   I D E   S Y S T E M   G E N E R A T E
              	;*
              	;*     This utility is used to format and prepare an attached
              	;*     IDE drive to be booted off of. The user can format the
              	;*     drive, and then write a bootsector, font GRB, and
              	;*     image onto the disk.
              	;*
              	;**************************************************************
              	;
              	
              	; Equates
0005:         	bdos	equ	0x0005
005C:         	fcb	equ	0x005C
              	
0001:         	b_coin	equ	0x01
0002:         	b_cout	equ	0x02
0009:         	b_print	equ	0x09
000F:         	b_open	equ	0x0F
0010:         	b_close	equ	0x10
0014:         	b_read	equ	0x14
0015:         	b_write	equ	0x15
0016:         	b_make	equ	0x16
001A:         	b_dma	equ	0x1A
              	
00C0:         	id_base	equ	0xC0
              	
              	; Program start
0100:         		org	0x0100
              		
              		
              		; Print banner
0100: F3      	start:	di	
0101: 0E09    		ld	c,b_print
0103: 11D402  		ld	de,splash
0106: CD0500  		call	bdos
              	
              		; Get system image
0109: 0E09    	getsys: ld	c,b_print
010B: 110803  		ld	de,cfgmsg
010E: CD0500  		call	bdos
0111: CD7E02  		call	getopt
              		
              		; Exit option
0114: FE39    		cp	'9'
0116: C8      		ret	z
              		
              		; System Option #1
0117: 216F0D  		ld	hl,sys_ide_nfs	; pointer to image
011A: FE31    		cp	'1'
011C: 2802    		jr	z,setsys
              	
              	
              		; Invalid, reprompt
011E: 18E9    		jr	getsys
              		
              		; Set system image
0120: 22D002  	setsys:	ld	(sysimg),hl
              	
              		; Now lets get the logical drive #
0123: 0E09    	getcurd:ld	c,b_print
0125: 115703  		ld	de,drvmsg
0128: CD0500  		call	bdos
012B: CD7E02  		call	getopt
              		
012E: 06E0    		ld	b,0xE0
0130: FE30    		cp	'0'
0132: 2808    		jr	z,setcurd
0134: 06F0    		ld	b,0xF0
0136: FE31    		cp	'1'
0138: 2802    		jr	z,setcurd
013A: 18E7    		jr	getcurd
              		
013C: 78      	setcurd:ld	a,b
013D: 32D202  		ld	(curdrv),a
              	
              		; Format option
0140: 0E09    		ld	c,b_print
0142: 117103  		ld	de,formmsg
0145: CD0500  		call	bdos
0148: CD7E02  		call	getopt
014B: 32D302  		ld	(doform),a
              		
              		; Ready to begin?
014E: 0E09    		ld	c,b_print
0150: 118803  		ld	de,readymsg
0153: CD0500  		call	bdos
0156: CD7E02  		call	getopt
0159: FE59    		cp	'Y'
015B: C20901  		jp	nz,getsys
              		
              		; Begin operation, check to made sure drive is present
015E: 3AD202  		ld	a,(curdrv)
0161: D3CC    		out	(id_base+0xC),a
0163: 06FF    		ld	b,255
0165: CDCB02  		call	stall
0168: DBCC    		in	a,(id_base+0xC)
016A: 3C      		inc	a
016B: 200E    		jr	nz,format
              		
              		; Error!
016D: 0E09    		ld	c,b_print
016F: 110204  		ld	de,nodmsg
0172: CD0500  		call	bdos
0175: AF      		xor	a
0176: D3CC    		out	(id_base+0xC),a
0178: C30000  		jp	0
              		
              		; Do a format?
017B: CD7102  	format:	call	id_busy
017E: 3AD302  		ld	a,(doform)
0181: FE59    		cp	'Y'
0183: C2DA01  		jp	nz,sysgen
              		
0186: 0E09    		ld	c,b_print
0188: 11A203  		ld	de,fnowmsg
018B: CD0500  		call	bdos
              		
              		; Fill top of memory with 0xE5
018E: 212E32  		ld	hl,top
0191: 0600    		ld	b,0
0193: 3EE5    		ld	a,0xE5
0195: 77      	format0:ld	(hl),a
0196: 23      		inc	hl
0197: 77      		ld	(hl),a
0198: 23      		inc	hl
0199: 10FA    		djnz	format0
              		
              		; Write 65536 sectors
019B: 010000  		ld	bc,0
019E: 1608    		ld	d,8
              	
              		; Set transfer registers
01A0: 79      	format1:ld	a,c
01A1: D3C6    		out	(id_base+0x6),a
01A3: 78      		ld	a,b
01A4: D3C8    		out	(id_base+0x8),a
01A6: AF      		xor	a
01A7: D3CA    		out	(id_base+0xA),a
              		
              		; Perform the write
01A9: C5      		push	bc
01AA: 212E32  		ld	hl,top
01AD: CD4202  		call	write
01B0: F5      		push	af
01B1: 3EE7    		ld	a,0xE7
01B3: CD6902  		call	id_comm
01B6: F1      		pop	af
01B7: C1      		pop	bc
01B8: C22302  		jp	nz,ioerror
              	
              		; Increment counter
01BB: 03      		inc	bc
01BC: AF      		xor	a
01BD: B1      		or	c
01BE: 20E0    		jr	nz,format1
              	
01C0: 15      		dec	d
01C1: 200B    		jr	nz,format2
01C3: C5      		push	bc
01C4: 0E02    		ld	c,b_cout
01C6: 1E2E    		ld	e,'.'
01C8: CD0500  		call	bdos
01CB: C1      		pop	bc
01CC: 1608    		ld	d,8
              	
01CE: 78      	format2:ld	a,b
01CF: B1      		or	c
01D0: 20CE    		jr	nz,format1
              		
              		; Drop down to sysgen
01D2: 0E09    		ld	c,b_print
01D4: 11BE03  		ld	de,fdonemsg
01D7: CD0500  		call	bdos
              		
              		; Generate system onto disk
01DA: 0E09    	sysgen:	ld	c,b_print
01DC: 11D003  		ld	de,gnowmsg
01DF: CD0500  		call	bdos
              		
              		; Write GRB (Sectors 1-4)
01E2: 0604    		ld	b,4
01E4: 0E01    		ld	c,1
01E6: 215804  		ld	hl,fontgrb
01E9: CD2E02  		call	trans
              		
              		; Write boot block (Sector 0)
              		; Configure boot parameters too
01EC: 2AD002  		ld	hl,(sysimg)
01EF: 115A0C  		ld	de,boot+2
01F2: EDA0    		ldi
01F4: EDA0    		ldi
01F6: 7E      		ld	a,(hl)
01F7: D604    		sub	a,4
01F9: 12      		ld	(de),a
              		
01FA: 21580C  		ld	hl,boot
01FD: 0601    		ld	b,1
01FF: 0E00    		ld	c,0
0201: CD2E02  		call	trans
              		
              		; Write system (Sectors 5+)
0204: 2AD002  		ld	hl,(sysimg)
0207: 23      		inc	hl
0208: 23      		inc	hl
0209: 46      		ld	b,(hl)
020A: 0E05    		ld	c,5
020C: 23      		inc	hl
020D: CD2E02  		call	trans
              		
              		; All done
0210: 0E09    		ld	c,b_print
0212: 11EB03  		ld	de,gdonemsg
0215: CD0500  		call	bdos
              		
0218: 0E09    		ld	c,b_print
021A: 113E04  		ld	de,donemsg
021D: CD0500  		call	bdos
              		
0220: C30000  		jp	0
              		
              		; Handle an IO error
0223: 0E09    	ioerror:ld	c,b_print 
0225: 111D04  		ld	de,iomsg
0228: CD0500  		call	bdos
              	
022B: C30000  		jp	0
              	
              	; Transfers a number of blocks onto the IDE device
              	; b = Number of blocks to transfer
              	; c = Inital block
              	; hl = Source of data
022E: AF      	trans:	xor	a
022F: D3C8    		out	(id_base+0x8),a
0231: D3CA    		out	(id_base+0xA),a
              		
0233: 79      	trans0:	ld	a,c
0234: D3C6    		out	(id_base+0x6),a
0236: C5      		push	bc
0237: CD4202  		call	write
023A: C1      		pop	bc
023B: C22302  		jp	nz,ioerror
023E: 0C      		inc	c
023F: 10F2    		djnz	trans0
0241: C9      		ret
              	
              	; Executes a write command, data written from buffer
              	; hl = Source of data
              	;
              	; Returns hl += 512
              	; uses: af, bc, hl
0242: 3E01    	write:	ld	a,1
0244: D3C4    		out	(id_base+0x4),a
0246: CD7102  		call	id_busy
0249: 3E30    		ld	a,0x30
024B: CD6902  		call	id_comm
024E: CD6202  		call	id_wdrq
0251: 0600    		ld	b,0
0253: 4E      	write0:	ld	c,(hl)
0254: 23      		inc	hl
0255: 7E      		ld	a,(hl)
0256: D3C1    		out	(id_base+1),a
0258: 23      		inc	hl
0259: 79      		ld	a,c
025A: D3C0    		out	(id_base),a
025C: 10F5    		djnz	write0
025E: CD7102  		call	id_busy
0261: C9      		ret
              		
              	; Waits for a DRQ (Data Request)
              	;
              	; uses: af
0262: DBCE    	id_wdrq:in	a,(id_base+0xE)
0264: CB5F    		bit	3,a
0266: 28FA    		jr	z,id_wdrq
0268: C9      		ret
              		
              	; Issues an IDE command
              	; a = Command to issue
              	;
              	; uses: af
0269: F5      	id_comm:push	af
026A: CD7102  		call	id_busy
026D: F1      		pop	af
026E: D3CE    		out	(id_base+0xE),a
0270: C9      		ret
              		
              		
              	; Waits for the IDE drive to no longer be busy
              	;
              	; Resets flag z on error
0271: DBCE    	id_busy:in	a,(id_base+0xE)
0273: CB77    		bit	6,a
0275: 28FA    		jr	z,id_busy
0277: CB7F    		bit	7,a
0279: 20F6    		jr	nz,id_busy
027B: CB47    		bit	0,a
027D: C9      		ret
              		
              	; Gets a single character option from the user
              	; Letters will be converted to upper case
              	;
              	; Returns character in A
              	; uses: all
027E: 0E0A    	getopt:	ld	c,0x0A
0280: 115404  		ld	de,inpbuf
0283: CD0500  		call	bdos
0286: 3A5604  		ld	a,(inpbuf+2)
              		
              	; Converts lowercase to uppercase
              	; a = Character to convert
              	;
              	; Returns uppercase in A
              	; uses: af
0289: E67F    	ltou:	and	0x7F
028B: FE61    		cp	0x61		; 'a'
028D: D8      		ret	c
028E: FE7B    		cp	0x7B		; '{'
0290: D0      		ret	nc
0291: D620    		sub	0x20
0293: C9      		ret
              		
              	; Print decimal
              	; hl = value to print
              	;
              	; uses: all
0294: 1630    	putd:	ld	d,'0'
0296: 01F0D8  		ld	bc,0-10000
0299: CDB202  		call	putd0
029C: 0118FC  		ld	bc,0-1000
029F: CDB202  		call	putd0
02A2: 019CFF  		ld	bc,0-100
02A5: CDB202  		call	putd0
02A8: 01F6FF  		ld	bc,0-10
02AB: CDB202  		call	putd0
02AE: 01FFFF  		ld	bc,0-1
02B1: 15      		dec	d
02B2: 3E2F    	putd0:	ld	a,'0'-1		; get character
02B4: 3C      	putd1:	inc	a
02B5: 09      		add	hl,bc
02B6: 38FC    		jr	c,putd1
02B8: ED42    		sbc	hl,bc
02BA: 47      		ld	b,a
02BB: BA      		cp	d		; check for leading zeros
02BC: C8      		ret	z
02BD: 15      		dec	d
              		
              		; Actually print character out
02BE: C5      		push	bc
02BF: D5      		push	de
02C0: E5      		push	hl
02C1: 58      		ld	e,b
02C2: 0E02    		ld	c,b_cout
02C4: CD0500  		call	bdos
02C7: E1      		pop	hl
02C8: D1      		pop	de
02C9: C1      		pop	bc
02CA: C9      		ret
              		
              	; Waits a little bit
              	; b = Number of cycles to stall for
              	;
              	; uses: b
02CB: C5      	stall:  push	bc
02CC: C1      		pop	bc
02CD: 10FC    		djnz	stall
02CF: C9      		ret
              		
              	; Variables
              		
02D0:         	sysimg:
02D0: 0000    		defw	0
              		
02D2:         	curdrv:
02D2: 00      		defb	0
              	
02D3:         	doform:
02D3: 00      		defb	0
              	
              	; Strings
              		
02D4:         	splash:
02D4: 4E414255		defb	'NABU IDE SysGen Utility',0x0A,0x0D
02D8: 20494445	
02DC: 20537973	
02E0: 47656E20	
02E4: 5574696C	
02E8: 6974790A	
02EC: 0D      	
02ED: 52657620		defb	'Rev 1a, tergav17 (Gavin)',0x0A,0x0D,'$'
02F1: 31612C20	
02F5: 74657267	
02F9: 61763137	
02FD: 20284761	
0301: 76696E29	
0305: 0A0D24  	
              	
0308:         	cfgmsg:
0308: 0A0D5365		defb	0x0A,0x0D,'Select a System Image:',0x0A,0x0A,0x0D
030C: 6C656374	
0310: 20612053	
0314: 79737465	
0318: 6D20496D	
031C: 6167653A	
0320: 0A0A0D  	
              		
0323: 20202020		defb	'    1: IshkurCP/M IDE + NFS',0x0A,0x0D
0327: 313A2049	
032B: 73686B75	
032F: 7243502F	
0333: 4D204944	
0337: 45202B20	
033B: 4E46530A	
033F: 0D      	
0340: 20202020		defb	'    9: Exit',0x0A,0x0A,0x0D
0344: 393A2045	
0348: 7869740A	
034C: 0A0D    	
034E: 4F707469		defb	'Option: $'
0352: 6F6E3A20	
0356: 24      	
              		
              		
0357:         	drvmsg:	
0357: 0A0D4C6F		defb	0x0A,0x0D,'Logical Drive # (0,1): $'
035B: 67696361	
035F: 6C204472	
0363: 69766520	
0367: 23202830	
036B: 2C31293A	
036F: 2024    	
              	
0371:         	formmsg:	
0371: 0A0D466F		defb	0x0A,0x0D,'Format Disk? (Y,N): $'
0375: 726D6174	
0379: 20446973	
037D: 6B3F2028	
0381: 592C4E29	
0385: 3A2024  	
              		
0388:         	readymsg:	
0388: 0A0D5265		defb	0x0A,0x0D,'Ready to begin? (Y,N): $'
038C: 61647920	
0390: 746F2062	
0394: 6567696E	
0398: 3F202859	
039C: 2C4E293A	
03A0: 2024    	
              	
03A2:         	fnowmsg:	
03A2: 0A0D466F		defb	0x0A,0x0D,'Formatting Drive Now...',0x0A,0x0D,'$'
03A6: 726D6174	
03AA: 74696E67	
03AE: 20447269	
03B2: 7665204E	
03B6: 6F772E2E	
03BA: 2E0A0D24	
              		
03BE:         	fdonemsg:	
03BE: 0A0D466F		defb	0x0A,0x0D,'Format Complete$'
03C2: 726D6174	
03C6: 20436F6D	
03CA: 706C6574	
03CE: 6524    	
              		
03D0:         	gnowmsg:
03D0: 0A0D4765		defb	0x0A,0x0D,'Generating System Now...$'
03D4: 6E657261	
03D8: 74696E67	
03DC: 20537973	
03E0: 74656D20	
03E4: 4E6F772E	
03E8: 2E2E24  	
              		
03EB:         	gdonemsg:
03EB: 0A0D5379		defb	0x0A,0x0D,'System Generate Done$'
03EF: 7374656D	
03F3: 2047656E	
03F7: 65726174	
03FB: 6520446F	
03FF: 6E6524  	
              	
0402:         	nodmsg:	
0402: 0A0D4572		defb	0x0A,0x0D,'Error: No Disk Detected!$'
0406: 726F723A	
040A: 204E6F20	
040E: 4469736B	
0412: 20446574	
0416: 65637465	
041A: 642124  	
              		
041D:         	iomsg:	
041D: 0A0D4572		defb	0x0A,0x0D,'Error: Sector Transfer Failed!$'	
0421: 726F723A	
0425: 20536563	
0429: 746F7220	
042D: 5472616E	
0431: 73666572	
0435: 20466169	
0439: 6C656421	
043D: 24      	
              		
043E:         	donemsg:	
043E: 0A0D4F70		defb	0x0A,0x0D,'Operation Complete!$'
0442: 65726174	
0446: 696F6E20	
044A: 436F6D70	
044E: 6C657465	
0452: 2124    	
              	
              	; Input buffer
0454: 02000000	inpbuf:	defb	0x02, 0x00, 0x00, 0x00
              		
              	; Font GRB, load into sectors 1-4
0458:         	fontgrb:
              	#insert	"font.bin"
              	
0C58:         	boot:
              	#insert	"../../../Output/Nabu_IDE/boot.bin"
              	
0D6F:         	sys_ide_nfs:
0D6F: 00DC    		defw	0xDC00		; Load in address
0D71: 13      		defb	19		; Sectors to write
              	#insert "../../../Output/Nabu_IDE/ide_nfs_cpm22.bin"
              		
              	; Top of program, use it to store stuff
322E:         	top:


; +++ segments +++

#CODE          = $0100 =   256,  size = $312E = 12590

; +++ global symbols +++

_end        = $322E = 12846          idegen.asm:31 (unused)
_size       = $312E = 12590          idegen.asm:31 (unused)
b_close     = $0010 =    16          idegen.asm:22 (unused)
b_coin      = $0001 =     1          idegen.asm:18 (unused)
b_cout      = $0002 =     2          idegen.asm:19
b_dma       = $001A =    26          idegen.asm:26 (unused)
b_make      = $0016 =    22          idegen.asm:25 (unused)
b_open      = $000F =    15          idegen.asm:21 (unused)
b_print     = $0009 =     9          idegen.asm:20
b_read      = $0014 =    20          idegen.asm:23 (unused)
b_write     = $0015 =    21          idegen.asm:24 (unused)
bdos        = $0005 =     5          idegen.asm:15
boot        = $0C58 =  3160          idegen.asm:433
cfgmsg      = $0308 =   776          idegen.asm:388
curdrv      = $02D2 =   722          idegen.asm:376
doform      = $02D3 =   723          idegen.asm:379
donemsg     = $043E =  1086          idegen.asm:423
drvmsg      = $0357 =   855          idegen.asm:396
fcb         = $005C =    92          idegen.asm:16 (unused)
fdonemsg    = $03BE =   958          idegen.asm:408
fnowmsg     = $03A2 =   930          idegen.asm:405
fontgrb     = $0458 =  1112          idegen.asm:430
format      = $017B =   379          idegen.asm:112
format0     = $0195 =   405          idegen.asm:125
format1     = $01A0 =   416          idegen.asm:136
format2     = $01CE =   462          idegen.asm:169
formmsg     = $0371 =   881          idegen.asm:399
gdonemsg    = $03EB =  1003          idegen.asm:414
getcurd     = $0123 =   291          idegen.asm:63
getopt      = $027E =   638          idegen.asm:307
getsys      = $0109 =   265          idegen.asm:41
gnowmsg     = $03D0 =   976          idegen.asm:411
id_base     = $00C0 =   192          idegen.asm:28
id_busy     = $0271 =   625          idegen.asm:294
id_comm     = $0269 =   617          idegen.asm:284
id_wdrq     = $0262 =   610          idegen.asm:275
inpbuf      = $0454 =  1108          idegen.asm:427
ioerror     = $0223 =   547          idegen.asm:225
iomsg       = $041D =  1053          idegen.asm:420
ltou        = $0289 =   649          idegen.asm:317 (unused)
nodmsg      = $0402 =  1026          idegen.asm:417
putd        = $0294 =   660          idegen.asm:329 (unused)
putd0       = $02B2 =   690          idegen.asm:340
putd1       = $02B4 =   692          idegen.asm:341
readymsg    = $0388 =   904          idegen.asm:402
setcurd     = $013C =   316          idegen.asm:76
setsys      = $0120 =   288          idegen.asm:60
splash      = $02D4 =   724          idegen.asm:384
stall       = $02CB =   715          idegen.asm:366
start       = $0100 =   256          idegen.asm:35 (unused)
sys_ide_nfs = $0D6F =  3439          idegen.asm:436
sysgen      = $01DA =   474          idegen.asm:179
sysimg      = $02D0 =   720          idegen.asm:373
top         = $322E = 12846          idegen.asm:442
trans       = $022E =   558          idegen.asm:235
trans0      = $0233 =   563          idegen.asm:239
write       = $0242 =   578          idegen.asm:254
write0      = $0253 =   595          idegen.asm:261


total time: 0.0039 sec.
no errors
